open import Agda.Primitive
open import matita-basics-relations
open import matita-basics-bool
open import matita-basics-logic
open import matita-arithmetics-nat
injn : (X-- : (X-- : nat) -> nat) -> (X--1 : nat) -> Set (lzero)
injn = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> (i : nat) -> (j : nat) -> (X-- : le i n) -> (X--1 : le j n) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j

injn-Sn-n : (f : (X-- : nat) -> nat) -> (n : nat) -> (X-- : injn f (S n)) -> injn f n
injn-Sn-n = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (H : injn f (S n)) -> λ (i : nat) -> λ (j : nat) -> λ (lei : le i n) -> λ (lej : le j n) -> λ (eqf : eq lzero nat (f i) (f j)) -> H i j (le-S i n lei) (le-S j n lej) (rewrite-l lzero lzero nat (f i) (λ (X-- : nat) -> eq lzero nat (f i) X--) (refl lzero nat (f i)) (f j) eqf)

injective-to-injn : (f : (X-- : nat) -> nat) -> (n : nat) -> (X-- : ||injective|| lzero lzero nat nat f) -> injn f n
injective-to-injn = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (Hinj : ||injective|| lzero lzero nat nat f) -> λ (i : nat) -> λ (j : nat) -> λ (X-- : le i n) -> λ (X-0 : le j n) -> λ (eqf : eq lzero nat (f i) (f j)) -> Hinj i j (rewrite-l lzero lzero nat (f i) (λ (X--1 : nat) -> eq lzero nat (f i) X--1) (refl lzero nat (f i)) (f j) eqf)

permut : (X-- : (X-- : nat) -> nat) -> (X--1 : nat) -> Set (lzero)
permut = λ (f : (X-- : nat) -> nat) -> λ (m : nat) -> And lzero lzero ((i : nat) -> (X-- : le i m) -> le (f i) m) (injn f m)

permut-O-to-eq-O : (h : (X-- : nat) -> nat) -> (X-- : permut h O) -> eq lzero nat (h O) O
permut-O-to-eq-O = λ (h : (X-- : nat) -> nat) -> λ (X-clearme : permut h O) -> match-And lzero lzero ((i : nat) -> (X-- : le i O) -> le (h i) O) (injn h O) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i O) -> le (h i) O) (injn h O)) -> eq lzero nat (h O) O) (λ (H1 : (i : nat) -> (X-- : le i O) -> le (h i) O) -> λ (X-- : injn h O) -> sym-eq lzero nat O (h O) (le-n-O-to-eq (h O) (H1 O (le-O-n O)))) X-clearme

permut-S-to-permut : (f : (X-- : nat) -> nat) -> (m : nat) -> (X-- : permut f (S m)) -> (X--1 : eq lzero nat (f (S m)) (S m)) -> permut f m
permut-S-to-permut = λ (f : (X-- : nat) -> nat) -> λ (m : nat) -> λ (X-clearme : permut f (S m)) -> match-And lzero lzero ((i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) (injn f (S m)) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) (injn f (S m))) -> (X--1 : eq lzero nat (f (S m)) (S m)) -> permut f m) (λ (H1 : (i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) -> λ (H2 : injn f (S m)) -> λ (Hf : eq lzero nat (f (S m)) (S m)) -> conj lzero lzero ((i : nat) -> (X-- : le i m) -> le (f i) m) (injn f m) (λ (i : nat) -> λ (leim : le i m) -> match-Or lzero lzero (lt (f i) (S m)) (eq lzero nat (f i) (S m)) lzero (λ (X-- : Or lzero lzero (lt (f i) (S m)) (eq lzero nat (f i) (S m))) -> le (f i) m) (λ (H : lt (f i) (S m)) -> le-S-S-to-le (f i) m H) (λ (H : eq lzero nat (f i) (S m)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> le (f i) m) (absurd lzero (le i m) leim (lt-to-not-le m i (eq-ind lzero lzero nat (f i) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (f i) x-1) -> (X-- : eq lzero nat (f (S m)) x-1) -> lt m i) (λ (H0 : eq lzero nat (f (S m)) (f i)) -> eq-ind lzero lzero nat (S m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S m) x-1) -> lt m x-1) (le-n (S m)) i (H2 (S m) i (le-n (S m)) (le-S i m leim) H0)) (S m) H Hf)))) (le-to-or-lt-eq (f i) (S m) (H1 i (le-S i m leim)))) (λ (i : nat) -> λ (j : nat) -> λ (lei : le i m) -> λ (lej : le j m) -> λ (eqf : eq lzero nat (f i) (f j)) -> H2 i j (le-S i m lei) (le-S j m lej) (rewrite-l lzero lzero nat (f i) (λ (X-- : nat) -> eq lzero nat (f i) X--) (refl lzero nat (f i)) (f j) eqf))) X-clearme

transpose : (X-- : nat) -> (X--1 : nat) -> (X--2 : nat) -> nat
transpose = λ (i : nat) -> λ (j : nat) -> λ (n : nat) -> match-bool lzero (λ (X-- : bool) -> nat) j (match-bool lzero (λ (X-- : bool) -> nat) i n (eqb n j)) (eqb n i)

transpose-i-j-i : (i : nat) -> (j : nat) -> eq lzero nat (transpose i j i) j
transpose-i-j-i = λ (i : nat) -> λ (j : nat) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i i (eqb i j)) x) j) (refl lzero nat (match-bool lzero (λ (X-- : bool) -> nat) j (match-bool lzero (λ (X-- : bool) -> nat) i i (eqb i j)) true)) (eqb i i) (eqb-n-n i)

transpose-i-j-j : (i : nat) -> (j : nat) -> eq lzero nat (transpose i j j) i
transpose-i-j-j = λ (i : nat) -> λ (j : nat) -> match-Or lzero lzero (eq lzero bool (eqb j i) true) (eq lzero bool (eqb j i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb j i) true) (eq lzero bool (eqb j i) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j j)) (eqb j i)) i) (λ (Hc : eq lzero bool (eqb j i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j j)) x) i) (eq-ind-r lzero lzero nat i (λ (x : nat) -> λ (X-- : eq lzero nat x i) -> eq lzero nat x i) (refl lzero nat i) j (eqb-true-to-eq j i Hc)) (eqb j i) Hc) (λ (Hc : eq lzero bool (eqb j i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j j)) x) i) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j x) false) i) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j true) false)) (eqb j j) (eqb-n-n j)) (eqb j i) Hc) (true-or-false (eqb j i))

transpose-i-i : (i : nat) -> (n : nat) -> eq lzero nat (transpose i i n) n
transpose-i-i = λ (i : nat) -> λ (n : nat) -> match-Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n i)) (eqb n i)) n) (λ (Hc : eq lzero bool (eqb n i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n x) x) n) (eq-ind-r lzero lzero nat i (λ (x : nat) -> λ (X-- : eq lzero nat x i) -> eq lzero nat i x) (refl lzero nat i) n (eqb-true-to-eq n i Hc)) (eqb n i) Hc) (λ (Hc : eq lzero bool (eqb n i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n x) x) n) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n false) false)) (eqb n i) Hc) (true-or-false (eqb n i))

transpose-i-j-j-i : (i : nat) -> (j : nat) -> (n : nat) -> eq lzero nat (transpose i j n) (transpose j i n)
transpose-i-j-j-i = λ (i : nat) -> λ (j : nat) -> λ (n : nat) -> match-Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (eqb n i)) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n (eqb n i)) (eqb n j))) (λ (Hni : eq lzero bool (eqb n i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n x) (eqb n j))) (match-Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) true) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n true) (eqb n j))) (λ (Hnj : eq lzero bool (eqb n j) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n x) true) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n true) x)) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> eq lzero nat j x-1) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> eq lzero nat x-1 n) (refl lzero nat n) j (eqb-true-to-eq n j Hnj)) i (eqb-true-to-eq n i Hni)) (eqb n j) Hnj) (λ (Hnj : eq lzero bool (eqb n j) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n x) true) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n true) x)) (refl lzero nat j) (eqb n j) Hnj) (true-or-false (eqb n j))) (eqb n i) Hni) (λ (Hni : eq lzero bool (eqb n i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n x) (eqb n j))) (match-Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) false) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n false) (eqb n j))) (λ (Hnj : eq lzero bool (eqb n j) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n x) false) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n false) x)) (refl lzero nat i) (eqb n j) Hnj) (λ (Hnj : eq lzero bool (eqb n j) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n x) false) (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j n false) x)) (refl lzero nat n) (eqb n j) Hnj) (true-or-false (eqb n j))) (eqb n i) Hni) (true-or-false (eqb n i))

transpose-transpose : (i : nat) -> (j : nat) -> (n : nat) -> eq lzero nat (transpose i j (transpose i j n)) n
transpose-transpose = λ (i : nat) -> λ (j : nat) -> λ (n : nat) -> match-Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (eqb n i)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (eqb n i)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (eqb n i)) i)) n) (λ (Hni : eq lzero bool (eqb n i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) i)) n) (match-Or lzero lzero (eq lzero bool (eqb j i) true) (eq lzero bool (eqb j i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb j i) true) (eq lzero bool (eqb j i) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j j)) (eqb j i)) n) (λ (Hji : eq lzero bool (eqb j i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j j)) x) n) (eq-ind-r lzero lzero nat i (λ (x : nat) -> λ (X-- : eq lzero nat x i) -> eq lzero nat j x) (eqb-true-to-eq j i Hji) n (eqb-true-to-eq n i Hni)) (eqb j i) Hji) (λ (Hji : eq lzero bool (eqb j i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j j)) x) n) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i j x) n) (sym-eq lzero nat n i (eqb-true-to-eq n i Hni)) (eqb j j) (eqb-n-n j)) (eqb j i) Hji) (true-or-false (eqb j i))) (eqb n i) Hni) (λ (Hni : eq lzero bool (eqb n i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) i)) n) (match-Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) i)) n) (λ (Hnj : eq lzero bool (eqb n j) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) i)) n) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i i (eqb i j)) x) n) (sym-eq lzero nat n j (eqb-true-to-eq n j Hnj)) (eqb i i) (eqb-n-n i)) (eqb n j) Hnj) (λ (Hnj : eq lzero bool (eqb n j) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) i)) n) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) n) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n x) false) n) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n false) false)) (eqb n j) Hnj) (eqb n i) Hni) (eqb n j) Hnj) (true-or-false (eqb n j))) (eqb n i) Hni) (true-or-false (eqb n i))

injective-transpose : (i : nat) -> (j : nat) -> ||injective|| lzero lzero nat nat (transpose i j)
injective-transpose = λ (i : nat) -> λ (j : nat) -> λ (x : nat) -> λ (y : nat) -> λ (auto : eq lzero nat (transpose i j x) (transpose i j y)) -> rewrite-r lzero lzero nat y (λ (X-- : nat) -> eq lzero nat X-- y) (refl lzero nat y) x (rewrite-l lzero lzero nat (transpose i j (transpose i j x)) (λ (X-- : nat) -> eq lzero nat X-- y) (rewrite-r lzero lzero nat (transpose i j y) (λ (X-- : nat) -> eq lzero nat (transpose i j X--) y) (transpose-transpose i j y) (transpose i j x) auto) x (transpose-transpose i j x))

permut-transpose : (i : nat) -> (j : nat) -> (n : nat) -> (X-- : le i n) -> (X--1 : le j n) -> permut (transpose i j) n
permut-transpose = λ (i : nat) -> λ (j : nat) -> λ (n : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> conj lzero lzero ((i0 : nat) -> (X-- : le i0 n) -> le (transpose i j i0) n) (injn (transpose i j) n) (λ (a : nat) -> λ (lean : le a n) -> match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i a (eqb a j)) X--) n) (match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i a X--) true) n) lejn lejn (eqb a j)) (match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i a X--) false) n) lein lean (eqb a j)) (eqb a i)) (λ (a : nat) -> λ (b : nat) -> λ (lean : le a n) -> λ (lebn : le b n) -> injective-to-injn (transpose i j) n (injective-transpose i j) a b lean lebn)

permut-fg : (f : (X-- : nat) -> nat) -> (g : (X-- : nat) -> nat) -> (n : nat) -> (X-- : permut f n) -> (X--1 : permut g n) -> permut (λ (m : nat) -> f (g m)) n
permut-fg = λ (f : (X-- : nat) -> nat) -> λ (g : (X-- : nat) -> nat) -> λ (n : nat) -> λ (X-clearme : permut f n) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (f i) n) (injn f n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (f i) n) (injn f n)) -> (X--1 : permut g n) -> permut (λ (m : nat) -> f (g m)) n) (λ (permf1 : (i : nat) -> (X-- : le i n) -> le (f i) n) -> λ (permf2 : injn f n) -> λ (X-clearme0 : permut g n) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (g i) n) (injn g n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (g i) n) (injn g n)) -> permut (λ (m : nat) -> f (g m)) n) (λ (permg1 : (i : nat) -> (X-- : le i n) -> le (g i) n) -> λ (permg2 : injn g n) -> conj lzero lzero ((i : nat) -> (X-- : le i n) -> le (f (g i)) n) (injn (λ (m : nat) -> f (g m)) n) (λ (i : nat) -> λ (lein : le i n) -> permf1 (g i) (permg1 i lein)) (λ (a : nat) -> λ (b : nat) -> λ (lean : le a n) -> λ (lebn : le b n) -> λ (Heq : eq lzero nat (f (g a)) (f (g b))) -> permg2 a b lean lebn (permf2 (g a) (g b) (permg1 a lean) (permg1 b lebn) (rewrite-l lzero lzero nat (f (g a)) (λ (X-- : nat) -> eq lzero nat (f (g a)) X--) (refl lzero nat (f (g a))) (f (g b)) Heq)))) X-clearme0) X-clearme

permut-transpose-l : (f : (X-- : nat) -> nat) -> (m : nat) -> (i : nat) -> (j : nat) -> (X-- : le i m) -> (X--1 : le j m) -> (X--2 : permut f m) -> permut (λ (n : nat) -> transpose i j (f n)) m
permut-transpose-l = λ (f : (X-- : nat) -> nat) -> λ (m : nat) -> λ (i : nat) -> λ (j : nat) -> λ (leim : le i m) -> λ (lejm : le j m) -> λ (permf : permut f m) -> permut-fg (transpose i j) f m (permut-transpose i j m leim lejm) permf

permut-transpose-r : (f : (X-- : nat) -> nat) -> (m : nat) -> (i : nat) -> (j : nat) -> (X-- : le i m) -> (X--1 : le j m) -> (X--2 : permut f m) -> permut (λ (n : nat) -> f (transpose i j n)) m
permut-transpose-r = λ (f : (X-- : nat) -> nat) -> λ (m : nat) -> λ (i : nat) -> λ (j : nat) -> λ (leim : le i m) -> λ (lejm : le j m) -> λ (permf : permut f m) -> permut-fg f (transpose i j) m permf (permut-transpose i j m leim lejm)

eq-transpose : (i : nat) -> (j : nat) -> (k-v : nat) -> (n : nat) -> (X-- : Not lzero (eq lzero nat j i)) -> (X--1 : Not lzero (eq lzero nat i k-v)) -> (X--2 : Not lzero (eq lzero nat j k-v)) -> eq lzero nat (transpose i j n) (transpose i k-v (transpose k-v j (transpose i k-v n)))
eq-transpose = λ (i : nat) -> λ (j : nat) -> λ (k-v : nat) -> λ (n : nat) -> λ (Hji : Not lzero (eq lzero nat j i)) -> λ (Hik : Not lzero (eq lzero nat i k-v)) -> λ (Hjk : Not lzero (eq lzero nat j k-v)) -> match-Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n i) true) (eq lzero bool (eqb n i) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (eqb n i)) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb n i)) k-v)) i))) (λ (Hni : eq lzero bool (eqb n i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) k-v)) i))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v k-v (eqb k-v j)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v k-v (eqb k-v j)) x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v k-v (eqb k-v j)) x) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i j (eqb j k-v)) x)) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i j x) false)) (refl lzero nat j) (eqb j k-v) (not-eq-to-eqb-false j k-v Hjk)) (eqb j i) (not-eq-to-eqb-false j i Hji)) (eqb k-v k-v) (eqb-n-n k-v)) (eqb n i) Hni) (λ (Hni : eq lzero bool (eqb n i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) x) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x) k-v)) i))) (match-Or lzero lzero (eq lzero bool (eqb n k-v) true) (eq lzero bool (eqb n k-v) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n k-v) true) (eq lzero bool (eqb n k-v) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) k-v)) i))) (λ (Hnk : eq lzero bool (eqb n k-v) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) k-v)) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i (eqb i j)) (eqb i k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i (eqb i j)) (eqb i k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i (eqb i j)) (eqb i k-v)) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n false) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i (eqb i j)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i (eqb i j)) x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i (eqb i j)) x) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n false) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i x) false) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i x) false) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v i x) false) i))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat n (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i i (eqb i k-v)) x)) (eqb-true-to-eq n k-v Hnk) (eqb i i) (eqb-n-n i)) (eqb i j) (not-eq-to-eqb-false i j (not-to-not lzero (eq lzero nat i j) (eq lzero nat j i) (λ (auto : eq lzero nat i j) -> rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) j auto) Hji))) (eqb i k-v) (not-eq-to-eqb-false i k-v Hik)) (eqb n j) (not-eq-to-eqb-false n j (not-to-not lzero (eq lzero nat n j) (eq lzero nat j k-v) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> (X-- : eq lzero nat n j) -> eq lzero nat j x-1) (λ (auto : eq lzero nat n j) -> rewrite-r lzero lzero nat j (λ (X-- : nat) -> eq lzero nat j X--) (refl lzero nat j) n auto) k-v (eqb-true-to-eq n k-v Hnk)) Hjk))) (eqb n k-v) Hnk) (λ (Hnk : eq lzero bool (eqb n k-v) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) k-v)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) i n x) k-v)) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v n (eqb n j)) x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v n (eqb n j)) x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) k-v n (eqb n j)) x) i))) (match-Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb n j) true) (eq lzero bool (eqb n j) false)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n j)) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) k-v n (eqb n j)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v n (eqb n j)) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v n (eqb n j)) i))) (λ (Hnj : eq lzero bool (eqb n j) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) k-v n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v n x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v n x) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat i (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i k-v (eqb k-v k-v)) x)) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat i (match-bool lzero (λ (X-0 : bool) -> nat) i k-v x)) (refl lzero nat i) (eqb k-v k-v) (eqb-n-n k-v)) (eqb k-v i) (not-eq-to-eqb-false k-v i (not-to-not lzero (eq lzero nat k-v i) (eq lzero nat i k-v) (λ (auto : eq lzero nat k-v i) -> rewrite-r lzero lzero nat i (λ (X-- : nat) -> eq lzero nat i X--) (refl lzero nat i) k-v auto) Hik))) (eqb n j) Hnj) (λ (Hnj : eq lzero bool (eqb n j) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i n x) (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i (match-bool lzero (λ (X-0 : bool) -> nat) k-v n x) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v n x) k-v)) (eqb (match-bool lzero (λ (X-0 : bool) -> nat) k-v n x) i))) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat n (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n (eqb n k-v)) x)) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat n (match-bool lzero (λ (X-0 : bool) -> nat) k-v (match-bool lzero (λ (X-0 : bool) -> nat) i n x) false)) (refl lzero nat n) (eqb n k-v) Hnk) (eqb n i) Hni) (eqb n j) Hnj) (true-or-false (eqb n j))) (eqb n k-v) Hnk) (eqb n k-v) Hnk) (true-or-false (eqb n k-v))) (eqb n i) Hni) (true-or-false (eqb n i))

permut-S-to-permut-transpose : (f : (X-- : nat) -> nat) -> (m : nat) -> (X-- : permut f (S m)) -> permut (λ (n : nat) -> transpose (f (S m)) (S m) (f n)) m
permut-S-to-permut-transpose = λ (f : (X-- : nat) -> nat) -> λ (m : nat) -> λ (X-clearme : permut f (S m)) -> match-And lzero lzero ((i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) (injn f (S m)) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) (injn f (S m))) -> permut (λ (n : nat) -> transpose (f (S m)) (S m) (f n)) m) (λ (permf1 : (i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) -> λ (permf2 : injn f (S m)) -> conj lzero lzero ((i : nat) -> (X-- : le i m) -> le (transpose (f (S m)) (S m) (f i)) m) (injn (λ (n : nat) -> transpose (f (S m)) (S m) (f n)) m) (λ (i : nat) -> λ (leim : le i m) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> le (match-bool lzero (λ (X-0 : bool) -> nat) (S m) (match-bool lzero (λ (X-0 : bool) -> nat) (f (S m)) (f i) (eqb (f i) (S m))) x) m) (match-Or lzero lzero (lt (f i) (S m)) (eq lzero nat (f i) (S m)) lzero (λ (X-- : Or lzero lzero (lt (f i) (S m)) (eq lzero nat (f i) (S m))) -> le (match-bool lzero (λ (X-0 : bool) -> nat) (f (S m)) (f i) (eqb (f i) (S m))) m) (λ (Hfi : lt (f i) (S m)) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> le (match-bool lzero (λ (X-0 : bool) -> nat) (f (S m)) (f i) x) m) (le-S-S-to-le (f i) m Hfi) (eqb (f i) (S m)) (not-eq-to-eqb-false (f i) (S m) (lt-to-not-eq (f i) (S m) Hfi))) (λ (Hfi : eq lzero nat (f i) (S m)) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le (match-bool lzero (λ (X-0 : bool) -> nat) (f (S m)) (f i) x) m) (match-Or lzero lzero (lt (f (S m)) (S m)) (eq lzero nat (f (S m)) (S m)) lzero (λ (X-- : Or lzero lzero (lt (f (S m)) (S m)) (eq lzero nat (f (S m)) (S m))) -> le (f (S m)) m) (λ (H : lt (f (S m)) (S m)) -> le-S-S-to-le (f (S m)) m H) (λ (H : eq lzero nat (f (S m)) (S m)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> le (f (S m)) m) (absurd lzero (eq lzero nat i (S m)) (permf2 i (S m) (le-S i m leim) (le-n (S m)) (rewrite-l lzero lzero nat (f i) (λ (X-- : nat) -> eq lzero nat (f i) (f X--)) (rewrite-r lzero lzero nat (f i) (λ (X-- : nat) -> eq lzero nat (f i) X--) (refl lzero nat (f i)) (f (f i)) (rewrite-r lzero lzero nat (S m) (λ (X-- : nat) -> eq lzero nat (f (f i)) X--) (rewrite-r lzero lzero nat (S m) (λ (X-- : nat) -> eq lzero nat (f X--) (S m)) H (f i) Hfi) (f i) Hfi)) (S m) Hfi)) (not-to-not lzero (eq lzero nat i (S m)) (le (S m) m) (λ (auto : eq lzero nat i (S m)) -> eq-coerc lzero (le i m) (le (S m) m) leim (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le i m) (le X-- m)) (refl (lsuc lzero) (Set (lzero)) (le i m)) (S m) auto)) (lt-to-not-le m (S m) (le-n (S m)))))) (le-to-or-lt-eq (f (S m)) (S m) (permf1 (S m) (le-n (S m))))) (eqb (f i) (S m)) (eq-to-eqb-true (f i) (S m) Hfi)) (le-to-or-lt-eq (f i) (S m) (permf1 i (le-S i m leim)))) (eqb (f i) (f (S m))) (not-eq-to-eqb-false (f i) (f (S m)) (nmk lzero (eq lzero nat (f i) (f (S m))) (λ (H : eq lzero nat (f i) (f (S m))) -> absurd lzero (eq lzero nat i (S m)) (permf2 i (S m) (le-S i m leim) (le-n (S m)) H) (lt-to-not-eq i (S m) (le-S-S i m leim)))))) (λ (a : nat) -> λ (b : nat) -> λ (leam : le a m) -> λ (lebm : le b m) -> λ (H : eq lzero nat (transpose (f (S m)) (S m) (f a)) (transpose (f (S m)) (S m) (f b))) -> permf2 a b (le-S a m leam) (le-S b m lebm) (injective-transpose (f (S m)) (S m) (f a) (f b) H))) X-clearme

bijn : (X-- : (X-- : nat) -> nat) -> (X--1 : nat) -> Set (lzero)
bijn = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> (m : nat) -> (X-- : le m n) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) m))

eq-to-bijn : (f : (X-- : nat) -> nat) -> (g : (X-- : nat) -> nat) -> (n : nat) -> (X-- : (i : nat) -> (X-- : le i n) -> eq lzero nat (f i) (g i)) -> (X--1 : bijn f n) -> bijn g n
eq-to-bijn = λ (f : (X-- : nat) -> nat) -> λ (g : (X-- : nat) -> nat) -> λ (n : nat) -> λ (H : (i : nat) -> (X-- : le i n) -> eq lzero nat (f i) (g i)) -> λ (bijf : bijn f n) -> λ (i : nat) -> λ (lein : le i n) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (g p) i))) (λ (a : nat) -> λ (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> match-And lzero lzero (le a n) (eq lzero nat (f a) i) lzero (λ (X-- : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (g p) i))) (λ (lean : le a n) -> λ (fa : eq lzero nat (f a) i) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (g p) i)) a (conj lzero lzero (le a n) (eq lzero nat (g a) i) lean (eq-ind lzero lzero nat (f a) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (f a) x-1) -> eq lzero nat (g a) x-1) (sym-eq lzero nat (f a) (g a) (H a lean)) i fa))) X-clearme) (bijf i lein)

let-clause-1075 : (f : (X-- : nat) -> nat) -> (n : nat) -> (bijf : bijn f (S n)) -> (fS : eq lzero nat (f (S n)) (S n)) -> (i : nat) -> (lein : le i n) -> (a : nat) -> (X-clearme : And lzero lzero (le a (S n)) (eq lzero nat (f a) i)) -> (lean : le a (S n)) -> (fa : eq lzero nat (f a) i) -> (Hc : eq lzero nat a (S n)) -> eq lzero nat i a
let-clause-1075 = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (bijf : bijn f (S n)) -> λ (fS : eq lzero nat (f (S n)) (S n)) -> λ (i : nat) -> λ (lein : le i n) -> λ (a : nat) -> λ (X-clearme : And lzero lzero (le a (S n)) (eq lzero nat (f a) i)) -> λ (lean : le a (S n)) -> λ (fa : eq lzero nat (f a) i) -> λ (Hc : eq lzero nat a (S n)) -> rewrite-r lzero lzero nat (S n) (λ (X-- : nat) -> eq lzero nat i X--) (rewrite-l lzero lzero nat (f a) (λ (X-- : nat) -> eq lzero nat X-- (S n)) (rewrite-r lzero lzero nat (S n) (λ (X-- : nat) -> eq lzero nat (f X--) (S n)) fS a Hc) i fa) a Hc

bijn-Sn-n : (f : (X-- : nat) -> nat) -> (n : nat) -> (X-- : bijn f (S n)) -> (X--1 : eq lzero nat (f (S n)) (S n)) -> bijn f n
bijn-Sn-n = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (bijf : bijn f (S n)) -> λ (fS : eq lzero nat (f (S n)) (S n)) -> λ (i : nat) -> λ (lein : le i n) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) (λ (a : nat) -> λ (X-clearme : And lzero lzero (le a (S n)) (eq lzero nat (f a) i)) -> match-And lzero lzero (le a (S n)) (eq lzero nat (f a) i) lzero (λ (X-- : And lzero lzero (le a (S n)) (eq lzero nat (f a) i)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) (λ (lean : le a (S n)) -> λ (fa : eq lzero nat (f a) i) -> match-Or lzero lzero (lt a (S n)) (eq lzero nat a (S n)) lzero (λ (X-- : Or lzero lzero (lt a (S n)) (eq lzero nat a (S n))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) (λ (Hc : lt a (S n)) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i)) a (conj lzero lzero (le a n) (eq lzero nat (f a) i) (le-S-S-to-le a n Hc) fa)) (λ (Hc : eq lzero nat a (S n)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) (absurd lzero (le (S n) n) (eq-ind lzero lzero nat (f (S n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (f (S n)) x-1) -> le x-1 n) (eq-coerc lzero (le i n) (le (f (S n)) n) lein (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le i n) (le (f X--) n)) (rewrite-r lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le i n) (le X-- n)) (refl (lsuc lzero) (Set (lzero)) (le i n)) (f i) (rewrite-r lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (f X--) i) fa i (let-clause-1075 f n bijf fS i lein a X-clearme lean fa Hc))) (S n) (rewrite-r lzero lzero nat a (λ (X-- : nat) -> eq lzero nat X-- (S n)) Hc i (let-clause-1075 f n bijf fS i lein a X-clearme lean fa Hc)))) (S n) fS) (not-le-Sn-n n))) (le-to-or-lt-eq a (S n) lean)) X-clearme) (bijf i (le-S i n lein))

bijn-n-Sn : (f : (X-- : nat) -> nat) -> (n : nat) -> (X-- : bijn f n) -> (X--1 : eq lzero nat (f (S n)) (S n)) -> bijn f (S n)
bijn-n-Sn = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (bijf : bijn f n) -> λ (fS : eq lzero nat (f (S n)) (S n)) -> λ (i : nat) -> λ (lein : le i (S n)) -> match-Or lzero lzero (lt i (S n)) (eq lzero nat i (S n)) lzero (λ (X-- : Or lzero lzero (lt i (S n)) (eq lzero nat i (S n))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i))) (λ (Hi : lt i (S n)) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i))) (λ (a : nat) -> λ (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> match-And lzero lzero (le a n) (eq lzero nat (f a) i) lzero (λ (X-- : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i))) (λ (lean : le a n) -> λ (fa : eq lzero nat (f a) i) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i)) a (conj lzero lzero (le a (S n)) (eq lzero nat (f a) i) (le-S a n lean) (rewrite-r lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) (f a) fa))) X-clearme) (bijf i (le-S-S-to-le i n Hi))) (λ (Hi : eq lzero nat i (S n)) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p (S n)) (eq lzero nat (f p) i)) i (conj lzero lzero (le i (S n)) (eq lzero nat (f i) i) (eq-coerc lzero (le i i) (le i (S n)) (le-n i) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le i i) (le i X--)) (refl (lsuc lzero) (Set (lzero)) (le i i)) (S n) Hi)) (rewrite-r lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) (f i) (rewrite-r lzero lzero nat (S n) (λ (X-- : nat) -> eq lzero nat (f i) X--) (rewrite-r lzero lzero nat (S n) (λ (X-- : nat) -> eq lzero nat (f X--) (S n)) fS i Hi) i Hi)))) (le-to-or-lt-eq i (S n) lein)

bijn-fg : (f : (X-- : nat) -> nat) -> (g : (X-- : nat) -> nat) -> (n : nat) -> (X-- : bijn f n) -> (X--1 : bijn g n) -> bijn (λ (p : nat) -> f (g p)) n
bijn-fg = λ (f : (X-- : nat) -> nat) -> λ (g : (X-- : nat) -> nat) -> λ (n : nat) -> λ (bijf : bijn f n) -> λ (bijg : bijn g n) -> λ (i : nat) -> λ (lein : le i n) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f (g p)) i))) (λ (a : nat) -> λ (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> match-And lzero lzero (le a n) (eq lzero nat (f a) i) lzero (λ (X-- : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f (g p)) i))) (λ (lean : le a n) -> λ (ga : eq lzero nat (f a) i) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (g p) a)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (g p) a))) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f (g p)) i))) (λ (b : nat) -> λ (X-clearme0 : And lzero lzero (le b n) (eq lzero nat (g b) a)) -> match-And lzero lzero (le b n) (eq lzero nat (g b) a) lzero (λ (X-- : And lzero lzero (le b n) (eq lzero nat (g b) a)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f (g p)) i))) (λ (lebn : le b n) -> λ (gb : eq lzero nat (g b) a) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f (g p)) i)) b (conj lzero lzero (le b n) (eq lzero nat (f (g b)) i) lebn (rewrite-r lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (f X--) i) (rewrite-r lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) (f a) ga) (g b) gb))) X-clearme0) (bijg a lean)) X-clearme) (bijf i lein)

bijn-transpose : (n : nat) -> (i : nat) -> (j : nat) -> (X-- : le i n) -> (X--1 : le j n) -> bijn (transpose i j) n
bijn-transpose = λ (n : nat) -> λ (i : nat) -> λ (j : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> λ (a : nat) -> λ (lean : le a n) -> match-Or lzero lzero (eq lzero bool (eqb a i) true) (eq lzero bool (eqb a i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb a i) true) (eq lzero bool (eqb a i) false)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (transpose i j p) a))) (λ (Hi : eq lzero bool (eqb a i) true) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (transpose i j p) a)) j (conj lzero lzero (le j n) (eq lzero nat (transpose i j j) a) lejn (eq-ind-r lzero lzero nat i (λ (x : nat) -> λ (X-- : eq lzero nat x i) -> eq lzero nat x a) (sym-eq lzero nat a i (eqb-true-to-eq a i Hi)) (transpose i j j) (transpose-i-j-j i j)))) (λ (Hi : eq lzero bool (eqb a i) false) -> match-Or lzero lzero (eq lzero bool (eqb a j) true) (eq lzero bool (eqb a j) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb a j) true) (eq lzero bool (eqb a j) false)) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (transpose i j p) a))) (λ (Hj : eq lzero bool (eqb a j) true) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (transpose i j p) a)) i (conj lzero lzero (le i n) (eq lzero nat (transpose i j i) a) lein (eq-ind-r lzero lzero nat j (λ (x : nat) -> λ (X-- : eq lzero nat x j) -> eq lzero nat x a) (sym-eq lzero nat a j (eqb-true-to-eq a j Hj)) (transpose i j i) (transpose-i-j-i i j)))) (λ (Hj : eq lzero bool (eqb a j) false) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (transpose i j p) a)) a (conj lzero lzero (le a n) (eq lzero nat (transpose i j a) a) lean (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i a (eqb a j)) x) a) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (match-bool lzero (λ (X-0 : bool) -> nat) i a x) false) a) (refl lzero nat (match-bool lzero (λ (X-- : bool) -> nat) j (match-bool lzero (λ (X-- : bool) -> nat) i a false) false)) (eqb a j) Hj) (eqb a i) Hi))) (true-or-false (eqb a j))) (true-or-false (eqb a i))

bijn-transpose-r : (f : (X-- : nat) -> nat) -> (n : nat) -> (i : nat) -> (j : nat) -> (X-- : le i n) -> (X--1 : le j n) -> (X--2 : bijn f n) -> bijn (λ (p : nat) -> f (transpose i j p)) n
bijn-transpose-r = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (i : nat) -> λ (j : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> λ (bijf : bijn f n) -> bijn-fg f (transpose i j) n bijf (bijn-transpose n i j lein lejn)

bijn-transpose-l : (f : (X-- : nat) -> nat) -> (n : nat) -> (i : nat) -> (j : nat) -> (X-- : le i n) -> (X--1 : le j n) -> (X--2 : bijn f n) -> bijn (λ (p : nat) -> transpose i j (f p)) n
bijn-transpose-l = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (i : nat) -> λ (j : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> λ (bijf : bijn f n) -> bijn-fg (transpose i j) f n (bijn-transpose n i j lein lejn) bijf

permut-to-bijn : (n : nat) -> (f : (X-- : nat) -> nat) -> (X-- : permut f n) -> bijn f n
permut-to-bijn = λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (f : (X-- : nat) -> nat) -> (X-- : permut f X-x-365) -> bijn f X-x-365) (λ (f : (X-- : nat) -> nat) -> λ (X-clearme : And lzero lzero ((i : nat) -> (X-- : le i O) -> le (f i) O) ((i : nat) -> (j : nat) -> (X-- : le i O) -> (X--1 : le j O) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j)) -> match-And lzero lzero ((i : nat) -> (X-- : le i O) -> le (f i) O) ((i : nat) -> (j : nat) -> (X-- : le i O) -> (X--1 : le j O) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i O) -> le (f i) O) ((i : nat) -> (j : nat) -> (X-- : le i O) -> (X--1 : le j O) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j)) -> (m : nat) -> (X--1 : le m O) -> ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p O) (eq lzero nat (f p) m))) (λ (H : (i : nat) -> (X-- : le i O) -> le (f i) O) -> λ (H1 : (i : nat) -> (j : nat) -> (X-- : le i O) -> (X--1 : le j O) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j) -> λ (m : nat) -> λ (lem0 : le m O) -> ex-intro lzero lzero nat (λ (p : nat) -> And lzero lzero (le p O) (eq lzero nat (f p) m)) O (conj lzero lzero (le O O) (eq lzero nat (f O) m) (le-O-n O) (le-n-O-elim lzero m lem0 (eq lzero nat (f O)) (sym-eq lzero nat O (f O) (le-n-O-to-eq (f O) (H O (le-O-n O))))))) X-clearme) (λ (m : nat) -> λ (Hind : (f : (X-- : nat) -> nat) -> (X-- : permut f m) -> bijn f m) -> λ (f : (X-- : nat) -> nat) -> λ (permf : permut f (S m)) -> eq-to-bijn (λ (p : nat) -> transpose (f (S m)) (S m) (transpose (f (S m)) (S m) (f p))) f (S m) (λ (i : nat) -> λ (lei : le i (S m)) -> transpose-transpose (f (S m)) (S m) (f i)) (bijn-fg (transpose (f (S m)) (S m)) (λ (X-- : nat) -> transpose (f (S m)) (S m) (f X--)) (S m) (match-And lzero lzero ((i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) (injn f (S m)) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) (injn f (S m))) -> bijn (transpose (f (S m)) (S m)) (S m)) (λ (lef : (i : nat) -> (X-- : le i (S m)) -> le (f i) (S m)) -> λ (X-- : injn f (S m)) -> bijn-transpose (S m) (f (S m)) (S m) (lef (S m) (le-n (S m))) (le-n (S m))) permf) (bijn-n-Sn (λ (X-- : nat) -> transpose (f (S m)) (S m) (f X--)) m (Hind (λ (X-- : nat) -> transpose (f (S m)) (S m) (f X--)) (permut-S-to-permut-transpose f m permf)) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (S m) (match-bool lzero (λ (X-0 : bool) -> nat) (f (S m)) (f (S m)) (eqb (f (S m)) (S m))) x) (S m)) (refl lzero nat (match-bool lzero (λ (X-- : bool) -> nat) (S m) (match-bool lzero (λ (X-- : bool) -> nat) (f (S m)) (f (S m)) (eqb (f (S m)) (S m))) true)) (eqb (f (S m)) (f (S m))) (eqb-n-n (f (S m))))))) n


invert-permut : (X---v : nat) -> (X--1-v : (X--1-v : nat) -> nat) -> (X--2-v : nat) -> nat
invert-permut O f-v m-v = match-bool lzero (λ (X--1-v : bool) -> nat) O O (eqb m-v (f-v O))
invert-permut (S p-v) f-v m-v = match-bool lzero (λ (X--1-v : bool) -> nat) (S p-v) (invert-permut p-v f-v m-v) (eqb m-v (f-v (S p-v)))


invert-permut-f : (f : (X-- : nat) -> nat) -> (n : nat) -> (m : nat) -> (X-- : le m n) -> (X--1 : injn f n) -> eq lzero nat (invert-permut n f (f m)) m
invert-permut-f = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (m : nat) -> λ (lenm : le m n) -> le-ind lzero m (λ (x-417 : nat) -> λ (X-x-418 : le m x-417) -> (X-- : injn f x-417) -> eq lzero nat (invert-permut x-417 f (f m)) m) (match-nat lzero (λ (X-- : nat) -> (X--1 : injn f X--) -> eq lzero nat (invert-permut X-- f (f X--)) X--) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : (i : nat) -> (j : nat) -> (X--1 : le i O) -> (X--2 : le j O) -> (X--3 : eq lzero nat (f i) (f j)) -> eq lzero nat i j) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) O O x) O) (λ (auto : (i : nat) -> (j : nat) -> (X-- : le i O) -> (X--1 : le j O) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j) -> refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) O O true)) (eqb (f O) (f O)) (eqb-n-n (f O))) (λ (a : nat) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : (i : nat) -> (j : nat) -> (X--1 : le i (S a)) -> (X--2 : le j (S a)) -> (X--3 : eq lzero nat (f i) (f j)) -> eq lzero nat i j) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (S a) (invert-permut a f (f (S a))) x) (S a)) (λ (auto : (i : nat) -> (j : nat) -> (X-- : le i (S a)) -> (X--1 : le j (S a)) -> (X--2 : eq lzero nat (f i) (f j)) -> eq lzero nat i j) -> refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (S a) (invert-permut a f (f (S a))) true)) (eqb (f (S a)) (f (S a))) (eqb-n-n (f (S a)))) m) (λ (m0 : nat) -> λ (lem : le m m0) -> λ (H : (X-- : injn f m0) -> eq lzero nat (invert-permut m0 f (f m)) m) -> λ (H1 : injn f (S m0)) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (S m0) (invert-permut m0 f (f m)) x) m) (H (injn-Sn-n f m0 H1)) (eqb (f m) (f (S m0))) (not-eq-to-eqb-false (f m) (f (S m0)) (nmk lzero (eq lzero nat (f m) (f (S m0))) (λ (eqf : eq lzero nat (f m) (f (S m0))) -> absurd lzero (eq lzero nat m (S m0)) (H1 m (S m0) (le-S m m0 lem) (le-n (S m0)) (rewrite-l lzero lzero nat (f m) (λ (X-- : nat) -> eq lzero nat (f m) X--) (refl lzero nat (f m)) (f (S m0)) eqf)) (lt-to-not-eq m (S m0) (le-S-S m m0 lem)))))) n lenm

let-clause-1063 : (f : (X-- : nat) -> nat) -> (n : nat) -> (permf : permut f n) -> (i : nat) -> (j : nat) -> (lein : le i n) -> (lejn : le j n) -> (a : nat) -> (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> (lean : le a n) -> (fa : eq lzero nat (f a) i) -> (b : nat) -> (X-clearme0 : And lzero lzero (le b n) (eq lzero nat (f b) j)) -> (lebn : le b n) -> (fb : eq lzero nat (f b) j) -> (X-- : (i0 : nat) -> (X-- : le i0 n) -> le (f i0) n) -> (injf : injn f n) -> (auto : eq lzero nat a b) -> eq lzero nat (f a) j
let-clause-1063 = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (permf : permut f n) -> λ (i : nat) -> λ (j : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> λ (a : nat) -> λ (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> λ (lean : le a n) -> λ (fa : eq lzero nat (f a) i) -> λ (b : nat) -> λ (X-clearme0 : And lzero lzero (le b n) (eq lzero nat (f b) j)) -> λ (lebn : le b n) -> λ (fb : eq lzero nat (f b) j) -> λ (X-- : (i0 : nat) -> (X-- : le i0 n) -> le (f i0) n) -> λ (injf : injn f n) -> λ (auto : eq lzero nat a b) -> rewrite-r lzero lzero nat b (λ (X--1 : nat) -> eq lzero nat (f X--1) j) fb a auto

let-clause-1068 : (f : (X-- : nat) -> nat) -> (n : nat) -> (permf : permut f n) -> (i : nat) -> (j : nat) -> (lein : le i n) -> (lejn : le j n) -> (a : nat) -> (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> (lean : le a n) -> (fa : eq lzero nat (f a) i) -> (b : nat) -> (X-clearme0 : And lzero lzero (le b n) (eq lzero nat (f b) j)) -> (lebn : le b n) -> (fb : eq lzero nat (f b) j) -> (X-- : (i0 : nat) -> (X-- : le i0 n) -> le (f i0) n) -> (injf : injn f n) -> (auto : eq lzero nat a b) -> eq lzero nat (f a) i
let-clause-1068 = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (permf : permut f n) -> λ (i : nat) -> λ (j : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> λ (a : nat) -> λ (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> λ (lean : le a n) -> λ (fa : eq lzero nat (f a) i) -> λ (b : nat) -> λ (X-clearme0 : And lzero lzero (le b n) (eq lzero nat (f b) j)) -> λ (lebn : le b n) -> λ (fb : eq lzero nat (f b) j) -> λ (X-- : (i0 : nat) -> (X-- : le i0 n) -> le (f i0) n) -> λ (injf : injn f n) -> λ (auto : eq lzero nat a b) -> rewrite-l lzero lzero nat j (λ (X--1 : nat) -> eq lzero nat (f a) X--1) (let-clause-1063 f n permf i j lein lejn a X-clearme lean fa b X-clearme0 lebn fb X-- injf auto) i (rewrite-l lzero lzero nat (f a) (λ (X--1 : nat) -> eq lzero nat X--1 i) fa j (let-clause-1063 f n permf i j lein lejn a X-clearme lean fa b X-clearme0 lebn fb X-- injf auto))

injective-invert-permut : (f : (X-- : nat) -> nat) -> (n : nat) -> (X-- : permut f n) -> injn (invert-permut n f) n
injective-invert-permut = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (permf : permut f n) -> λ (i : nat) -> λ (j : nat) -> λ (lein : le i n) -> λ (lejn : le j n) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) i))) -> (X--1 : eq lzero nat (invert-permut n f i) (invert-permut n f j)) -> eq lzero nat i j) (λ (a : nat) -> λ (X-clearme : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> match-And lzero lzero (le a n) (eq lzero nat (f a) i) lzero (λ (X-- : And lzero lzero (le a n) (eq lzero nat (f a) i)) -> (X--1 : eq lzero nat (invert-permut n f i) (invert-permut n f j)) -> eq lzero nat i j) (λ (lean : le a n) -> λ (fa : eq lzero nat (f a) i) -> match-ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) j)) lzero (λ (X-- : ex lzero lzero nat (λ (p : nat) -> And lzero lzero (le p n) (eq lzero nat (f p) j))) -> (X--1 : eq lzero nat (invert-permut n f i) (invert-permut n f j)) -> eq lzero nat i j) (λ (b : nat) -> λ (X-clearme0 : And lzero lzero (le b n) (eq lzero nat (f b) j)) -> match-And lzero lzero (le b n) (eq lzero nat (f b) j) lzero (λ (X-- : And lzero lzero (le b n) (eq lzero nat (f b) j)) -> (X--1 : eq lzero nat (invert-permut n f i) (invert-permut n f j)) -> eq lzero nat i j) (λ (lebn : le b n) -> λ (fb : eq lzero nat (f b) j) -> match-And lzero lzero ((i1 : nat) -> (X-- : le i1 n) -> le (f i1) n) (injn f n) lzero (λ (X-- : And lzero lzero ((i0 : nat) -> (X-- : le i0 n) -> le (f i0) n) (injn f n)) -> (X--1 : eq lzero nat (invert-permut n f i) (invert-permut n f j)) -> eq lzero nat i j) (λ (X-- : (i0 : nat) -> (X-- : le i0 n) -> le (f i0) n) -> λ (injf : injn f n) -> eq-ind lzero lzero nat (f a) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (f a) x-1) -> (X--1 : eq lzero nat (invert-permut n f x-1) (invert-permut n f j)) -> eq lzero nat x-1 j) (eq-ind lzero lzero nat (f b) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (f b) x-1) -> (X--1 : eq lzero nat (invert-permut n f (f a)) (invert-permut n f x-1)) -> eq lzero nat (f a) x-1) (eq-ind-r lzero lzero nat a (λ (x : nat) -> λ (X-0 : eq lzero nat x a) -> (X--1 : eq lzero nat x (invert-permut n f (f b))) -> eq lzero nat (f a) (f b)) (eq-ind-r lzero lzero nat b (λ (x : nat) -> λ (X-0 : eq lzero nat x b) -> (X--1 : eq lzero nat a x) -> eq lzero nat (f a) (f b)) (λ (auto : eq lzero nat a b) -> rewrite-r lzero lzero nat i (λ (X--1 : nat) -> eq lzero nat X--1 (f b)) (rewrite-l lzero lzero nat a (λ (X--1 : nat) -> eq lzero nat i (f X--1)) (rewrite-r lzero lzero nat i (λ (X--1 : nat) -> eq lzero nat i X--1) (refl lzero nat i) (f a) (let-clause-1068 f n permf i j lein lejn a X-clearme lean fa b X-clearme0 lebn fb X-- injf auto)) b auto) (f a) (let-clause-1068 f n permf i j lein lejn a X-clearme lean fa b X-clearme0 lebn fb X-- injf auto)) (invert-permut n f (f b)) (invert-permut-f f n b lebn injf)) (invert-permut n f (f a)) (invert-permut-f f n a lean injf)) j fb) i fa) permf) X-clearme0) (permut-to-bijn n f permf j lejn)) X-clearme) (permut-to-bijn n f permf i lein)

permut-invert-permut : (f : (X-- : nat) -> nat) -> (n : nat) -> (X-- : permut f n) -> permut (invert-permut n f) n
permut-invert-permut = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (permf : permut f n) -> conj lzero lzero ((i : nat) -> (X-- : le i n) -> le (invert-permut n f i) n) (injn (invert-permut n f) n) (λ (i : nat) -> λ (lein : le i n) -> nat-ind lzero (λ (X-x-365 : nat) -> le (invert-permut X-x-365 f i) X-x-365) (match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) O O X--) O) (le-n (match-bool lzero (λ (X-- : bool) -> nat) O O true)) (le-n (match-bool lzero (λ (X-- : bool) -> nat) O O false)) (eqb i (f O))) (λ (n1 : nat) -> λ (Hind : le (invert-permut n1 f i) n1) -> match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) (S n1) (invert-permut n1 f i) X--) (S n1)) (le-n (match-bool lzero (λ (X-- : bool) -> nat) (S n1) (invert-permut n1 f i) true)) (le-S (invert-permut n1 f i) n1 Hind) (eqb i (f (S n1)))) n) (injective-invert-permut f n permf)

f-invert-permut : (f : (X-- : nat) -> nat) -> (n : nat) -> (m : nat) -> (X-- : le m n) -> (X--1 : permut f n) -> eq lzero nat (f (invert-permut n f m)) m
f-invert-permut = λ (f : (X-- : nat) -> nat) -> λ (n : nat) -> λ (m : nat) -> λ (lemn : le m n) -> λ (permf : permut f n) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (invert-permut n f i) n) (injn (invert-permut n f) n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (invert-permut n f i) n) (injn (invert-permut n f) n)) -> eq lzero nat (f (invert-permut n f m)) m) (λ (Hle : (i : nat) -> (X-- : le i n) -> le (invert-permut n f i) n) -> λ (Hinj : injn (invert-permut n f) n) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (f i) n) (injn f n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (f i) n) (injn f n)) -> eq lzero nat (f (invert-permut n f m)) m) (λ (lef : (i : nat) -> (X-- : le i n) -> le (f i) n) -> λ (injf : injn f n) -> injective-invert-permut f n permf (f (invert-permut n f m)) m (lef (invert-permut n f m) (Hle m lemn)) lemn (invert-permut-f f n (invert-permut n f m) (Hle m lemn) injf)) permf) (permut-invert-permut f n permf)

permut-n-to-eq-n : (h : (X-- : nat) -> nat) -> (n : nat) -> (X-- : permut h n) -> (X--1 : (m : nat) -> (X--1 : lt m n) -> eq lzero nat (h m) m) -> eq lzero nat (h n) n
permut-n-to-eq-n = λ (h : (X-- : nat) -> nat) -> λ (n : nat) -> λ (permh : permut h n) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (h i) n) (injn h n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (h i) n) (injn h n)) -> (X--1 : (m : nat) -> (X--1 : lt m n) -> eq lzero nat (h m) m) -> eq lzero nat (h n) n) (λ (leh : (i : nat) -> (X-- : le i n) -> le (h i) n) -> λ (injh : injn h n) -> λ (eqh : (m : nat) -> (X-- : lt m n) -> eq lzero nat (h m) m) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (invert-permut n h i) n) (injn (invert-permut n h) n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (invert-permut n h i) n) (injn (invert-permut n h) n)) -> eq lzero nat (h n) n) (λ (Hle : (i : nat) -> (X-- : le i n) -> le (invert-permut n h i) n) -> λ (Hinj : injn (invert-permut n h) n) -> match-Or lzero lzero (lt (invert-permut n h n) n) (eq lzero nat (invert-permut n h n) n) lzero (λ (X-- : Or lzero lzero (lt (invert-permut n h n) n) (eq lzero nat (invert-permut n h n) n)) -> eq lzero nat (h n) n) (λ (Hc : lt (invert-permut n h n) n) -> eq-ind lzero lzero nat (h (invert-permut n h n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (h (invert-permut n h n)) x-1) -> eq lzero nat (h n) x-1) (eq-f lzero lzero nat nat h n (invert-permut n h n) (eq-ind lzero lzero nat (h (invert-permut n h n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (h (invert-permut n h n)) x-1) -> eq lzero nat x-1 (invert-permut n h n)) (eqh (invert-permut n h n) Hc) n (f-invert-permut h n n (le-n n) permh))) n (f-invert-permut h n n (le-n n) permh)) (λ (Hc : eq lzero nat (invert-permut n h n) n) -> eq-ind lzero lzero nat (invert-permut n h n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (invert-permut n h n) x-1) -> eq lzero nat (h x-1) n) (f-invert-permut h n n (le-n n) permh) n Hc) (le-to-or-lt-eq (invert-permut n h n) n (Hle n (le-n n)))) (permut-invert-permut h n permh)) permh

permut-n-to-le : (h : (X-- : nat) -> nat) -> (k-v : nat) -> (n : nat) -> (X-- : le k-v n) -> (X--1 : permut h n) -> (X--2 : (m : nat) -> (X--2 : lt m k-v) -> eq lzero nat (h m) m) -> (j : nat) -> (X--3 : le k-v j) -> (X--4 : le j n) -> le k-v (h j)
permut-n-to-le = λ (h : (X-- : nat) -> nat) -> λ (k-v : nat) -> λ (n : nat) -> λ (lekn : le k-v n) -> λ (X-clearme : permut h n) -> match-And lzero lzero ((i : nat) -> (X-- : le i n) -> le (h i) n) (injn h n) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : le i n) -> le (h i) n) (injn h n)) -> (X--1 : (m : nat) -> (X--1 : lt m k-v) -> eq lzero nat (h m) m) -> (j : nat) -> (X--2 : le k-v j) -> (X--3 : le j n) -> le k-v (h j)) (λ (leh : (i : nat) -> (X-- : le i n) -> le (h i) n) -> λ (injh : injn h n) -> λ (H : (m : nat) -> (X-- : lt m k-v) -> eq lzero nat (h m) m) -> λ (j : nat) -> λ (lekj : le k-v j) -> λ (lejn : le j n) -> match-Or lzero lzero (lt (h j) k-v) (Not lzero (lt (h j) k-v)) lzero (λ (X-- : Or lzero lzero (lt (h j) k-v) (Not lzero (lt (h j) k-v))) -> le k-v (h j)) (λ (Hh : lt (h j) k-v) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> le k-v (h j)) (absurd lzero (le k-v j) lekj (lt-to-not-le j k-v (eq-ind lzero lzero nat (h j) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (h j) x-1) -> lt x-1 k-v) Hh j (injh (h j) j (transitive-le (h j) k-v n (lt-to-le (h j) k-v Hh) lekn) lejn (H (h j) Hh)))))) (λ (Hh : Not lzero (lt (h j) k-v)) -> not-lt-to-le (h j) k-v Hh) (decidable-lt (h j) k-v)) X-clearme

