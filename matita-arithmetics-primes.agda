open import Agda.Primitive
import matita-arithmetics-factorial
import matita-arithmetics-minimization
import matita-basics-bool
import matita-arithmetics-div-and-mod
import matita-basics-relations
import matita-basics-logic
import matita-arithmetics-nat

data divides (n-v : matita-arithmetics-nat.nat) (m-v : matita-arithmetics-nat.nat) : Set (lzero) where
  quotient' : (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v q-v)) -> divides n-v m-v

quotient : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v q-v)) -> divides n-v m-v
quotient _ _ = quotient'


match-divides : (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (return-sort-v : Level) -> (return-type-v : (z-v : divides X-n-v X-m-v) -> Set return-sort-v) -> (case-quotient-v : (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-m-v (matita-arithmetics-nat.times X-n-v q-v)) -> return-type-v (quotient X-n-v X-m-v q-v X---v)) -> (z-v : divides X-n-v X-m-v) -> return-type-v z-v
match-divides _ _ _ _ case (quotient' x1 x2) = case x1 x2

divides-ind : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-1192-v : divides X-n-v X-m-v) -> Set l2-v) -> (X-H-quotient-v : (q-v : matita-arithmetics-nat.nat) -> (x-1193-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-m-v (matita-arithmetics-nat.times X-n-v q-v)) -> Q--v (quotient X-n-v X-m-v q-v x-1193-v)) -> (x-1192-v : divides X-n-v X-m-v) -> Q--v x-1192-v
divides-ind _ _ _ _ case (quotient' x1 x2) = case x1 x2


divides-inv-ind : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (Hterm-v : divides x1-v x2-v) -> (P-v : (X-z2006-v : divides x1-v x2-v) -> Set l14-v) -> (X-H1-v : (q-v : matita-arithmetics-nat.nat) -> (x-1193-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2-v (matita-arithmetics-nat.times x1-v q-v)) -> (X-z2007-v : matita-basics-logic.eq lzero (divides x1-v x2-v) Hterm-v (quotient x1-v x2-v q-v x-1193-v)) -> P-v (quotient x1-v x2-v q-v x-1193-v)) -> P-v Hterm-v
divides-inv-ind = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : divides x1-v x2-v) -> λ (P-v : (X-z2006-v : divides x1-v x2-v) -> Set l14-v) -> λ (H1-v : (q-v : matita-arithmetics-nat.nat) -> (x-1193-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2-v (matita-arithmetics-nat.times x1-v q-v)) -> (X-z2007-v : matita-basics-logic.eq lzero (divides x1-v x2-v) Hterm-v (quotient x1-v x2-v q-v x-1193-v)) -> P-v (quotient x1-v x2-v q-v x-1193-v)) -> divides-ind l14-v x1-v x2-v (λ (X-x-1192-v : divides x1-v x2-v) -> (X-z2007-v : matita-basics-logic.eq lzero (divides x1-v x2-v) Hterm-v X-x-1192-v) -> P-v X-x-1192-v) H1-v Hterm-v (matita-basics-logic.refl lzero (divides x1-v x2-v) Hterm-v)

reflexive-divides : matita-basics-relations.reflexive lzero lzero matita-arithmetics-nat.nat divides
reflexive-divides = λ (x-v : matita-arithmetics-nat.nat) -> quotient x-v x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) x-v (matita-arithmetics-nat.times-n-1 x-v))

divides-to-div-mod-spec : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : divides n-v m-v) -> matita-arithmetics-div-and-mod.div-mod-spec m-v n-v (matita-arithmetics-div-and-mod.div m-v n-v) matita-arithmetics-nat.O
divides-to-div-mod-spec = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides n-v m-v) -> match-divides n-v m-v lzero (λ (X---v : divides n-v m-v) -> matita-arithmetics-div-and-mod.div-mod-spec m-v n-v (matita-arithmetics-div-and-mod.div m-v n-v) matita-arithmetics-nat.O) (λ (q-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v q-v)) -> matita-arithmetics-div-and-mod.div-mod-spec-intro m-v n-v (matita-arithmetics-div-and-mod.div m-v n-v) matita-arithmetics-nat.O posn-v (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v q-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div x-v n-v) n-v) matita-arithmetics-nat.O)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v n-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times q-v n-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div x-v n-v) n-v) matita-arithmetics-nat.O)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat q-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v q-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x-v n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) (matita-arithmetics-nat.plus m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O m-v)) (matita-arithmetics-nat.times n-v q-v) eqm-v) (matita-arithmetics-nat.times q-v n-v) (matita-arithmetics-nat.commutative-times q-v n-v)) (matita-arithmetics-nat.times n-v q-v) eqm-v) (matita-arithmetics-nat.times q-v n-v) (matita-arithmetics-nat.commutative-times q-v n-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times q-v n-v) n-v) (matita-arithmetics-div-and-mod.div-times q-v n-v posn-v)) (matita-arithmetics-nat.times n-v q-v) (matita-arithmetics-nat.commutative-times n-v q-v)) m-v eqm-v)) X-clearme-v

div-mod-spec-to-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-div-and-mod.div-mod-spec m-v n-v q-v matita-arithmetics-nat.O) -> divides n-v m-v
div-mod-spec-to-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-arithmetics-div-and-mod.div-mod-spec m-v n-v q-v matita-arithmetics-nat.O) -> matita-arithmetics-div-and-mod.match-div-mod-spec m-v n-v q-v matita-arithmetics-nat.O lzero (λ (X---v : matita-arithmetics-div-and-mod.div-mod-spec m-v n-v q-v matita-arithmetics-nat.O) -> divides n-v m-v) (λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v n-v) matita-arithmetics-nat.O)) -> quotient n-v m-v q-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times n-v q-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v q-v)) m-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v q-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) eqm-v (matita-arithmetics-nat.times n-v q-v) (matita-arithmetics-nat.commutative-times q-v n-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v q-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v q-v) (matita-arithmetics-nat.plus-O-n (matita-arithmetics-nat.times n-v q-v))))) X-clearme-v

divides-to-mod-O : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O
divides-to-mod-O = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divnm-v : divides n-v m-v) -> matita-arithmetics-div-and-mod.div-mod-spec-to-eq2 m-v n-v (matita-arithmetics-div-and-mod.div m-v n-v) (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-div-and-mod.div m-v n-v) matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div-mod-spec-div-mod m-v n-v posn-v) (divides-to-div-mod-spec n-v m-v posn-v divnm-v)

mod-O-to-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O) -> divides n-v m-v
mod-O-to-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O) -> quotient n-v m-v (matita-arithmetics-div-and-mod.div m-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) m-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus m-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-nat.minus m-v X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus m-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-div-and-mod.eq-times-div-minus-mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) matita-arithmetics-nat.O auto'-v) m-v (matita-arithmetics-nat.minus-n-O m-v)))

divides-n-O : (n-v : matita-arithmetics-nat.nat) -> divides n-v matita-arithmetics-nat.O
divides-n-O = λ (n-v : matita-arithmetics-nat.nat) -> quotient n-v matita-arithmetics-nat.O matita-arithmetics-nat.O (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O n-v))

divides-n-n : (n-v : matita-arithmetics-nat.nat) -> divides n-v n-v
divides-n-n = λ (n-v : matita-arithmetics-nat.nat) -> reflexive-divides n-v

divides-SO-n : (n-v : matita-arithmetics-nat.nat) -> divides (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v
divides-SO-n = λ (n-v : matita-arithmetics-nat.nat) -> quotient (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v n-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 n-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v))

divides-plus : (n-v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : divides n-v p-v) -> (X--1-v : divides n-v q-v) -> divides n-v (matita-arithmetics-nat.plus p-v q-v)
divides-plus = λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : divides n-v p-v) -> match-divides n-v p-v lzero (λ (X---v : divides n-v p-v) -> (X--1-v : divides n-v q-v) -> divides n-v (matita-arithmetics-nat.plus p-v q-v)) (λ (d1-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat p-v (matita-arithmetics-nat.times n-v d1-v)) -> λ (X-clearme0-v : divides n-v q-v) -> match-divides n-v q-v lzero (λ (X---v : divides n-v q-v) -> divides n-v (matita-arithmetics-nat.plus p-v q-v)) (λ (d2-v : matita-arithmetics-nat.nat) -> λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.times n-v d2-v)) -> quotient n-v (matita-arithmetics-nat.plus p-v q-v) (matita-arithmetics-nat.plus d1-v d2-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v d1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v d1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus x-v q-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.plus d1-v d2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v d2-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v d2-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v d1-v) x-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.plus d1-v d2-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.plus d1-v d2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.plus d1-v d2-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.plus d1-v d2-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v d1-v) (matita-arithmetics-nat.times n-v d2-v)) (matita-arithmetics-nat.distributive-times-plus n-v d1-v d2-v)) q-v H1-v) p-v H-v)) X-clearme0-v) X-clearme-v

divides-minus : (n-v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : divides n-v p-v) -> (X--1-v : divides n-v q-v) -> divides n-v (matita-arithmetics-nat.minus p-v q-v)
divides-minus = λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : divides n-v p-v) -> match-divides n-v p-v lzero (λ (X---v : divides n-v p-v) -> (X--1-v : divides n-v q-v) -> divides n-v (matita-arithmetics-nat.minus p-v q-v)) (λ (d1-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat p-v (matita-arithmetics-nat.times n-v d1-v)) -> λ (X-clearme0-v : divides n-v q-v) -> match-divides n-v q-v lzero (λ (X---v : divides n-v q-v) -> divides n-v (matita-arithmetics-nat.minus p-v q-v)) (λ (d2-v : matita-arithmetics-nat.nat) -> λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.times n-v d2-v)) -> quotient n-v (matita-arithmetics-nat.minus p-v q-v) (matita-arithmetics-nat.minus d1-v d2-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v d1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v d1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus x-v q-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus d1-v d2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v d2-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v d2-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v d1-v) x-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus d1-v d2-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus d1-v d2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus d1-v d2-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus d1-v d2-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v d1-v) (matita-arithmetics-nat.times n-v d2-v)) (matita-arithmetics-nat.distributive-times-minus n-v d1-v d2-v)) q-v H1-v) p-v H-v)) X-clearme0-v) X-clearme-v

divides-times : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : divides n-v p-v) -> (X--1-v : divides m-v q-v) -> divides (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times p-v q-v)
divides-times = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : divides n-v p-v) -> match-divides n-v p-v lzero (λ (X---v : divides n-v p-v) -> (X--1-v : divides m-v q-v) -> divides (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times p-v q-v)) (λ (d1-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat p-v (matita-arithmetics-nat.times n-v d1-v)) -> λ (X-clearme0-v : divides m-v q-v) -> match-divides m-v q-v lzero (λ (X---v : divides m-v q-v) -> divides (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times p-v q-v)) (λ (d2-v : matita-arithmetics-nat.nat) -> λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.times m-v d2-v)) -> quotient (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times p-v q-v) (matita-arithmetics-nat.times d1-v d2-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v d1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v d1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times x-v q-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times d1-v d2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times d1-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times d1-v q-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times d1-v d2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times d1-v q-v)) x-v) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v) (matita-arithmetics-nat.times d1-v q-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-arithmetics-nat.times d1-v q-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v d2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times d1-v d2-v)) (matita-arithmetics-nat.times d1-v X---v)) (matita-arithmetics-nat.times-times m-v d1-v d2-v) q-v H1-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times d1-v d2-v)) (matita-arithmetics-nat.associative-times n-v m-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v d1-v) q-v) (matita-arithmetics-nat.associative-times n-v d1-v q-v)) p-v H-v)) X-clearme0-v) X-clearme-v

transitive-divides : matita-basics-relations.transitive lzero lzero matita-arithmetics-nat.nat divides
transitive-divides = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : divides a-v b-v) -> match-divides a-v b-v lzero (λ (X---v : divides a-v b-v) -> (X--1-v : divides b-v c-v) -> divides a-v c-v) (λ (d1-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b-v (matita-arithmetics-nat.times a-v d1-v)) -> λ (X-clearme0-v : divides b-v c-v) -> match-divides b-v c-v lzero (λ (X---v : divides b-v c-v) -> divides a-v c-v) (λ (d2-v : matita-arithmetics-nat.nat) -> λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat c-v (matita-arithmetics-nat.times b-v d2-v)) -> quotient a-v c-v (matita-arithmetics-nat.times d1-v d2-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v d2-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times b-v d2-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v d1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v d1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times x-v d2-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d1-v d2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d1-v d2-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v d1-v) d2-v) (matita-arithmetics-nat.associative-times a-v d1-v d2-v)) b-v H-v) c-v H1-v)) X-clearme0-v) X-clearme-v

eq-mod-to-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod n-v q-v) (matita-arithmetics-div-and-mod.mod m-v q-v)) -> divides q-v (matita-arithmetics-nat.minus n-v m-v)
eq-mod-to-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posq-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> λ (eqmod-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod n-v q-v) (matita-arithmetics-div-and-mod.mod m-v q-v)) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> divides q-v (matita-arithmetics-nat.minus n-v m-v)) (λ (nm-v : matita-arithmetics-nat.le n-v m-v) -> matita-basics-logic.eq-coerc lzero (divides q-v matita-arithmetics-nat.O) (divides q-v (matita-arithmetics-nat.minus n-v m-v)) (divides-n-O q-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides q-v matita-arithmetics-nat.O) (divides q-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (divides q-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.minus n-v m-v) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.minus n-v m-v) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus matita-arithmetics-nat.O (matita-arithmetics-nat.minus m-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus matita-arithmetics-nat.O n-v) m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.minus n-v m-v)) (matita-arithmetics-nat.minus-le-minus-minus-comm m-v n-v matita-arithmetics-nat.O nm-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus matita-arithmetics-nat.O n-v) m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.minus n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.minus X---v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.minus n-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.minus n-v m-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.plus-O-n n-v)) (matita-arithmetics-nat.minus matita-arithmetics-nat.O (matita-arithmetics-nat.minus m-v n-v)) (matita-arithmetics-nat.minus-O-n (matita-arithmetics-nat.minus m-v n-v))))))) (λ (nm-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> quotient q-v (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus (matita-arithmetics-div-and-mod.div n-v q-v) (matita-arithmetics-div-and-mod.div m-v q-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div m-v q-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div m-v q-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div m-v q-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v (matita-arithmetics-div-and-mod.mod n-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-div-and-mod.mod n-v q-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod n-v q-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod n-v q-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v q-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.mod m-v q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.plus x-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v) (matita-arithmetics-div-and-mod.mod m-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v) (matita-arithmetics-div-and-mod.mod m-v q-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus n-v x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat m-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v) (matita-arithmetics-nat.minus n-v x-1-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v) (matita-arithmetics-div-and-mod.mod m-v q-v)) (matita-arithmetics-div-and-mod.div-mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v q-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-div-and-mod.mod m-v q-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v))) (matita-arithmetics-div-and-mod.mod n-v q-v) eqmod-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus n-v (matita-arithmetics-div-and-mod.mod n-v q-v)) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v)) (matita-arithmetics-nat.minus-plus n-v (matita-arithmetics-div-and-mod.mod n-v q-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v q-v) q-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus n-v (matita-arithmetics-div-and-mod.mod n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.minus n-v (matita-arithmetics-div-and-mod.mod n-v q-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus n-v (matita-arithmetics-div-and-mod.mod n-v q-v))) (matita-arithmetics-div-and-mod.eq-times-div-minus-mod n-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v q-v) q-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v q-v) q-v))) (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div m-v q-v)) (matita-arithmetics-nat.commutative-times q-v (matita-arithmetics-div-and-mod.div m-v q-v))) (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.commutative-times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.minus (matita-arithmetics-div-and-mod.div n-v q-v) (matita-arithmetics-div-and-mod.div m-v q-v))) (matita-arithmetics-nat.distributive-times-minus q-v (matita-arithmetics-div-and-mod.div n-v q-v) (matita-arithmetics-div-and-mod.div m-v q-v))))

let-clause-1531 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X-clearme-v : divides n-v m-v) -> (d-v : matita-arithmetics-nat.nat) -> (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O
let-clause-1531 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (X-clearme-v : divides n-v m-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) eqm-v matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O n-v)

let-clause-15311 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X-clearme-v : divides n-v m-v) -> (d-v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v))
let-clause-15311 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (X-clearme-v : divides n-v m-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v))) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) eqm-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-nat.times-n-Sm n-v p-v)

divides-to-le : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--1-v : divides n-v m-v) -> matita-arithmetics-nat.le n-v m-v
divides-to-le = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (X-clearme-v : divides n-v m-v) -> match-divides n-v m-v lzero (λ (X---v : divides n-v m-v) -> matita-arithmetics-nat.le n-v m-v) (λ (d-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v X---v)) -> matita-arithmetics-nat.le n-v m-v) (λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.le n-v m-v) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) matita-arithmetics-nat.O) posm-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S X---v) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) m-v)) matita-arithmetics-nat.O (let-clause-1531 n-v m-v posm-v X-clearme-v d-v eqm-v)) matita-arithmetics-nat.O (let-clause-1531 n-v m-v posm-v X-clearme-v d-v eqm-v))) (matita-arithmetics-nat.not-le-Sn-O m-v))) (λ (p-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v))) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v))) -> matita-arithmetics-nat.le n-v x-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v))) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v))) (matita-arithmetics-nat.le-plus-n-r (matita-arithmetics-nat.times n-v p-v) n-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v))) (matita-arithmetics-nat.le n-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v))) (matita-arithmetics-nat.le n-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v X---v) (matita-arithmetics-nat.le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v m-v)) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v)) (let-clause-15311 n-v m-v posm-v X-clearme-v d-v p-v eqm-v)) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v p-v)) (let-clause-15311 n-v m-v posm-v X-clearme-v d-v p-v eqm-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S p-v)) (matita-arithmetics-nat.times-n-Sm n-v p-v))) m-v eqm-v) d-v) X-clearme-v

antisymmetric-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : divides n-v m-v) -> (X--1-v : divides m-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v
antisymmetric-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (divnm-v : divides n-v m-v) -> λ (divmn-v : divides m-v n-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v) (λ (Hn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v) (λ (Hm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.le-to-le-to-eq n-v m-v (divides-to-le n-v m-v Hm-v divnm-v) (divides-to-le m-v n-v Hn-v divmn-v)) (λ (Hm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) (match-divides m-v n-v lzero (λ (X---v : divides m-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) (λ (q-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v q-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) matita-arithmetics-nat.O (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O X---v) Hm-v n-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) auto-v m-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times X---v q-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) (matita-arithmetics-nat.times-O-n q-v) m-v Hm-v) m-v Hm-v)))) divmn-v) m-v Hm-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O m-v (matita-arithmetics-nat.le-O-n m-v))) (λ (Hn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v m-v) (match-divides n-v m-v lzero (λ (X---v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) (λ (q-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times n-v q-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v m-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) m-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) auto-v n-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times X---v q-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) (matita-arithmetics-nat.times-O-n q-v) n-v Hn-v) n-v Hn-v))) matita-arithmetics-nat.O Hn-v) divnm-v) n-v Hn-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

divides-to-lt-O : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--1-v : divides n-v m-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v
divides-to-lt-O = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> (X--1-v : divides n-v m-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (auto'-v : divides n-v m-v) -> auto-v) (λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides n-v m-v) -> match-divides n-v m-v lzero (λ (X---v : divides n-v m-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (λ (d-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times x-1-v d-v)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O x-1-v) (λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O matita-arithmetics-nat.O) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) posm-v (matita-arithmetics-nat.le-to-not-lt m-v matita-arithmetics-nat.O (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-arithmetics-nat.le x-v matita-arithmetics-nat.O) (matita-arithmetics-nat.le-n (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) m-v eqm-v)))) n-v eqn0-v) X-clearme-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

or-div-mod1 : (n-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))))
or-div-mod1 = λ (n-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posq-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))))) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))))) (λ (X-clearme-v : matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))))) (λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) -> λ (H2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.And lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))))) (matita-basics-logic.conj lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) (matita-basics-logic.eq-coerc lzero (divides (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)))) (divides q-v (matita-arithmetics-nat.S n-v)) (divides-times q-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) (divides-n-n q-v) (divides-SO-n (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)))) (divides q-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat q-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides X---v (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)))) (divides q-v (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides q-v X---v) (divides q-v (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (divides q-v (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))))) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times-n-Sm q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 q-v)) (matita-arithmetics-nat.S n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) H2-v (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times-n-Sm q-v (matita-arithmetics-div-and-mod.div n-v q-v))))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)))) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times-n-Sm q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) (matita-arithmetics-nat.S n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) H2-v (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v)) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v))) (matita-arithmetics-nat.times-n-Sm q-v (matita-arithmetics-div-and-mod.div n-v q-v)))))) X-clearme-v) (λ (X-clearme-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))))) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))))) (λ (H1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) q-v) -> λ (H2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.And lzero lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))))) (matita-basics-logic.conj lzero lzero (matita-basics-logic.Not lzero (divides q-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) (matita-basics-logic.not-to-not lzero (divides q-v (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S n-v) q-v) matita-arithmetics-nat.O) (divides-to-mod-O q-v (matita-arithmetics-nat.S n-v) posq-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v matita-arithmetics-nat.O)) (matita-basics-logic.nmk lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) matita-arithmetics-nat.O) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) matita-arithmetics-nat.O) -> matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))) matita-arithmetics-nat.O auto-v) (matita-arithmetics-nat.not-eq-O-S (matita-arithmetics-div-and-mod.mod n-v q-v)))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S n-v) q-v) (matita-arithmetics-div-and-mod.div-mod-spec-to-eq2 (matita-arithmetics-nat.S n-v) q-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.S n-v) q-v) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S n-v) q-v) (matita-arithmetics-div-and-mod.div n-v q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) (matita-arithmetics-div-and-mod.div-mod-spec-div-mod (matita-arithmetics-nat.S n-v) q-v posq-v) (matita-arithmetics-div-and-mod.div-mod-spec-intro (matita-arithmetics-nat.S n-v) q-v (matita-arithmetics-div-and-mod.div n-v q-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)) H1-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) H2-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v q-v) q-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v q-v) q-v)))))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod n-v q-v)))) H2-v (matita-arithmetics-nat.times q-v (matita-arithmetics-div-and-mod.div n-v q-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v q-v) q-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v q-v) q-v)))) X-clearme-v) (matita-arithmetics-div-and-mod.or-div-mod n-v q-v posq-v)

let-clause-1532 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (divnm-v : divides n-v m-v) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (d-v : matita-arithmetics-nat.nat) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O
let-clause-1532 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (divnm-v : divides n-v m-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times d-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) auto-v (matita-arithmetics-nat.times d-v matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O d-v)) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O d-v)

let-clause-1559 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (divnm-v : divides n-v m-v) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (d-v : matita-arithmetics-nat.nat) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v
let-clause-1559 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (divnm-v : divides n-v m-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) H-v m-v (let-clause-1532 n-v m-v divnm-v H-v d-v auto-v)

let-clause-1560 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (divnm-v : divides n-v m-v) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (d-v : matita-arithmetics-nat.nat) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O
let-clause-1560 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (divnm-v : divides n-v m-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (let-clause-1532 n-v m-v divnm-v H-v d-v auto-v) n-v (let-clause-1559 n-v m-v divnm-v H-v d-v auto-v)

divides-to-div : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) m-v
divides-to-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (divnm-v : divides n-v m-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) m-v) (λ (H-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v m-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) x-1-v) m-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod m-v n-v)) m-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v m-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v m-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-div-and-mod.div-mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) matita-arithmetics-nat.O (divides-to-mod-O n-v m-v H-v divnm-v)) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-nat.plus-n-O (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> match-divides n-v m-v lzero (λ (X---v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) m-v) (λ (d-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times x-1-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v x-1-v) x-1-v) m-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div X---v matita-arithmetics-nat.O) matita-arithmetics-nat.O) m-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v X---v) matita-arithmetics-nat.O) m-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v n-v) X---v) m-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div n-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v m-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v m-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) m-v (let-clause-1559 n-v m-v divnm-v H-v d-v auto-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div n-v n-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times X---v (matita-arithmetics-div-and-mod.div n-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div n-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times X---v (matita-arithmetics-div-and-mod.div n-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div n-v n-v))) (matita-arithmetics-nat.times-O-n (matita-arithmetics-div-and-mod.div n-v n-v)) m-v (let-clause-1532 n-v m-v divnm-v H-v d-v auto-v)) m-v (let-clause-1532 n-v m-v divnm-v H-v d-v auto-v)) n-v (let-clause-1559 n-v m-v divnm-v H-v d-v auto-v)) n-v (let-clause-1559 n-v m-v divnm-v H-v d-v auto-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div n-v n-v) n-v)) matita-arithmetics-nat.O (let-clause-1560 n-v m-v divnm-v H-v d-v auto-v)) matita-arithmetics-nat.O (let-clause-1560 n-v m-v divnm-v H-v d-v auto-v)) m-v (let-clause-1559 n-v m-v divnm-v H-v d-v auto-v)) n-v H-v) divnm-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

divides-div : (d-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : divides d-v n-v) -> divides (matita-arithmetics-div-and-mod.div n-v d-v) n-v
divides-div = λ (d-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (divdn-v : divides d-v n-v) -> quotient (matita-arithmetics-div-and-mod.div n-v d-v) n-v d-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v d-v) d-v) n-v (divides-to-div d-v n-v divdn-v))

div-div : (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : divides d-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div n-v (matita-arithmetics-div-and-mod.div n-v d-v)) d-v
div-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divdn-v : divides d-v n-v) -> matita-arithmetics-div-and-mod.injective-times-l (matita-arithmetics-div-and-mod.div n-v d-v) (matita-arithmetics-nat.lt-times-n-to-lt-l d-v matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div n-v d-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-arithmetics-nat.lt (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v) x-v) posn-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v d-v) d-v) (divides-to-div d-v n-v divdn-v))) (matita-arithmetics-div-and-mod.div n-v (matita-arithmetics-div-and-mod.div n-v d-v)) d-v (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times d-v (matita-arithmetics-div-and-mod.div n-v d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v d-v) d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v d-v) d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v d-v) d-v) (divides-to-div d-v n-v divdn-v)) (matita-arithmetics-nat.times d-v (matita-arithmetics-div-and-mod.div n-v d-v)) (matita-arithmetics-nat.commutative-times d-v (matita-arithmetics-div-and-mod.div n-v d-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v (matita-arithmetics-div-and-mod.div n-v d-v)) (matita-arithmetics-div-and-mod.div n-v d-v)) (divides-to-div (matita-arithmetics-div-and-mod.div n-v d-v) n-v (quotient (matita-arithmetics-div-and-mod.div n-v d-v) n-v d-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div n-v d-v) d-v) n-v (divides-to-div d-v n-v divdn-v)))))

times-div : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> (X--1-v : divides c-v b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div b-v c-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times a-v b-v) c-v)
times-div = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (posb-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> λ (divcb-v : divides c-v b-v) -> match-divides c-v b-v lzero (λ (X---v : divides c-v b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div b-v c-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times a-v b-v) c-v)) (λ (d-v : matita-arithmetics-nat.nat) -> λ (eqb-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b-v (matita-arithmetics-nat.times c-v d-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times c-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div x-v c-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times a-v x-v) c-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times d-v c-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times d-v c-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div x-v c-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times a-v x-v) c-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat d-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v d-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v x-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d-v c-v)) c-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v d-v) c-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v d-v) c-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v d-v) (matita-arithmetics-div-and-mod.div x-1-v c-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v d-v) x-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v d-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v d-v) c-v) c-v) (matita-arithmetics-div-and-mod.div-times (matita-arithmetics-nat.times a-v d-v) c-v (divides-to-lt-O c-v b-v posb-v divcb-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times d-v c-v)) (matita-arithmetics-nat.associative-times a-v d-v c-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v c-v) c-v) (matita-arithmetics-div-and-mod.div-times d-v c-v (divides-to-lt-O c-v b-v posb-v divcb-v))) (matita-arithmetics-nat.times c-v d-v) (matita-arithmetics-nat.commutative-times c-v d-v)) b-v eqb-v) divcb-v

plus-div : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O d-v) -> (X--1-v : divides d-v n-v) -> (X--2-v : divides d-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus n-v m-v) d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div n-v d-v) (matita-arithmetics-div-and-mod.div m-v d-v))
plus-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (posd-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O d-v) -> λ (divdn-v : divides d-v n-v) -> λ (divdm-v : divides d-v m-v) -> match-divides d-v n-v lzero (λ (X---v : divides d-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus n-v m-v) d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div n-v d-v) (matita-arithmetics-div-and-mod.div m-v d-v))) (λ (a-v : matita-arithmetics-nat.nat) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times d-v a-v)) -> match-divides d-v m-v lzero (λ (X---v : divides d-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus n-v m-v) d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div n-v d-v) (matita-arithmetics-div-and-mod.div m-v d-v))) (λ (b-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times d-v b-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times d-v a-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times d-v a-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus x-v m-v) d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div x-v d-v) (matita-arithmetics-div-and-mod.div m-v d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times d-v b-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times d-v b-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times d-v a-v) x-v) d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v a-v) d-v) (matita-arithmetics-div-and-mod.div x-v d-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times d-v (matita-arithmetics-nat.plus a-v b-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times d-v (matita-arithmetics-nat.plus a-v b-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div x-1-v d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v a-v) d-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v b-v) d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.plus a-v b-v) d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.plus a-v b-v) d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div x-v d-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v a-v) d-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v b-v) d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus a-v b-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v a-v) d-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v b-v) d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.div x-v d-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v b-v) d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat a-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v a-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.plus x-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times d-v b-v) d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v d-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times b-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.plus a-v (matita-arithmetics-div-and-mod.div x-v d-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat b-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.plus a-v x-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times b-v d-v) d-v) (matita-arithmetics-div-and-mod.div-times b-v d-v posd-v)) (matita-arithmetics-nat.times d-v b-v) (matita-arithmetics-nat.commutative-times d-v b-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times a-v d-v) d-v) (matita-arithmetics-div-and-mod.div-times a-v d-v posd-v)) (matita-arithmetics-nat.times d-v a-v) (matita-arithmetics-nat.commutative-times d-v a-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.times (matita-arithmetics-nat.plus a-v b-v) d-v) d-v) (matita-arithmetics-div-and-mod.div-times (matita-arithmetics-nat.plus a-v b-v) d-v posd-v)) (matita-arithmetics-nat.times d-v (matita-arithmetics-nat.plus a-v b-v)) (matita-arithmetics-nat.commutative-times d-v (matita-arithmetics-nat.plus a-v b-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times d-v a-v) (matita-arithmetics-nat.times d-v b-v)) (matita-arithmetics-nat.distributive-times-plus d-v a-v b-v)) m-v eqm-v) n-v eqn-v) divdm-v) divdn-v

dividesb : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool
dividesb = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O

dividesb-true-to-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) -> divides n-v m-v
dividesb-true-to-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) -> divides n-v m-v) (λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divbnm-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) -> mod-O-to-divides n-v m-v posn-v (matita-arithmetics-nat.eqb-true-to-eq (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O divbnm-v)) (λ (eqnO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb x-1-v m-v) matita-basics-bool.true) -> divides x-1-v m-v) (λ (eqbmO-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-arithmetics-nat.eqb m-v matita-arithmetics-nat.O) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v matita-arithmetics-nat.O) -> divides matita-arithmetics-nat.O x-v) (divides-n-n matita-arithmetics-nat.O) m-v (matita-arithmetics-nat.eqb-true-to-eq m-v matita-arithmetics-nat.O eqbmO-v)) n-v eqnO-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

dividesb-false-to-not-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.Not lzero (divides n-v m-v)
dividesb-false-to-not-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.Not lzero (divides n-v m-v)) (λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (ndivbnm-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.not-to-not lzero (divides n-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O) (divides-to-mod-O n-v m-v posn-v) (matita-arithmetics-nat.eqb-false-to-not-eq (matita-arithmetics-div-and-mod.mod m-v n-v) matita-arithmetics-nat.O ndivbnm-v)) (λ (eqnO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb x-1-v m-v) matita-basics-bool.false) -> matita-basics-logic.Not lzero (divides x-1-v m-v)) (matita-arithmetics-nat.nat-case lzero m-v (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-arithmetics-nat.eqb X---v matita-arithmetics-nat.O) matita-basics-bool.false) -> matita-basics-logic.Not lzero (divides matita-arithmetics-nat.O X---v)) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) -> matita-basics-logic.not-to-not lzero (divides matita-arithmetics-nat.O matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (λ (auto''-v : divides matita-arithmetics-nat.O matita-arithmetics-nat.O) -> matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X---v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false auto'-v) matita-basics-bool.not-eq-true-false) (λ (a-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.S a-v)) -> λ (X-0-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-arithmetics-nat.eqb (matita-arithmetics-nat.S a-v) matita-arithmetics-nat.O) matita-basics-bool.false) -> matita-basics-logic.nmk lzero (divides matita-arithmetics-nat.O (matita-arithmetics-nat.S a-v)) (λ (X-clearme-v : divides matita-arithmetics-nat.O (matita-arithmetics-nat.S a-v)) -> match-divides matita-arithmetics-nat.O (matita-arithmetics-nat.S a-v) lzero (λ (X-1-v : divides matita-arithmetics-nat.O (matita-arithmetics-nat.S a-v)) -> matita-basics-logic.False lzero) (λ (q-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S a-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.S a-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X--1-v (matita-arithmetics-nat.S a-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S a-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X--1-v (matita-arithmetics-nat.S a-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S a-v)) n-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S a-v) X--1-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v matita-arithmetics-nat.O) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S a-v) X--1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S a-v) X--1-v) auto-v (matita-arithmetics-nat.times q-v matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O q-v)) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O q-v)) n-v eqnO-v)) matita-arithmetics-nat.O eqnO-v) (matita-arithmetics-nat.not-eq-O-S a-v)) X-clearme-v))) n-v eqnO-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

decidable-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.decidable lzero (divides n-v m-v)
decidable-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false)) -> matita-basics-logic.decidable lzero (divides n-v m-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) -> matita-basics-logic.or-introl lzero lzero (divides n-v m-v) (matita-basics-logic.Not lzero (divides n-v m-v)) (dividesb-true-to-divides n-v m-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (dividesb n-v m-v) auto-v))) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.or-intror lzero lzero (divides n-v m-v) (matita-basics-logic.Not lzero (divides n-v m-v)) (dividesb-false-to-not-divides n-v m-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (dividesb n-v m-v) auto-v))) (matita-basics-bool.true-or-false (dividesb n-v m-v))

divides-to-dividesb-true : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true
divides-to-dividesb-true = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divnm-v : divides n-v m-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (dividesb n-v m-v) auto-v) (λ (ndivbnm-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.absurd lzero (divides n-v m-v) divnm-v (dividesb-false-to-not-divides n-v m-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (dividesb n-v m-v) ndivbnm-v)))) (matita-basics-bool.true-or-false (dividesb n-v m-v))

let-clause-15321 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> (q-v : matita-arithmetics-nat.nat) -> (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O
let-clause-15321 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) eqm-v (matita-arithmetics-nat.times q-v matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O q-v)) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O q-v)

let-clause-15591 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> (q-v : matita-arithmetics-nat.nat) -> (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v
let-clause-15591 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) eqn0-v m-v (let-clause-15321 n-v m-v posn-v eqn0-v X-clearme-v q-v eqm-v)

let-clause-15601 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> (q-v : matita-arithmetics-nat.nat) -> (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O
let-clause-15601 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (let-clause-15321 n-v m-v posn-v eqn0-v X-clearme-v q-v eqm-v) n-v (let-clause-15591 n-v m-v posn-v eqn0-v X-clearme-v q-v eqm-v)

divides-to-dividesb-true1 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--1-v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true
divides-to-dividesb-true1 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> (X--1-v : divides n-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (auto'-v : divides n-v m-v) -> divides-to-dividesb-true n-v m-v auto-v auto'-v) (λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> (X---v : divides x-1-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb x-1-v m-v) matita-basics-bool.true) (λ (X-clearme-v : divides matita-arithmetics-nat.O m-v) -> match-divides matita-arithmetics-nat.O m-v lzero (λ (X---v : divides matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb matita-arithmetics-nat.O m-v) matita-basics-bool.true) (λ (q-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb matita-arithmetics-nat.O m-v) matita-basics-bool.true) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) posn-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S X---v) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) n-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) n-v)) matita-arithmetics-nat.O (let-clause-15601 n-v m-v posn-v eqn0-v X-clearme-v q-v eqm-v)) m-v (let-clause-15591 n-v m-v posn-v eqn0-v X-clearme-v q-v eqm-v)) matita-arithmetics-nat.O (let-clause-15601 n-v m-v posn-v eqn0-v X-clearme-v q-v eqm-v))) (matita-arithmetics-nat.not-le-Sn-O n-v))) X-clearme-v) n-v eqn0-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

not-divides-to-dividesb-false : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-basics-logic.Not lzero (divides n-v m-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false
not-divides-to-dividesb-false = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false)) -> (X--1-v : matita-basics-logic.Not lzero (divides n-v m-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) (λ (divbnm-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.true) -> λ (ndivnm-v : matita-basics-logic.Not lzero (divides n-v m-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) (matita-basics-logic.absurd lzero (divides n-v m-v) (dividesb-true-to-divides n-v m-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (dividesb n-v m-v) divbnm-v)) ndivnm-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb n-v m-v) matita-basics-bool.false) -> λ (auto'-v : matita-basics-logic.Not lzero (divides n-v m-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (dividesb n-v m-v) auto-v) (matita-basics-bool.true-or-false (dividesb n-v m-v))

dividesb-div-true : (d-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb d-v n-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb (matita-arithmetics-div-and-mod.div n-v d-v) n-v) matita-basics-bool.true
dividesb-div-true = λ (d-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divbdn-v : matita-basics-logic.eq lzero matita-basics-bool.bool (dividesb d-v n-v) matita-basics-bool.true) -> divides-to-dividesb-true1 (matita-arithmetics-div-and-mod.div n-v d-v) n-v posn-v (divides-div d-v n-v (dividesb-true-to-divides d-v n-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (dividesb d-v n-v) divbdn-v)))

let-clause-1573 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X-clearme-v : divides m-v n-v) -> (d-v : matita-arithmetics-nat.nat) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v
let-clause-1573 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides m-v n-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v d-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) auto'-v m-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times X---v d-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O d-v)) (matita-arithmetics-nat.times-O-n d-v) m-v auto-v) m-v auto-v)

let-clause-1585 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X-clearme-v : divides m-v n-v) -> (d-v : matita-arithmetics-nat.nat) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v
let-clause-1585 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides m-v n-v) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O X---v) auto-v n-v (let-clause-1573 n-v m-v posn-v X-clearme-v d-v auto-v auto'-v)

dividesb-true-to-lt-O : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : divides m-v n-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v
dividesb-true-to-lt-O = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : divides m-v n-v) -> match-divides m-v n-v lzero (λ (X---v : divides m-v n-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (λ (d-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> auto-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times m-v d-v)) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) posn-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v n-v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v n-v) (matita-arithmetics-nat.lt X---v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v n-v) (matita-arithmetics-nat.lt n-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v n-v)) m-v (let-clause-1573 n-v m-v posn-v X-clearme-v d-v auto-v auto'-v)) matita-arithmetics-nat.O (let-clause-1585 n-v m-v posn-v X-clearme-v d-v auto-v auto'-v)) matita-arithmetics-nat.O (let-clause-1585 n-v m-v posn-v X-clearme-v d-v auto-v auto'-v))) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O m-v (matita-arithmetics-nat.le-O-n m-v))) X-clearme-v

prime : (X---v : matita-arithmetics-nat.nat) -> Set (lzero)
prime = λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v)

not-prime-O : matita-basics-logic.Not lzero (prime matita-arithmetics-nat.O)
not-prime-O = matita-basics-logic.nmk lzero (prime matita-arithmetics-nat.O) (λ (X-clearme-v : prime matita-arithmetics-nat.O) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v matita-arithmetics-nat.O) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v matita-arithmetics-nat.O) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O)) -> matita-basics-logic.False lzero) (λ (lt10-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O) -> λ (auto-v : (m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v matita-arithmetics-nat.O) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) matita-arithmetics-nat.O) lt10-v (matita-arithmetics-nat.not-le-Sn-O (matita-arithmetics-nat.S matita-arithmetics-nat.O))) X-clearme-v)

not-prime-SO : matita-basics-logic.Not lzero (prime (matita-arithmetics-nat.S matita-arithmetics-nat.O))
not-prime-SO = matita-basics-logic.nmk lzero (prime (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X-clearme-v : prime (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) -> matita-basics-logic.False lzero) (λ (lt11-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (auto-v : (m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) lt11-v (matita-arithmetics-nat.not-le-Sn-n (matita-arithmetics-nat.S matita-arithmetics-nat.O))) X-clearme-v)

prime-to-lt-O : (p-v : matita-arithmetics-nat.nat) -> (X---v : prime p-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v
prime-to-lt-O = λ (p-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : prime p-v) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v p-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v p-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v p-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v p-v)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) (λ (lt1p-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) -> λ (auto-v : (m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v p-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v p-v) -> matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O p-v lt1p-v) X-clearme-v

prime-to-lt-SO : (p-v : matita-arithmetics-nat.nat) -> (X---v : prime p-v) -> matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v
prime-to-lt-SO = λ (p-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : prime p-v) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v p-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v p-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v p-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v p-v)) -> matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) (λ (lt1p-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) p-v) -> λ (auto-v : (m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v p-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v p-v) -> lt1p-v) X-clearme-v

smallest-factor : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
smallest-factor = λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.leb n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))

smallest-factor-to-min : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O))
smallest-factor-to-min = λ (n-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-nat.match-nat lzero (λ (X-0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) n-v (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-div-and-mod.mod-aux n-v n-v p-v) m-v) matita-arithmetics-nat.O)) x-v) (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-nat.match-nat lzero (λ (X-0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) n-v (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-div-and-mod.mod-aux n-v n-v p-v) m-v) matita-arithmetics-nat.O))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) n-v (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-div-and-mod.mod-aux n-v n-v p-v) m-v) matita-arithmetics-nat.O)) matita-basics-bool.false)) (matita-arithmetics-nat.leb n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.lt-to-leb-false n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) lt1n-v)

example1 : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))
example1 = matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))

example2 : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))
example2 = matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))

example3 : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))) (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))
example3 = matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))

le-SO-smallest-factor : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) n-v
le-SO-smallest-factor = λ (n-v : matita-arithmetics-nat.nat) -> λ (le1n-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-nat.match-nat lzero (λ (X-0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) n-v (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-div-and-mod.mod-aux n-v n-v p-v) m-v) matita-arithmetics-nat.O)) x-v) n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) n-v (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-div-and-mod.mod-aux n-v n-v p-v) m-v) matita-arithmetics-nat.O)) matita-basics-bool.true)) (matita-arithmetics-nat.leb n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.le-to-leb-true n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) le1n-v)

lt-SO-smallest-factor : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (smallest-factor n-v)
lt-SO-smallest-factor = λ (n-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O))) -> matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) x-v) (matita-arithmetics-minimization.le-min-l (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O) n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (smallest-factor n-v) (smallest-factor-to-min n-v lt1n-v)

lt-O-smallest-factor : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (smallest-factor n-v)
lt-O-smallest-factor = λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-nat.match-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) lzero (λ (X---v : matita-arithmetics-nat.nat) -> λ (X-0-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) X---v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (smallest-factor X---v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O x-v) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O) (smallest-factor (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (le-SO-smallest-factor (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O))) (λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-arithmetics-nat.le-S-S-to-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) (smallest-factor (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.le-S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (smallest-factor (matita-arithmetics-nat.S m-v)) (lt-SO-smallest-factor (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.le-S-S (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v posm-v)))) n-v posn-v

divides-smallest-factor-n : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> divides (smallest-factor n-v) n-v
divides-smallest-factor-n = λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) -> divides (smallest-factor n-v) n-v) (λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> mod-O-to-divides (smallest-factor n-v) n-v (lt-O-smallest-factor n-v posn-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod n-v x-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.eqb-true-to-eq (matita-arithmetics-div-and-mod.mod n-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O))) matita-arithmetics-nat.O (matita-arithmetics-minimization.f-min-true (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v X---v) matita-arithmetics-nat.O) n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) i-v) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v i-v) matita-arithmetics-nat.O) matita-basics-bool.true)) n-v (matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v n-v) matita-arithmetics-nat.O) matita-basics-bool.true) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) lt1n-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (matita-arithmetics-nat.le-plus-n-r (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (matita-arithmetics-nat.plus-n-Sm n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.commutative-plus n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S n-v))))) (divides-to-dividesb-true n-v n-v posn-v (divides-n-n n-v)))))) (smallest-factor n-v) (smallest-factor-to-min n-v lt1n-v))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) x-1-v) -> divides (smallest-factor x-1-v) x-1-v) (divides-n-n (smallest-factor (matita-arithmetics-nat.S matita-arithmetics-nat.O))) n-v H-v) (matita-arithmetics-nat.le-to-or-lt-eq (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v posn-v)

le-smallest-factor-n : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.le (smallest-factor n-v) n-v
le-smallest-factor-n = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.le (smallest-factor X---v) X---v) (matita-arithmetics-nat.le-n (smallest-factor matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> divides-to-le (smallest-factor (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.lt-O-S m-v) (divides-smallest-factor-n (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.lt-O-S m-v))) n-v

lt-smallest-factor-to-not-divides : (n-v : matita-arithmetics-nat.nat) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) -> (X--2-v : matita-arithmetics-nat.lt i-v (smallest-factor n-v)) -> matita-basics-logic.Not lzero (divides i-v n-v)
lt-smallest-factor-to-not-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (ltn-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (lti-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O))) -> (X--1-v : matita-arithmetics-nat.lt i-v x-v) -> matita-basics-logic.Not lzero (divides i-v n-v)) (λ (ltmin-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O))) -> matita-basics-logic.not-to-not lzero (divides i-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod n-v i-v) matita-arithmetics-nat.O) (λ (divin-v : divides i-v n-v) -> divides-to-mod-O i-v n-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lti-v) divin-v) (matita-arithmetics-nat.eqb-false-to-not-eq (matita-arithmetics-div-and-mod.mod n-v i-v) matita-arithmetics-nat.O (matita-arithmetics-minimization.lt-min-to-false (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O) n-v i-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) lti-v ltmin-v))) (smallest-factor n-v) (smallest-factor-to-min n-v ltn-v)

prime-smallest-factor-n : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> prime (smallest-factor n-v)
prime-smallest-factor-n = λ (n-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (smallest-factor n-v)) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v (smallest-factor n-v)) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (smallest-factor n-v)) (lt-SO-smallest-factor n-v lt1n-v) (λ (m-v : matita-arithmetics-nat.nat) -> λ (divmmin-v : divides m-v (smallest-factor n-v)) -> λ (lt1m-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-arithmetics-nat.le-to-le-to-eq m-v (smallest-factor n-v) (divides-to-le m-v (smallest-factor n-v) (lt-O-smallest-factor n-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O n-v lt1n-v)) divmmin-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m0-v) matita-arithmetics-nat.O)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-minimization.min n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (m0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m0-v) matita-arithmetics-nat.O))) -> matita-arithmetics-nat.le x-v m-v) (matita-arithmetics-minimization.true-to-le-min (λ (m0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod n-v m0-v) matita-arithmetics-nat.O) n-v m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) lt1m-v (matita-arithmetics-nat.eq-to-eqb-true (matita-arithmetics-div-and-mod.mod n-v m-v) matita-arithmetics-nat.O (divides-to-mod-O m-v n-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O m-v lt1m-v) (transitive-divides m-v (smallest-factor n-v) n-v divmmin-v (divides-smallest-factor-n n-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O n-v lt1n-v)))))) (smallest-factor n-v) (smallest-factor-to-min n-v lt1n-v)))

prime-to-smallest-factor : (n-v : matita-arithmetics-nat.nat) -> (X---v : prime n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) n-v
prime-to-smallest-factor = λ (n-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : prime n-v) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) n-v) (λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (primen-v : (m-v : matita-arithmetics-nat.nat) -> (X---v : divides m-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v) -> primen-v (smallest-factor n-v) (divides-smallest-factor-n n-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O n-v lt1n-v)) (lt-SO-smallest-factor n-v lt1n-v)) X-clearme-v

smallest-factor-to-prime : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) n-v) -> prime n-v
smallest-factor-to-prime = λ (n-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (smallest-factor n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) x-1-v) -> prime x-1-v) (prime-smallest-factor-n n-v lt1n-v) n-v H-v

primeb : (X-n-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool
primeb = λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (matita-arithmetics-nat.eqb (smallest-factor n-v) n-v)

example4 : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) matita-basics-bool.true
example4 = matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true

example5 : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))))) matita-basics-bool.false
example5 = matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false

example6 : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))))))) matita-basics-bool.true
example6 = matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true

example7 : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))))))))))))) matita-basics-bool.true
example7 = matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true

primeb-true-to-prime : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) -> prime n-v
primeb-true-to-prime = λ (n-v : matita-arithmetics-nat.nat) -> λ (primebn-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) -> smallest-factor-to-prime n-v (matita-arithmetics-nat.leb-true-to-le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v (matita-basics-bool.andb-true-l (matita-arithmetics-nat.leb (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (matita-arithmetics-nat.eqb (smallest-factor n-v) n-v) primebn-v)) (matita-arithmetics-nat.eqb-true-to-eq (smallest-factor n-v) n-v (matita-basics-bool.andb-true-r (matita-arithmetics-nat.leb (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (matita-arithmetics-nat.eqb (smallest-factor n-v) n-v) primebn-v))

primeb-false-to-not-prime : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) -> matita-basics-logic.Not lzero (prime n-v)
primeb-false-to-not-prime = λ (n-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb X---v (matita-arithmetics-nat.eqb (smallest-factor n-v) n-v)) matita-basics-bool.false) -> matita-basics-logic.Not lzero (prime n-v)) (λ (X---v : matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) -> λ (H1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.true (matita-arithmetics-nat.eqb (smallest-factor n-v) n-v)) matita-basics-bool.false) -> matita-basics-logic.not-to-not lzero (prime n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (smallest-factor n-v) n-v) (prime-to-smallest-factor n-v) (matita-arithmetics-nat.eqb-false-to-not-eq (smallest-factor n-v) n-v H1-v)) (λ (len1-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v)) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false (matita-arithmetics-nat.eqb (smallest-factor n-v) n-v)) matita-basics-bool.false) -> matita-basics-logic.not-to-not lzero (prime n-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (λ (X-clearme-v : prime n-v) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m-v : matita-arithmetics-nat.nat) -> (X--1-v : divides m-v n-v) -> (X--2-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v) lzero (λ (X-0-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m-v : matita-arithmetics-nat.nat) -> (X--1-v : divides m-v n-v) -> (X--2-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v)) -> matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) n-v) (λ (auto-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (auto'-v : (m-v : matita-arithmetics-nat.nat) -> (X--1-v : divides m-v n-v) -> (X--2-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v) -> auto-v) X-clearme-v) len1-v) H-v

decidable-prime : (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.decidable lzero (prime n-v)
decidable-prime = λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false)) -> matita-basics-logic.decidable lzero (prime n-v)) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) -> matita-basics-logic.or-introl lzero lzero (prime n-v) (matita-basics-logic.Not lzero (prime n-v)) (primeb-true-to-prime n-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (primeb n-v) H-v))) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) -> matita-basics-logic.or-intror lzero lzero (prime n-v) (matita-basics-logic.Not lzero (prime n-v)) (primeb-false-to-not-prime n-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (primeb n-v) H-v))) (matita-basics-bool.true-or-false (primeb n-v))

prime-to-primeb-true : (n-v : matita-arithmetics-nat.nat) -> (X---v : prime n-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true
prime-to-primeb-true = λ (n-v : matita-arithmetics-nat.nat) -> λ (primen-v : prime n-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (primeb n-v) auto-v) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.absurd lzero (prime n-v) primen-v (primeb-false-to-not-prime n-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (primeb n-v) H-v)))) (matita-basics-bool.true-or-false (primeb n-v))

not-prime-to-primeb-false : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.Not lzero (prime n-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false
not-prime-to-primeb-false = λ (n-v : matita-arithmetics-nat.nat) -> λ (np-v : matita-basics-logic.Not lzero (prime n-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) (λ (p-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.true) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) (matita-basics-logic.absurd lzero (prime n-v) (primeb-true-to-prime n-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (primeb n-v) p-v)) np-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (primeb n-v) matita-basics-bool.false) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (primeb n-v) auto-v) (matita-basics-bool.true-or-false (primeb n-v))

divides-fact : (n-v : matita-arithmetics-nat.nat) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) -> (X--1-v : matita-arithmetics-nat.le i-v n-v) -> divides i-v (matita-arithmetics-factorial.fact n-v)
divides-fact = λ (n-v : matita-arithmetics-nat.nat) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (ltOi-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le i-v X-x-365-v) -> divides i-v (matita-arithmetics-factorial.fact X-x-365-v)) (λ (leiO-v : matita-arithmetics-nat.le i-v matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> divides i-v (matita-arithmetics-factorial.fact matita-arithmetics-nat.O)) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) ltOi-v (matita-arithmetics-nat.le-to-not-lt i-v matita-arithmetics-nat.O leiO-v))) (λ (n0-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (X---v : matita-arithmetics-nat.le i-v n0-v) -> divides i-v (matita-arithmetics-factorial.fact n0-v)) -> λ (lei-v : matita-arithmetics-nat.le i-v (matita-arithmetics-nat.S n0-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S n0-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.S n0-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S n0-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.S n0-v))) -> divides i-v (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v))) (λ (ltiS-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S n0-v)) -> transitive-divides i-v (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v)) (Hind-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.pred (matita-arithmetics-nat.S i-v)) (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n0-v))) (matita-arithmetics-nat.le i-v n0-v) (matita-arithmetics-nat.monotonic-pred (matita-arithmetics-nat.S i-v) (matita-arithmetics-nat.S n0-v) ltiS-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n0-v))) (matita-arithmetics-nat.le i-v n0-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le i-v X---v) (matita-arithmetics-nat.le i-v n0-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le i-v n0-v)) (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n0-v)) (matita-arithmetics-nat.pred-Sn n0-v)) (matita-arithmetics-nat.pred (matita-arithmetics-nat.S i-v)) (matita-arithmetics-nat.pred-Sn i-v)))) (quotient (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v)) (matita-arithmetics-nat.S n0-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) n0-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n0-v (matita-arithmetics-factorial.fact n0-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact n0-v) X---v) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S n0-v) (matita-arithmetics-factorial.fact n0-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.times n0-v (matita-arithmetics-factorial.fact n0-v))) X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S n0-v) (matita-arithmetics-factorial.fact n0-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S n0-v) (matita-arithmetics-factorial.fact n0-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S n0-v) (matita-arithmetics-factorial.fact n0-v))) (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.times n0-v (matita-arithmetics-factorial.fact n0-v))) (matita-arithmetics-nat.times-Sn-m n0-v (matita-arithmetics-factorial.fact n0-v))) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v))) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) n0-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-factorial.fact n0-v) n0-v)) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v)) (matita-arithmetics-nat.times-n-Sm (matita-arithmetics-factorial.fact n0-v) n0-v)))) (λ (eqi-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.S n0-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n0-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S n0-v)) -> divides x-v (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v))) (matita-basics-logic.eq-coerc lzero (divides (matita-arithmetics-nat.times i-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v))) (divides (matita-arithmetics-nat.S n0-v) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v))) (divides-times i-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v (matita-arithmetics-factorial.fact n0-v) (divides-n-n i-v) (divides-SO-n (matita-arithmetics-factorial.fact n0-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides (matita-arithmetics-nat.times i-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v))) (divides X---v (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) (matita-arithmetics-nat.S n0-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides (matita-arithmetics-nat.times i-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v))) (divides i-v (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) X---v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides (matita-arithmetics-nat.times i-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v))) (divides i-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (divides X---v (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v))) (divides i-v (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (divides i-v (matita-arithmetics-nat.times i-v (matita-arithmetics-factorial.fact n0-v)))) (matita-arithmetics-nat.times i-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 i-v)) (matita-arithmetics-nat.times (matita-arithmetics-factorial.fact n0-v) i-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-factorial.fact n0-v) i-v)) (matita-arithmetics-nat.S n0-v) eqi-v) (matita-arithmetics-nat.S n0-v) eqi-v)) i-v eqi-v) (matita-arithmetics-nat.le-to-or-lt-eq i-v (matita-arithmetics-nat.S n0-v) lei-v)) n-v

mod-S-fact : (n-v : matita-arithmetics-nat.nat) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) -> (X--1-v : matita-arithmetics-nat.le i-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) i-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
mod-S-fact = λ (n-v : matita-arithmetics-nat.nat) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (lt1i-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) -> λ (lein-v : matita-arithmetics-nat.le i-v n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-factorial.fact n-v) i-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-factorial.fact n-v) i-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) i-v) (matita-arithmetics-nat.S x-1-v)) (matita-arithmetics-div-and-mod.mod-S (matita-arithmetics-factorial.fact n-v) i-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lt1i-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod (matita-arithmetics-factorial.fact n-v) i-v)) i-v) lt1i-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.S X---v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v)) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-factorial.fact n-v) i-v) (divides-to-mod-O i-v (matita-arithmetics-factorial.fact n-v) (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lt1i-v) (divides-fact n-v i-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lt1i-v) lein-v))))) matita-arithmetics-nat.O (divides-to-mod-O i-v (matita-arithmetics-factorial.fact n-v) (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lt1i-v) (divides-fact n-v i-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lt1i-v) lein-v))

not-divides-S-fact : (n-v : matita-arithmetics-nat.nat) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) -> (X--1-v : matita-arithmetics-nat.le i-v n-v) -> matita-basics-logic.Not lzero (divides i-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))
not-divides-S-fact = λ (n-v : matita-arithmetics-nat.nat) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (lt1i-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) i-v) -> λ (lein-v : matita-arithmetics-nat.le i-v n-v) -> matita-basics-logic.not-to-not lzero (divides i-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) i-v) matita-arithmetics-nat.O) (divides-to-mod-O i-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O i-v lt1i-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.eqb-false-to-not-eq (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-arithmetics-nat.eqb (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) i-v) (mod-S-fact n-v i-v lt1i-v lein-v))

smallest-factor-fact : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.lt n-v (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))
smallest-factor-fact = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.not-le-to-lt (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) n-v (matita-basics-logic.not-to-not lzero (matita-arithmetics-nat.le (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) n-v) (matita-basics-logic.Not lzero (divides (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))) (not-divides-S-fact n-v (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (lt-SO-smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) (matita-arithmetics-nat.le-S-S (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-factorial.fact n-v) (matita-arithmetics-factorial.le-1-fact n-v)))) (matita-basics-logic.nmk lzero (matita-basics-logic.Not lzero (divides (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))) (λ (X-clearme-v : matita-basics-logic.Not lzero (divides (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))) -> matita-basics-logic.match-Not lzero (divides (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) lzero (λ (X---v : matita-basics-logic.Not lzero (divides (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))) -> matita-basics-logic.False lzero) (λ (H-v : (X---v : divides (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v))) -> matita-basics-logic.False lzero) -> H-v (divides-smallest-factor-n (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)) (matita-arithmetics-nat.le-S-S matita-arithmetics-nat.O (matita-arithmetics-factorial.fact n-v) (matita-arithmetics-nat.le-O-n (matita-arithmetics-factorial.fact n-v))))) X-clearme-v)))

ex-prime : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt n-v m-v) (matita-arithmetics-nat.le m-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact n-v)))) (prime m-v))
ex-prime = λ (n-v : matita-arithmetics-nat.nat) -> λ (lein-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> matita-arithmetics-nat.match-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) lzero (λ (X---v : matita-arithmetics-nat.nat) -> λ (X-0-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) X---v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt X---v m-v) (matita-arithmetics-nat.le m-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact X---v)))) (prime m-v))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.le m-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (prime m-v)) (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (prime (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (smallest-factor-fact (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.le-n (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (primeb-true-to-prime (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.refl lzero matita-basics-bool.bool (primeb (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))))) (λ (m-v : matita-arithmetics-nat.nat) -> λ (leim-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) -> matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (m0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S m-v) m0-v) (matita-arithmetics-nat.le m0-v (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))))) (prime m0-v)) (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v)))) (matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S m-v) (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))))) (matita-arithmetics-nat.le (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v)))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))))) (prime (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))))) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S m-v) (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))))) (matita-arithmetics-nat.le (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v)))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v)))) (smallest-factor-fact (matita-arithmetics-nat.S m-v)) (le-smallest-factor-n (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))))) (prime-smallest-factor-n (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v))) (matita-arithmetics-nat.le-S-S (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-factorial.fact (matita-arithmetics-nat.S m-v)) (matita-arithmetics-factorial.le-1-fact (matita-arithmetics-nat.S m-v)))))) n-v lein-v


nth-prime : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-previous-prime : (X---v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-upper-bound : (X---v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat

let-upper-bound = λ (X---v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime X---v p-v))
let-previous-prime = λ (X---v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> nth-prime p-v
nth-prime matita-arithmetics-nat.O = (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))
nth-prime (matita-arithmetics-nat.S p) =  matita-arithmetics-minimization.min (let-upper-bound (matita-arithmetics-nat.S p) p) (matita-arithmetics-nat.S (let-previous-prime (matita-arithmetics-nat.S p) p)) primeb
{-
postulate nth-prime-body : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat

 matita-arithmetics-nat.match-nat lzero (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-minimization.min (let-upper-bound X---v p-v) (matita-arithmetics-nat.S (let-previous-prime X---v p-v)) primeb) X---v
-}

{-
-- postulate rewrite-rule-186 : (X---v : matita-arithmetics-nat.nat) -> nth-prime X---v ≡ matita-arithmetics-nat.filter-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) nth-prime-body X---v


-- postulate rewrite-rule-187 : (X---v : matita-arithmetics-nat.nat) -> nth-prime-body X---v ≡ matita-arithmetics-nat.match-nat lzero (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-minimization.min (let-upper-bound X---v p-v) (matita-arithmetics-nat.S (let-previous-prime X---v p-v)) primeb) X---v
-}

let-previous-prime1 : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-previous-prime1 = λ (n-v : matita-arithmetics-nat.nat) -> nth-prime n-v

let-upper-bound1 : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-upper-bound1 = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime1 n-v))

nth-primeS : (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime (matita-arithmetics-nat.S n-v)) (matita-arithmetics-minimization.min (let-upper-bound1 n-v) (matita-arithmetics-nat.S (let-previous-prime1 n-v)) primeb)
nth-primeS = λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat (nth-prime (matita-arithmetics-nat.S n-v))

example11 : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))
example11 = matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))

example12 : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))
example12 = matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))

example13 : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))))))
example13 = matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S (matita-arithmetics-nat.S matita-arithmetics-nat.O)))))))))))

let-previous-prime2 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-previous-prime2 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> nth-prime m-v

let-upper-bound2 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-upper-bound2 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime2 n-v m-v))

let-previous-prime3 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-previous-prime3 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (x-v : matita-arithmetics-nat.nat) -> nth-prime m-v

let-upper-bound3 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-upper-bound3 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime3 n-v m-v x-v))

let-previous-prime4 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-previous-prime4 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> nth-prime m-v

let-upper-bound4 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-upper-bound4 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime4 n-v m-v))

prime-nth-prime : (n-v : matita-arithmetics-nat.nat) -> prime (nth-prime n-v)
prime-nth-prime = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> prime (nth-prime X---v)) (primeb-true-to-prime (nth-prime matita-arithmetics-nat.O) (matita-basics-logic.refl lzero matita-basics-bool.bool (primeb (nth-prime matita-arithmetics-nat.O)))) (λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-minimization.min (let-upper-bound2 n-v m-v) (matita-arithmetics-nat.S (let-previous-prime2 n-v m-v)) primeb) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-minimization.min (let-upper-bound3 n-v m-v x-v) (matita-arithmetics-nat.S (let-previous-prime3 n-v m-v x-v)) primeb)) -> prime x-v) (primeb-true-to-prime (matita-arithmetics-minimization.min (let-upper-bound4 n-v m-v) (matita-arithmetics-nat.S (let-previous-prime4 n-v m-v)) primeb) (matita-arithmetics-minimization.f-min-true primeb (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) (matita-arithmetics-nat.S (nth-prime m-v)) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (nth-prime m-v)) i-v) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) (matita-arithmetics-nat.S (nth-prime m-v))))) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb i-v) matita-basics-bool.true)) (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (nth-prime m-v)) (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))))) (matita-arithmetics-nat.lt (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) (matita-arithmetics-nat.S (nth-prime m-v))))) (matita-basics-logic.eq lzero matita-basics-bool.bool (primeb (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))))) matita-basics-bool.true) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (nth-prime m-v)) (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))))) (matita-arithmetics-nat.lt (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) (matita-arithmetics-nat.S (nth-prime m-v)))) (smallest-factor-fact (nth-prime m-v)) (matita-arithmetics-nat.le-S-S (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact (nth-prime m-v)) (matita-arithmetics-nat.S (nth-prime m-v))) (matita-arithmetics-nat.transitive-le (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact (nth-prime m-v)) (matita-arithmetics-nat.S (nth-prime m-v))) (le-smallest-factor-n (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact (nth-prime m-v)) (nth-prime m-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact (nth-prime m-v)) (nth-prime m-v))) x-1-v) -> matita-arithmetics-nat.le (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) x-1-v) (matita-arithmetics-nat.le-plus-n-r (nth-prime m-v) (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-factorial.fact (nth-prime m-v)) (matita-arithmetics-nat.S (nth-prime m-v))) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-factorial.fact (nth-prime m-v)) (nth-prime m-v)))))) (prime-to-primeb-true (smallest-factor (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v)))) (prime-smallest-factor-n (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime m-v))) (matita-arithmetics-nat.le-S-S (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-factorial.fact (nth-prime m-v)) (matita-arithmetics-factorial.le-1-fact (nth-prime m-v))))))))) (nth-prime (matita-arithmetics-nat.S m-v)) (nth-primeS m-v)) n-v

increasing-nth-prime : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.lt (nth-prime n-v) (nth-prime (matita-arithmetics-nat.S n-v))
increasing-nth-prime = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-minimization.le-min-l primeb (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime n-v))) (matita-arithmetics-nat.S (nth-prime n-v))

lt-SO-nth-prime-n : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (nth-prime n-v)
lt-SO-nth-prime-n = λ (n-v : matita-arithmetics-nat.nat) -> prime-to-lt-SO (nth-prime n-v) (prime-nth-prime n-v)

lt-O-nth-prime-n : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (nth-prime n-v)
lt-O-nth-prime-n = λ (n-v : matita-arithmetics-nat.nat) -> prime-to-lt-O (nth-prime n-v) (prime-nth-prime n-v)

lt-n-nth-prime-n : (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.lt n-v (nth-prime n-v)
lt-n-nth-prime-n = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.lt X-x-365-v (nth-prime X-x-365-v)) (lt-O-nth-prime-n matita-arithmetics-nat.O) (λ (m-v : matita-arithmetics-nat.nat) -> λ (ltm-v : matita-arithmetics-nat.lt m-v (nth-prime m-v)) -> matita-arithmetics-nat.le-to-lt-to-lt (matita-arithmetics-nat.S m-v) (nth-prime m-v) (nth-prime (matita-arithmetics-nat.S m-v)) ltm-v (increasing-nth-prime m-v)) n-v

let-previous-prime5 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-arithmetics-nat.nat
let-previous-prime5 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> nth-prime n-v

let-upper-bound5 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-arithmetics-nat.nat
let-upper-bound5 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime5 n-v m-v ltml-v))

let-previous-prime6 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-previous-prime6 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> λ (x-v : matita-arithmetics-nat.nat) -> nth-prime n-v

let-upper-bound6 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
let-upper-bound6 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> λ (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime6 n-v m-v ltml-v x-v))

let-previous-prime7 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-arithmetics-nat.nat
let-previous-prime7 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> nth-prime n-v

let-upper-bound7 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-arithmetics-nat.nat
let-upper-bound7 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (let-previous-prime7 n-v m-v ltml-v))

lt-nth-prime-to-not-prime : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> (X--1-v : matita-arithmetics-nat.lt m-v (nth-prime (matita-arithmetics-nat.S n-v))) -> matita-basics-logic.Not lzero (prime m-v)
lt-nth-prime-to-not-prime = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltml-v : matita-arithmetics-nat.lt (nth-prime n-v) m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-minimization.min (let-upper-bound5 n-v m-v ltml-v) (matita-arithmetics-nat.S (let-previous-prime5 n-v m-v ltml-v)) primeb) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-minimization.min (let-upper-bound6 n-v m-v ltml-v x-v) (matita-arithmetics-nat.S (let-previous-prime6 n-v m-v ltml-v x-v)) primeb)) -> (X--1-v : matita-arithmetics-nat.lt m-v x-v) -> matita-basics-logic.Not lzero (prime m-v)) (λ (ltmr-v : matita-arithmetics-nat.lt m-v (matita-arithmetics-minimization.min (let-upper-bound7 n-v m-v ltml-v) (matita-arithmetics-nat.S (let-previous-prime7 n-v m-v ltml-v)) primeb)) -> primeb-false-to-not-prime m-v (matita-arithmetics-minimization.lt-min-to-false primeb (matita-arithmetics-nat.S (matita-arithmetics-factorial.fact (nth-prime n-v))) m-v (matita-arithmetics-nat.S (nth-prime n-v)) ltml-v ltmr-v)) (nth-prime (matita-arithmetics-nat.S n-v)) (nth-primeS n-v)

prime-to-nth-prime : (p-v : matita-arithmetics-nat.nat) -> (X---v : prime p-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime i-v) p-v)
prime-to-nth-prime = λ (p-v : matita-arithmetics-nat.nat) -> λ (primep-v : prime p-v) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (nth-prime i-v) p-v) (matita-arithmetics-nat.lt p-v (nth-prime (matita-arithmetics-nat.S i-v)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (nth-prime m-v) p-v) (matita-arithmetics-nat.lt p-v (nth-prime (matita-arithmetics-nat.S m-v))))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime i-v) p-v)) (λ (n-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (nth-prime n-v) p-v) (matita-arithmetics-nat.lt p-v (nth-prime (matita-arithmetics-nat.S n-v)))) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.le (nth-prime n-v) p-v) (matita-arithmetics-nat.lt p-v (nth-prime (matita-arithmetics-nat.S n-v))) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.le (nth-prime n-v) p-v) (matita-arithmetics-nat.lt p-v (nth-prime (matita-arithmetics-nat.S n-v)))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime i-v) p-v)) (λ (lepl-v : matita-arithmetics-nat.le (nth-prime n-v) p-v) -> λ (ltpr-v : matita-arithmetics-nat.lt p-v (nth-prime (matita-arithmetics-nat.S n-v))) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt (nth-prime n-v) p-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime n-v) p-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt (nth-prime n-v) p-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime n-v) p-v)) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime i-v) p-v)) (λ (ltpl-v : matita-arithmetics-nat.lt (nth-prime n-v) p-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime i-v) p-v)) (matita-basics-logic.absurd lzero (prime p-v) primep-v (lt-nth-prime-to-not-prime n-v p-v ltpl-v ltpr-v))) (λ (eqp-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime n-v) p-v) -> matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (nth-prime i-v) p-v) n-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat p-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v p-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat p-v) (nth-prime n-v) eqp-v)) (matita-arithmetics-nat.le-to-or-lt-eq (nth-prime n-v) p-v lepl-v)) X-clearme-v) (matita-arithmetics-nat.increasing-to-le2 nth-prime (λ (n-v : matita-arithmetics-nat.nat) -> increasing-nth-prime n-v) p-v (prime-to-lt-SO p-v primep-v))


