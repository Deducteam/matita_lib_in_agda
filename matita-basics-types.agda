
open import Agda.Primitive

import matita-basics-logic

data void : Set (lzero) where

match-void : (return-sort-v : Level) -> (return-type-v : (z-v : void) -> Set return-sort-v) -> (z-v : void) -> return-type-v z-v
match-void _ _ ()

void-ind : (l0-v : Level) -> (Q--v : (X-x-482-v : void) -> Set l0-v) -> (x-482-v : void) -> Q--v x-482-v
void-ind    _ _ ()

void-rect-Type4 : (l0-v : Level) -> (Q--v : (X-x-483-v : void) -> Set l0-v) -> (x-483-v : void) -> Q--v x-483-v
void-rect-Type4 _ _ ()

void-rect-Type5 : (l0-v : Level) -> (Q--v : (X-x-484-v : void) -> Set l0-v) -> (x-484-v : void) -> Q--v x-484-v
void-rect-Type5 _ _ ()

void-rect-Type3 : (l0-v : Level) -> (Q--v : (X-x-485-v : void) -> Set l0-v) -> (x-485-v : void) -> Q--v x-485-v
void-rect-Type3 _ _ ()

void-rect-Type2 : (l0-v : Level) -> (Q--v : (X-x-486-v : void) -> Set l0-v) -> (x-486-v : void) -> Q--v x-486-v
void-rect-Type2 _ _ ()

void-rect-Type1 : (l0-v : Level) -> (Q--v : (X-x-487-v : void) -> Set l0-v) -> (x-487-v : void) -> Q--v x-487-v
void-rect-Type1 _ _ ()

void-rect-Type0 : (l0-v : Level) -> (Q--v : (X-x-488-v : void) -> Set l0-v) -> (x-488-v : void) -> Q--v x-488-v
void-rect-Type0 _ _ ()

data unit : Set (lzero) where
  it : unit

match-unit : (return-sort-v : Level) -> (return-type-v : (z-v : unit) -> Set return-sort-v) -> (case-it-v : return-type-v it) -> (z-v : unit) -> return-type-v z-v
match-unit _ _ caseit it = caseit

unit-ind : (l2-v : Level) -> (Q--v : (X-x-495-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-495-v : unit) -> Q--v x-495-v
unit-ind _ _ caseit it = caseit

unit-rect-Type4 : (l2-v : Level) -> (Q--v : (X-x-497-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-497-v : unit) -> Q--v x-497-v
unit-rect-Type4 _ _ caseit it = caseit

unit-rect-Type5 : (l2-v : Level) -> (Q--v : (X-x-497-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-497-v : unit) -> Q--v x-497-v
unit-rect-Type5 _ _ caseit it = caseit

unit-rect-Type3 : (l2-v : Level) -> (Q--v : (X-x-497-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-497-v : unit) -> Q--v x-497-v
unit-rect-Type3 _ _ caseit it = caseit

unit-rect-Type2 : (l2-v : Level) -> (Q--v : (X-x-497-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-497-v : unit) -> Q--v x-497-v
unit-rect-Type2 _ _ caseit it = caseit

unit-rect-Type1 : (l2-v : Level) -> (Q--v : (X-x-497-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-497-v : unit) -> Q--v x-497-v
unit-rect-Type1 _ _ caseit it = caseit

unit-rect-Type0 : (l2-v : Level) -> (Q--v : (X-x-497-v : unit) -> Set l2-v) -> (X-H-it-v : Q--v it) -> (x-497-v : unit) -> Q--v x-497-v
unit-rect-Type0 _ _ caseit it = caseit


unit-inv-ind : (l11-v : Level) -> (Hterm-v : unit) -> (P-v : (X-z906-v : unit) -> Set l11-v) -> (X-H1-v : (X-z907-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> P-v Hterm-v
unit-inv-ind = λ (l11-v : Level) -> λ (Hterm-v : unit) -> λ (P-v : (X-z906-v : unit) -> Set l11-v) -> λ (H1-v : (X-z907-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> unit-ind l11-v (λ (X-x-495-v : unit) -> (X-z907-v : matita-basics-logic.eq lzero unit Hterm-v X-x-495-v) -> P-v X-x-495-v) H1-v Hterm-v (matita-basics-logic.refl lzero unit Hterm-v)

unit-inv-rect-Type4 : (l11-v : Level) -> (Hterm-v : unit) -> (P-v : (X-z912-v : unit) -> Set l11-v) -> (X-H1-v : (X-z913-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> P-v Hterm-v
unit-inv-rect-Type4 = λ (l11-v : Level) -> λ (Hterm-v : unit) -> λ (P-v : (X-z912-v : unit) -> Set l11-v) -> λ (H1-v : (X-z913-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> unit-rect-Type4 l11-v (λ (X-x-497-v : unit) -> (X-z913-v : matita-basics-logic.eq lzero unit Hterm-v X-x-497-v) -> P-v X-x-497-v) H1-v Hterm-v (matita-basics-logic.refl lzero unit Hterm-v)

unit-inv-rect-Type3 : (l11-v : Level) -> (Hterm-v : unit) -> (P-v : (X-z918-v : unit) -> Set l11-v) -> (X-H1-v : (X-z919-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> P-v Hterm-v
unit-inv-rect-Type3 = λ (l11-v : Level) -> λ (Hterm-v : unit) -> λ (P-v : (X-z918-v : unit) -> Set l11-v) -> λ (H1-v : (X-z919-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> unit-rect-Type3 l11-v (λ (X-x-501-v : unit) -> (X-z919-v : matita-basics-logic.eq lzero unit Hterm-v X-x-501-v) -> P-v X-x-501-v) H1-v Hterm-v (matita-basics-logic.refl lzero unit Hterm-v)

unit-inv-rect-Type2 : (l11-v : Level) -> (Hterm-v : unit) -> (P-v : (X-z924-v : unit) -> Set l11-v) -> (X-H1-v : (X-z925-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> P-v Hterm-v
unit-inv-rect-Type2 = λ (l11-v : Level) -> λ (Hterm-v : unit) -> λ (P-v : (X-z924-v : unit) -> Set l11-v) -> λ (H1-v : (X-z925-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> unit-rect-Type2 l11-v (λ (X-x-503-v : unit) -> (X-z925-v : matita-basics-logic.eq lzero unit Hterm-v X-x-503-v) -> P-v X-x-503-v) H1-v Hterm-v (matita-basics-logic.refl lzero unit Hterm-v)

unit-inv-rect-Type1 : (l11-v : Level) -> (Hterm-v : unit) -> (P-v : (X-z930-v : unit) -> Set l11-v) -> (X-H1-v : (X-z931-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> P-v Hterm-v
unit-inv-rect-Type1 = λ (l11-v : Level) -> λ (Hterm-v : unit) -> λ (P-v : (X-z930-v : unit) -> Set l11-v) -> λ (H1-v : (X-z931-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> unit-rect-Type1 l11-v (λ (X-x-505-v : unit) -> (X-z931-v : matita-basics-logic.eq lzero unit Hterm-v X-x-505-v) -> P-v X-x-505-v) H1-v Hterm-v (matita-basics-logic.refl lzero unit Hterm-v)

unit-inv-rect-Type0 : (l11-v : Level) -> (Hterm-v : unit) -> (P-v : (X-z936-v : unit) -> Set l11-v) -> (X-H1-v : (X-z937-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> P-v Hterm-v
unit-inv-rect-Type0 = λ (l11-v : Level) -> λ (Hterm-v : unit) -> λ (P-v : (X-z936-v : unit) -> Set l11-v) -> λ (H1-v : (X-z937-v : matita-basics-logic.eq lzero unit Hterm-v it) -> P-v it) -> unit-rect-Type0 l11-v (λ (X-x-507-v : unit) -> (X-z937-v : matita-basics-logic.eq lzero unit Hterm-v X-x-507-v) -> P-v X-x-507-v) H1-v Hterm-v (matita-basics-logic.refl lzero unit Hterm-v)

unit-discr : (l48-v : Level) -> (x-v : unit) -> (y-v : unit) -> (X-e-v : matita-basics-logic.eq lzero unit x-v y-v) -> match-unit ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l48-v))) (λ (X---v : unit) -> Set ((lsuc lzero) ⊔ (lsuc l48-v))) (match-unit ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l48-v))) (λ (X---v : unit) -> Set ((lsuc lzero) ⊔ (lsuc l48-v))) ((P-v : Set l48-v) -> (X-z31-v : P-v) -> P-v) y-v) x-v
unit-discr = λ (l48-v : Level) -> λ (x-v : unit) -> λ (y-v : unit) -> λ (Deq-v : matita-basics-logic.eq lzero unit x-v y-v) -> matita-basics-logic.eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l48-v)) unit x-v (λ (x-13-v : unit) -> λ (X-x-14-v : matita-basics-logic.eq lzero unit x-v x-13-v) -> match-unit ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l48-v))) (λ (X---v : unit) -> Set ((lsuc lzero) ⊔ (lsuc l48-v))) (match-unit ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l48-v))) (λ (X---v : unit) -> Set ((lsuc lzero) ⊔ (lsuc l48-v))) ((P-v : Set l48-v) -> (X-z31-v : P-v) -> P-v) x-13-v) x-v) (match-unit ((lsuc lzero) ⊔ (lsuc l48-v)) (λ (X---v : unit) -> match-unit ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l48-v))) (λ (X-0-v : unit) -> Set ((lsuc lzero) ⊔ (lsuc l48-v))) (match-unit ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l48-v))) (λ (X-0-v : unit) -> Set ((lsuc lzero) ⊔ (lsuc l48-v))) ((P-v : Set l48-v) -> (X-z31-v : P-v) -> P-v) X---v) X---v) (λ (P-v : Set l48-v) -> λ (DH-v : P-v) -> DH-v) x-v) y-v Deq-v

data Sum (l2-v l1-v : Level) (A-v : Set l2-v) (B-v : Set l1-v) : Set (lzero ⊔ (l2-v ⊔ l1-v)) where
  inl' : (X---v : A-v) -> Sum l2-v l1-v A-v B-v
  inr' : (X---v : B-v) -> Sum l2-v l1-v A-v B-v

inl : (l3-v l0-v : Level) -> (A-v : Set l3-v) -> (B-v : Set l0-v) -> (X---v : A-v) -> Sum l3-v l0-v A-v B-v
inl _ _ _ _ = inl'

inr : (l1-v l3-v : Level) -> (A-v : Set l1-v) -> (B-v : Set l3-v) -> (X---v : B-v) -> Sum l1-v l3-v A-v B-v
inr _ _ _ _ = inr'


match-Sum : (l10-v l9-v : Level) -> (X-A-v : Set l10-v) -> (X-B-v : Set l9-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Sum l10-v l9-v X-A-v X-B-v) -> Set return-sort-v) -> (case-inl-v : (X---v : X-A-v) -> return-type-v (inl l10-v l9-v X-A-v X-B-v X---v)) -> (case-inr-v : (X---v : X-B-v) -> return-type-v (inr l10-v l9-v X-A-v X-B-v X---v)) -> (z-v : Sum l10-v l9-v X-A-v X-B-v) -> return-type-v z-v
match-Sum _ _ _ _ _ _ casel caser (inl' l) = casel l
match-Sum _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-ind : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-521-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-522-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-522-v)) -> (X-H-inr-v : (x-523-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-523-v)) -> (x-521-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-521-v
Sum-ind _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-ind _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-rect-Type4 : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-527-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-527-v)) -> (X-H-inr-v : (x-528-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-528-v)) -> (x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-526-v
Sum-rect-Type4 _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-rect-Type4 _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-rect-Type5 : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-527-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-527-v)) -> (X-H-inr-v : (x-528-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-528-v)) -> (x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-526-v
Sum-rect-Type5 _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-rect-Type5 _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-rect-Type3 : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-527-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-527-v)) -> (X-H-inr-v : (x-528-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-528-v)) -> (x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-526-v
Sum-rect-Type3 _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-rect-Type3 _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-rect-Type2 : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-527-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-527-v)) -> (X-H-inr-v : (x-528-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-528-v)) -> (x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-526-v
Sum-rect-Type2 _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-rect-Type2 _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-rect-Type1 : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-527-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-527-v)) -> (X-H-inr-v : (x-528-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-528-v)) -> (x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-526-v
Sum-rect-Type1 _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-rect-Type1 _ _ _ _ _ _ casel caser (inr' r) = caser r

Sum-rect-Type0 : (l14-v l13-v l10-v : Level) -> (X-A-v : Set l14-v) -> (X-B-v : Set l13-v) -> (Q--v : (X-x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Set l10-v) -> (X-H-inl-v : (x-527-v : X-A-v) -> Q--v (inl l14-v l13-v X-A-v X-B-v x-527-v)) -> (X-H-inr-v : (x-528-v : X-B-v) -> Q--v (inr l14-v l13-v X-A-v X-B-v x-528-v)) -> (x-526-v : Sum l14-v l13-v X-A-v X-B-v) -> Q--v x-526-v
Sum-rect-Type0 _ _ _ _ _ _ casel caser (inl' l) = casel l
Sum-rect-Type0 _ _ _ _ _ _ casel caser (inr' r) = caser r


Sum-inv-ind : (l46-v l45-v l38-v : Level) -> (x1-v : Set l46-v) -> (x2-v : Set l45-v) -> (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> (P-v : (X-z972-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> (X-H1-v : (x-522-v : x1-v) -> (X-z973-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-522-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-522-v)) -> (X-H2-v : (x-523-v : x2-v) -> (X-z973-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-523-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-523-v)) -> P-v Hterm-v
Sum-inv-ind = λ (l46-v l45-v l38-v : Level) -> λ (x1-v : Set l46-v) -> λ (x2-v : Set l45-v) -> λ (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> λ (P-v : (X-z972-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> λ (H1-v : (x-522-v : x1-v) -> (X-z973-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-522-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-522-v)) -> λ (H2-v : (x-523-v : x2-v) -> (X-z973-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-523-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-523-v)) -> Sum-ind l46-v l45-v ((l46-v ⊔ l45-v) ⊔ l38-v) x1-v x2-v (λ (X-x-521-v : Sum l46-v l45-v x1-v x2-v) -> (X-z973-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v X-x-521-v) -> P-v X-x-521-v) H1-v H2-v Hterm-v (matita-basics-logic.refl (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v)

Sum-inv-rect-Type4 : (l46-v l45-v l38-v : Level) -> (x1-v : Set l46-v) -> (x2-v : Set l45-v) -> (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> (P-v : (X-z978-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> (X-H1-v : (x-527-v : x1-v) -> (X-z979-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-527-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-527-v)) -> (X-H2-v : (x-528-v : x2-v) -> (X-z979-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-528-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-528-v)) -> P-v Hterm-v
Sum-inv-rect-Type4 = λ (l46-v l45-v l38-v : Level) -> λ (x1-v : Set l46-v) -> λ (x2-v : Set l45-v) -> λ (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> λ (P-v : (X-z978-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> λ (H1-v : (x-527-v : x1-v) -> (X-z979-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-527-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-527-v)) -> λ (H2-v : (x-528-v : x2-v) -> (X-z979-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-528-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-528-v)) -> Sum-rect-Type4 l46-v l45-v ((l46-v ⊔ l45-v) ⊔ l38-v) x1-v x2-v (λ (X-x-526-v : Sum l46-v l45-v x1-v x2-v) -> (X-z979-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v X-x-526-v) -> P-v X-x-526-v) H1-v H2-v Hterm-v (matita-basics-logic.refl (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v)

Sum-inv-rect-Type3 : (l46-v l45-v l38-v : Level) -> (x1-v : Set l46-v) -> (x2-v : Set l45-v) -> (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> (P-v : (X-z984-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> (X-H1-v : (x-537-v : x1-v) -> (X-z985-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-537-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-537-v)) -> (X-H2-v : (x-538-v : x2-v) -> (X-z985-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-538-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-538-v)) -> P-v Hterm-v
Sum-inv-rect-Type3 = λ (l46-v l45-v l38-v : Level) -> λ (x1-v : Set l46-v) -> λ (x2-v : Set l45-v) -> λ (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> λ (P-v : (X-z984-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> λ (H1-v : (x-537-v : x1-v) -> (X-z985-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-537-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-537-v)) -> λ (H2-v : (x-538-v : x2-v) -> (X-z985-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-538-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-538-v)) -> Sum-rect-Type3 l46-v l45-v ((l46-v ⊔ l45-v) ⊔ l38-v) x1-v x2-v (λ (X-x-536-v : Sum l46-v l45-v x1-v x2-v) -> (X-z985-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v X-x-536-v) -> P-v X-x-536-v) H1-v H2-v Hterm-v (matita-basics-logic.refl (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v)

Sum-inv-rect-Type2 : (l46-v l45-v l38-v : Level) -> (x1-v : Set l46-v) -> (x2-v : Set l45-v) -> (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> (P-v : (X-z990-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> (X-H1-v : (x-542-v : x1-v) -> (X-z991-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-542-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-542-v)) -> (X-H2-v : (x-543-v : x2-v) -> (X-z991-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-543-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-543-v)) -> P-v Hterm-v
Sum-inv-rect-Type2 = λ (l46-v l45-v l38-v : Level) -> λ (x1-v : Set l46-v) -> λ (x2-v : Set l45-v) -> λ (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> λ (P-v : (X-z990-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> λ (H1-v : (x-542-v : x1-v) -> (X-z991-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-542-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-542-v)) -> λ (H2-v : (x-543-v : x2-v) -> (X-z991-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-543-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-543-v)) -> Sum-rect-Type2 l46-v l45-v ((l46-v ⊔ l45-v) ⊔ l38-v) x1-v x2-v (λ (X-x-541-v : Sum l46-v l45-v x1-v x2-v) -> (X-z991-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v X-x-541-v) -> P-v X-x-541-v) H1-v H2-v Hterm-v (matita-basics-logic.refl (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v)

Sum-inv-rect-Type1 : (l46-v l45-v l38-v : Level) -> (x1-v : Set l46-v) -> (x2-v : Set l45-v) -> (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> (P-v : (X-z996-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> (X-H1-v : (x-547-v : x1-v) -> (X-z997-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-547-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-547-v)) -> (X-H2-v : (x-548-v : x2-v) -> (X-z997-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-548-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-548-v)) -> P-v Hterm-v
Sum-inv-rect-Type1 = λ (l46-v l45-v l38-v : Level) -> λ (x1-v : Set l46-v) -> λ (x2-v : Set l45-v) -> λ (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> λ (P-v : (X-z996-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> λ (H1-v : (x-547-v : x1-v) -> (X-z997-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-547-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-547-v)) -> λ (H2-v : (x-548-v : x2-v) -> (X-z997-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-548-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-548-v)) -> Sum-rect-Type1 l46-v l45-v ((l46-v ⊔ l45-v) ⊔ l38-v) x1-v x2-v (λ (X-x-546-v : Sum l46-v l45-v x1-v x2-v) -> (X-z997-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v X-x-546-v) -> P-v X-x-546-v) H1-v H2-v Hterm-v (matita-basics-logic.refl (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v)

Sum-inv-rect-Type0 : (l46-v l45-v l38-v : Level) -> (x1-v : Set l46-v) -> (x2-v : Set l45-v) -> (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> (P-v : (X-z1002-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> (X-H1-v : (x-552-v : x1-v) -> (X-z1003-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-552-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-552-v)) -> (X-H2-v : (x-553-v : x2-v) -> (X-z1003-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-553-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-553-v)) -> P-v Hterm-v
Sum-inv-rect-Type0 = λ (l46-v l45-v l38-v : Level) -> λ (x1-v : Set l46-v) -> λ (x2-v : Set l45-v) -> λ (Hterm-v : Sum l46-v l45-v x1-v x2-v) -> λ (P-v : (X-z1002-v : Sum l46-v l45-v x1-v x2-v) -> Set l38-v) -> λ (H1-v : (x-552-v : x1-v) -> (X-z1003-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inl l46-v l45-v x1-v x2-v x-552-v)) -> P-v (inl l46-v l45-v x1-v x2-v x-552-v)) -> λ (H2-v : (x-553-v : x2-v) -> (X-z1003-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v (inr l46-v l45-v x1-v x2-v x-553-v)) -> P-v (inr l46-v l45-v x1-v x2-v x-553-v)) -> Sum-rect-Type0 l46-v l45-v ((l46-v ⊔ l45-v) ⊔ l38-v) x1-v x2-v (λ (X-x-551-v : Sum l46-v l45-v x1-v x2-v) -> (X-z1003-v : matita-basics-logic.eq (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v X-x-551-v) -> P-v X-x-551-v) H1-v H2-v Hterm-v (matita-basics-logic.refl (l46-v ⊔ l45-v) (Sum l46-v l45-v x1-v x2-v) Hterm-v)

Sum-discr : (l246-v l1l186-v : Level) -> (a1-v : Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) -> (a2-v : Set ((lsuc lzero) ⊔ (lsuc l1l186-v))) -> (x-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> (y-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> (X-e-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) (Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) x-v y-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (t0-v : a1-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (u0-v : a1-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> (X-z33-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v t0-v) u0-v) -> P-v) -> P-v) (λ (u0-v : a2-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> P-v) y-v) (λ (t0-v : a2-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (u0-v : a1-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> P-v) (λ (u0-v : a2-v) -> (P-v : Set l246-v) -> (X-z34-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v t0-v) u0-v) -> P-v) -> P-v) y-v) x-v
Sum-discr = λ (l246-v l1l186-v : Level) -> λ (a1-v : Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) -> λ (a2-v : Set ((lsuc lzero) ⊔ (lsuc l1l186-v))) -> λ (x-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> λ (y-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) (Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) (Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) x-v (λ (x-13-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) (Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) x-v x-13-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (t0-v : a1-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (u0-v : a1-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> (X-z33-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v t0-v) u0-v) -> P-v) -> P-v) (λ (u0-v : a2-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> P-v) x-13-v) (λ (t0-v : a2-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (u0-v : a1-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> P-v) (λ (u0-v : a2-v) -> (P-v : Set l246-v) -> (X-z34-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v t0-v) u0-v) -> P-v) -> P-v) x-13-v) x-v) (match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) (λ (X---v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X-0-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (t0-v : a1-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X-0-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (u0-v : a1-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> (X-z33-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v t0-v) u0-v) -> P-v) -> P-v) (λ (u0-v : a2-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> P-v) X---v) (λ (t0-v : a2-v) -> match-Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l246-v)) ⊔ (lsuc (lsuc l1l186-v)))) (λ (X-0-v : Sum ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) ((lsuc lzero) ⊔ (lsuc l1l186-v)) a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v)))) (λ (u0-v : a1-v) -> (P-v : Set (l246-v ⊔ l1l186-v)) -> P-v) (λ (u0-v : a2-v) -> (P-v : Set l246-v) -> (X-z34-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v t0-v) u0-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : a1-v) -> λ (P-v : Set (lzero ⊔ (l246-v ⊔ l1l186-v))) -> λ (DH-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v a0-v) a0-v) -> P-v) -> DH-v (matita-basics-logic.refl ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ ((lsuc l246-v) ⊔ (lsuc l1l186-v))) a1-v a0-v))) (λ (a0-v : a2-v) -> λ (P-v : Set l246-v) -> λ (DH-v : (X-e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v a0-v) a0-v) -> P-v) -> DH-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l1l186-v)) a2-v a0-v))) x-v) y-v Deq-v

data option (l1-v : Level) (X-A-v : Set l1-v) : Set l1-v where
  None' : option l1-v X-A-v
  Some' : X-A-v -> option l1-v X-A-v

None : (l1-v : Level) -> (A-v : Set l1-v) -> option l1-v A-v
None _ _ = None'

Some : (l2-v : Level) -> (A-v : Set l2-v) -> (X---v : A-v) -> option l2-v A-v
Some _ _ = Some'

match-option : (l6-v : Level) -> (X-A-v : Set l6-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : option l6-v X-A-v) -> Set return-sort-v) -> (case-None-v : return-type-v (None l6-v X-A-v)) -> (case-Some-v : (X---v : X-A-v) -> return-type-v (Some l6-v X-A-v X---v)) -> (z-v : option l6-v X-A-v) -> return-type-v z-v
match-option _ _ _ _ casenone casesome None' = casenone
match-option _ _ _ _ casenone casesome (Some' x) = casesome x

option-ind : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-586-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-587-v : X-A-v) -> Q--v (Some l10-v X-A-v x-587-v)) -> (x-586-v : option l10-v X-A-v) -> Q--v x-586-v
option-ind _ _ _ _ casenone casesome None' = casenone
option-ind _ _ _ _ casenone casesome (Some' x) = casesome x

option-rect-Type4 : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-590-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-591-v : X-A-v) -> Q--v (Some l10-v X-A-v x-591-v)) -> (x-590-v : option l10-v X-A-v) -> Q--v x-590-v
option-rect-Type4 _ _ _ _ casenone casesome None' = casenone
option-rect-Type4 _ _ _ _ casenone casesome (Some' x) = casesome x

option-rect-Type5 : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-590-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-591-v : X-A-v) -> Q--v (Some l10-v X-A-v x-591-v)) -> (x-590-v : option l10-v X-A-v) -> Q--v x-590-v
option-rect-Type5 _ _ _ _ casenone casesome None' = casenone
option-rect-Type5 _ _ _ _ casenone casesome (Some' x) = casesome x

option-rect-Type3 : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-590-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-591-v : X-A-v) -> Q--v (Some l10-v X-A-v x-591-v)) -> (x-590-v : option l10-v X-A-v) -> Q--v x-590-v
option-rect-Type3 _ _ _ _ casenone casesome None' = casenone
option-rect-Type3 _ _ _ _ casenone casesome (Some' x) = casesome x

option-rect-Type2 : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-590-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-591-v : X-A-v) -> Q--v (Some l10-v X-A-v x-591-v)) -> (x-590-v : option l10-v X-A-v) -> Q--v x-590-v
option-rect-Type2 _ _ _ _ casenone casesome None' = casenone
option-rect-Type2 _ _ _ _ casenone casesome (Some' x) = casesome x

option-rect-Type1 : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-590-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-591-v : X-A-v) -> Q--v (Some l10-v X-A-v x-591-v)) -> (x-590-v : option l10-v X-A-v) -> Q--v x-590-v
option-rect-Type1 _ _ _ _ casenone casesome None' = casenone
option-rect-Type1 _ _ _ _ casenone casesome (Some' x) = casesome x

option-rect-Type0 : (l10-v l7-v : Level) -> (X-A-v : Set l10-v) -> (Q--v : (X-x-590-v : option l10-v X-A-v) -> Set l7-v) -> (X-H-None-v : Q--v (None l10-v X-A-v)) -> (X-H-Some-v : (x-591-v : X-A-v) -> Q--v (Some l10-v X-A-v x-591-v)) -> (x-590-v : option l10-v X-A-v) -> Q--v x-590-v
option-rect-Type0 _ _ _ _ casenone casesome None' = casenone
option-rect-Type0 _ _ _ _ casenone casesome (Some' x) = casesome x


option-inv-ind : (l31-v l26-v : Level) -> (x1-v : Set l31-v) -> (Hterm-v : option l31-v x1-v) -> (P-v : (X-z1038-v : option l31-v x1-v) -> Set l26-v) -> (X-H1-v : (X-z1039-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> (X-H2-v : (x-587-v : x1-v) -> (X-z1039-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-587-v)) -> P-v (Some l31-v x1-v x-587-v)) -> P-v Hterm-v
option-inv-ind = λ (l31-v l26-v : Level) -> λ (x1-v : Set l31-v) -> λ (Hterm-v : option l31-v x1-v) -> λ (P-v : (X-z1038-v : option l31-v x1-v) -> Set l26-v) -> λ (H1-v : (X-z1039-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> λ (H2-v : (x-587-v : x1-v) -> (X-z1039-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-587-v)) -> P-v (Some l31-v x1-v x-587-v)) -> option-ind l31-v (l31-v ⊔ l26-v) x1-v (λ (X-x-586-v : option l31-v x1-v) -> (X-z1039-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v X-x-586-v) -> P-v X-x-586-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l31-v (option l31-v x1-v) Hterm-v)

option-inv-rect-Type4 : (l31-v l26-v : Level) -> (x1-v : Set l31-v) -> (Hterm-v : option l31-v x1-v) -> (P-v : (X-z1044-v : option l31-v x1-v) -> Set l26-v) -> (X-H1-v : (X-z1045-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> (X-H2-v : (x-591-v : x1-v) -> (X-z1045-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-591-v)) -> P-v (Some l31-v x1-v x-591-v)) -> P-v Hterm-v
option-inv-rect-Type4 = λ (l31-v l26-v : Level) -> λ (x1-v : Set l31-v) -> λ (Hterm-v : option l31-v x1-v) -> λ (P-v : (X-z1044-v : option l31-v x1-v) -> Set l26-v) -> λ (H1-v : (X-z1045-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> λ (H2-v : (x-591-v : x1-v) -> (X-z1045-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-591-v)) -> P-v (Some l31-v x1-v x-591-v)) -> option-rect-Type4 l31-v (l31-v ⊔ l26-v) x1-v (λ (X-x-590-v : option l31-v x1-v) -> (X-z1045-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v X-x-590-v) -> P-v X-x-590-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l31-v (option l31-v x1-v) Hterm-v)

option-inv-rect-Type3 : (l31-v l26-v : Level) -> (x1-v : Set l31-v) -> (Hterm-v : option l31-v x1-v) -> (P-v : (X-z1050-v : option l31-v x1-v) -> Set l26-v) -> (X-H1-v : (X-z1051-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> (X-H2-v : (x-599-v : x1-v) -> (X-z1051-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-599-v)) -> P-v (Some l31-v x1-v x-599-v)) -> P-v Hterm-v
option-inv-rect-Type3 = λ (l31-v l26-v : Level) -> λ (x1-v : Set l31-v) -> λ (Hterm-v : option l31-v x1-v) -> λ (P-v : (X-z1050-v : option l31-v x1-v) -> Set l26-v) -> λ (H1-v : (X-z1051-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> λ (H2-v : (x-599-v : x1-v) -> (X-z1051-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-599-v)) -> P-v (Some l31-v x1-v x-599-v)) -> option-rect-Type3 l31-v (l31-v ⊔ l26-v) x1-v (λ (X-x-598-v : option l31-v x1-v) -> (X-z1051-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v X-x-598-v) -> P-v X-x-598-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l31-v (option l31-v x1-v) Hterm-v)

option-inv-rect-Type2 : (l31-v l26-v : Level) -> (x1-v : Set l31-v) -> (Hterm-v : option l31-v x1-v) -> (P-v : (X-z1056-v : option l31-v x1-v) -> Set l26-v) -> (X-H1-v : (X-z1057-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> (X-H2-v : (x-603-v : x1-v) -> (X-z1057-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-603-v)) -> P-v (Some l31-v x1-v x-603-v)) -> P-v Hterm-v
option-inv-rect-Type2 = λ (l31-v l26-v : Level) -> λ (x1-v : Set l31-v) -> λ (Hterm-v : option l31-v x1-v) -> λ (P-v : (X-z1056-v : option l31-v x1-v) -> Set l26-v) -> λ (H1-v : (X-z1057-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> λ (H2-v : (x-603-v : x1-v) -> (X-z1057-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-603-v)) -> P-v (Some l31-v x1-v x-603-v)) -> option-rect-Type2 l31-v (l31-v ⊔ l26-v) x1-v (λ (X-x-602-v : option l31-v x1-v) -> (X-z1057-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v X-x-602-v) -> P-v X-x-602-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l31-v (option l31-v x1-v) Hterm-v)

option-inv-rect-Type1 : (l31-v l26-v : Level) -> (x1-v : Set l31-v) -> (Hterm-v : option l31-v x1-v) -> (P-v : (X-z1062-v : option l31-v x1-v) -> Set l26-v) -> (X-H1-v : (X-z1063-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> (X-H2-v : (x-607-v : x1-v) -> (X-z1063-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-607-v)) -> P-v (Some l31-v x1-v x-607-v)) -> P-v Hterm-v
option-inv-rect-Type1 = λ (l31-v l26-v : Level) -> λ (x1-v : Set l31-v) -> λ (Hterm-v : option l31-v x1-v) -> λ (P-v : (X-z1062-v : option l31-v x1-v) -> Set l26-v) -> λ (H1-v : (X-z1063-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> λ (H2-v : (x-607-v : x1-v) -> (X-z1063-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-607-v)) -> P-v (Some l31-v x1-v x-607-v)) -> option-rect-Type1 l31-v (l31-v ⊔ l26-v) x1-v (λ (X-x-606-v : option l31-v x1-v) -> (X-z1063-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v X-x-606-v) -> P-v X-x-606-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l31-v (option l31-v x1-v) Hterm-v)

option-inv-rect-Type0 : (l31-v l26-v : Level) -> (x1-v : Set l31-v) -> (Hterm-v : option l31-v x1-v) -> (P-v : (X-z1068-v : option l31-v x1-v) -> Set l26-v) -> (X-H1-v : (X-z1069-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> (X-H2-v : (x-611-v : x1-v) -> (X-z1069-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-611-v)) -> P-v (Some l31-v x1-v x-611-v)) -> P-v Hterm-v
option-inv-rect-Type0 = λ (l31-v l26-v : Level) -> λ (x1-v : Set l31-v) -> λ (Hterm-v : option l31-v x1-v) -> λ (P-v : (X-z1068-v : option l31-v x1-v) -> Set l26-v) -> λ (H1-v : (X-z1069-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (None l31-v x1-v)) -> P-v (None l31-v x1-v)) -> λ (H2-v : (x-611-v : x1-v) -> (X-z1069-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v (Some l31-v x1-v x-611-v)) -> P-v (Some l31-v x1-v x-611-v)) -> option-rect-Type0 l31-v (l31-v ⊔ l26-v) x1-v (λ (X-x-610-v : option l31-v x1-v) -> (X-z1069-v : matita-basics-logic.eq l31-v (option l31-v x1-v) Hterm-v X-x-610-v) -> P-v X-x-610-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l31-v (option l31-v x1-v) Hterm-v)

option-discr : (l174-v : Level) -> (a1-v : Set (lzero)) -> (x-v : option lzero a1-v) -> (y-v : option lzero a1-v) -> (X-e-v : matita-basics-logic.eq lzero (option lzero a1-v) x-v y-v) -> match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X---v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) (match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X---v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) ((P-v : Set l174-v) -> (X-z37-v : P-v) -> P-v) (λ (u0-v : a1-v) -> (P-v : Set l174-v) -> P-v) y-v) (λ (t0-v : a1-v) -> match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X---v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) ((P-v : Set l174-v) -> P-v) (λ (u0-v : a1-v) -> (P-v : Set l174-v) -> (X-z38-v : (X-e0-v : matita-basics-logic.eq lzero a1-v (matita-basics-logic.R0 lzero a1-v t0-v) u0-v) -> P-v) -> P-v) y-v) x-v
option-discr = λ (l174-v : Level) -> λ (a1-v : Set (lzero)) -> λ (x-v : option lzero a1-v) -> λ (y-v : option lzero a1-v) -> λ (Deq-v : matita-basics-logic.eq lzero (option lzero a1-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l174-v)) (option lzero a1-v) x-v (λ (x-13-v : option lzero a1-v) -> λ (X-x-14-v : matita-basics-logic.eq lzero (option lzero a1-v) x-v x-13-v) -> match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X---v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) (match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X---v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) ((P-v : Set l174-v) -> (X-z37-v : P-v) -> P-v) (λ (u0-v : a1-v) -> (P-v : Set l174-v) -> P-v) x-13-v) (λ (t0-v : a1-v) -> match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X---v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) ((P-v : Set l174-v) -> P-v) (λ (u0-v : a1-v) -> (P-v : Set l174-v) -> (X-z38-v : (X-e0-v : matita-basics-logic.eq lzero a1-v (matita-basics-logic.R0 lzero a1-v t0-v) u0-v) -> P-v) -> P-v) x-13-v) x-v) (match-option lzero a1-v ((lsuc lzero) ⊔ (lsuc l174-v)) (λ (X---v : option lzero a1-v) -> match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X-0-v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) (match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X-0-v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) ((P-v : Set l174-v) -> (X-z37-v : P-v) -> P-v) (λ (u0-v : a1-v) -> (P-v : Set l174-v) -> P-v) X---v) (λ (t0-v : a1-v) -> match-option lzero a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l174-v))) (λ (X-0-v : option lzero a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l174-v))) ((P-v : Set l174-v) -> P-v) (λ (u0-v : a1-v) -> (P-v : Set l174-v) -> (X-z38-v : (X-e0-v : matita-basics-logic.eq lzero a1-v (matita-basics-logic.R0 lzero a1-v t0-v) u0-v) -> P-v) -> P-v) X---v) X---v) (λ (P-v : Set l174-v) -> λ (DH-v : P-v) -> DH-v) (λ (a0-v : a1-v) -> λ (P-v : Set l174-v) -> λ (DH-v : (X-e0-v : matita-basics-logic.eq lzero a1-v (matita-basics-logic.R0 lzero a1-v a0-v) a0-v) -> P-v) -> DH-v (matita-basics-logic.refl lzero a1-v (matita-basics-logic.R0 lzero a1-v a0-v))) x-v) y-v Deq-v

option-map : (l13-v l12-v : Level) -> (A-v : Set l13-v) -> (B-v : Set l12-v) -> (X---v : (X---v : A-v) -> B-v) -> (X--1-v : option l13-v A-v) -> option l12-v B-v
option-map = λ (l13-v l12-v : Level) -> λ (A-v : Set l13-v) -> λ (B-v : Set l12-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (o-v : option l13-v A-v) -> match-option l13-v A-v l12-v (λ (X---v : option l13-v A-v) -> option l12-v B-v) (None l12-v B-v) (λ (a-v : A-v) -> Some l12-v B-v (f-v a-v)) o-v

option-map-none : (l50-v : Level) -> (A-v : Set l50-v) -> (B-v : Set (lzero)) -> (f-v : (X---v : A-v) -> B-v) -> (x-v : option l50-v A-v) -> (X---v : matita-basics-logic.eq lzero (option lzero B-v) (option-map l50-v lzero A-v B-v f-v x-v) (None lzero B-v)) -> matita-basics-logic.eq l50-v (option l50-v A-v) x-v (None l50-v A-v)
option-map-none = λ (l50-v : Level) -> λ (A-v : Set l50-v) -> λ (B-v : Set (lzero)) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (X-clearme-v : option l50-v A-v) -> match-option l50-v A-v l50-v (λ (X---v : option l50-v A-v) -> (X--1-v : matita-basics-logic.eq lzero (option lzero B-v) (option-map l50-v lzero A-v B-v f-v X---v) (None lzero B-v)) -> matita-basics-logic.eq l50-v (option l50-v A-v) X---v (None l50-v A-v)) (λ (auto-v : matita-basics-logic.eq lzero (option lzero B-v) (option-map l50-v lzero A-v B-v f-v (None l50-v A-v)) (None lzero B-v)) -> matita-basics-logic.refl l50-v (option l50-v A-v) (None l50-v A-v)) (λ (a-v : A-v) -> λ (E-v : matita-basics-logic.eq lzero (option lzero B-v) (option-map l50-v lzero A-v B-v f-v (Some l50-v A-v a-v)) (None lzero B-v)) -> option-discr l50-v B-v (Some lzero B-v (f-v a-v)) (None lzero B-v) E-v (matita-basics-logic.eq l50-v (option l50-v A-v) (Some l50-v A-v a-v) (None l50-v A-v))) X-clearme-v

option-map-some : (l146-v : Level) -> (A-v : Set l146-v) -> (B-v : Set (lzero)) -> (f-v : (X---v : A-v) -> B-v) -> (x-v : option l146-v A-v) -> (v-v : B-v) -> (X---v : matita-basics-logic.eq lzero (option lzero B-v) (option-map l146-v lzero A-v B-v f-v x-v) (Some lzero B-v v-v)) -> matita-basics-logic.ex l146-v l146-v A-v (λ (y-v : A-v) -> matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) x-v (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) v-v))
option-map-some = λ (l146-v : Level) -> λ (A-v : Set l146-v) -> λ (B-v : Set (lzero)) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (X-clearme-v : option l146-v A-v) -> match-option l146-v A-v l146-v (λ (X---v : option l146-v A-v) -> (v-v : B-v) -> (X--1-v : matita-basics-logic.eq lzero (option lzero B-v) (option-map l146-v lzero A-v B-v f-v X---v) (Some lzero B-v v-v)) -> matita-basics-logic.ex l146-v l146-v A-v (λ (y-v : A-v) -> matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) X---v (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) v-v))) (λ (v-v : B-v) -> λ (E-v : matita-basics-logic.eq lzero (option lzero B-v) (None lzero B-v) (Some lzero B-v v-v)) -> option-discr l146-v B-v (None lzero B-v) (Some lzero B-v v-v) E-v (matita-basics-logic.ex l146-v l146-v A-v (λ (y-v : A-v) -> matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) (None l146-v A-v) (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) v-v)))) (λ (y-v : A-v) -> λ (v-v : B-v) -> λ (E-v : matita-basics-logic.eq lzero (option lzero B-v) (Some lzero B-v (f-v y-v)) (Some lzero B-v v-v)) -> matita-basics-logic.ex-intro l146-v l146-v A-v (λ (y0-v : A-v) -> matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) (Some l146-v A-v y-v) (Some l146-v A-v y0-v)) (matita-basics-logic.eq lzero B-v (f-v y0-v) v-v)) y-v (option-discr l146-v B-v (Some lzero B-v (f-v y-v)) (Some lzero B-v v-v) E-v (matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) (Some l146-v A-v y-v) (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) v-v)) (λ (e0-v : matita-basics-logic.eq lzero B-v (matita-basics-logic.R0 lzero B-v (f-v y-v)) v-v) -> matita-basics-logic.eq-ind lzero l146-v B-v (f-v y-v) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (f-v y-v) x-1-v) -> (X---v : matita-basics-logic.eq lzero (option lzero B-v) (Some lzero B-v (f-v y-v)) (Some lzero B-v x-1-v)) -> matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) (Some l146-v A-v y-v) (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) x-1-v)) (λ (E0-v : matita-basics-logic.eq lzero (option lzero B-v) (Some lzero B-v (f-v y-v)) (Some lzero B-v (f-v y-v))) -> matita-basics-logic.streicherK lzero l146-v (option lzero B-v) (Some lzero B-v (f-v y-v)) (λ (X---v : matita-basics-logic.eq lzero (option lzero B-v) (Some lzero B-v (f-v y-v)) (Some lzero B-v (f-v y-v))) -> matita-basics-logic.And l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) (Some l146-v A-v y-v) (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) (f-v y-v))) (matita-basics-logic.conj l146-v lzero (matita-basics-logic.eq l146-v (option l146-v A-v) (Some l146-v A-v y-v) (Some l146-v A-v y-v)) (matita-basics-logic.eq lzero B-v (f-v y-v) (f-v y-v)) (matita-basics-logic.refl l146-v (option l146-v A-v) (Some l146-v A-v y-v)) (matita-basics-logic.refl lzero B-v (f-v y-v))) E0-v) v-v e0-v E-v))) X-clearme-v

option-map-def : (l11-v l10-v : Level) -> (A-v : Set l11-v) -> (B-v : Set l10-v) -> (X---v : (X---v : A-v) -> B-v) -> (X--1-v : B-v) -> (X--2-v : option l11-v A-v) -> B-v
option-map-def = λ (l11-v l10-v : Level) -> λ (A-v : Set l11-v) -> λ (B-v : Set l10-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (d-v : B-v) -> λ (o-v : option l11-v A-v) -> match-option l11-v A-v l10-v (λ (X---v : option l11-v A-v) -> B-v) d-v (λ (a-v : A-v) -> f-v a-v) o-v

refute-none-by-refl : (l172-v l161-v l157-v l175-v : Level) -> (A-v : Set l172-v) -> (B-v : Set l161-v) -> (P-v : (X---v : A-v) -> B-v) -> (Q-v : (X---v : B-v) -> Set l157-v) -> (x-v : option l172-v A-v) -> (H-v : (X---v : matita-basics-logic.eq l172-v (option l172-v A-v) x-v (None l172-v A-v)) -> matita-basics-logic.False l175-v) -> (X---v : (v-v : A-v) -> (X---v : matita-basics-logic.eq l172-v (option l172-v A-v) x-v (Some l172-v A-v v-v)) -> Q-v (P-v v-v)) -> Q-v (match-option l172-v A-v (l172-v ⊔ l161-v) (λ (y-v : option l172-v A-v) -> (X--1-v : matita-basics-logic.eq l172-v (option l172-v A-v) x-v y-v) -> B-v) (λ (E-v : matita-basics-logic.eq l172-v (option l172-v A-v) x-v (None l172-v A-v)) -> matita-basics-logic.match-False l175-v l161-v (λ (X-0-v : matita-basics-logic.False l175-v) -> B-v) (H-v E-v)) (λ (v-v : A-v) -> λ (X-0-v : matita-basics-logic.eq l172-v (option l172-v A-v) x-v (Some l172-v A-v v-v)) -> P-v v-v) x-v (matita-basics-logic.refl l172-v (option l172-v A-v) x-v))
refute-none-by-refl = λ (l172-v l161-v l157-v l175-v : Level) -> λ (A-v : Set l172-v) -> λ (B-v : Set l161-v) -> λ (P-v : (X---v : A-v) -> B-v) -> λ (Q-v : (X---v : B-v) -> Set l157-v) -> λ (X-clearme-v : option l172-v A-v) -> match-option l172-v A-v ((l175-v ⊔ l172-v) ⊔ l157-v) (λ (X---v : option l172-v A-v) -> (H-v : (X--1-v : matita-basics-logic.eq l172-v (option l172-v A-v) X---v (None l172-v A-v)) -> matita-basics-logic.False l175-v) -> (X--1-v : (v-v : A-v) -> (X--1-v : matita-basics-logic.eq l172-v (option l172-v A-v) X---v (Some l172-v A-v v-v)) -> Q-v (P-v v-v)) -> Q-v (match-option l172-v A-v (l172-v ⊔ l161-v) (λ (y-v : option l172-v A-v) -> (X--2-v : matita-basics-logic.eq l172-v (option l172-v A-v) X---v y-v) -> B-v) (λ (E-v : matita-basics-logic.eq l172-v (option l172-v A-v) X---v (None l172-v A-v)) -> matita-basics-logic.match-False l175-v l161-v (λ (X-0-v : matita-basics-logic.False l175-v) -> B-v) (H-v E-v)) (λ (v-v : A-v) -> λ (X-0-v : matita-basics-logic.eq l172-v (option l172-v A-v) X---v (Some l172-v A-v v-v)) -> P-v v-v) X---v (matita-basics-logic.refl l172-v (option l172-v A-v) X---v))) (λ (H-v : (X---v : matita-basics-logic.eq l172-v (option l172-v A-v) (None l172-v A-v) (None l172-v A-v)) -> matita-basics-logic.False l175-v) -> matita-basics-logic.match-False l175-v (l172-v ⊔ l157-v) (λ (X---v : matita-basics-logic.False l175-v) -> (X--1-v : (v-v : A-v) -> (X--1-v : matita-basics-logic.eq l172-v (option l172-v A-v) (None l172-v A-v) (Some l172-v A-v v-v)) -> Q-v (P-v v-v)) -> Q-v (match-option l172-v A-v (l172-v ⊔ l161-v) (λ (y-v : option l172-v A-v) -> (X--2-v : matita-basics-logic.eq l172-v (option l172-v A-v) (None l172-v A-v) y-v) -> B-v) (λ (E-v : matita-basics-logic.eq l172-v (option l172-v A-v) (None l172-v A-v) (None l172-v A-v)) -> matita-basics-logic.match-False l175-v l161-v (λ (X-0-v : matita-basics-logic.False l175-v) -> B-v) (H-v E-v)) (λ (v-v : A-v) -> λ (X-0-v : matita-basics-logic.eq l172-v (option l172-v A-v) (None l172-v A-v) (Some l172-v A-v v-v)) -> P-v v-v) (None l172-v A-v) (matita-basics-logic.refl l172-v (option l172-v A-v) (None l172-v A-v)))) (H-v (matita-basics-logic.refl l172-v (option l172-v A-v) (None l172-v A-v)))) (λ (a-v : A-v) -> λ (H-v : (X---v : matita-basics-logic.eq l172-v (option l172-v A-v) (Some l172-v A-v a-v) (None l172-v A-v)) -> matita-basics-logic.False l175-v) -> λ (p-v : (v-v : A-v) -> (X---v : matita-basics-logic.eq l172-v (option l172-v A-v) (Some l172-v A-v a-v) (Some l172-v A-v v-v)) -> Q-v (P-v v-v)) -> p-v a-v (matita-basics-logic.refl l172-v (option l172-v A-v) (Some l172-v A-v a-v))) X-clearme-v

data DPair (l2-v l1-v : Level) (A-v : Set l2-v) (f-v : (X---v : A-v) -> Set l1-v) : Set (lzero ⊔ (l2-v ⊔ l1-v)) where
  mk-DPair' : (dpi1-v : A-v) -> (X-dpi2-v : f-v dpi1-v) -> DPair l2-v l1-v A-v f-v

mk-DPair : (l1-v l3-v : Level) -> (A-v : Set l1-v) -> (f-v : (X---v : A-v) -> Set l3-v) -> (dpi1-v : A-v) -> (X-dpi2-v : f-v dpi1-v) -> DPair l1-v l3-v A-v f-v
mk-DPair _ _ _ _ = mk-DPair'

match-DPair : (l8-v l7-v : Level) -> (A-v : Set l8-v) -> (X-f-v : (X---v : A-v) -> Set l7-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : DPair l8-v l7-v A-v X-f-v) -> Set return-sort-v) -> (case-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> return-type-v (mk-DPair l8-v l7-v A-v X-f-v dpi1-v X-dpi2-v)) -> (z-v : DPair l8-v l7-v A-v X-f-v) -> return-type-v z-v
match-DPair _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-ind : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-638-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-638-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-638-v
DPair-ind _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-rect-Type5 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-640-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-640-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-640-v
DPair-rect-Type5 _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-rect-Type4 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-640-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-640-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-640-v
DPair-rect-Type4 _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-rect-Type3 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-640-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-640-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-640-v
DPair-rect-Type3 _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-rect-Type2 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-640-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-640-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-640-v
DPair-rect-Type2 _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-rect-Type1 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-640-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-640-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-640-v
DPair-rect-Type1 _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

DPair-rect-Type0 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-640-v : DPair l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-DPair-v : (dpi1-v : A-v) -> (X-dpi2-v : X-f-v dpi1-v) -> Q--v (mk-DPair l11-v l10-v A-v X-f-v dpi1-v X-dpi2-v)) -> (x-640-v : DPair l11-v l10-v A-v X-f-v) -> Q--v x-640-v
DPair-rect-Type0 _ _ _ _ _ _ casemk (mk-DPair' x px) = casemk x px

dpi1 : (l2-v l1-v : Level) -> (A-v : Set l2-v) -> (f-v : (X---v : A-v) -> Set l1-v) -> (X-xxx-v : DPair l2-v l1-v A-v f-v) -> A-v
dpi1 l5-v l4-v A-v f-v X-xxx-v = match-DPair l5-v l4-v A-v f-v l5-v (λ (xxx0-v : DPair l5-v l4-v A-v f-v) -> A-v) (λ (yyy-v : A-v) -> λ (X---v : f-v yyy-v) -> yyy-v) X-xxx-v

dpi2 : (l7-v l0-v : Level) -> (A-v : Set l7-v) -> (f-v : (X---v : A-v) -> Set l0-v) -> (xxx-v : DPair l7-v l0-v A-v f-v) -> f-v (dpi1 l7-v l0-v A-v f-v xxx-v)
dpi2 l7-v l6-v A-v f-v xxx-v = match-DPair l7-v l6-v A-v f-v l6-v (λ (xxx0-v : DPair l7-v l6-v A-v f-v) -> f-v (dpi1 l7-v l6-v A-v f-v xxx0-v)) (λ (X---v : A-v) -> λ (yyy-v : f-v X---v) -> yyy-v) xxx-v


DPair-inv-ind : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> (P-v : (X-z1104-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1105-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v Hterm-v
DPair-inv-ind = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1104-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1105-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> DPair-ind l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-638-v : DPair l38-v l36-v x1-v x2-v) -> (X-z1105-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v X-x-638-v) -> P-v X-x-638-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v)

DPair-inv-rect-Type4 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> (P-v : (X-z1110-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1111-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v Hterm-v
DPair-inv-rect-Type4 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1110-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1111-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> DPair-rect-Type4 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-640-v : DPair l38-v l36-v x1-v x2-v) -> (X-z1111-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v X-x-640-v) -> P-v X-x-640-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v)

DPair-inv-rect-Type3 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> (P-v : (X-z1116-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1117-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v Hterm-v
DPair-inv-rect-Type3 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1116-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1117-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> DPair-rect-Type3 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-644-v : DPair l38-v l36-v x1-v x2-v) -> (X-z1117-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v X-x-644-v) -> P-v X-x-644-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v)

DPair-inv-rect-Type2 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> (P-v : (X-z1122-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1123-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v Hterm-v
DPair-inv-rect-Type2 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1122-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1123-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> DPair-rect-Type2 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-646-v : DPair l38-v l36-v x1-v x2-v) -> (X-z1123-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v X-x-646-v) -> P-v X-x-646-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v)

DPair-inv-rect-Type1 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> (P-v : (X-z1128-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1129-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v Hterm-v
DPair-inv-rect-Type1 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1128-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1129-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> DPair-rect-Type1 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-648-v : DPair l38-v l36-v x1-v x2-v) -> (X-z1129-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v X-x-648-v) -> P-v X-x-648-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v)

DPair-inv-rect-Type0 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> (P-v : (X-z1134-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1135-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v Hterm-v
DPair-inv-rect-Type0 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : DPair l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1134-v : DPair l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (dpi1-v : x1-v) -> (X-dpi2-v : x2-v dpi1-v) -> (X-z1135-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> P-v (mk-DPair l38-v l36-v x1-v x2-v dpi1-v X-dpi2-v)) -> DPair-rect-Type0 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-650-v : DPair l38-v l36-v x1-v x2-v) -> (X-z1135-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v X-x-650-v) -> P-v X-x-650-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (DPair l38-v l36-v x1-v x2-v) Hterm-v)

DPair-discr : (l172-v l171-v l217-v : Level) -> (a1-v : Set l172-v) -> (a2-v : (X---v : a1-v) -> Set l171-v) -> (x-v : DPair l172-v l171-v a1-v a2-v) -> (y-v : DPair l172-v l171-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq (l172-v ⊔ l171-v) (DPair l172-v l171-v a1-v a2-v) x-v y-v) -> match-DPair l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc l171-v) ⊔ (lsuc l172-v)) ⊔ (lsuc (lsuc l217-v)))) (λ (X---v : DPair l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v t0-v) -> match-DPair l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X---v : DPair l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v u0-v) -> (P-v : Set l217-v) -> (X-z41-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v u0-v) (matita-basics-logic.R1 l172-v l171-v a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l172-v a1-v t0-v x0-v) -> a2-v x0-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) y-v) x-v
DPair-discr = λ (l172-v l171-v l217-v : Level) -> λ (a1-v : Set l172-v) -> λ (a2-v : (X---v : a1-v) -> Set l171-v) -> λ (x-v : DPair l172-v l171-v a1-v a2-v) -> λ (y-v : DPair l172-v l171-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq (l172-v ⊔ l171-v) (DPair l172-v l171-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 (l172-v ⊔ l171-v) ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v)) (DPair l172-v l171-v a1-v a2-v) x-v (λ (x-13-v : DPair l172-v l171-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq (l172-v ⊔ l171-v) (DPair l172-v l171-v a1-v a2-v) x-v x-13-v) -> match-DPair l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X---v : DPair l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v t0-v) -> match-DPair l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X---v : DPair l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v u0-v) -> (P-v : Set l217-v) -> (X-z41-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v u0-v) (matita-basics-logic.R1 l172-v l171-v a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l172-v a1-v t0-v x0-v) -> a2-v x0-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) x-13-v) x-v) (match-DPair l172-v l171-v a1-v a2-v ((lsuc lzero) ⊔ ((l171-v ⊔ l172-v) ⊔ (lsuc l217-v))) (λ (X---v : DPair l172-v l171-v a1-v a2-v) -> match-DPair l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X-0-v : DPair l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v t0-v) -> match-DPair l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X-0-v : DPair l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v u0-v) -> (P-v : Set l217-v) -> (X-z41-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v u0-v) (matita-basics-logic.R1 l172-v l171-v a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l172-v a1-v t0-v x0-v) -> a2-v x0-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : a1-v) -> λ (a10-v : a2-v a0-v) -> λ (P-v : Set l217-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v a0-v) a0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v a0-v) (matita-basics-logic.R1 l172-v l171-v a1-v a0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l172-v a1-v a0-v x0-v) -> a2-v x0-v) a10-v a0-v e0-v) a10-v) -> P-v) -> DH-v (matita-basics-logic.refl l172-v a1-v (matita-basics-logic.R0 l172-v a1-v a0-v)) (matita-basics-logic.refl l171-v (a2-v a0-v) (matita-basics-logic.R1 l172-v l171-v a1-v a0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l172-v a1-v a0-v x0-v) -> a2-v x0-v) a10-v a0-v (matita-basics-logic.refl l172-v a1-v (matita-basics-logic.R0 l172-v a1-v a0-v))))) x-v) y-v Deq-v

data Sig (l2-v l1-v : Level) (A-v : Set l2-v)  (f-v : (X---v : A-v) -> Set l1-v) : Set (lzero ⊔ (l2-v ⊔ l1-v)) where
  mk-Sig' : (pi1-v : A-v) -> (X-pi2-v : f-v pi1-v) -> Sig l2-v l1-v A-v f-v

mk-Sig : (l1-v l3-v : Level) -> (A-v : Set l1-v) -> (f-v : (X---v : A-v) -> Set l3-v) -> (pi1-v : A-v) -> (X-pi2-v : f-v pi1-v) -> Sig l1-v l3-v A-v f-v
mk-Sig _ _ _ _ = mk-Sig'

match-Sig : (l8-v l7-v : Level) -> (A-v : Set l8-v) -> (X-f-v : (X---v : A-v) -> Set l7-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Sig l8-v l7-v A-v X-f-v) -> Set return-sort-v) -> (case-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> return-type-v (mk-Sig l8-v l7-v A-v X-f-v pi1-v X-pi2-v)) -> (z-v : Sig l8-v l7-v A-v X-f-v) -> return-type-v z-v
match-Sig _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-ind : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-664-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-664-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-664-v
Sig-ind _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-rect-Type5 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-666-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-666-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-666-v
Sig-rect-Type5 _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-rect-Type4 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-666-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-666-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-666-v
Sig-rect-Type4 _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-rect-Type3 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-666-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-666-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-666-v
Sig-rect-Type3 _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-rect-Type2 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-666-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-666-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-666-v
Sig-rect-Type2 _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-rect-Type1 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-666-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-666-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-666-v
Sig-rect-Type1 _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

Sig-rect-Type0 : (l11-v l10-v l6-v : Level) -> (A-v : Set l11-v) -> (X-f-v : (X---v : A-v) -> Set l10-v) -> (Q--v : (X-x-666-v : Sig l11-v l10-v A-v X-f-v) -> Set l6-v) -> (X-H-mk-Sig-v : (pi1-v : A-v) -> (X-pi2-v : X-f-v pi1-v) -> Q--v (mk-Sig l11-v l10-v A-v X-f-v pi1-v X-pi2-v)) -> (x-666-v : Sig l11-v l10-v A-v X-f-v) -> Q--v x-666-v
Sig-rect-Type0 _ _ _ _ _ _ casemk (mk-Sig' x y) = casemk x y

pi1 : (l2-v l1-v : Level) -> (A-v : Set l2-v) -> (f-v : (X---v : A-v) -> Set l1-v) -> (X-xxx-v : Sig l2-v l1-v A-v f-v) -> A-v
pi1 l5-v l4-v A-v f-v X-xxx-v = match-Sig l5-v l4-v A-v f-v l5-v (λ (xxx0-v : Sig l5-v l4-v A-v f-v) -> A-v) (λ (yyy-v : A-v) -> λ (X---v : f-v yyy-v) -> yyy-v) X-xxx-v

pi2 : (l7-v l0-v : Level) -> (A-v : Set l7-v) -> (f-v : (X---v : A-v) -> Set l0-v) -> (xxx-v : Sig l7-v l0-v A-v f-v) -> f-v (pi1 l7-v l0-v A-v f-v xxx-v)
pi2 l7-v l6-v A-v f-v xxx-v = match-Sig l7-v l6-v A-v f-v l6-v (λ (xxx0-v : Sig l7-v l6-v A-v f-v) -> f-v (pi1 l7-v l6-v A-v f-v xxx0-v)) (λ (X---v : A-v) -> λ (yyy-v : f-v X---v) -> yyy-v) xxx-v

Sig-inv-ind : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> (P-v : (X-z1170-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1171-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v Hterm-v
Sig-inv-ind = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1170-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1171-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> Sig-ind l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-664-v : Sig l38-v l36-v x1-v x2-v) -> (X-z1171-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v X-x-664-v) -> P-v X-x-664-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v)

Sig-inv-rect-Type4 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> (P-v : (X-z1176-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1177-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v Hterm-v
Sig-inv-rect-Type4 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1176-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1177-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> Sig-rect-Type4 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-666-v : Sig l38-v l36-v x1-v x2-v) -> (X-z1177-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v X-x-666-v) -> P-v X-x-666-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v)

Sig-inv-rect-Type3 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> (P-v : (X-z1182-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1183-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v Hterm-v
Sig-inv-rect-Type3 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1182-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1183-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> Sig-rect-Type3 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-670-v : Sig l38-v l36-v x1-v x2-v) -> (X-z1183-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v X-x-670-v) -> P-v X-x-670-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v)

Sig-inv-rect-Type2 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> (P-v : (X-z1188-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1189-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v Hterm-v
Sig-inv-rect-Type2 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1188-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1189-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> Sig-rect-Type2 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-672-v : Sig l38-v l36-v x1-v x2-v) -> (X-z1189-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v X-x-672-v) -> P-v X-x-672-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v)

Sig-inv-rect-Type1 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> (P-v : (X-z1194-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1195-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v Hterm-v
Sig-inv-rect-Type1 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1194-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1195-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> Sig-rect-Type1 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-674-v : Sig l38-v l36-v x1-v x2-v) -> (X-z1195-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v X-x-674-v) -> P-v X-x-674-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v)

Sig-inv-rect-Type0 : (l38-v l36-v l29-v : Level) -> (x1-v : Set l38-v) -> (x2-v : (X---v : x1-v) -> Set l36-v) -> (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> (P-v : (X-z1200-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1201-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v Hterm-v
Sig-inv-rect-Type0 = λ (l38-v l36-v l29-v : Level) -> λ (x1-v : Set l38-v) -> λ (x2-v : (X---v : x1-v) -> Set l36-v) -> λ (Hterm-v : Sig l38-v l36-v x1-v x2-v) -> λ (P-v : (X-z1200-v : Sig l38-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (pi1-v : x1-v) -> (X-pi2-v : x2-v pi1-v) -> (X-z1201-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> P-v (mk-Sig l38-v l36-v x1-v x2-v pi1-v X-pi2-v)) -> Sig-rect-Type0 l38-v l36-v ((l38-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-676-v : Sig l38-v l36-v x1-v x2-v) -> (X-z1201-v : matita-basics-logic.eq (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v X-x-676-v) -> P-v X-x-676-v) H1-v Hterm-v (matita-basics-logic.refl (l38-v ⊔ l36-v) (Sig l38-v l36-v x1-v x2-v) Hterm-v)

Sig-discr : (l172-v l171-v l217-v : Level) -> (a1-v : Set l172-v) -> (a2-v : (X---v : a1-v) -> Set l171-v) -> (x-v : Sig l172-v l171-v a1-v a2-v) -> (y-v : Sig l172-v l171-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq (l172-v ⊔ l171-v) (Sig l172-v l171-v a1-v a2-v) x-v y-v) -> match-Sig l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc l171-v) ⊔ (lsuc l172-v)) ⊔ (lsuc (lsuc l217-v)))) (λ (X---v : Sig l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v t0-v) -> match-Sig l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X---v : Sig l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v u0-v) -> (P-v : Set l217-v) -> (X-z43-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v u0-v) (matita-basics-logic.R1 l172-v l171-v a1-v t0-v (λ (x-19-v : a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l172-v a1-v t0-v x-19-v) -> a2-v x-19-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) y-v) x-v
Sig-discr = λ (l172-v l171-v l217-v : Level) -> λ (a1-v : Set l172-v) -> λ (a2-v : (X---v : a1-v) -> Set l171-v) -> λ (x-v : Sig l172-v l171-v a1-v a2-v) -> λ (y-v : Sig l172-v l171-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq (l172-v ⊔ l171-v) (Sig l172-v l171-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 (l172-v ⊔ l171-v) ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v)) (Sig l172-v l171-v a1-v a2-v) x-v (λ (x-13-v : Sig l172-v l171-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq (l172-v ⊔ l171-v) (Sig l172-v l171-v a1-v a2-v) x-v x-13-v) -> match-Sig l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X---v : Sig l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v t0-v) -> match-Sig l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X---v : Sig l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v u0-v) -> (P-v : Set l217-v) -> (X-z43-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v u0-v) (matita-basics-logic.R1 l172-v l171-v a1-v t0-v (λ (x-19-v : a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l172-v a1-v t0-v x-19-v) -> a2-v x-19-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) x-13-v) x-v) (match-Sig l172-v l171-v a1-v a2-v ((lsuc lzero) ⊔ ((l171-v ⊔ l172-v) ⊔ (lsuc l217-v))) (λ (X---v : Sig l172-v l171-v a1-v a2-v) -> match-Sig l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X-0-v : Sig l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v t0-v) -> match-Sig l172-v l171-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l217-v)) ⊔ (lsuc l172-v)) ⊔ (lsuc l171-v))) (λ (X-0-v : Sig l172-v l171-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l217-v) ⊔ l172-v) ⊔ l171-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v u0-v) -> (P-v : Set l217-v) -> (X-z43-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v u0-v) (matita-basics-logic.R1 l172-v l171-v a1-v t0-v (λ (x-19-v : a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l172-v a1-v t0-v x-19-v) -> a2-v x-19-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : a1-v) -> λ (a10-v : a2-v a0-v) -> λ (P-v : Set l217-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l172-v a1-v (matita-basics-logic.R0 l172-v a1-v a0-v) a0-v) -> (X-e1-v : matita-basics-logic.eq l171-v (a2-v a0-v) (matita-basics-logic.R1 l172-v l171-v a1-v a0-v (λ (x-19-v : a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l172-v a1-v a0-v x-19-v) -> a2-v x-19-v) a10-v a0-v e0-v) a10-v) -> P-v) -> DH-v (matita-basics-logic.refl l172-v a1-v (matita-basics-logic.R0 l172-v a1-v a0-v)) (matita-basics-logic.refl l171-v (a2-v a0-v) (matita-basics-logic.R1 l172-v l171-v a1-v a0-v (λ (x-19-v : a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l172-v a1-v a0-v x-19-v) -> a2-v x-19-v) a10-v a0-v (matita-basics-logic.refl l172-v a1-v (matita-basics-logic.R0 l172-v a1-v a0-v))))) x-v) y-v Deq-v

sub-pi2 : (l30-v l22-v l20-v : Level) -> (A-v : Set l30-v) -> (P-v : (X---v : A-v) -> Set l22-v) -> (P'-v : (X---v : A-v) -> Set l20-v) -> (X---v : (x-v : A-v) -> (X---v : P-v x-v) -> P'-v x-v) -> (x-v : Sig l30-v l22-v A-v (λ (x-v : A-v) -> P-v x-v)) -> P'-v (pi1 l30-v l22-v A-v (λ (x0-v : A-v) -> P-v x0-v) x-v)
sub-pi2 = λ (l30-v l22-v l20-v : Level) -> λ (A-v : Set l30-v) -> λ (P-v : (X---v : A-v) -> Set l22-v) -> λ (P'-v : (X---v : A-v) -> Set l20-v) -> λ (H1-v : (x-v : A-v) -> (X---v : P-v x-v) -> P'-v x-v) -> λ (X-clearme-v : Sig l30-v l22-v A-v (λ (x-v : A-v) -> P-v x-v)) -> match-Sig l30-v l22-v A-v (λ (x-v : A-v) -> P-v x-v) l20-v (λ (X---v : Sig l30-v l22-v A-v (λ (x-v : A-v) -> P-v x-v)) -> P'-v (pi1 l30-v l22-v A-v (λ (x0-v : A-v) -> P-v x0-v) X---v)) (λ (x-v : A-v) -> λ (H2-v : P-v x-v) -> H1-v x-v H2-v) X-clearme-v

inj-mk-Sig : (l27-v l25-v : Level) -> (A-v : Set l27-v) -> (P-v : (X---v : A-v) -> Set l25-v) -> (x-v : Sig l27-v l25-v A-v P-v) -> matita-basics-logic.eq (l27-v ⊔ l25-v) (Sig l27-v l25-v A-v P-v) x-v (mk-Sig l27-v l25-v A-v P-v (pi1 l27-v l25-v A-v P-v x-v) (pi2 l27-v l25-v A-v P-v x-v))
inj-mk-Sig = λ (l27-v l25-v : Level) -> λ (A-v : Set l27-v) -> λ (P-v : (X---v : A-v) -> Set l25-v) -> λ (x-v : Sig l27-v l25-v A-v P-v) -> match-Sig l27-v l25-v A-v P-v (l27-v ⊔ l25-v) (λ (X---v : Sig l27-v l25-v A-v P-v) -> matita-basics-logic.eq (l27-v ⊔ l25-v) (Sig l27-v l25-v A-v P-v) X---v (mk-Sig l27-v l25-v A-v P-v (pi1 l27-v l25-v A-v P-v X---v) (pi2 l27-v l25-v A-v P-v X---v))) (λ (pi1-v : A-v) -> λ (X-pi2-v : P-v pi1-v) -> matita-basics-logic.refl (l27-v ⊔ l25-v) (Sig l27-v l25-v A-v P-v) (mk-Sig l27-v l25-v A-v P-v pi1-v X-pi2-v)) x-v

data Prod (l2-v l1-v : Level)  (A-v : Set l2-v)  (B-v : Set l1-v) : Set (lzero ⊔ (l2-v ⊔ l1-v)) where
  mk-Prod' : (X-fst-v : A-v) -> (X-snd-v : B-v) -> Prod l2-v l1-v A-v B-v

mk-Prod : (l4-v l3-v : Level) -> (A-v : Set l4-v) -> (B-v : Set l3-v) -> (X-fst-v : A-v) -> (X-snd-v : B-v) -> Prod l4-v l3-v A-v B-v
mk-Prod _ _ _ _ = mk-Prod'

match-Prod : (l8-v l7-v : Level) -> (X-A-v : Set l8-v) -> (X-B-v : Set l7-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Prod l8-v l7-v X-A-v X-B-v) -> Set return-sort-v) -> (case-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> return-type-v (mk-Prod l8-v l7-v X-A-v X-B-v X-fst-v X-snd-v)) -> (z-v : Prod l8-v l7-v X-A-v X-B-v) -> return-type-v z-v
match-Prod _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-ind : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-690-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-690-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-690-v
Prod-ind _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-rect-Type5 : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-692-v
Prod-rect-Type5 _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-rect-Type4 : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-692-v
Prod-rect-Type4 _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-rect-Type3 : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-692-v
Prod-rect-Type3 _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-rect-Type2 : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-692-v
Prod-rect-Type2 _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-rect-Type1 : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-692-v
Prod-rect-Type1 _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

Prod-rect-Type0 : (l11-v l10-v l6-v : Level) -> (X-A-v : Set l11-v) -> (X-B-v : Set l10-v) -> (Q--v : (X-x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Set l6-v) -> (X-H-mk-Prod-v : (X-fst-v : X-A-v) -> (X-snd-v : X-B-v) -> Q--v (mk-Prod l11-v l10-v X-A-v X-B-v X-fst-v X-snd-v)) -> (x-692-v : Prod l11-v l10-v X-A-v X-B-v) -> Q--v x-692-v
Prod-rect-Type0 _ _ _ _ _ _ casemk (mk-Prod' x y) = casemk x y

fst : (l2-v l1-v : Level) -> (A-v : Set l2-v) -> (B-v : Set l1-v) -> (X-xxx-v : Prod l2-v l1-v A-v B-v) -> A-v
fst l5-v l4-v A-v B-v X-xxx-v = match-Prod l5-v l4-v A-v B-v l5-v (λ (xxx0-v : Prod l5-v l4-v A-v B-v) -> A-v) (λ (yyy-v : A-v) -> λ (X---v : B-v) -> yyy-v) X-xxx-v

snd : (l2-v l1-v : Level) -> (A-v : Set l2-v) -> (B-v : Set l1-v) -> (X-xxx-v : Prod l2-v l1-v A-v B-v) -> B-v
snd l5-v l4-v A-v B-v X-xxx-v = match-Prod l5-v l4-v A-v B-v l4-v (λ (xxx0-v : Prod l5-v l4-v A-v B-v) -> B-v) (λ (X---v : A-v) -> λ (yyy-v : B-v) -> yyy-v) X-xxx-v


Prod-inv-ind : (l37-v l36-v l29-v : Level) -> (x1-v : Set l37-v) -> (x2-v : Set l36-v) -> (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> (P-v : (X-z1236-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1237-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v Hterm-v
Prod-inv-ind = λ (l37-v l36-v l29-v : Level) -> λ (x1-v : Set l37-v) -> λ (x2-v : Set l36-v) -> λ (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> λ (P-v : (X-z1236-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1237-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> Prod-ind l37-v l36-v ((l37-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-690-v : Prod l37-v l36-v x1-v x2-v) -> (X-z1237-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v X-x-690-v) -> P-v X-x-690-v) H1-v Hterm-v (matita-basics-logic.refl (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v)

Prod-inv-rect-Type4 : (l37-v l36-v l29-v : Level) -> (x1-v : Set l37-v) -> (x2-v : Set l36-v) -> (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> (P-v : (X-z1242-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1243-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v Hterm-v
Prod-inv-rect-Type4 = λ (l37-v l36-v l29-v : Level) -> λ (x1-v : Set l37-v) -> λ (x2-v : Set l36-v) -> λ (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> λ (P-v : (X-z1242-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1243-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> Prod-rect-Type4 l37-v l36-v ((l37-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-692-v : Prod l37-v l36-v x1-v x2-v) -> (X-z1243-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v X-x-692-v) -> P-v X-x-692-v) H1-v Hterm-v (matita-basics-logic.refl (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v)

Prod-inv-rect-Type3 : (l37-v l36-v l29-v : Level) -> (x1-v : Set l37-v) -> (x2-v : Set l36-v) -> (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> (P-v : (X-z1248-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1249-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v Hterm-v
Prod-inv-rect-Type3 = λ (l37-v l36-v l29-v : Level) -> λ (x1-v : Set l37-v) -> λ (x2-v : Set l36-v) -> λ (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> λ (P-v : (X-z1248-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1249-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> Prod-rect-Type3 l37-v l36-v ((l37-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-696-v : Prod l37-v l36-v x1-v x2-v) -> (X-z1249-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v X-x-696-v) -> P-v X-x-696-v) H1-v Hterm-v (matita-basics-logic.refl (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v)

Prod-inv-rect-Type2 : (l37-v l36-v l29-v : Level) -> (x1-v : Set l37-v) -> (x2-v : Set l36-v) -> (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> (P-v : (X-z1254-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1255-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v Hterm-v
Prod-inv-rect-Type2 = λ (l37-v l36-v l29-v : Level) -> λ (x1-v : Set l37-v) -> λ (x2-v : Set l36-v) -> λ (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> λ (P-v : (X-z1254-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1255-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> Prod-rect-Type2 l37-v l36-v ((l37-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-698-v : Prod l37-v l36-v x1-v x2-v) -> (X-z1255-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v X-x-698-v) -> P-v X-x-698-v) H1-v Hterm-v (matita-basics-logic.refl (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v)

Prod-inv-rect-Type1 : (l37-v l36-v l29-v : Level) -> (x1-v : Set l37-v) -> (x2-v : Set l36-v) -> (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> (P-v : (X-z1260-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1261-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v Hterm-v
Prod-inv-rect-Type1 = λ (l37-v l36-v l29-v : Level) -> λ (x1-v : Set l37-v) -> λ (x2-v : Set l36-v) -> λ (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> λ (P-v : (X-z1260-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1261-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> Prod-rect-Type1 l37-v l36-v ((l37-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-700-v : Prod l37-v l36-v x1-v x2-v) -> (X-z1261-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v X-x-700-v) -> P-v X-x-700-v) H1-v Hterm-v (matita-basics-logic.refl (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v)

Prod-inv-rect-Type0 : (l37-v l36-v l29-v : Level) -> (x1-v : Set l37-v) -> (x2-v : Set l36-v) -> (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> (P-v : (X-z1266-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> (X-H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1267-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v Hterm-v
Prod-inv-rect-Type0 = λ (l37-v l36-v l29-v : Level) -> λ (x1-v : Set l37-v) -> λ (x2-v : Set l36-v) -> λ (Hterm-v : Prod l37-v l36-v x1-v x2-v) -> λ (P-v : (X-z1266-v : Prod l37-v l36-v x1-v x2-v) -> Set l29-v) -> λ (H1-v : (X-fst-v : x1-v) -> (X-snd-v : x2-v) -> (X-z1267-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> P-v (mk-Prod l37-v l36-v x1-v x2-v X-fst-v X-snd-v)) -> Prod-rect-Type0 l37-v l36-v ((l37-v ⊔ l36-v) ⊔ l29-v) x1-v x2-v (λ (X-x-702-v : Prod l37-v l36-v x1-v x2-v) -> (X-z1267-v : matita-basics-logic.eq (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v X-x-702-v) -> P-v X-x-702-v) H1-v Hterm-v (matita-basics-logic.refl (l37-v ⊔ l36-v) (Prod l37-v l36-v x1-v x2-v) Hterm-v)

Prod-discr : (l171-v l170-v l216-v : Level) -> (a1-v : Set l171-v) -> (a2-v : Set l170-v) -> (x-v : Prod l171-v l170-v a1-v a2-v) -> (y-v : Prod l171-v l170-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq (l171-v ⊔ l170-v) (Prod l171-v l170-v a1-v a2-v) x-v y-v) -> match-Prod l171-v l170-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc l170-v) ⊔ (lsuc l171-v)) ⊔ (lsuc (lsuc l216-v)))) (λ (X---v : Prod l171-v l170-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v) -> match-Prod l171-v l170-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l216-v)) ⊔ (lsuc l171-v)) ⊔ (lsuc l170-v))) (λ (X---v : Prod l171-v l170-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v) -> (P-v : Set l216-v) -> (X-z45-v : (e0-v : matita-basics-logic.eq l171-v a1-v (matita-basics-logic.R0 l171-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l170-v a2-v (matita-basics-logic.R1 l171-v l170-v a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l171-v a1-v t0-v x0-v) -> a2-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) y-v) x-v
Prod-discr = λ (l171-v l170-v l216-v : Level) -> λ (a1-v : Set l171-v) -> λ (a2-v : Set l170-v) -> λ (x-v : Prod l171-v l170-v a1-v a2-v) -> λ (y-v : Prod l171-v l170-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq (l171-v ⊔ l170-v) (Prod l171-v l170-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 (l171-v ⊔ l170-v) ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v)) (Prod l171-v l170-v a1-v a2-v) x-v (λ (x-13-v : Prod l171-v l170-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq (l171-v ⊔ l170-v) (Prod l171-v l170-v a1-v a2-v) x-v x-13-v) -> match-Prod l171-v l170-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l216-v)) ⊔ (lsuc l171-v)) ⊔ (lsuc l170-v))) (λ (X---v : Prod l171-v l170-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v) -> match-Prod l171-v l170-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l216-v)) ⊔ (lsuc l171-v)) ⊔ (lsuc l170-v))) (λ (X---v : Prod l171-v l170-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v) -> (P-v : Set l216-v) -> (X-z45-v : (e0-v : matita-basics-logic.eq l171-v a1-v (matita-basics-logic.R0 l171-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l170-v a2-v (matita-basics-logic.R1 l171-v l170-v a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l171-v a1-v t0-v x0-v) -> a2-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) x-13-v) x-v) (match-Prod l171-v l170-v a1-v a2-v ((lsuc lzero) ⊔ ((l170-v ⊔ l171-v) ⊔ (lsuc l216-v))) (λ (X---v : Prod l171-v l170-v a1-v a2-v) -> match-Prod l171-v l170-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l216-v)) ⊔ (lsuc l171-v)) ⊔ (lsuc l170-v))) (λ (X-0-v : Prod l171-v l170-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v))) (λ (t0-v : a1-v) -> λ (t1-v : a2-v) -> match-Prod l171-v l170-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ (((lsuc (lsuc l216-v)) ⊔ (lsuc l171-v)) ⊔ (lsuc l170-v))) (λ (X-0-v : Prod l171-v l170-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ (((lsuc l216-v) ⊔ l171-v) ⊔ l170-v))) (λ (u0-v : a1-v) -> λ (u1-v : a2-v) -> (P-v : Set l216-v) -> (X-z45-v : (e0-v : matita-basics-logic.eq l171-v a1-v (matita-basics-logic.R0 l171-v a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l170-v a2-v (matita-basics-logic.R1 l171-v l170-v a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l171-v a1-v t0-v x0-v) -> a2-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : a1-v) -> λ (a10-v : a2-v) -> λ (P-v : Set l216-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l171-v a1-v (matita-basics-logic.R0 l171-v a1-v a0-v) a0-v) -> (X-e1-v : matita-basics-logic.eq l170-v a2-v (matita-basics-logic.R1 l171-v l170-v a1-v a0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l171-v a1-v a0-v x0-v) -> a2-v) a10-v a0-v e0-v) a10-v) -> P-v) -> DH-v (matita-basics-logic.refl l171-v a1-v (matita-basics-logic.R0 l171-v a1-v a0-v)) (matita-basics-logic.refl l170-v a2-v (matita-basics-logic.R1 l171-v l170-v a1-v a0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq l171-v a1-v a0-v x0-v) -> a2-v) a10-v a0-v (matita-basics-logic.refl l171-v a1-v (matita-basics-logic.R0 l171-v a1-v a0-v))))) x-v) y-v Deq-v

eq-pair-fst-snd : (l26-v l25-v : Level) -> (A-v : Set l26-v) -> (B-v : Set l25-v) -> (p-v : Prod l26-v l25-v A-v B-v) -> matita-basics-logic.eq (l26-v ⊔ l25-v) (Prod l26-v l25-v A-v B-v) p-v (mk-Prod l26-v l25-v A-v B-v (fst l26-v l25-v A-v B-v p-v) (snd l26-v l25-v A-v B-v p-v))
eq-pair-fst-snd = λ (l26-v l25-v : Level) -> λ (A-v : Set l26-v) -> λ (B-v : Set l25-v) -> λ (p-v : Prod l26-v l25-v A-v B-v) -> match-Prod l26-v l25-v A-v B-v (l26-v ⊔ l25-v) (λ (X---v : Prod l26-v l25-v A-v B-v) -> matita-basics-logic.eq (l26-v ⊔ l25-v) (Prod l26-v l25-v A-v B-v) X---v (mk-Prod l26-v l25-v A-v B-v (fst l26-v l25-v A-v B-v X---v) (snd l26-v l25-v A-v B-v X---v))) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> matita-basics-logic.refl (l26-v ⊔ l25-v) (Prod l26-v l25-v A-v B-v) (mk-Prod l26-v l25-v A-v B-v X-fst-v X-snd-v)) p-v

fst-eq : (l4-v l5-v : Level) -> (A-v : Set l4-v) -> (B-v : Set l5-v) -> (a-v : A-v) -> (b-v : B-v) -> matita-basics-logic.eq l4-v A-v (fst l4-v l5-v A-v B-v (mk-Prod l4-v l5-v A-v B-v a-v b-v)) a-v
fst-eq = λ (l4-v l5-v : Level) -> λ (A-v : Set l4-v) -> λ (B-v : Set l5-v) -> λ (a-v : A-v) -> λ (X-b-v : B-v) -> matita-basics-logic.refl l4-v A-v a-v

snd-eq : (l8-v l3-v : Level) -> (A-v : Set l8-v) -> (B-v : Set l3-v) -> (a-v : A-v) -> (b-v : B-v) -> matita-basics-logic.eq l3-v B-v (snd l8-v l3-v A-v B-v (mk-Prod l8-v l3-v A-v B-v a-v b-v)) b-v
snd-eq = λ (l8-v l3-v : Level) -> λ (A-v : Set l8-v) -> λ (B-v : Set l3-v) -> λ (X-a-v : A-v) -> λ (b-v : B-v) -> matita-basics-logic.refl l3-v B-v b-v

contract-pair : (l52-v l51-v : Level) -> (A-v : Set l52-v) -> (B-v : Set l51-v) -> (e-v : Prod l52-v l51-v A-v B-v) -> matita-basics-logic.eq (l52-v ⊔ l51-v) (Prod l52-v l51-v A-v B-v) (match-Prod l52-v l51-v A-v B-v (l52-v ⊔ l51-v) (λ (X---v : Prod l52-v l51-v A-v B-v) -> Prod l52-v l51-v A-v B-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> mk-Prod l52-v l51-v A-v B-v a-v b-v) e-v) e-v
contract-pair = λ (l52-v l51-v : Level) -> λ (A-v : Set l52-v) -> λ (B-v : Set l51-v) -> λ (X-clearme-v : Prod l52-v l51-v A-v B-v) -> match-Prod l52-v l51-v A-v B-v (l52-v ⊔ l51-v) (λ (X---v : Prod l52-v l51-v A-v B-v) -> matita-basics-logic.eq (l52-v ⊔ l51-v) (Prod l52-v l51-v A-v B-v) (match-Prod l52-v l51-v A-v B-v (l52-v ⊔ l51-v) (λ (X-0-v : Prod l52-v l51-v A-v B-v) -> Prod l52-v l51-v A-v B-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> mk-Prod l52-v l51-v A-v B-v a-v b-v) X---v) X---v) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> matita-basics-logic.refl (l52-v ⊔ l51-v) (Prod l52-v l51-v A-v B-v) (match-Prod l52-v l51-v A-v B-v (l52-v ⊔ l51-v) (λ (X---v : Prod l52-v l51-v A-v B-v) -> Prod l52-v l51-v A-v B-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> mk-Prod l52-v l51-v A-v B-v a-v b-v) (mk-Prod l52-v l51-v A-v B-v X-fst-v X-snd-v))) X-clearme-v

extract-pair : (l182-v l181-v l153-v l152-v : Level) -> (A-v : Set l182-v) -> (B-v : Set l181-v) -> (C-v : Set l153-v) -> (D-v : Set l152-v) -> (u-v : Prod l182-v l181-v A-v B-v) -> (Q-v : (X---v : A-v) -> (X--1-v : B-v) -> Prod l153-v l152-v C-v D-v) -> (x-v : C-v) -> (y-v : D-v) -> (X---v : matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (match-Prod l182-v l181-v A-v B-v (l153-v ⊔ l152-v) (λ (X---v : Prod l182-v l181-v A-v B-v) -> Prod l153-v l152-v C-v D-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> Q-v a-v b-v) u-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v)) -> matita-basics-logic.ex l182-v (((l153-v ⊔ l181-v) ⊔ l182-v) ⊔ l152-v) A-v (λ (a-v : A-v) -> matita-basics-logic.ex l181-v (((l153-v ⊔ l182-v) ⊔ l152-v) ⊔ l181-v) B-v (λ (b-v : B-v) -> matita-basics-logic.And (l182-v ⊔ l181-v) (l153-v ⊔ l152-v) (matita-basics-logic.eq (l182-v ⊔ l181-v) (Prod l182-v l181-v A-v B-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v) u-v) (matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (Q-v a-v b-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v))))
extract-pair = λ (l182-v l181-v l153-v l152-v : Level) -> λ (A-v : Set l182-v) -> λ (B-v : Set l181-v) -> λ (C-v : Set l153-v) -> λ (D-v : Set l152-v) -> λ (X-clearme-v : Prod l182-v l181-v A-v B-v) -> match-Prod l182-v l181-v A-v B-v (((l153-v ⊔ l182-v) ⊔ l152-v) ⊔ l181-v) (λ (X---v : Prod l182-v l181-v A-v B-v) -> (Q-v : (X--1-v : A-v) -> (X--2-v : B-v) -> Prod l153-v l152-v C-v D-v) -> (x-v : C-v) -> (y-v : D-v) -> (X--1-v : matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (match-Prod l182-v l181-v A-v B-v (l153-v ⊔ l152-v) (λ (X-0-v : Prod l182-v l181-v A-v B-v) -> Prod l153-v l152-v C-v D-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> Q-v a-v b-v) X---v) (mk-Prod l153-v l152-v C-v D-v x-v y-v)) -> matita-basics-logic.ex l182-v (((l153-v ⊔ l182-v) ⊔ l152-v) ⊔ l181-v) A-v (λ (a-v : A-v) -> matita-basics-logic.ex l181-v (((l153-v ⊔ l182-v) ⊔ l152-v) ⊔ l181-v) B-v (λ (b-v : B-v) -> matita-basics-logic.And (l182-v ⊔ l181-v) (l153-v ⊔ l152-v) (matita-basics-logic.eq (l182-v ⊔ l181-v) (Prod l182-v l181-v A-v B-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v) X---v) (matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (Q-v a-v b-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v))))) (λ (a-v : A-v) -> λ (b-v : B-v) -> λ (Q-v : (X---v : A-v) -> (X--1-v : B-v) -> Prod l153-v l152-v C-v D-v) -> λ (x-v : C-v) -> λ (y-v : D-v) -> λ (E1-v : matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (Q-v a-v b-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v)) -> matita-basics-logic.ex-intro l182-v (((l153-v ⊔ l182-v) ⊔ l152-v) ⊔ l181-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.ex l181-v (((l153-v ⊔ l182-v) ⊔ l152-v) ⊔ l181-v) B-v (λ (b0-v : B-v) -> matita-basics-logic.And (l182-v ⊔ l181-v) (l153-v ⊔ l152-v) (matita-basics-logic.eq (l182-v ⊔ l181-v) (Prod l182-v l181-v A-v B-v) (mk-Prod l182-v l181-v A-v B-v a0-v b0-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v)) (matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (Q-v a0-v b0-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v)))) a-v (matita-basics-logic.ex-intro l181-v (((l153-v ⊔ l181-v) ⊔ l182-v) ⊔ l152-v) B-v (λ (b0-v : B-v) -> matita-basics-logic.And (l182-v ⊔ l181-v) (l153-v ⊔ l152-v) (matita-basics-logic.eq (l182-v ⊔ l181-v) (Prod l182-v l181-v A-v B-v) (mk-Prod l182-v l181-v A-v B-v a-v b0-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v)) (matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (Q-v a-v b0-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v))) b-v (matita-basics-logic.conj (l182-v ⊔ l181-v) (l153-v ⊔ l152-v) (matita-basics-logic.eq (l182-v ⊔ l181-v) (Prod l182-v l181-v A-v B-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v)) (matita-basics-logic.eq (l153-v ⊔ l152-v) (Prod l153-v l152-v C-v D-v) (Q-v a-v b-v) (mk-Prod l153-v l152-v C-v D-v x-v y-v)) (matita-basics-logic.refl (l182-v ⊔ l181-v) (Prod l182-v l181-v A-v B-v) (mk-Prod l182-v l181-v A-v B-v a-v b-v)) E1-v))) X-clearme-v

breakup-pair : (l61-v l60-v l55-v l37-v : Level) -> (A-v : Set l61-v) -> (B-v : Set l60-v) -> (C-v : Set l55-v) -> (x-v : Prod l61-v l60-v A-v B-v) -> (R-v : (X---v : C-v) -> Set l37-v) -> (P-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> (X---v : R-v (P-v (fst l61-v l60-v A-v B-v x-v) (snd l61-v l60-v A-v B-v x-v))) -> R-v (match-Prod l61-v l60-v A-v B-v l55-v (λ (X-0-v : Prod l61-v l60-v A-v B-v) -> C-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> P-v a-v b-v) x-v)
breakup-pair = λ (l61-v l60-v l55-v l37-v : Level) -> λ (A-v : Set l61-v) -> λ (B-v : Set l60-v) -> λ (C-v : Set l55-v) -> λ (X-clearme-v : Prod l61-v l60-v A-v B-v) -> match-Prod l61-v l60-v A-v B-v ((lsuc lzero) ⊔ (((l55-v ⊔ l61-v) ⊔ (lsuc l37-v)) ⊔ l60-v)) (λ (X---v : Prod l61-v l60-v A-v B-v) -> (R-v : (X--1-v : C-v) -> Set l37-v) -> (P-v : (X--1-v : A-v) -> (X--2-v : B-v) -> C-v) -> (X--1-v : R-v (P-v (fst l61-v l60-v A-v B-v X---v) (snd l61-v l60-v A-v B-v X---v))) -> R-v (match-Prod l61-v l60-v A-v B-v l55-v (λ (X-0-v : Prod l61-v l60-v A-v B-v) -> C-v) (λ (a-v : A-v) -> λ (b-v : B-v) -> P-v a-v b-v) X---v)) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> λ (R-v : (X---v : C-v) -> Set l37-v) -> λ (P-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> λ (auto-v : R-v (P-v X-fst-v X-snd-v)) -> auto-v) X-clearme-v

pair-elim : (l103-v l102-v l97-v l56-v : Level) -> (A-v : Set l103-v) -> (B-v : Set l102-v) -> (C-v : Set l97-v) -> (T-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> (p-v : Prod l103-v l102-v A-v B-v) -> (P-v : (X---v : Prod l103-v l102-v A-v B-v) -> (X--1-v : C-v) -> Set l56-v) -> (X---v : (lft-v : A-v) -> (rgt-v : B-v) -> (X---v : matita-basics-logic.eq (l103-v ⊔ l102-v) (Prod l103-v l102-v A-v B-v) p-v (mk-Prod l103-v l102-v A-v B-v lft-v rgt-v)) -> P-v (mk-Prod l103-v l102-v A-v B-v lft-v rgt-v) (T-v lft-v rgt-v)) -> P-v p-v (match-Prod l103-v l102-v A-v B-v l97-v (λ (X-0-v : Prod l103-v l102-v A-v B-v) -> C-v) (λ (lft-v : A-v) -> λ (rgt-v : B-v) -> T-v lft-v rgt-v) p-v)
pair-elim = λ (l103-v l102-v l97-v l56-v : Level) -> λ (A-v : Set l103-v) -> λ (B-v : Set l102-v) -> λ (C-v : Set l97-v) -> λ (T-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> λ (X-clearme-v : Prod l103-v l102-v A-v B-v) -> match-Prod l103-v l102-v A-v B-v ((lsuc lzero) ⊔ (((l103-v ⊔ l97-v) ⊔ l102-v) ⊔ (lsuc l56-v))) (λ (X---v : Prod l103-v l102-v A-v B-v) -> (P-v : (X--1-v : Prod l103-v l102-v A-v B-v) -> (X--2-v : C-v) -> Set l56-v) -> (X--1-v : (lft-v : A-v) -> (rgt-v : B-v) -> (X--1-v : matita-basics-logic.eq (l103-v ⊔ l102-v) (Prod l103-v l102-v A-v B-v) X---v (mk-Prod l103-v l102-v A-v B-v lft-v rgt-v)) -> P-v (mk-Prod l103-v l102-v A-v B-v lft-v rgt-v) (T-v lft-v rgt-v)) -> P-v X---v (match-Prod l103-v l102-v A-v B-v l97-v (λ (X-0-v : Prod l103-v l102-v A-v B-v) -> C-v) (λ (lft-v : A-v) -> λ (rgt-v : B-v) -> T-v lft-v rgt-v) X---v)) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> λ (P-v : (X---v : Prod l103-v l102-v A-v B-v) -> (X--1-v : C-v) -> Set l56-v) -> λ (auto-v : (lft-v : A-v) -> (rgt-v : B-v) -> (X---v : matita-basics-logic.eq (l103-v ⊔ l102-v) (Prod l103-v l102-v A-v B-v) (mk-Prod l103-v l102-v A-v B-v X-fst-v X-snd-v) (mk-Prod l103-v l102-v A-v B-v lft-v rgt-v)) -> P-v (mk-Prod l103-v l102-v A-v B-v lft-v rgt-v) (T-v lft-v rgt-v)) -> auto-v X-fst-v X-snd-v (matita-basics-logic.refl (l103-v ⊔ l102-v) (Prod l103-v l102-v A-v B-v) (mk-Prod l103-v l102-v A-v B-v X-fst-v X-snd-v))) X-clearme-v

pair-elim2 : (l120-v l119-v l114-v l113-v l67-v : Level) -> (A-v : Set l120-v) -> (B-v : Set l119-v) -> (C-v : Set l114-v) -> (C'-v : Set l113-v) -> (T-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> (T'-v : (X---v : A-v) -> (X--1-v : B-v) -> C'-v) -> (p-v : Prod l120-v l119-v A-v B-v) -> (P-v : (X---v : Prod l120-v l119-v A-v B-v) -> (X--1-v : C-v) -> (X--2-v : C'-v) -> Set l67-v) -> (X---v : (lft-v : A-v) -> (rgt-v : B-v) -> (X---v : matita-basics-logic.eq (l120-v ⊔ l119-v) (Prod l120-v l119-v A-v B-v) p-v (mk-Prod l120-v l119-v A-v B-v lft-v rgt-v)) -> P-v (mk-Prod l120-v l119-v A-v B-v lft-v rgt-v) (T-v lft-v rgt-v) (T'-v lft-v rgt-v)) -> P-v p-v (match-Prod l120-v l119-v A-v B-v l114-v (λ (X-0-v : Prod l120-v l119-v A-v B-v) -> C-v) (λ (lft-v : A-v) -> λ (rgt-v : B-v) -> T-v lft-v rgt-v) p-v) (match-Prod l120-v l119-v A-v B-v l113-v (λ (X-0-v : Prod l120-v l119-v A-v B-v) -> C'-v) (λ (lft-v : A-v) -> λ (rgt-v : B-v) -> T'-v lft-v rgt-v) p-v)
pair-elim2 = λ (l120-v l119-v l114-v l113-v l67-v : Level) -> λ (A-v : Set l120-v) -> λ (B-v : Set l119-v) -> λ (C-v : Set l114-v) -> λ (C'-v : Set l113-v) -> λ (T-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> λ (T'-v : (X---v : A-v) -> (X--1-v : B-v) -> C'-v) -> λ (X-clearme-v : Prod l120-v l119-v A-v B-v) -> match-Prod l120-v l119-v A-v B-v ((lsuc lzero) ⊔ ((((l119-v ⊔ l114-v) ⊔ l113-v) ⊔ l120-v) ⊔ (lsuc l67-v))) (λ (X---v : Prod l120-v l119-v A-v B-v) -> (P-v : (X--1-v : Prod l120-v l119-v A-v B-v) -> (X--2-v : C-v) -> (X--3-v : C'-v) -> Set l67-v) -> (X--1-v : (lft-v : A-v) -> (rgt-v : B-v) -> (X--1-v : matita-basics-logic.eq (l120-v ⊔ l119-v) (Prod l120-v l119-v A-v B-v) X---v (mk-Prod l120-v l119-v A-v B-v lft-v rgt-v)) -> P-v (mk-Prod l120-v l119-v A-v B-v lft-v rgt-v) (T-v lft-v rgt-v) (T'-v lft-v rgt-v)) -> P-v X---v (match-Prod l120-v l119-v A-v B-v l114-v (λ (X-0-v : Prod l120-v l119-v A-v B-v) -> C-v) (λ (lft-v : A-v) -> λ (rgt-v : B-v) -> T-v lft-v rgt-v) X---v) (match-Prod l120-v l119-v A-v B-v l113-v (λ (X-0-v : Prod l120-v l119-v A-v B-v) -> C'-v) (λ (lft-v : A-v) -> λ (rgt-v : B-v) -> T'-v lft-v rgt-v) X---v)) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> λ (P-v : (X---v : Prod l120-v l119-v A-v B-v) -> (X--1-v : C-v) -> (X--2-v : C'-v) -> Set l67-v) -> λ (auto-v : (lft-v : A-v) -> (rgt-v : B-v) -> (X---v : matita-basics-logic.eq (l120-v ⊔ l119-v) (Prod l120-v l119-v A-v B-v) (mk-Prod l120-v l119-v A-v B-v X-fst-v X-snd-v) (mk-Prod l120-v l119-v A-v B-v lft-v rgt-v)) -> P-v (mk-Prod l120-v l119-v A-v B-v lft-v rgt-v) (T-v lft-v rgt-v) (T'-v lft-v rgt-v)) -> auto-v X-fst-v X-snd-v (matita-basics-logic.refl (l120-v ⊔ l119-v) (Prod l120-v l119-v A-v B-v) (mk-Prod l120-v l119-v A-v B-v X-fst-v X-snd-v))) X-clearme-v

pair-eq1 : (l125-v l124-v : Level) -> (A-v : Set l125-v) -> (B-v : Set l124-v) -> (a1-v : A-v) -> (a2-v : A-v) -> (b1-v : B-v) -> (b2-v : B-v) -> (X---v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a1-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.eq l125-v A-v a1-v a2-v
pair-eq1 = λ (l125-v l124-v : Level) -> λ (A-v : Set l125-v) -> λ (B-v : Set l124-v) -> λ (a1-v : A-v) -> λ (a2-v : A-v) -> λ (b1-v : B-v) -> λ (b2-v : B-v) -> λ (H-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a1-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> Prod-discr l125-v l124-v l125-v A-v B-v (mk-Prod l125-v l124-v A-v B-v a1-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) H-v (matita-basics-logic.eq l125-v A-v a1-v a2-v) (λ (e0-v : matita-basics-logic.eq l125-v A-v (matita-basics-logic.R0 l125-v A-v a1-v) a2-v) -> matita-basics-logic.eq-ind-r l125-v (l125-v ⊔ l124-v) A-v a2-v (λ (x-v : A-v) -> λ (X---v : matita-basics-logic.eq l125-v A-v x-v a2-v) -> (X--1-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v x-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> (X-e1-v : matita-basics-logic.eq l124-v B-v (matita-basics-logic.R1 l125-v l124-v A-v x-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq l125-v A-v x-v x0-v) -> B-v) b1-v a2-v X---v) b2-v) -> matita-basics-logic.eq l125-v A-v x-v a2-v) (λ (H0-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> λ (e00-v : matita-basics-logic.eq l124-v B-v (matita-basics-logic.R1 l125-v l124-v A-v a2-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq l125-v A-v a2-v x0-v) -> B-v) b1-v a2-v (matita-basics-logic.refl l125-v A-v a2-v)) b2-v) -> matita-basics-logic.eq-ind-r l124-v (l125-v ⊔ l124-v) B-v b2-v (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq l124-v B-v x-v b2-v) -> (X--1-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v x-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.eq l125-v A-v a2-v a2-v) (λ (H1-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.streicherK (l125-v ⊔ l124-v) l125-v (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) (λ (X---v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.eq l125-v A-v a2-v a2-v) (matita-basics-logic.refl l125-v A-v a2-v) H1-v) b1-v e00-v H0-v) a1-v e0-v H-v)

pair-eq2 : (l125-v l124-v : Level) -> (A-v : Set l125-v) -> (B-v : Set l124-v) -> (a1-v : A-v) -> (a2-v : A-v) -> (b1-v : B-v) -> (b2-v : B-v) -> (X---v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a1-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.eq l124-v B-v b1-v b2-v
pair-eq2 = λ (l125-v l124-v : Level) -> λ (A-v : Set l125-v) -> λ (B-v : Set l124-v) -> λ (a1-v : A-v) -> λ (a2-v : A-v) -> λ (b1-v : B-v) -> λ (b2-v : B-v) -> λ (H-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a1-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> Prod-discr l125-v l124-v l124-v A-v B-v (mk-Prod l125-v l124-v A-v B-v a1-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) H-v (matita-basics-logic.eq l124-v B-v b1-v b2-v) (λ (e0-v : matita-basics-logic.eq l125-v A-v (matita-basics-logic.R0 l125-v A-v a1-v) a2-v) -> matita-basics-logic.eq-ind-r l125-v (l125-v ⊔ l124-v) A-v a2-v (λ (x-v : A-v) -> λ (X---v : matita-basics-logic.eq l125-v A-v x-v a2-v) -> (X--1-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v x-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> (X-e1-v : matita-basics-logic.eq l124-v B-v (matita-basics-logic.R1 l125-v l124-v A-v x-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq l125-v A-v x-v x0-v) -> B-v) b1-v a2-v X---v) b2-v) -> matita-basics-logic.eq l124-v B-v b1-v b2-v) (λ (H0-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b1-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> λ (e00-v : matita-basics-logic.eq l124-v B-v (matita-basics-logic.R1 l125-v l124-v A-v a2-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq l125-v A-v a2-v x0-v) -> B-v) b1-v a2-v (matita-basics-logic.refl l125-v A-v a2-v)) b2-v) -> matita-basics-logic.eq-ind-r l124-v (l125-v ⊔ l124-v) B-v b2-v (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq l124-v B-v x-v b2-v) -> (X--1-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v x-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.eq l124-v B-v x-v b2-v) (λ (H1-v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.streicherK (l125-v ⊔ l124-v) l124-v (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) (λ (X---v : matita-basics-logic.eq (l125-v ⊔ l124-v) (Prod l125-v l124-v A-v B-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v) (mk-Prod l125-v l124-v A-v B-v a2-v b2-v)) -> matita-basics-logic.eq l124-v B-v b2-v b2-v) (matita-basics-logic.refl l124-v B-v b2-v) H1-v) b1-v e00-v H0-v) a1-v e0-v H-v)

pair-destruct-1 : (l69-v l68-v : Level) -> (A-v : Set l69-v) -> (B-v : Set l68-v) -> (a-v : A-v) -> (b-v : B-v) -> (c-v : Prod l69-v l68-v A-v B-v) -> (X---v : matita-basics-logic.eq (l69-v ⊔ l68-v) (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) c-v) -> matita-basics-logic.eq l69-v A-v a-v (fst l69-v l68-v A-v B-v c-v)
pair-destruct-1 = λ (l69-v l68-v : Level) -> λ (A-v : Set l69-v) -> λ (B-v : Set l68-v) -> λ (a-v : A-v) -> λ (b-v : B-v) -> λ (X-clearme-v : Prod l69-v l68-v A-v B-v) -> match-Prod l69-v l68-v A-v B-v (l69-v ⊔ l68-v) (λ (X---v : Prod l69-v l68-v A-v B-v) -> (X--1-v : matita-basics-logic.eq (l69-v ⊔ l68-v) (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) X---v) -> matita-basics-logic.eq l69-v A-v a-v (fst l69-v l68-v A-v B-v X---v)) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> λ (auto-v : matita-basics-logic.eq (l69-v ⊔ l68-v) (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) (mk-Prod l69-v l68-v A-v B-v X-fst-v X-snd-v)) -> matita-basics-logic.rewrite-r l69-v l69-v A-v X-fst-v (λ (X---v : A-v) -> matita-basics-logic.eq l69-v A-v X---v X-fst-v) (matita-basics-logic.refl l69-v A-v X-fst-v) a-v (matita-basics-logic.rewrite-l l69-v l69-v A-v (fst l69-v l68-v A-v B-v (mk-Prod l69-v l68-v A-v B-v a-v b-v)) (λ (X---v : A-v) -> matita-basics-logic.eq l69-v A-v X---v X-fst-v) (matita-basics-logic.rewrite-r (l69-v ⊔ l68-v) l69-v (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v X-fst-v X-snd-v) (λ (X---v : Prod l69-v l68-v A-v B-v) -> matita-basics-logic.eq l69-v A-v (fst l69-v l68-v A-v B-v X---v) X-fst-v) (fst-eq l69-v l68-v A-v B-v X-fst-v X-snd-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) auto-v) a-v (fst-eq l69-v l68-v A-v B-v a-v b-v))) X-clearme-v

pair-destruct-2 : (l69-v l68-v : Level) -> (A-v : Set l69-v) -> (B-v : Set l68-v) -> (a-v : A-v) -> (b-v : B-v) -> (c-v : Prod l69-v l68-v A-v B-v) -> (X---v : matita-basics-logic.eq (l69-v ⊔ l68-v) (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) c-v) -> matita-basics-logic.eq l68-v B-v b-v (snd l69-v l68-v A-v B-v c-v)
pair-destruct-2 = λ (l69-v l68-v : Level) -> λ (A-v : Set l69-v) -> λ (B-v : Set l68-v) -> λ (a-v : A-v) -> λ (b-v : B-v) -> λ (X-clearme-v : Prod l69-v l68-v A-v B-v) -> match-Prod l69-v l68-v A-v B-v (l69-v ⊔ l68-v) (λ (X---v : Prod l69-v l68-v A-v B-v) -> (X--1-v : matita-basics-logic.eq (l69-v ⊔ l68-v) (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) X---v) -> matita-basics-logic.eq l68-v B-v b-v (snd l69-v l68-v A-v B-v X---v)) (λ (X-fst-v : A-v) -> λ (X-snd-v : B-v) -> λ (auto-v : matita-basics-logic.eq (l69-v ⊔ l68-v) (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) (mk-Prod l69-v l68-v A-v B-v X-fst-v X-snd-v)) -> matita-basics-logic.rewrite-r l68-v l68-v B-v X-snd-v (λ (X---v : B-v) -> matita-basics-logic.eq l68-v B-v X---v X-snd-v) (matita-basics-logic.refl l68-v B-v X-snd-v) b-v (matita-basics-logic.rewrite-l l68-v l68-v B-v (snd l69-v l68-v A-v B-v (mk-Prod l69-v l68-v A-v B-v a-v b-v)) (λ (X---v : B-v) -> matita-basics-logic.eq l68-v B-v X---v X-snd-v) (matita-basics-logic.rewrite-r (l69-v ⊔ l68-v) l68-v (Prod l69-v l68-v A-v B-v) (mk-Prod l69-v l68-v A-v B-v X-fst-v X-snd-v) (λ (X---v : Prod l69-v l68-v A-v B-v) -> matita-basics-logic.eq l68-v B-v (snd l69-v l68-v A-v B-v X---v) X-snd-v) (snd-eq l69-v l68-v A-v B-v X-fst-v X-snd-v) (mk-Prod l69-v l68-v A-v B-v a-v b-v) auto-v) b-v (snd-eq l69-v l68-v A-v B-v a-v b-v))) X-clearme-v

coerc-pair-sigma : (l35-v l38-v l32-v : Level) -> (A-v : Set l35-v) -> (B-v : Set l38-v) -> (P-v : (X---v : B-v) -> Set l32-v) -> (p-v : Prod l35-v l38-v A-v B-v) -> (X---v : P-v (snd l35-v l38-v A-v B-v p-v)) -> Prod l35-v (l38-v ⊔ l32-v) A-v (Sig l38-v l32-v B-v (λ (x-v : B-v) -> P-v x-v))
coerc-pair-sigma = λ (l35-v l38-v l32-v : Level) -> λ (A-v : Set l35-v) -> λ (B-v : Set l38-v) -> λ (P-v : (X---v : B-v) -> Set l32-v) -> λ (X-clearme-v : Prod l35-v l38-v A-v B-v) -> match-Prod l35-v l38-v A-v B-v ((l38-v ⊔ l35-v) ⊔ l32-v) (λ (X---v : Prod l35-v l38-v A-v B-v) -> (X--1-v : P-v (snd l35-v l38-v A-v B-v X---v)) -> Prod l35-v (l38-v ⊔ l32-v) A-v (Sig l38-v l32-v B-v (λ (x-v : B-v) -> P-v x-v))) (λ (a-v : A-v) -> λ (b-v : B-v) -> λ (p-v : P-v b-v) -> mk-Prod l35-v (l38-v ⊔ l32-v) A-v (Sig l38-v l32-v B-v (λ (x-v : B-v) -> P-v x-v)) a-v (mk-Sig l38-v l32-v B-v (λ (x-v : B-v) -> P-v x-v) b-v p-v)) X-clearme-v

dpi1--o--coerc-pair-sigma : (l26-v l29-v l21-v l19-v : Level) -> (x0-v : Set l26-v) -> (x1-v : Set l29-v) -> (x2-v : (X---v : Prod l26-v l29-v x0-v x1-v) -> Set l21-v) -> (x3-v : (X---v : x1-v) -> Set l19-v) -> (x4-v : DPair (l29-v ⊔ l26-v) l21-v (Prod l26-v l29-v x0-v x1-v) x2-v) -> (x5-v : x3-v (snd l26-v l29-v x0-v x1-v (dpi1 (l29-v ⊔ l26-v) l21-v (Prod l26-v l29-v x0-v x1-v) x2-v x4-v))) -> Prod l26-v (l29-v ⊔ l19-v) x0-v (Sig l29-v l19-v x1-v (λ (x-v : x1-v) -> x3-v x-v))
dpi1--o--coerc-pair-sigma = λ (l26-v l29-v l21-v l19-v : Level) -> λ (x0-v : Set l26-v) -> λ (x1-v : Set l29-v) -> λ (x2-v : (X---v : Prod l26-v l29-v x0-v x1-v) -> Set l21-v) -> λ (x3-v : (X---v : x1-v) -> Set l19-v) -> λ (x4-v : DPair (l29-v ⊔ l26-v) l21-v (Prod l26-v l29-v x0-v x1-v) x2-v) -> λ (x5-v : x3-v (snd l26-v l29-v x0-v x1-v (dpi1 (l29-v ⊔ l26-v) l21-v (Prod l26-v l29-v x0-v x1-v) x2-v x4-v))) -> coerc-pair-sigma l26-v l29-v l19-v x0-v x1-v x3-v (dpi1 (l29-v ⊔ l26-v) l21-v (Prod l26-v l29-v x0-v x1-v) x2-v x4-v) x5-v
