open import Agda.Primitive
open import matita-basics-bool
open import matita-basics-logic
open import matita-arithmetics-exp
open import matita-arithmetics-nat


fact : (X---v : nat) -> nat
fact O = S O
fact (S x) = times (fact x) (S x)



factS : (n : nat) -> eq lzero nat (fact (S n)) (times (S n) (fact n))
factS = λ (n : nat) -> eq-ind-r lzero lzero nat (times (fact n) (S n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (fact n) (S n))) -> eq lzero nat (fact (S n)) x) (refl lzero nat (fact (S n))) (times (S n) (fact n)) (commutative-times (S n) (fact n))

le-1-fact : (n : nat) -> le (S O) (fact n)
le-1-fact = λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> le (S O) (fact X-x-365)) (lt-O-S O) (λ (x-366 : nat) -> λ (X-x-368 : le (S O) (fact x-366)) -> eq-coerc lzero (le (S O) (plus (fact x-366) (times x-366 (fact x-366)))) (le (S O) (times (fact x-366) (S x-366))) (lt-minus-to-plus O (times x-366 (fact x-366)) (fact x-366) X-x-368) (rewrite-l lzero (lsuc lzero) nat (plus (fact x-366) (times (fact x-366) x-366)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S O) (plus (fact x-366) (times x-366 (fact x-366)))) (le (S O) X--)) (rewrite-r lzero (lsuc lzero) nat (times x-366 (fact x-366)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S O) (plus (fact x-366) (times x-366 (fact x-366)))) (le (S O) (plus (fact x-366) X--))) (refl (lsuc lzero) (Set (lzero)) (le (S O) (plus (fact x-366) (times x-366 (fact x-366))))) (times (fact x-366) x-366) (commutative-times (fact x-366) x-366)) (times (fact x-366) (S x-366)) (times-n-Sm (fact x-366) x-366))) n

le-2-fact : (n : nat) -> (X-- : lt (S O) n) -> le (S (S O)) (fact n)
le-2-fact = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : lt (S O) X--) -> le (S (S O)) (fact X--)) (λ (abs : lt (S O) O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> le (S (S O)) (fact O)) (absurd lzero (le (S (S O)) O) abs (not-le-Sn-O (S O)))) (λ (m : nat) -> λ (le2 : le (S (S O)) (S m)) -> le-times (S O) (fact m) (S (S O)) (S m) (le-1-fact m) le2) n

le-n-fact-n : (n : nat) -> le n (fact n)
le-n-fact-n = λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> le X-x-365 (fact X-x-365)) (le-n-Sn O) (λ (n0 : nat) -> λ (Hind : le n0 (fact n0)) -> transitive-le (S n0) (times (S O) (S n0)) (times (fact n0) (S n0)) (eq-coerc lzero (le (S n0) (S n0)) (le (S n0) (times (S O) (S n0))) (le-n (S n0)) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S n0) (S n0)) (le (S n0) X--)) (rewrite-l lzero (lsuc lzero) nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S n0) (S n0)) (le (S n0) X--)) (rewrite-r lzero (lsuc lzero) nat (times O (S n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S n0) (S n0)) (le (S n0) (plus (S n0) X--))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S n0) (S n0)) (le (S n0) (plus (S n0) X--))) (rewrite-r lzero (lsuc lzero) nat (plus O (S n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S n0) (S n0)) (le (S n0) X--)) (rewrite-l lzero (lsuc lzero) nat (S n0) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S n0) (S n0)) (le (S n0) X--)) (refl (lsuc lzero) (Set (lzero)) (le (S n0) (S n0))) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S O) (S n0)) (commutative-times (S O) (S n0)))) (le-times (S O) (fact n0) (S n0) (S n0) (le-1-fact n0) (le-n (S n0)))) n

let-clause-16' : (n : nat) -> (m : nat) -> (lt2 : lt (S (S O)) (S m)) -> (x32 : nat) -> eq lzero nat (S x32) (plus x32 (S O))
let-clause-16' = λ (n : nat) -> λ (m : nat) -> λ (lt2 : lt (S (S O)) (S m)) -> λ (x32 : nat) -> rewrite-r lzero lzero nat (plus x32 O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus x32 (S O))) (plus-n-Sm x32 O) x32 (plus-n-O x32)

lt-n-fact-n : (n : nat) -> (X-- : lt (S (S O)) n) -> lt n (fact n)
lt-n-fact-n = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : lt (S (S O)) X--) -> lt X-- (fact X--)) (λ (H : lt (S (S O)) O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O (fact O)) (absurd lzero (le (S (S (S O))) O) H (not-le-Sn-O (S (S O))))) (λ (m : nat) -> λ (lt2 : lt (S (S O)) (S m)) -> lt-to-le-to-lt (S m) (times (S (S O)) (S m)) (times (fact m) (S m)) (eq-coerc lzero (lt (S m) (plus (plus (S m) O) (S m))) (lt (S m) (times (S (S O)) (S m))) (lt-plus-Sn-r (S m) O m) (rewrite-r lzero (lsuc lzero) nat (plus (S m) (plus O (S m))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) X--) (lt (S m) (times (S (S O)) (S m)))) (rewrite-r lzero (lsuc lzero) nat (times (S m) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) X--)) (rewrite-l lzero (lsuc lzero) nat (plus (S m) (times (S m) (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) X--)) (rewrite-l lzero (lsuc lzero) nat (plus (S m) (times (S m) O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) (plus (S m) X--))) (rewrite-r lzero (lsuc lzero) nat (times O (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) (plus (S m) (plus (S m) X--)))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) (plus (S m) (plus (S m) X--)))) (rewrite-r lzero (lsuc lzero) nat (plus O (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) (plus (S m) X--))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (plus O (S m)))) (lt (S m) (plus (S m) X--))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) X--)) (lt (S m) (plus (S m) (S m)))) (refl (lsuc lzero) (Set (lzero)) (lt (S m) (plus (S m) (S m)))) (plus O (S m)) (plus-O-n (S m))) (plus O (S m)) (plus-O-n (S m))) (plus (S m) O) (commutative-plus (S m) O)) (times O (S m)) (times-O-n (S m))) (times (S m) O) (commutative-times (S m) O)) (times (S m) (S O)) (times-n-Sm (S m) O)) (times (S m) (S (S O))) (times-n-Sm (S m) (S O))) (times (S (S O)) (S m)) (commutative-times (S (S O)) (S m))) (plus (plus (S m) O) (S m)) (associative-plus (S m) O (S m)))) (le-times (S (S O)) (fact m) (S m) (S m) (le-2-fact m (lt-plus-to-lt-l (S O) (S O) m (eq-coerc lzero (lt (S (S O)) (S m)) (lt (plus (S O) (S O)) (plus m (S O))) lt2 (rewrite-r lzero (lsuc lzero) nat (plus (S O) (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (S m)) (lt (plus (S O) (S O)) (plus m (S O)))) (rewrite-r lzero (lsuc lzero) nat (plus m (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (plus (S O) (S O)) X--) (lt (plus (S O) (S O)) (plus m (S O)))) (refl (lsuc lzero) (Set (lzero)) (lt (plus (S O) (S O)) (plus m (S O)))) (S m) (let-clause-16' n m lt2 m)) (S (S O)) (let-clause-16' n m lt2 (S O)))))) (le-n (S m)))) n

fact-to-exp1 : (n : nat) -> (X-- : lt O n) -> le (fact (times (S (S O)) n)) (times (times (exp (S (S O)) (pred (times (S (S O)) n))) (fact n)) (fact n))
fact-to-exp1 = λ (n : nat) -> λ (posn : lt O n) -> le-ind lzero (S O) (λ (x-417 : nat) -> λ (X-x-418 : le (S O) x-417) -> le (fact (times (S (S O)) x-417)) (times (times (exp (S (S O)) (pred (times (S (S O)) x-417))) (fact x-417)) (fact x-417))) (le-n (fact (times (S (S O)) (S O)))) (λ (n0 : nat) -> λ (posn0 : le (S O) n0) -> λ (Hind : le (fact (times (S (S O)) n0)) (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (fact n0)) (fact n0))) -> transitive-le (fact (times (S (S O)) (S n0))) (times (times (fact (times (S (S O)) n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (exp (S (S O)) (pred (times (S (S O)) (S n0)))) (fact (S n0))) (fact (S n0))) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) n0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) n0)))) -> le (fact x) (times (times (fact (times (S (S O)) n0)) x) x)) (le-times (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O)))) (times (fact (plus n0 (plus n0 O))) (S (S (plus n0 (plus n0 O))))) (S (S (plus n0 (plus n0 O)))) (S (S (plus n0 (plus n0 O)))) (eq-coerc lzero (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O)))) (times (fact (plus n0 (plus n0 O))) (S (S (plus n0 (plus n0 O)))))) (le-plus-n-r (fact (plus n0 n0)) (times (fact (plus n0 n0)) (plus n0 (S n0)))) (rewrite-l lzero (lsuc lzero) nat (plus (fact (plus n0 (plus n0 O))) (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O)))) X--)) (rewrite-l lzero (lsuc lzero) nat n0 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 X--)) (S (plus n0 (plus n0 O)))) (plus (fact (plus n0 (plus n0 O))) (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O))))))) (rewrite-l lzero (lsuc lzero) nat n0 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 n0)) (S (plus n0 X--))) (plus (fact (plus n0 (plus n0 O))) (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O))))))) (rewrite-r lzero (lsuc lzero) nat (plus n0 (S n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 n0)) X--) (plus (fact (plus n0 (plus n0 O))) (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O))))))) (rewrite-l lzero (lsuc lzero) nat n0 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (fact (plus n0 X--)) (times (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O))))))) (rewrite-l lzero (lsuc lzero) nat n0 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (fact (plus n0 n0)) (times (fact (plus n0 X--)) (S (plus n0 (plus n0 O))))))) (rewrite-l lzero (lsuc lzero) nat n0 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (fact (plus n0 n0)) (times (fact (plus n0 n0)) (S (plus n0 X--)))))) (rewrite-r lzero (lsuc lzero) nat (plus n0 (S n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (fact (plus n0 n0)) (times (fact (plus n0 n0)) X--)))) (rewrite-r lzero (lsuc lzero) nat (plus (fact (plus n0 n0)) (times (fact (plus n0 n0)) (plus n0 (S n0)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) X--) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (fact (plus n0 n0)) (times (fact (plus n0 n0)) (plus n0 (S n0)))))) (refl (lsuc lzero) (Set (lzero)) (le (times (fact (plus n0 n0)) (plus n0 (S n0))) (plus (fact (plus n0 n0)) (times (fact (plus n0 n0)) (plus n0 (S n0)))))) (plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0))) (commutative-plus (times (fact (plus n0 n0)) (plus n0 (S n0))) (fact (plus n0 n0)))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (plus n0 O) (plus-n-O n0)) (plus n0 O) (plus-n-O n0)) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (plus n0 O) (plus-n-O n0)) (times (fact (plus n0 (plus n0 O))) (S (S (plus n0 (plus n0 O))))) (times-n-Sm (fact (plus n0 (plus n0 O))) (S (plus n0 (plus n0 O)))))) (le-n (S (S (plus n0 (plus n0 O)))))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0)))) (eq-ind-r lzero lzero nat (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O)))) -> le (times (times (fact (times (S (S O)) n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times x (fact (S n0))) (fact (S n0)))) (transitive-le (times (times (fact (times (S (S O)) n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (fact (S n0))) (fact (S n0))) (le-times (times (fact (times (S (S O)) n0)) (times (S (S O)) (S n0))) (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0)) (times (S (S O)) (S n0)) (le-times (fact (times (S (S O)) n0)) (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (fact n0)) (fact n0)) (times (S (S O)) (S n0)) (times (S (S O)) (S n0)) Hind (le-n (times (S (S O)) (S n0)))) (le-n (times (S (S O)) (S n0)))) (eq-coerc lzero (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0)))) (le-n (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (rewrite-r lzero (lsuc lzero) nat (times n0 (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (times (times (times (exp (S (S O)) (pred X--)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (times (times X-- (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (times X-- (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (times (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))) X--) (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (S (S O))) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times X-- (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times X-- (times (S (S O)) (S n0))) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) X--) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (S (S O))) (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le X-- (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (S (S O)) (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le X-- (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) X--) (times (times (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times n0 (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (times (times (exp (S (S O)) (pred X--)) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (times X-- (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times X-- (times (fact n0) (S n0))) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (fact n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))) X--) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (fact n0)) (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times X-- (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (fact n0) (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times X-- (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (S n0) X--) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (S n0) (times (S (S O)) X--)) (times (fact n0) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (fact n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) X--))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (fact n0)) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) X--)) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (fact n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) X--)) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (fact n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) X--))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) X--)))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) X--))))) (refl (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))))) (times (fact n0) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (times-times (fact n0) (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (times (fact n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times-times (fact n0) (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (fact n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (times-times (fact n0) (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (times (times (S n0) (fact n0)) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (associative-times (S n0) (fact n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (S n0) (fact n0))) (commutative-times (times (S n0) (times (S (S O)) (times (S (S O)) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (S n0) (fact n0)))) (times (fact n0) (S n0)) (commutative-times (fact n0) (S n0))) (times (fact n0) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))) (times-times (fact n0) (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))) (times (fact n0) (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (times-times (fact n0) (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (times (times (S n0) (fact n0)) (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (associative-times (S n0) (fact n0) (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))) (times (S n0) (fact n0))) (commutative-times (times (S (S O)) (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O))))))) (times (S n0) (fact n0)))) (times (fact n0) (S n0)) (commutative-times (fact n0) (S n0))) (times (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))) (S (S O))) (commutative-times (times (S (S O)) (exp (S (S O)) (pred (times n0 (S (S O)))))) (S (S O)))) (times (exp (S (S O)) (pred (times n0 (S (S O))))) (S (S O))) (commutative-times (exp (S (S O)) (pred (times n0 (S (S O))))) (S (S O)))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (times (S (S O)) (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (times-times (S (S O)) (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (times (times (S n0) (S (S O))) (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))))) (associative-times (S n0) (S (S O)) (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))))) (times (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (S n0) (S (S O)))) (commutative-times (times (S n0) (times (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (S n0) (S (S O))))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))) (times (times (S n0) (S (S O))) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))))) (associative-times (S n0) (S (S O)) (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))))) (times (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))) (times (S n0) (S (S O)))) (commutative-times (times (fact n0) (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O))))))) (times (S n0) (S (S O))))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))) (times (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))) (fact n0)) (commutative-times (times (fact n0) (exp (S (S O)) (pred (times n0 (S (S O)))))) (fact n0))) (times (exp (S (S O)) (pred (times n0 (S (S O))))) (fact n0)) (commutative-times (exp (S (S O)) (pred (times n0 (S (S O))))) (fact n0))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)))) (exp (S (S O)) (pred (times (S (S O)) (S n0)))) (eq-ind-r lzero lzero nat (S (S (pred (times (S (S O)) n0)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (pred (times (S (S O)) n0))))) -> eq lzero nat (exp (S (S O)) x) (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O)))) (eq-ind-r lzero lzero nat (S (S (pred (times (S (S O)) n0)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (pred (times (S (S O)) n0))))) -> eq lzero nat (exp (S (S O)) (S (S (pred (times (S (S O)) n0))))) (times (times (exp (S (S O)) (pred (times (S (S O)) n0))) (S (S O))) (S (S O)))) (refl lzero nat (exp (S (S O)) (S (S (pred (times (S (S O)) n0)))))) (pred (times (S (S O)) (S n0))) (eq-ind-r lzero lzero nat (times (S (S O)) n0) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) n0)) -> eq lzero nat (pred (times (S (S O)) (S n0))) (S x)) (rewrite-l lzero lzero nat (S (times (S (S O)) n0)) (λ (X-- : nat) -> eq lzero nat X-- (S (times (S (S O)) n0))) (refl lzero nat (S (times (S (S O)) n0))) (pred (times (S (S O)) (S n0))) (rewrite-r lzero lzero nat (S (S (times (S (S O)) n0))) (λ (X-- : nat) -> eq lzero nat (S (times (S (S O)) n0)) (pred X--)) (pred-Sn (S (times (S (S O)) n0))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))))) (S (pred (times (S (S O)) n0))) (S-pred (times (S (S O)) n0) (le-times (S O) (S (S O)) (S O) n0 (lt-O-S (S O)) posn0)))) (pred (times (S (S O)) (S n0))) (eq-ind-r lzero lzero nat (times (S (S O)) n0) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) n0)) -> eq lzero nat (pred (times (S (S O)) (S n0))) (S x)) (rewrite-l lzero lzero nat (S (times (S (S O)) n0)) (λ (X-- : nat) -> eq lzero nat X-- (S (times (S (S O)) n0))) (refl lzero nat (S (times (S (S O)) n0))) (pred (times (S (S O)) (S n0))) (rewrite-r lzero lzero nat (S (S (times (S (S O)) n0))) (λ (X-- : nat) -> eq lzero nat (S (times (S (S O)) n0)) (pred X--)) (pred-Sn (S (times (S (S O)) n0))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))))) (S (pred (times (S (S O)) n0))) (S-pred (times (S (S O)) n0) (le-times (S O) (S (S O)) (S O) n0 (lt-O-S (S O)) posn0)))))) n posn

fact-to-exp : (n : nat) -> le (fact (times (S (S O)) n)) (times (times (exp (S (S O)) (pred (times (S (S O)) n))) (fact n)) (fact n))
fact-to-exp = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> le (fact (times (S (S O)) X--)) (times (times (exp (S (S O)) (pred (times (S (S O)) X--))) (fact X--)) (fact X--))) (lt-O-S O) (λ (n0 : nat) -> fact-to-exp1 (S n0) (lt-O-S n0)) n

exp-to-fact1 : (n : nat) -> (X-- : lt O n) -> lt (times (times (exp (S (S O)) (times (S (S O)) n)) (fact n)) (fact n)) (fact (S (times (S (S O)) n)))
exp-to-fact1 = λ (n : nat) -> λ (posn : lt O n) -> le-ind lzero (S O) (λ (x-417 : nat) -> λ (X-x-418 : le (S O) x-417) -> lt (times (times (exp (S (S O)) (times (S (S O)) x-417)) (fact x-417)) (fact x-417)) (fact (S (times (S (S O)) x-417)))) (le-n-Sn (S (S (S (S (S O)))))) (λ (n0 : nat) -> λ (posn0 : le (S O) n0) -> λ (Hind : lt (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (fact (S (times (S (S O)) n0)))) -> eq-ind-r lzero lzero nat (times (times (exp (S (S O)) (times (S (S O)) n0)) (S (S O))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (exp (S (S O)) (times (S (S O)) n0)) (S (S O))) (S (S O)))) -> lt (times (times x (fact (S n0))) (fact (S n0))) (fact (S (times (S (S O)) (S n0))))) (le-to-lt-to-lt (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (S (S O))) (S (S O))) (fact (S n0))) (fact (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) (fact (S (times (S (S O)) (S n0)))) (eq-coerc lzero (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0)))) (le-n (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (rewrite-r lzero (lsuc lzero) nat (times n0 (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (times (times (exp (S (S O)) X--) (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-l lzero (lsuc lzero) nat (exp (exp (S (S O)) n0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (times (times X-- (S (S O))) (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (times X-- (S (S O))) (times (fact n0) (S n0))) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times X-- (times (fact n0) (S n0))) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (fact n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))) X--) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (fact n0)) (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times X-- (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (fact n0) (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times X-- (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (S n0) X--) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (exp (exp (S (S O)) n0) (S (S O))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (S n0) (times (S (S O)) X--)) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (S n0) (times (S (S O)) (times (S (S O)) X--))) (times (fact n0) (S n0))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (fact n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))) X--) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (fact n0)) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le X-- (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (fact n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le X-- (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (fact n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) X--) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) X--)) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (times (fact n0) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) X--))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) X--)))) (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times n0 (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times (times (times (exp (S (S O)) X--) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-l lzero (lsuc lzero) nat (exp (exp (S (S O)) n0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times (times (times X-- (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (fact n0) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times X-- (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times X-- (times (S (S O)) (S n0))) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))) X--) (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (S (S O))) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times X-- (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times X-- (times (S (S O)) (S n0))))) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))) X--))) (rewrite-r lzero (lsuc lzero) nat (times (times (S n0) (S (S O))) (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) X--)) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (S (S O)) (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) X--)) (rewrite-r lzero (lsuc lzero) nat (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))))) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) X--))) (refl (lsuc lzero) (Set (lzero)) (le (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (S n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))))) (times (S (S O)) (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))) (times-times (S (S O)) (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))) (times (times (S n0) (S (S O))) (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))))) (associative-times (S n0) (S (S O)) (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))))) (times (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))) (times (S n0) (S (S O)))) (commutative-times (times (S n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))) (times (S n0) (S (S O))))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))) (times (times (S n0) (S (S O))) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0)))) (associative-times (S n0) (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))))) (times (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))) (times (S n0) (S (S O)))) (commutative-times (times (exp (exp (S (S O)) n0) (S (S O))) (times (fact n0) (fact n0))) (times (S n0) (S (S O))))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))) (times (fact n0) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))) (times-times (fact n0) (exp (exp (S (S O)) n0) (S (S O))) (fact n0))) (times (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)) (fact n0)) (commutative-times (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)) (fact n0))) (exp (S (S O)) (times n0 (S (S O)))) (exp-exp-times (S (S O)) n0 (S (S O)))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (times (fact n0) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))) (times-times (fact n0) (exp (exp (S (S O)) n0) (S (S O))) (fact n0))) (times (fact n0) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))) (times-times (fact n0) (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))) (times (fact n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))) (times-times (fact n0) (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))) (times (fact n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))))) (times-times (fact n0) (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))))) (times (times (S n0) (fact n0)) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0)))))) (associative-times (S n0) (fact n0) (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))))) (times (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))) (times (S n0) (fact n0))) (commutative-times (times (S n0) (times (S (S O)) (times (S (S O)) (times (exp (exp (S (S O)) n0) (S (S O))) (fact n0))))) (times (S n0) (fact n0)))) (times (fact n0) (S n0)) (commutative-times (fact n0) (S n0))) (times (fact n0) (exp (exp (S (S O)) n0) (S (S O)))) (commutative-times (fact n0) (exp (exp (S (S O)) n0) (S (S O))))) (times (fact n0) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))) (times-times (fact n0) (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))) (times (fact n0) (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))))) (times-times (fact n0) (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))))) (times (times (S n0) (fact n0)) (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))))) (associative-times (S n0) (fact n0) (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))))) (times (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))) (times (S n0) (fact n0))) (commutative-times (times (S (S O)) (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O))))) (times (S n0) (fact n0)))) (times (fact n0) (S n0)) (commutative-times (fact n0) (S n0))) (times (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))) (S (S O))) (commutative-times (times (S (S O)) (exp (exp (S (S O)) n0) (S (S O)))) (S (S O)))) (times (exp (exp (S (S O)) n0) (S (S O))) (S (S O))) (commutative-times (exp (exp (S (S O)) n0) (S (S O))) (S (S O)))) (exp (S (S O)) (times n0 (S (S O)))) (exp-exp-times (S (S O)) n0 (S (S O)))) (times (S (S O)) n0) (commutative-times (S (S O)) n0))) (eq-ind-r lzero lzero nat (times (times (fact (S (times (S (S O)) n0))) (S (S (times (S (S O)) n0)))) (S (S (S (times (S (S O)) n0))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (fact (S (times (S (S O)) n0))) (S (S (times (S (S O)) n0)))) (S (S (S (times (S (S O)) n0)))))) -> lt (times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (S (S O)) (S n0))) x) (lt-to-le-to-lt-times (times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (times (S (S O)) (S n0))) (times (fact (S (times (S (S O)) n0))) (S (S (times (S (S O)) n0)))) (times (S (S O)) (S n0)) (S (S (S (times (S (S O)) n0)))) (lt-to-le-to-lt-times (times (times (exp (S (S O)) (times (S (S O)) n0)) (fact n0)) (fact n0)) (fact (S (times (S (S O)) n0))) (times (S (S O)) (S n0)) (S (S (times (S (S O)) n0))) Hind (eq-coerc lzero (le (times (S (S O)) (S n0)) (times (S (S O)) (S n0))) (le (times (S (S O)) (S n0)) (S (S (times (S (S O)) n0)))) (le-n (times (S (S O)) (S n0))) (rewrite-r lzero (lsuc lzero) nat (S (S (times (S (S O)) n0))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (S (S O)) (S n0)) X--) (le (times (S (S O)) (S n0)) (S (S (times (S (S O)) n0))))) (refl (lsuc lzero) (Set (lzero)) (le (times (S (S O)) (S n0)) (S (S (times (S (S O)) n0))))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))))) (lt-O-S (S (times (S (S O)) n0)))) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) n0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) n0)))) -> le x (S (S (S (times (S (S O)) n0))))) (le-n-Sn (S (S (times (S (S O)) n0)))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0)))) (lt-O-S (S (S (times (S (S O)) n0))))) (fact (S (times (S (S O)) (S n0)))) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) n0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) n0)))) -> eq lzero nat (fact (S x)) (times (times (fact (S (times (S (S O)) n0))) (S (S (times (S (S O)) n0)))) (S (S (S (times (S (S O)) n0)))))) (refl lzero nat (fact (S (S (S (times (S (S O)) n0)))))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0)))))) (exp (S (S O)) (times (S (S O)) (S n0))) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) n0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) n0)))) -> eq lzero nat (exp (S (S O)) x) (times (times (exp (S (S O)) (times (S (S O)) n0)) (S (S O))) (S (S O)))) (refl lzero nat (exp (S (S O)) (S (S (times (S (S O)) n0))))) (times (S (S O)) (S n0)) (rewrite-r lzero lzero nat (times (S n0) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (plus (S n0) (times (S n0) O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (plus (S n0) X--)) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (plus O (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-l lzero lzero nat (S n0) (λ (X-- : nat) -> eq lzero nat (plus (S n0) X--) (S (S (times (S (S O)) n0)))) (rewrite-r lzero lzero nat (times n0 (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S X--))) (rewrite-l lzero lzero nat (plus n0 (times n0 O)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 (plus n0 X--))))) (rewrite-l lzero lzero nat n0 (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S (S (plus n0 X--)))) (rewrite-r lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) (S X--)) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat (plus (S n0) (S n0)) X--) (rewrite-r lzero lzero nat (plus n0 (S (S n0))) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (refl lzero nat (plus n0 (S (S n0)))) (plus (S n0) (S n0)) (rewrite-l lzero lzero nat (S (plus (S n0) n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S (S n0)))) (rewrite-l lzero lzero nat (plus n0 (S n0)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S (S n0)))) (plus-n-Sm n0 (S n0)) (plus (S n0) n0) (commutative-plus n0 (S n0))) (plus (S n0) (S n0)) (plus-n-Sm (S n0) n0))) (S (plus n0 (S n0))) (plus-n-Sm n0 (S n0))) (S (plus n0 n0)) (plus-n-Sm n0 n0)) (plus n0 O) (plus-n-O n0)) (times n0 O) (times-n-O n0)) (times n0 (S O)) (times-n-Sm n0 O)) (times n0 (S (S O))) (times-n-Sm n0 (S O))) (times (S (S O)) n0) (commutative-times (S (S O)) n0)) (plus O (S n0)) (plus-O-n (S n0))) (plus (S n0) O) (commutative-plus (S n0) O)) (times O (S n0)) (times-O-n (S n0))) (times (S n0) O) (commutative-times (S n0) O)) (times (S n0) (S O)) (times-n-Sm (S n0) O)) (times (S n0) (S (S O))) (times-n-Sm (S n0) (S O))) (times (S (S O)) (S n0)) (commutative-times (S (S O)) (S n0))))) n posn

exp-to-fact2 : (n : nat) -> (X-- : lt O n) -> le (times (exp (S (S O)) (times (S (S O)) n)) (exp (fact n) (S (S O)))) (times (times (S (S O)) n) (fact (times (S (S O)) n)))
exp-to-fact2 = λ (n : nat) -> λ (posn : lt O n) -> le-ind lzero (S O) (λ (x-417 : nat) -> λ (X-x-418 : le (S O) x-417) -> le (times (exp (S (S O)) (times (S (S O)) x-417)) (exp (fact x-417) (S (S O)))) (times (times (S (S O)) x-417) (fact (times (S (S O)) x-417)))) (le-n (times (exp (S (S O)) (times (S (S O)) (S O))) (exp (fact (S O)) (S (S O))))) (λ (m : nat) -> λ (le1m : le (S O) m) -> λ (Hind : le (times (exp (S (S O)) (times (S (S O)) m)) (exp (fact m) (S (S O)))) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) -> eq-ind-r lzero lzero nat (S (S (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) m)))) -> le (times (exp (S (S O)) x) (exp (fact (S m)) (S (S O)))) (times (times (S (S O)) (S m)) (fact (times (S (S O)) (S m))))) (eq-ind-r lzero lzero nat (times (S m) (fact m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S m) (fact m))) -> le (times (exp (S (S O)) (S (S (times (S (S O)) m)))) (exp x (S (S O)))) (times (times (S (S O)) (S m)) (fact (times (S (S O)) (S m))))) (eq-ind lzero lzero nat (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))) x-1) -> le (times (exp (S (S O)) (S (S (times (S (S O)) m)))) x-1) (times (times (S (S O)) (S m)) (fact (times (S (S O)) (S m))))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) (S (times (S (S O)) m)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) (S (times (S (S O)) m))))) -> le (times x (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))) (times (times (S (S O)) (S m)) (fact (times (S (S O)) (S m))))) (eq-ind-r lzero lzero nat (times (S (S O)) (times (exp (S (S O)) (S (times (S (S O)) m))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (times (exp (S (S O)) (S (times (S (S O)) m))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))))) -> le x (times (times (S (S O)) (S m)) (fact (times (S (S O)) (S m))))) (eq-ind-r lzero lzero nat (times (S (S O)) (times (S m) (fact (times (S (S O)) (S m))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (times (S m) (fact (times (S (S O)) (S m)))))) -> le (times (S (S O)) (times (exp (S (S O)) (S (times (S (S O)) m))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) x) (monotonic-le-times-r (S (S O)) (times (exp (S (S O)) (S (times (S (S O)) m))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))) (times (S m) (fact (times (S (S O)) (S m)))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) (times (S (S O)) m)))) -> le (times x (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))) (times (S m) (fact (times (S (S O)) (S m))))) (eq-ind-r lzero lzero nat (times (S (S O)) (times (exp (S (S O)) (times (S (S O)) m)) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (times (exp (S (S O)) (times (S (S O)) m)) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))))) -> le x (times (S m) (fact (times (S (S O)) (S m))))) (transitive-le (times (S (S O)) (times (exp (S (S O)) (times (S (S O)) m)) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) (times (S (S O)) (times (times (times (S (S O)) m) (fact (times (S (S O)) m))) (exp (S m) (S (S O))))) (times (S m) (fact (times (S (S O)) (S m)))) (le-times (S (S O)) (S (S O)) (times (exp (S (S O)) (times (S (S O)) m)) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))) (times (times (times (S (S O)) m) (fact (times (S (S O)) m))) (exp (S m) (S (S O)))) (le-n (S (S O))) (eq-ind-r lzero lzero nat (times (exp (fact m) (S (S O))) (exp (S m) (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (fact m) (S (S O))) (exp (S m) (S (S O))))) -> le (times (exp (S (S O)) (times (S (S O)) m)) x) (times (times (times (S (S O)) m) (fact (times (S (S O)) m))) (exp (S m) (S (S O))))) (eq-ind lzero lzero nat (times (times (exp (S (S O)) (times (S (S O)) m)) (exp (fact m) (S (S O)))) (exp (S m) (S (S O)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (exp (S (S O)) (times (S (S O)) m)) (exp (fact m) (S (S O)))) (exp (S m) (S (S O)))) x-1) -> le x-1 (times (times (times (S (S O)) m) (fact (times (S (S O)) m))) (exp (S m) (S (S O))))) (le-times (times (exp (S (S O)) (times (S (S O)) m)) (exp (fact m) (S (S O)))) (times (times (S (S O)) m) (fact (times (S (S O)) m))) (exp (S m) (S (S O))) (exp (S m) (S (S O))) Hind (le-n (exp (S m) (S (S O))))) (times (exp (S (S O)) (times (S (S O)) m)) (times (exp (fact m) (S (S O))) (exp (S m) (S (S O))))) (associative-times (exp (S (S O)) (times (S (S O)) m)) (exp (fact m) (S (S O))) (exp (S m) (S (S O))))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))) (commutative-times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) (eq-ind-r lzero lzero nat (times (S m) (S m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S m) (S m))) -> le (times (S (S O)) (times (times (times (S (S O)) m) (fact (times (S (S O)) m))) x)) (times (S m) (fact (times (S (S O)) (S m))))) (eq-ind lzero lzero nat (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (times (S m) (S m))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (times (S m) (S m))) x-1) -> le x-1 (times (S m) (fact (times (S (S O)) (S m))))) (eq-ind lzero lzero nat (times (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) (S m)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) (S m)) x-1) -> le x-1 (times (S m) (fact (times (S (S O)) (S m))))) (eq-ind-r lzero lzero nat (times (fact (times (S (S O)) (S m))) (S m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (fact (times (S (S O)) (S m))) (S m))) -> le (times (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) (S m)) x) (le-times (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) (fact (times (S (S O)) (S m))) (S m) (S m) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) m)))) -> le (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) (fact x)) (eq-ind-r lzero lzero nat (times (S (S (times (S (S O)) m))) (fact (S (times (S (S O)) m)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S (times (S (S O)) m))) (fact (S (times (S (S O)) m))))) -> le (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) x) (eq-ind-r lzero lzero nat (times (S m) (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S m) (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) -> le x (times (S (S (times (S (S O)) m))) (fact (S (times (S (S O)) m))))) (eq-ind lzero lzero nat (times (times (S m) (S (S O))) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S m) (S (S O))) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) x-1) -> le x-1 (times (S (S (times (S (S O)) m))) (fact (S (times (S (S O)) m))))) (le-times (times (S m) (S (S O))) (S (S (times (S (S O)) m))) (times (times (S (S O)) m) (fact (times (S (S O)) m))) (fact (S (times (S (S O)) m))) (eq-coerc lzero (le (plus (S m) (S m)) (plus (S m) (S m))) (le (times (S m) (S (S O))) (S (S (times (S (S O)) m)))) (le-n (plus (S m) (S m))) (rewrite-l lzero (lsuc lzero) nat (plus (S m) (times (S m) (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le X-- (S (S (times (S (S O)) m))))) (rewrite-l lzero (lsuc lzero) nat (plus (S m) (times (S m) O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) X--) (S (S (times (S (S O)) m))))) (rewrite-r lzero (lsuc lzero) nat (times O (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (plus (S m) X--)) (S (S (times (S (S O)) m))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (plus (S m) X--)) (S (S (times (S (S O)) m))))) (rewrite-r lzero (lsuc lzero) nat (plus O (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) X--) (S (S (times (S (S O)) m))))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) X--) (S (S (times (S (S O)) m))))) (rewrite-r lzero (lsuc lzero) nat (times m (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) (S (S X--)))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) (S (S X--)))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) (S (S (plus m X--))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) (S (S (plus m (plus m X--)))))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) (S (S (plus m X--))))) (rewrite-r lzero (lsuc lzero) nat (plus m (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) (S X--))) (rewrite-r lzero (lsuc lzero) nat (plus m (S (S m))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) X--)) (rewrite-l lzero (lsuc lzero) nat (plus (S m) (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m))) (le (plus (S m) (S m)) X--)) (refl (lsuc lzero) (Set (lzero)) (le (plus (S m) (S m)) (plus (S m) (S m)))) (plus m (S (S m))) (rewrite-l lzero lzero nat (S (plus m (S m))) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) X--) (rewrite-l lzero lzero nat (S (plus m m)) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) (S X--)) (rewrite-r lzero lzero nat (plus m O) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (times m O) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) (S (S (plus m (plus m X--))))) (rewrite-r lzero lzero nat (times m (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (times m (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) (S (S X--))) (rewrite-l lzero lzero nat (times (S (S O)) m) (λ (X-- : nat) -> eq lzero nat (plus (S m) (S m)) (S (S X--))) (rewrite-r lzero lzero nat (plus O (S m)) (λ (X-- : nat) -> eq lzero nat (plus (S m) X--) (S (S (times (S (S O)) m)))) (rewrite-l lzero lzero nat (plus (S m) O) (λ (X-- : nat) -> eq lzero nat (plus (S m) X--) (S (S (times (S (S O)) m)))) (rewrite-r lzero lzero nat (times O (S m)) (λ (X-- : nat) -> eq lzero nat (plus (S m) (plus (S m) X--)) (S (S (times (S (S O)) m)))) (rewrite-l lzero lzero nat (times (S m) O) (λ (X-- : nat) -> eq lzero nat (plus (S m) (plus (S m) X--)) (S (S (times (S (S O)) m)))) (rewrite-r lzero lzero nat (times (S m) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S m) X--) (S (S (times (S (S O)) m)))) (rewrite-r lzero lzero nat (times (S m) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) m)))) (rewrite-l lzero lzero nat (times (S (S O)) (S m)) (λ (X-- : nat) -> eq lzero nat X-- (S (S (times (S (S O)) m)))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (S (plus m (S X--))) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S X--)) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) X--) (refl lzero nat (plus m (S (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (S (plus m (S m))) (plus-n-Sm m (S m))) (plus m O) (plus-n-O m)) (times (S m) (S (S O))) (commutative-times (S (S O)) (S m))) (plus (S m) (times (S m) (S O))) (times-n-Sm (S m) (S O))) (plus (S m) (times (S m) O)) (times-n-Sm (S m) O)) (times O (S m)) (commutative-times (S m) O)) O (times-O-n (S m))) (plus O (S m)) (commutative-plus (S m) O)) (S m) (plus-O-n (S m))) (times m (S (S O))) (commutative-times (S (S O)) m)) (plus m (times m (S O))) (times-n-Sm m (S O))) (plus m (times m O)) (times-n-Sm m O)) O (times-n-O m)) m (plus-n-O m)) (plus m (S m)) (plus-n-Sm m m)) (plus m (S (S m))) (plus-n-Sm m (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times m (S (S O))) (times-n-Sm m (S O))) (times (S (S O)) m) (commutative-times (S (S O)) m)) (plus O (S m)) (plus-O-n (S m))) (plus (S m) O) (commutative-plus (S m) O)) (times O (S m)) (times-O-n (S m))) (times (S m) O) (commutative-times (S m) O)) (times (S m) (S O)) (times-n-Sm (S m) O)) (times (S m) (S (S O))) (times-n-Sm (S m) (S O)))) (eq-coerc lzero (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (times (S (S O)) m) (fact (times (S (S O)) m))) (fact (S (times (S (S O)) m)))) (le-plus-n-r (fact (plus m m)) (times (plus m m) (fact (plus m m)))) (rewrite-r lzero (lsuc lzero) nat (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (times (S (S O)) m) (fact (times (S (S O)) m))) X--)) (rewrite-r lzero (lsuc lzero) nat (times m (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times X-- (fact (times (S (S O)) m))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times X-- (fact (times (S (S O)) m))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m X--) (fact (times (S (S O)) m))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m (plus m X--)) (fact (times (S (S O)) m))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m X--) (fact (times (S (S O)) m))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-r lzero (lsuc lzero) nat (times m (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact X--)) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact X--)) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m X--))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m (plus m X--)))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m X--))) (plus (fact (times (S (S O)) m)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-r lzero (lsuc lzero) nat (times m (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact X--) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact X--) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m X--)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m (plus m X--))) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m X--)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))))) (rewrite-r lzero (lsuc lzero) nat (times m (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times X-- (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times X-- (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m X--) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m (plus m X--)) (fact (times (S (S O)) m)))))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m X--) (fact (times (S (S O)) m)))))) (rewrite-r lzero (lsuc lzero) nat (times m (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact X--))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact X--))))) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact (plus m X--)))))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact (plus m (plus m X--))))))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact (plus m X--)))))) (rewrite-r lzero (lsuc lzero) nat (plus (fact (plus m m)) (times (plus m m) (fact (plus m m)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) X--) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact (plus m m)))))) (refl (lsuc lzero) (Set (lzero)) (le (times (plus m m) (fact (plus m m))) (plus (fact (plus m m)) (times (plus m m) (fact (plus m m)))))) (plus (times (plus m m) (fact (plus m m))) (fact (plus m m))) (commutative-plus (times (plus m m) (fact (plus m m))) (fact (plus m m)))) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times m (S (S O))) (times-n-Sm m (S O))) (times (S (S O)) m) (commutative-times (S (S O)) m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times m (S (S O))) (times-n-Sm m (S O))) (times (S (S O)) m) (commutative-times (S (S O)) m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times m (S (S O))) (times-n-Sm m (S O))) (times (S (S O)) m) (commutative-times (S (S O)) m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times m (S (S O))) (times-n-Sm m (S O))) (times (S (S O)) m) (commutative-times (S (S O)) m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times m (S (S O))) (times-n-Sm m (S O))) (times (S (S O)) m) (commutative-times (S (S O)) m)) (fact (S (times (S (S O)) m))) (rewrite-l lzero lzero nat (times (fact (times (S (S O)) m)) (times (S (S O)) m)) (λ (X-- : nat) -> eq lzero nat (fact (S (times (S (S O)) m))) (plus (fact (times (S (S O)) m)) X--)) (rewrite-r lzero lzero nat (times (fact (times (S (S O)) m)) (S (times (S (S O)) m))) (λ (X-- : nat) -> eq lzero nat (fact (S (times (S (S O)) m))) X--) (rewrite-l lzero lzero nat (times (S (times (S (S O)) m)) (fact (times (S (S O)) m))) (λ (X-- : nat) -> eq lzero nat (fact (S (times (S (S O)) m))) X--) (factS (times (S (S O)) m)) (times (fact (times (S (S O)) m)) (S (times (S (S O)) m))) (commutative-times (S (times (S (S O)) m)) (fact (times (S (S O)) m)))) (plus (fact (times (S (S O)) m)) (times (fact (times (S (S O)) m)) (times (S (S O)) m))) (times-n-Sm (fact (times (S (S O)) m)) (times (S (S O)) m))) (times (times (S (S O)) m) (fact (times (S (S O)) m))) (commutative-times (fact (times (S (S O)) m)) (times (S (S O)) m)))))) (times (S m) (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m))))) (associative-times (S m) (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m))))) (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m)) (commutative-times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m))) (fact (S (S (times (S (S O)) m)))) (factS (S (times (S (S O)) m)))) (times (S (S O)) (S m)) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (S (plus m (S X--))) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S X--)) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) X--) (refl lzero nat (plus m (S (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (S (plus m (S m))) (plus-n-Sm m (S m))) (plus m O) (plus-n-O m))) (le-n (S m))) (times (S m) (fact (times (S (S O)) (S m)))) (commutative-times (S m) (fact (times (S (S O)) (S m))))) (times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (times (S m) (S m))) (associative-times (times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m)))) (S m) (S m))) (times (S (S O)) (times (times (times (S (S O)) m) (fact (times (S (S O)) m))) (times (S m) (S m)))) (associative-times (S (S O)) (times (times (S (S O)) m) (fact (times (S (S O)) m))) (times (S m) (S m)))) (exp (S m) (S (S O))) (exp-2 (S m)))) (times (times (S (S O)) (exp (S (S O)) (times (S (S O)) m))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))) (associative-times (S (S O)) (exp (S (S O)) (times (S (S O)) m)) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) (times (exp (S (S O)) (times (S (S O)) m)) (S (S O))) (commutative-times (exp (S (S O)) (times (S (S O)) m)) (S (S O))))) (times (times (S (S O)) (S m)) (fact (times (S (S O)) (S m)))) (associative-times (S (S O)) (S m) (fact (times (S (S O)) (S m))))) (times (times (S (S O)) (exp (S (S O)) (S (times (S (S O)) m)))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O))))) (associative-times (S (S O)) (exp (S (S O)) (S (times (S (S O)) m))) (times (exp (S m) (S (S O))) (exp (fact m) (S (S O)))))) (times (exp (S (S O)) (S (times (S (S O)) m))) (S (S O))) (commutative-times (exp (S (S O)) (S (times (S (S O)) m))) (S (S O)))) (exp (times (S m) (fact m)) (S (S O))) (times-exp (S m) (fact m) (S (S O)))) (fact (S m)) (factS m)) (times (S (S O)) (S m)) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (S (plus m (S X--))) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S X--)) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) X--) (refl lzero nat (plus m (S (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (S (plus m (S m))) (plus-n-Sm m (S m))) (plus m O) (plus-n-O m))) n posn

le-fact-10 : le (fact (times (S (S O)) (S (S (S (S (S O))))))) (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))
le-fact-10 = eq-ind-r lzero lzero nat (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O))))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))))) -> le x (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind-r lzero lzero nat (times (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))))) -> le (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) x) (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind lzero lzero nat (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (fact (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (fact (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) x-1) -> le x-1 (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind-r lzero lzero nat (times (S (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))))) -> le (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) x) (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind lzero lzero nat (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (fact (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (fact (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) x-1) -> le x-1 (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind-r lzero lzero nat (times (S (plus (S O) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (plus (S O) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S O) (times (S O) (S (S (S (S (S O)))))))))) -> le (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) x) (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind lzero lzero nat (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (fact (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (fact (plus (S O) (times (S O) (S (S (S (S (S O))))))))) x-1) -> le x-1 (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind-r lzero lzero nat (times (S (plus O (times (S O) (S (S (S (S (S O)))))))) (fact (plus O (times (S O) (S (S (S (S (S O))))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (plus O (times (S O) (S (S (S (S (S O)))))))) (fact (plus O (times (S O) (S (S (S (S (S O)))))))))) -> le (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) x) (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (eq-ind lzero lzero nat (times (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (S (plus O (times (S O) (S (S (S (S (S O))))))))) (fact (plus O (times (S O) (S (S (S (S (S O))))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (S (plus O (times (S O) (S (S (S (S (S O))))))))) (fact (plus O (times (S O) (S (S (S (S (S O))))))))) x-1) -> le x-1 (times (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (S (S (S (S (S O)))))))) (le-times (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (S (plus O (times (S O) (S (S (S (S (S O))))))))) (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (fact (plus O (times (S O) (S (S (S (S (S O)))))))) (fact (S (S (S (S (S O)))))) (leb-true-to-le (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (S (plus O (times (S O) (S (S (S (S (S O))))))))) (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O))))))) (refl lzero bool (leb (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (S (plus O (times (S O) (S (S (S (S (S O))))))))) (times (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S O)))) (fact (S (S (S (S (S O)))))))))) (le-n (fact (plus O (times (S O) (S (S (S (S (S O)))))))))) (times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (times (S (plus O (times (S O) (S (S (S (S (S O)))))))) (fact (plus O (times (S O) (S (S (S (S (S O)))))))))) (associative-times (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (S (plus O (times (S O) (S (S (S (S (S O)))))))) (fact (plus O (times (S O) (S (S (S (S (S O)))))))))) (fact (S (plus O (times (S O) (S (S (S (S (S O))))))))) (factS (plus O (times (S O) (S (S (S (S (S O))))))))) (times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (times (S (plus (S O) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S O) (times (S O) (S (S (S (S (S O)))))))))) (associative-times (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S O) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S O) (times (S O) (S (S (S (S (S O)))))))))) (fact (S (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (factS (plus (S O) (times (S O) (S (S (S (S (S O))))))))) (times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (times (S (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))))) (associative-times (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (S (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S O)) (times (S O) (S (S (S (S (S O)))))))))) (fact (S (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (factS (plus (S (S O)) (times (S O) (S (S (S (S (S O))))))))) (times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (times (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))))) (associative-times (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O)))))))) (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))) (fact (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))))) (fact (S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (factS (plus (S (S (S O))) (times (S O) (S (S (S (S (S O))))))))) (fact (S (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O))))))))) (factS (plus (S (S (S (S O)))) (times (S O) (S (S (S (S (S O))))))))

ab-times-cd : (a : nat) -> (b : nat) -> (c : nat) -> (d : nat) -> eq lzero nat (times (times a b) (times c d)) (times (times a c) (times b d))
ab-times-cd = λ (a : nat) -> λ (b : nat) -> λ (c : nat) -> λ (d : nat) -> rewrite-r lzero lzero nat (times a (times b (times c d))) (λ (X-- : nat) -> eq lzero nat X-- (times (times a c) (times b d))) (rewrite-r lzero lzero nat (times a (times c (times b d))) (λ (X-- : nat) -> eq lzero nat (times a (times b (times c d))) X--) (rewrite-r lzero lzero nat (times b (times c d)) (λ (X-- : nat) -> eq lzero nat (times a (times b (times c d))) (times a X--)) (refl lzero nat (times a (times b (times c d)))) (times c (times b d)) (times-times c b d)) (times (times a c) (times b d)) (associative-times a c (times b d))) (times (times a b) (times c d)) (associative-times a b (times c d))

lt-4-to-fact : (n : nat) -> (X-- : lt (S (S (S (S O)))) n) -> le (fact (times (S (S O)) n)) (times (times (exp (S (S O)) (minus (times (S (S O)) n) (S (S O)))) (fact n)) (fact n))
lt-4-to-fact = λ (n : nat) -> λ (ltn : lt (S (S (S (S O)))) n) -> le-ind lzero (S (S (S (S (S O))))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S (S O))))) x-417) -> le (fact (times (S (S O)) x-417)) (times (times (exp (S (S O)) (minus (times (S (S O)) x-417) (S (S O)))) (fact x-417)) (fact x-417))) le-fact-10 (λ (m : nat) -> λ (lem : le (S (S (S (S (S O))))) m) -> λ (Hind : le (fact (times (S (S O)) m)) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m))) -> eq-ind-r lzero lzero nat (S (S (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) m)))) -> le (fact x) (times (times (exp (S (S O)) (minus x (S (S O)))) (fact (S m))) (fact (S m)))) (eq-ind lzero lzero nat (times (S (S O)) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (S (S O)) m) x-1) -> le (fact (S (S (times (S (S O)) m)))) (times (times (exp (S (S O)) x-1) (fact (S m))) (fact (S m)))) (eq-ind-r lzero lzero nat (times (S (S (times (S (S O)) m))) (fact (S (times (S (S O)) m)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S (times (S (S O)) m))) (fact (S (times (S (S O)) m))))) -> le x (times (times (exp (S (S O)) (times (S (S O)) m)) (fact (S m))) (fact (S m)))) (eq-ind-r lzero lzero nat (times (S (times (S (S O)) m)) (fact (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (times (S (S O)) m)) (fact (times (S (S O)) m)))) -> le (times (S (S (times (S (S O)) m))) x) (times (times (exp (S (S O)) (times (S (S O)) m)) (fact (S m))) (fact (S m)))) (eq-ind lzero lzero nat (times (times (S (S (times (S (S O)) m))) (S (times (S (S O)) m))) (fact (times (S (S O)) m))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S (times (S (S O)) m))) (S (times (S (S O)) m))) (fact (times (S (S O)) m))) x-1) -> le x-1 (times (times (exp (S (S O)) (times (S (S O)) m)) (fact (S m))) (fact (S m)))) (eq-ind-r lzero lzero nat (times (S m) (fact m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S m) (fact m))) -> le (times (times (S (S (times (S (S O)) m))) (S (times (S (S O)) m))) (fact (times (S (S O)) m))) (times (times (exp (S (S O)) (times (S (S O)) m)) x) x)) (transitive-le (times (times (S (S (times (S (S O)) m))) (S (times (S (S O)) m))) (fact (times (S (S O)) m))) (times (times (times (S (S O)) (S m)) (times (S (S O)) (S m))) (fact (times (S (S O)) m))) (times (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m))) (times (S m) (fact m))) (le-times (times (S (S (times (S (S O)) m))) (S (times (S (S O)) m))) (times (times (S (S O)) (S m)) (times (S (S O)) (S m))) (fact (times (S (S O)) m)) (fact (times (S (S O)) m)) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) m)))) -> le (times (S (S (times (S (S O)) m))) (S (times (S (S O)) m))) (times x x)) (le-times (S (S (times (S (S O)) m))) (S (S (times (S (S O)) m))) (S (times (S (S O)) m)) (S (S (times (S (S O)) m))) (le-n (S (S (times (S (S O)) m)))) (le-n-Sn (S (times (S (S O)) m)))) (times (S (S O)) (S m)) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (S (plus m (S X--))) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S X--)) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) X--) (refl lzero nat (plus m (S (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (S (plus m (S m))) (plus-n-Sm m (S m))) (plus m O) (plus-n-O m))) (le-n (fact (times (S (S O)) m)))) (transitive-le (times (times (times (S (S O)) (S m)) (times (S (S O)) (S m))) (fact (times (S (S O)) m))) (times (times (times (S (S O)) (S m)) (times (S (S O)) (S m))) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m))) (times (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m))) (times (S m) (fact m))) (monotonic-le-times-r (times (times (S (S O)) (S m)) (times (S (S O)) (S m))) (fact (times (S (S O)) m)) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m)) Hind) (eq-ind-r lzero lzero nat (times (times (S (S O)) (S m)) (times (times (S (S O)) (S m)) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) (S m)) (times (times (S (S O)) (S m)) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m))))) -> le x (times (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m))) (times (S m) (fact m)))) (eq-ind-r lzero lzero nat (times (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m))) (times (S m) (fact m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m))) (times (S m) (fact m)))) -> le (times (times (S (S O)) (S m)) x) (times (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m))) (times (S m) (fact m)))) (eq-ind lzero lzero nat (times (times (times (S (S O)) (S m)) (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)))) (times (S m) (fact m))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (times (S (S O)) (S m)) (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)))) (times (S m) (fact m))) x-1) -> le x-1 (times (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m))) (times (S m) (fact m)))) (le-times (times (times (S (S O)) (S m)) (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)))) (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m))) (times (S m) (fact m)) (times (S m) (fact m)) (eq-ind lzero lzero nat (times (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (fact m)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (fact m)) x-1) -> le (times (times (S (S O)) (S m)) x-1) (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m)))) (eq-ind-r lzero lzero nat (times (times (S (S O)) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))))) (times (S m) (fact m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))))) (times (S m) (fact m)))) -> le x (times (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m)))) (le-times (times (S (S O)) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))))) (exp (S (S O)) (times (S (S O)) m)) (times (S m) (fact m)) (times (S m) (fact m)) (eq-ind-r lzero lzero nat (times (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (S (S O)))) -> le x (exp (S (S O)) (times (S (S O)) m))) (eq-ind-r lzero lzero nat (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (S (S O)))) -> le (times x (S (S O))) (exp (S (S O)) (times (S (S O)) m))) (le-exp (S (S (minus (times (S (S O)) m) (S (S O))))) (times (S (S O)) m) (S (S O)) (lt-O-S (S O)) (eq-ind-r lzero lzero nat (pred (minus (times (S (S O)) m) (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (pred (minus (times (S (S O)) m) (S O)))) -> le (S (S x)) (times (S (S O)) m)) (eq-ind-r lzero lzero nat (minus (times (S (S O)) m) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times (S (S O)) m) (S O))) -> le (S x) (times (S (S O)) m)) (eq-ind-r lzero lzero nat (pred (minus (times (S (S O)) m) O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (pred (minus (times (S (S O)) m) O))) -> le (S x) (times (S (S O)) m)) (eq-ind-r lzero lzero nat (minus (times (S (S O)) m) O) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times (S (S O)) m) O)) -> le x (times (S (S O)) m)) (eq-ind lzero lzero nat (times (S (S O)) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (S (S O)) m) x-1) -> le x-1 (times (S (S O)) m)) (le-n (times (S (S O)) m)) (minus (times (S (S O)) m) O) (minus-n-O (times (S (S O)) m))) (S (pred (minus (times (S (S O)) m) O))) (S-pred (minus (times (S (S O)) m) O) (le-ind lzero (S (S (S (S (S O))))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S (S O))))) x-417) -> lt O (minus (times (S (S O)) x-417) O)) (eq-coerc lzero (lt O (plus (plus O (times (S (S O)) (S (S (S (S O)))))) (S (S O)))) (lt O (minus (times (S (S O)) (S (S (S (S (S O)))))) O)) (lt-plus-Sn-r O (times (S (S O)) (S (S (S (S O))))) (S O)) (rewrite-r lzero (lsuc lzero) nat (plus O (plus (times (S (S O)) (S (S (S (S O))))) (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O X--) (lt O (minus (times (S (S O)) (S (S (S (S (S O)))))) O))) (rewrite-l lzero (lsuc lzero) nat (plus (S (S O)) (times (S (S O)) (S (S (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (times (S (S O)) (S (S (S (S O))))) (S (S O))))) (lt O (minus X-- O))) (rewrite-l lzero (lsuc lzero) nat (plus (S (S O)) (times (S (S O)) (S (S (S O))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus X-- (S (S O))))) (lt O (minus (plus (S (S O)) X--) O))) (rewrite-l lzero (lsuc lzero) nat (plus (S (S O)) (times (S (S O)) (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (plus (S (S O)) X--) (S (S O))))) (lt O (minus (plus (S (S O)) (plus (S (S O)) X--)) O))) (rewrite-l lzero (lsuc lzero) nat (exp (S (S O)) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (plus (S (S O)) (plus (S (S O)) X--)) (S (S O))))) (lt O (minus (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) X--))) O))) (rewrite-l lzero (lsuc lzero) nat (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O))))) (S (S O))))) (lt O X--)) (rewrite-r lzero (lsuc lzero) nat (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O X--)) (lt O (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))))) (rewrite-l lzero (lsuc lzero) nat (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O X--) (lt O (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))))) (refl (lsuc lzero) (Set (lzero)) (lt O (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))))) (plus O (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O))))))) (plus-O-n (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))))) (plus (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O))))) (S (S O))) (commutative-plus (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O))))) (S (S O)))) (minus (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))) O) (minus-n-O (plus (S (S O)) (plus (S (S O)) (plus (S (S O)) (exp (S (S O)) (S (S O)))))))) (times (S (S O)) (S (S O))) (exp-2 (S (S O)))) (times (S (S O)) (S (S (S O)))) (times-n-Sm (S (S O)) (S (S O)))) (times (S (S O)) (S (S (S (S O))))) (times-n-Sm (S (S O)) (S (S (S O))))) (times (S (S O)) (S (S (S (S (S O)))))) (times-n-Sm (S (S O)) (S (S (S (S O)))))) (plus (plus O (times (S (S O)) (S (S (S (S O)))))) (S (S O))) (associative-plus O (times (S (S O)) (S (S (S (S O))))) (S (S O))))) (λ (m0 : nat) -> λ (X-x-419 : le (S (S (S (S (S O))))) m0) -> λ (X-x-421 : lt O (minus (times (S (S O)) m0) O)) -> eq-coerc lzero (lt O (plus (plus O (S m0)) (S m0))) (lt O (minus (times (S (S O)) (S m0)) O)) (lt-plus-Sn-r O (S m0) m0) (rewrite-r lzero (lsuc lzero) nat (plus O (plus (S m0) (S m0))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O X--) (lt O (minus (times (S (S O)) (S m0)) O))) (rewrite-r lzero (lsuc lzero) nat (times (S m0) (S (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus X-- O))) (rewrite-l lzero (lsuc lzero) nat (plus (S m0) (times (S m0) (S O))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus X-- O))) (rewrite-l lzero (lsuc lzero) nat (plus (S m0) (times (S m0) O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus (plus (S m0) X--) O))) (rewrite-r lzero (lsuc lzero) nat (times O (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus (plus (S m0) (plus (S m0) X--)) O))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus (plus (S m0) (plus (S m0) X--)) O))) (rewrite-r lzero (lsuc lzero) nat (plus O (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus (plus (S m0) X--) O))) (rewrite-l lzero (lsuc lzero) nat (S m0) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O (minus (plus (S m0) X--) O))) (rewrite-l lzero (lsuc lzero) nat (plus (S m0) (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (plus O (plus (S m0) (S m0)))) (lt O X--)) (rewrite-l lzero (lsuc lzero) nat (plus (S m0) (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O X--) (lt O (plus (S m0) (S m0)))) (refl (lsuc lzero) (Set (lzero)) (lt O (plus (S m0) (S m0)))) (plus O (plus (S m0) (S m0))) (plus-O-n (plus (S m0) (S m0)))) (minus (plus (S m0) (S m0)) O) (minus-n-O (plus (S m0) (S m0)))) (plus O (S m0)) (plus-O-n (S m0))) (plus (S m0) O) (commutative-plus (S m0) O)) (times O (S m0)) (times-O-n (S m0))) (times (S m0) O) (commutative-times (S m0) O)) (times (S m0) (S O)) (times-n-Sm (S m0) O)) (times (S m0) (S (S O))) (times-n-Sm (S m0) (S O))) (times (S (S O)) (S m0)) (commutative-times (S (S O)) (S m0))) (plus (plus O (S m0)) (S m0)) (associative-plus O (S m0) (S m0)))) m lem))) (minus (times (S (S O)) m) (S O)) (eq-minus-S-pred (times (S (S O)) m) O)) (S (pred (minus (times (S (S O)) m) (S O)))) (S-pred (minus (times (S (S O)) m) (S O)) (le-ind lzero (S (S (S (S (S O))))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S (S O))))) x-417) -> lt O (minus (times (S (S O)) x-417) (S O))) (lt-O-S (plus (S (S (S O))) (times (S O) (S (S (S (S (S O)))))))) (λ (m0 : nat) -> λ (le5m0 : le (S (S (S (S (S O))))) m0) -> λ (Hind0 : lt O (minus (times (S (S O)) m0) (S O))) -> eq-ind lzero lzero nat (S (plus m0 (plus m0 O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus m0 (plus m0 O))) x-1) -> le (S O) (minus x-1 O)) (eq-coerc lzero (le (minus (S (plus (plus m0 O) (plus m0 O))) (plus (plus m0 O) (plus m0 O))) (S (plus (plus m0 O) (plus m0 O)))) (le (S O) (minus (S (plus m0 (plus m0 O))) O)) (minus-le (S (plus (plus m0 O) (plus m0 O))) (plus (plus m0 O) (plus m0 O))) (rewrite-l lzero (lsuc lzero) nat m0 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (S (plus X-- X--)) (plus X-- X--)) (S (plus X-- X--))) (le (S O) (minus (S (plus m0 X--)) O))) (rewrite-r lzero (lsuc lzero) nat (plus m0 (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (S (plus m0 m0)) (plus m0 m0)) (S (plus m0 m0))) (le (S O) (minus X-- O))) (rewrite-l lzero (lsuc lzero) nat (plus m0 (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (S (plus m0 m0)) (plus m0 m0)) (S (plus m0 m0))) (le (S O) X--)) (rewrite-r lzero (lsuc lzero) nat (minus (S (plus m0 m0)) (plus m0 m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (S (plus m0 m0)) (plus m0 m0)) (S (plus m0 m0))) (le X-- (plus m0 (S m0)))) (rewrite-r lzero (lsuc lzero) nat (plus m0 (S m0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (S (plus m0 m0)) (plus m0 m0)) X--) (le (minus (S (plus m0 m0)) (plus m0 m0)) (plus m0 (S m0)))) (refl (lsuc lzero) (Set (lzero)) (le (minus (S (plus m0 m0)) (plus m0 m0)) (plus m0 (S m0)))) (S (plus m0 m0)) (plus-n-Sm m0 m0)) (S O) (minus-Sn-n (plus m0 m0))) (minus (plus m0 (S m0)) O) (minus-n-O (plus m0 (S m0)))) (S (plus m0 m0)) (plus-n-Sm m0 m0)) (plus m0 O) (plus-n-O m0))) (plus m0 (S (plus m0 O))) (plus-n-Sm m0 (plus m0 O))) m lem))) (minus (times (S (S O)) m) (S (S O))) (eq-minus-S-pred (times (S (S O)) m) (S O)))) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (commutative-times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))))) (times (S (S O)) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))))) (commutative-times (S (S O)) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))))) (le-n (times (S m) (fact m)))) (times (times (S (S O)) (S m)) (times (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (fact m))) (ab-times-cd (S (S O)) (S m) (times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O))))) (fact m))) (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m))) (associative-times (S (S O)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m))) (le-n (times (S m) (fact m)))) (times (times (S (S O)) (S m)) (times (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m))) (times (S m) (fact m)))) (associative-times (times (S (S O)) (S m)) (times (S (S O)) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m))) (times (S m) (fact m)))) (times (times (S (S O)) (S m)) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m))) (ab-times-cd (S (S O)) (S m) (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m))) (times (times (times (S (S O)) (S m)) (times (S (S O)) (S m))) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m))) (associative-times (times (S (S O)) (S m)) (times (S (S O)) (S m)) (times (times (exp (S (S O)) (minus (times (S (S O)) m) (S (S O)))) (fact m)) (fact m)))))) (fact (S m)) (factS m)) (times (S (S (times (S (S O)) m))) (times (S (times (S (S O)) m)) (fact (times (S (S O)) m)))) (associative-times (S (S (times (S (S O)) m))) (S (times (S (S O)) m)) (fact (times (S (S O)) m)))) (fact (S (times (S (S O)) m))) (factS (times (S (S O)) m))) (fact (S (S (times (S (S O)) m)))) (factS (S (times (S (S O)) m)))) (minus (times (S (S O)) m) O) (minus-n-O (times (S (S O)) m))) (times (S (S O)) (S m)) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (S (plus m (S X--))) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S X--)) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) X--) (refl lzero nat (plus m (S (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (S (plus m (S m))) (plus-n-Sm m (S m))) (plus m O) (plus-n-O m))) n ltn

