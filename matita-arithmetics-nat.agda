open import Agda.Primitive
import matita-basics-bool
import matita-basics-relations
import matita-basics-logic

data nat : Set (lzero) where
  O : nat
  S : (X---v : nat) -> nat

match-nat : (return-sort-v : Level) -> (return-type-v : (z-v : nat) -> Set return-sort-v) -> (case-O-v : return-type-v O) -> (case-S-v : (X---v : nat) -> return-type-v (S X---v)) -> (z-v : nat) -> return-type-v z-v
match-nat _ _ case0 caseS O = case0
match-nat _ _ case0 caseS (S x) = caseS x

nat-ind : (l5-v : Level) -> (Q--v : (X-x-365-v : nat) -> Set l5-v) -> (X-H-O-v : Q--v O) -> (X-H-S-v : (x-366-v : nat) -> (X-x-368-v : Q--v x-366-v) -> Q--v (S x-366-v)) -> (x-365-v : nat) -> Q--v x-365-v
nat-ind _ _ case0 caseS O = case0
nat-ind l P case0 caseS (S x) = caseS x (nat-ind l P case0 caseS x)

nat-rect-Type4 : (l5-v : Level) -> (Q--v : (X-x-369-v : nat) -> Set l5-v) -> (X-H-O-v : Q--v O) -> (X-H-S-v : (x-370-v : nat) -> (X-x-372-v : Q--v x-370-v) -> Q--v (S x-370-v)) -> (x-369-v : nat) -> Q--v x-369-v
nat-rect-Type4 _ _ case0 caseS O = case0
nat-rect-Type4 l P case0 caseS (S x) = caseS x (nat-ind l P case0 caseS x)

nat-rect-Type3 : (l5-v : Level) -> (Q--v : (X-x-369-v : nat) -> Set l5-v) -> (X-H-O-v : Q--v O) -> (X-H-S-v : (x-370-v : nat) -> (X-x-372-v : Q--v x-370-v) -> Q--v (S x-370-v)) -> (x-369-v : nat) -> Q--v x-369-v
nat-rect-Type3 _ _ case0 caseS O = case0
nat-rect-Type3 l P case0 caseS (S x) = caseS x (nat-ind l P case0 caseS x)

nat-rect-Type2 : (l5-v : Level) -> (Q--v : (X-x-369-v : nat) -> Set l5-v) -> (X-H-O-v : Q--v O) -> (X-H-S-v : (x-370-v : nat) -> (X-x-372-v : Q--v x-370-v) -> Q--v (S x-370-v)) -> (x-369-v : nat) -> Q--v x-369-v
nat-rect-Type2 _ _ case0 caseS O = case0
nat-rect-Type2 l P case0 caseS (S x) = caseS x (nat-ind l P case0 caseS x)

nat-rect-Type1 : (l5-v : Level) -> (Q--v : (X-x-369-v : nat) -> Set l5-v) -> (X-H-O-v : Q--v O) -> (X-H-S-v : (x-370-v : nat) -> (X-x-372-v : Q--v x-370-v) -> Q--v (S x-370-v)) -> (x-369-v : nat) -> Q--v x-369-v
nat-rect-Type1 _ _ case0 caseS O = case0
nat-rect-Type1 l P case0 caseS (S x) = caseS x (nat-ind l P case0 caseS x)

nat-rect-Type0 : (l5-v : Level) -> (Q--v : (X-x-369-v : nat) -> Set l5-v) -> (X-H-O-v : Q--v O) -> (X-H-S-v : (x-370-v : nat) -> (X-x-372-v : Q--v x-370-v) -> Q--v (S x-370-v)) -> (x-369-v : nat) -> Q--v x-369-v
nat-rect-Type0 _ _ case0 caseS O = case0
nat-rect-Type0 l P case0 caseS (S x) = caseS x (nat-ind l P case0 caseS x)


nat-inv-ind : (l18-v : Level) -> (Hterm-v : nat) -> (P-v : (X-z653-v : nat) -> Set l18-v) -> (X-H1-v : (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> (X-H2-v : (x-366-v : nat) -> (X-x-368-v : (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v x-366-v) -> P-v x-366-v) -> (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v (S x-366-v)) -> P-v (S x-366-v)) -> P-v Hterm-v
nat-inv-ind = λ (l18-v : Level) -> λ (Hterm-v : nat) -> λ (P-v : (X-z653-v : nat) -> Set l18-v) -> λ (H1-v : (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> λ (H2-v : (x-366-v : nat) -> (X-x-368-v : (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v x-366-v) -> P-v x-366-v) -> (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v (S x-366-v)) -> P-v (S x-366-v)) -> nat-ind l18-v (λ (X-x-365-v : nat) -> (X-z654-v : matita-basics-logic.eq lzero nat Hterm-v X-x-365-v) -> P-v X-x-365-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero nat Hterm-v)

nat-inv-rect-Type4 : (l18-v : Level) -> (Hterm-v : nat) -> (P-v : (X-z659-v : nat) -> Set l18-v) -> (X-H1-v : (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> (X-H2-v : (x-370-v : nat) -> (X-x-372-v : (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v x-370-v) -> P-v x-370-v) -> (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v (S x-370-v)) -> P-v (S x-370-v)) -> P-v Hterm-v
nat-inv-rect-Type4 = λ (l18-v : Level) -> λ (Hterm-v : nat) -> λ (P-v : (X-z659-v : nat) -> Set l18-v) -> λ (H1-v : (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> λ (H2-v : (x-370-v : nat) -> (X-x-372-v : (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v x-370-v) -> P-v x-370-v) -> (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v (S x-370-v)) -> P-v (S x-370-v)) -> nat-rect-Type4 l18-v (λ (X-x-369-v : nat) -> (X-z660-v : matita-basics-logic.eq lzero nat Hterm-v X-x-369-v) -> P-v X-x-369-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero nat Hterm-v)

nat-inv-rect-Type3 : (l18-v : Level) -> (Hterm-v : nat) -> (P-v : (X-z665-v : nat) -> Set l18-v) -> (X-H1-v : (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> (X-H2-v : (x-378-v : nat) -> (X-x-380-v : (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v x-378-v) -> P-v x-378-v) -> (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v (S x-378-v)) -> P-v (S x-378-v)) -> P-v Hterm-v
nat-inv-rect-Type3 = λ (l18-v : Level) -> λ (Hterm-v : nat) -> λ (P-v : (X-z665-v : nat) -> Set l18-v) -> λ (H1-v : (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> λ (H2-v : (x-378-v : nat) -> (X-x-380-v : (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v x-378-v) -> P-v x-378-v) -> (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v (S x-378-v)) -> P-v (S x-378-v)) -> nat-rect-Type3 l18-v (λ (X-x-377-v : nat) -> (X-z666-v : matita-basics-logic.eq lzero nat Hterm-v X-x-377-v) -> P-v X-x-377-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero nat Hterm-v)

nat-inv-rect-Type2 : (l18-v : Level) -> (Hterm-v : nat) -> (P-v : (X-z671-v : nat) -> Set l18-v) -> (X-H1-v : (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> (X-H2-v : (x-382-v : nat) -> (X-x-384-v : (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v x-382-v) -> P-v x-382-v) -> (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v (S x-382-v)) -> P-v (S x-382-v)) -> P-v Hterm-v
nat-inv-rect-Type2 = λ (l18-v : Level) -> λ (Hterm-v : nat) -> λ (P-v : (X-z671-v : nat) -> Set l18-v) -> λ (H1-v : (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> λ (H2-v : (x-382-v : nat) -> (X-x-384-v : (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v x-382-v) -> P-v x-382-v) -> (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v (S x-382-v)) -> P-v (S x-382-v)) -> nat-rect-Type2 l18-v (λ (X-x-381-v : nat) -> (X-z672-v : matita-basics-logic.eq lzero nat Hterm-v X-x-381-v) -> P-v X-x-381-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero nat Hterm-v)

nat-inv-rect-Type1 : (l18-v : Level) -> (Hterm-v : nat) -> (P-v : (X-z677-v : nat) -> Set l18-v) -> (X-H1-v : (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> (X-H2-v : (x-386-v : nat) -> (X-x-388-v : (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v x-386-v) -> P-v x-386-v) -> (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v (S x-386-v)) -> P-v (S x-386-v)) -> P-v Hterm-v
nat-inv-rect-Type1 = λ (l18-v : Level) -> λ (Hterm-v : nat) -> λ (P-v : (X-z677-v : nat) -> Set l18-v) -> λ (H1-v : (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> λ (H2-v : (x-386-v : nat) -> (X-x-388-v : (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v x-386-v) -> P-v x-386-v) -> (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v (S x-386-v)) -> P-v (S x-386-v)) -> nat-rect-Type1 l18-v (λ (X-x-385-v : nat) -> (X-z678-v : matita-basics-logic.eq lzero nat Hterm-v X-x-385-v) -> P-v X-x-385-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero nat Hterm-v)

nat-inv-rect-Type0 : (l18-v : Level) -> (Hterm-v : nat) -> (P-v : (X-z683-v : nat) -> Set l18-v) -> (X-H1-v : (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> (X-H2-v : (x-390-v : nat) -> (X-x-392-v : (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v x-390-v) -> P-v x-390-v) -> (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v (S x-390-v)) -> P-v (S x-390-v)) -> P-v Hterm-v
nat-inv-rect-Type0 = λ (l18-v : Level) -> λ (Hterm-v : nat) -> λ (P-v : (X-z683-v : nat) -> Set l18-v) -> λ (H1-v : (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v O) -> P-v O) -> λ (H2-v : (x-390-v : nat) -> (X-x-392-v : (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v x-390-v) -> P-v x-390-v) -> (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v (S x-390-v)) -> P-v (S x-390-v)) -> nat-rect-Type0 l18-v (λ (X-x-389-v : nat) -> (X-z684-v : matita-basics-logic.eq lzero nat Hterm-v X-x-389-v) -> P-v X-x-389-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero nat Hterm-v)

nat-discr : (l118-v : Level) -> (x-v : nat) -> (y-v : nat) -> (X-e-v : matita-basics-logic.eq lzero nat x-v y-v) -> match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X---v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) (match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X---v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) ((P-v : Set l118-v) -> (X-z23-v : P-v) -> P-v) (λ (u0-v : nat) -> (P-v : Set l118-v) -> P-v) y-v) (λ (t0-v : nat) -> match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X---v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) ((P-v : Set l118-v) -> P-v) (λ (u0-v : nat) -> (P-v : Set l118-v) -> (X-z24-v : (X-e0-v : matita-basics-logic.eq lzero nat (matita-basics-logic.R0 lzero nat t0-v) u0-v) -> P-v) -> P-v) y-v) x-v
nat-discr = λ (l118-v : Level) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (Deq-v : matita-basics-logic.eq lzero nat x-v y-v) -> matita-basics-logic.eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l118-v)) nat x-v (λ (x-13-v : nat) -> λ (X-x-14-v : matita-basics-logic.eq lzero nat x-v x-13-v) -> match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X---v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) (match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X---v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) ((P-v : Set l118-v) -> (X-z23-v : P-v) -> P-v) (λ (u0-v : nat) -> (P-v : Set l118-v) -> P-v) x-13-v) (λ (t0-v : nat) -> match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X---v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) ((P-v : Set l118-v) -> P-v) (λ (u0-v : nat) -> (P-v : Set l118-v) -> (X-z24-v : (X-e0-v : matita-basics-logic.eq lzero nat (matita-basics-logic.R0 lzero nat t0-v) u0-v) -> P-v) -> P-v) x-13-v) x-v) (match-nat ((lsuc lzero) ⊔ (lsuc l118-v)) (λ (X---v : nat) -> match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X-0-v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) (match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X-0-v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) ((P-v : Set l118-v) -> (X-z23-v : P-v) -> P-v) (λ (u0-v : nat) -> (P-v : Set l118-v) -> P-v) X---v) (λ (t0-v : nat) -> match-nat ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l118-v))) (λ (X-0-v : nat) -> Set ((lsuc lzero) ⊔ (lsuc l118-v))) ((P-v : Set l118-v) -> P-v) (λ (u0-v : nat) -> (P-v : Set l118-v) -> (X-z24-v : (X-e0-v : matita-basics-logic.eq lzero nat (matita-basics-logic.R0 lzero nat t0-v) u0-v) -> P-v) -> P-v) X---v) X---v) (λ (P-v : Set l118-v) -> λ (DH-v : P-v) -> DH-v) (λ (a0-v : nat) -> λ (P-v : Set l118-v) -> λ (DH-v : (X-e0-v : matita-basics-logic.eq lzero nat (matita-basics-logic.R0 lzero nat a0-v) a0-v) -> P-v) -> DH-v (matita-basics-logic.refl lzero nat (matita-basics-logic.R0 lzero nat a0-v))) x-v) y-v Deq-v

pred : (X-n-v : nat) -> nat
pred = λ (n-v : nat) -> match-nat lzero (λ (X---v : nat) -> nat) O (λ (p-v : nat) -> p-v) n-v

not-zero : (l7-v : Level) -> (X---v : nat) -> Set l7-v
not-zero = λ (l7-v : Level) -> λ (n-v : nat) -> match-nat ((lsuc lzero) ⊔ (lsuc l7-v)) (λ (X---v : nat) -> Set l7-v) (matita-basics-logic.False l7-v) (λ (p-v : nat) -> matita-basics-logic.True l7-v) n-v

data le (n : nat) : nat -> Set (lzero) where
  le-n' : le n n
  le-S' : (m : nat) -> le n m -> le n (S m)

le-n : (n-v : nat) -> le n-v n-v
le-n _ = le-n'
le-S : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> le n-v (S m-v)
le-S _ = le-S'

match-le : (X-n-v : nat) -> (return-sort-v : Level) -> (return-type-v : (X---v : nat) -> (z-v : le X-n-v X---v) -> Set return-sort-v) -> (case-le-n-v : return-type-v X-n-v (le-n X-n-v)) -> (case-le-S-v : (m-v : nat) -> (X---v : le X-n-v m-v) -> return-type-v (S m-v) (le-S X-n-v m-v X---v)) -> (X---v : nat) -> (z-v : le X-n-v X---v) -> return-type-v X---v z-v
match-le _ _ _ casen caseS _ le-n' = casen
match-le n1 l P casen caseS (S n) (le-S' n p) = caseS n p

le-ind : (l7-v : Level) -> (X-n-v : nat) -> (Q--v : (x-417-v : nat) -> (X-x-418-v : le X-n-v x-417-v) -> Set l7-v) -> (X-H-le-n-v : Q--v X-n-v (le-n X-n-v)) -> (X-H-le-S-v : (m-v : nat) -> (x-419-v : le X-n-v m-v) -> (X-x-421-v : Q--v m-v x-419-v) -> Q--v (S m-v) (le-S X-n-v m-v x-419-v)) -> (x-417-v : nat) -> (x-418-v : le X-n-v x-417-v) -> Q--v x-417-v x-418-v
le-ind _ _ _ casen caseS _ le-n' = casen
le-ind l n1 P casen caseS (S n) (le-S' n p) = caseS n p (le-ind l n1 P casen caseS n p)


le-inv-ind : (l20-v : Level) -> (x1-v : nat) -> (x2-v : nat) -> (X-Hterm-v : le x1-v x2-v) -> (P-v : (X-z724-v : nat) -> Set l20-v) -> (X-H1-v : (X-z725-v : matita-basics-logic.eq lzero nat x2-v x1-v) -> P-v x1-v) -> (X-H2-v : (m-v : nat) -> (X-x-419-v : le x1-v m-v) -> (X-x-421-v : (X-z725-v : matita-basics-logic.eq lzero nat x2-v m-v) -> P-v m-v) -> (X-z725-v : matita-basics-logic.eq lzero nat x2-v (S m-v)) -> P-v (S m-v)) -> P-v x2-v
le-inv-ind = λ (l20-v : Level) -> λ (x1-v : nat) -> λ (x2-v : nat) -> λ (Hterm-v : le x1-v x2-v) -> λ (P-v : (X-z724-v : nat) -> Set l20-v) -> λ (H1-v : (X-z725-v : matita-basics-logic.eq lzero nat x2-v x1-v) -> P-v x1-v) -> λ (H2-v : (m-v : nat) -> (X-x-419-v : le x1-v m-v) -> (X-x-421-v : (X-z725-v : matita-basics-logic.eq lzero nat x2-v m-v) -> P-v m-v) -> (X-z725-v : matita-basics-logic.eq lzero nat x2-v (S m-v)) -> P-v (S m-v)) -> le-ind l20-v x1-v (λ (x-417-v : nat) -> λ (X-x-418-v : le x1-v x-417-v) -> (X-z725-v : matita-basics-logic.eq lzero nat x2-v x-417-v) -> P-v x-417-v) H1-v H2-v x2-v Hterm-v (matita-basics-logic.refl lzero nat x2-v)

lt : (X---v : nat) -> (X--1-v : nat) -> Set (lzero)
lt = λ (n-v : nat) -> λ (m-v : nat) -> le (S n-v) m-v

ge : (X---v : nat) -> (X--1-v : nat) -> Set (lzero)
ge = λ (n-v : nat) -> λ (m-v : nat) -> le m-v n-v

gt : (X---v : nat) -> (X--1-v : nat) -> Set (lzero)
gt = λ (n-v : nat) -> λ (m-v : nat) -> lt m-v n-v

increasing : (X-f-v : (X---v : nat) -> nat) -> Set (lzero)
increasing = λ (f-v : (X---v : nat) -> nat) -> (n-v : nat) -> lt (f-v n-v) (f-v (S n-v))

filter-nat : (return-sort-v : Level) -> (return-type-v : (z-v : nat) -> Set return-sort-v) -> (return-v : (z-v : nat) -> return-type-v z-v) -> (z-v : nat) -> return-type-v z-v
filter-nat return-sort-v return-type-v return-v O = return-v O
filter-nat return-sort-v return-type-v return-v (S X---v) = return-v (S X---v)

plus : (X---v : nat) -> (X--1-v : nat) -> nat
plus O m = m
plus (S x) m = S (plus x m)

times : (X---v : nat) -> (X--1-v : nat) -> nat
times O x = O
times (S x) y = plus y (times x y)

minus : (X---v : nat) -> (X--1-v : nat) -> nat
minus O m = O
minus (S x) y = match-nat lzero (λ X---v → nat) (S x) (λ q → minus x q) y



nat-case : (l51-v : Level) -> (n-v : nat) -> (P-v : (X---v : nat) -> Set l51-v) -> (X---v : (X---v : matita-basics-logic.eq lzero nat n-v O) -> P-v O) -> (X--1-v : (m-v : nat) -> (X--1-v : matita-basics-logic.eq lzero nat n-v (S m-v)) -> P-v (S m-v)) -> P-v n-v
nat-case = λ (l51-v : Level) -> λ (n-v : nat) -> λ (P-v : (X---v : nat) -> Set l51-v) -> nat-ind l51-v (λ (X-x-365-v : nat) -> (X---v : (X---v : matita-basics-logic.eq lzero nat X-x-365-v O) -> P-v O) -> (X--1-v : (m-v : nat) -> (X--1-v : matita-basics-logic.eq lzero nat X-x-365-v (S m-v)) -> P-v (S m-v)) -> P-v X-x-365-v) (λ (auto-v : (X---v : matita-basics-logic.eq lzero nat O O) -> P-v O) -> λ (auto'-v : (m-v : nat) -> (X---v : matita-basics-logic.eq lzero nat O (S m-v)) -> P-v (S m-v)) -> auto-v (matita-basics-logic.refl lzero nat O)) (λ (x-366-v : nat) -> λ (X-x-368-v : (X---v : (X---v : matita-basics-logic.eq lzero nat x-366-v O) -> P-v O) -> (X--1-v : (m-v : nat) -> (X--1-v : matita-basics-logic.eq lzero nat x-366-v (S m-v)) -> P-v (S m-v)) -> P-v x-366-v) -> λ (auto-v : (X---v : matita-basics-logic.eq lzero nat (S x-366-v) O) -> P-v O) -> λ (auto'-v : (m-v : nat) -> (X---v : matita-basics-logic.eq lzero nat (S x-366-v) (S m-v)) -> P-v (S m-v)) -> auto'-v x-366-v (matita-basics-logic.refl lzero nat (S x-366-v))) n-v

nat-elim2 : (l22-v : Level) -> (R-v : (X---v : nat) -> (X--1-v : nat) -> Set l22-v) -> (X---v : (n-v : nat) -> R-v O n-v) -> (X--1-v : (n-v : nat) -> R-v (S n-v) O) -> (X--2-v : (n-v : nat) -> (m-v : nat) -> (X--2-v : R-v n-v m-v) -> R-v (S n-v) (S m-v)) -> (n-v : nat) -> (m-v : nat) -> R-v n-v m-v
nat-elim2 = λ (l22-v : Level) -> λ (R-v : (X---v : nat) -> (X--1-v : nat) -> Set l22-v) -> λ (ROn-v : (n-v : nat) -> R-v O n-v) -> λ (RSO-v : (n-v : nat) -> R-v (S n-v) O) -> λ (RSS-v : (n-v : nat) -> (m-v : nat) -> (X---v : R-v n-v m-v) -> R-v (S n-v) (S m-v)) -> λ (n-v : nat) -> nat-ind l22-v (λ (X-x-365-v : nat) -> (m-v : nat) -> R-v X-x-365-v m-v) (λ (m-v : nat) -> ROn-v m-v) (λ (n0-v : nat) -> λ (Rn0m-v : (m-v : nat) -> R-v n0-v m-v) -> λ (m-v : nat) -> match-nat l22-v (λ (X---v : nat) -> R-v (S n0-v) X---v) (RSO-v n0-v) (λ (auto-v : nat) -> RSS-v n0-v auto-v (Rn0m-v auto-v)) m-v) n-v

le-gen : (l4-v : Level) -> (P-v : (X---v : nat) -> Set l4-v) -> (n-v : nat) -> (X---v : (i-v : nat) -> (X---v : le i-v n-v) -> P-v i-v) -> P-v n-v
le-gen = λ (l4-v : Level) -> λ (P-v : (X---v : nat) -> Set l4-v) -> λ (n-v : nat) -> λ (auto-v : (i-v : nat) -> (X---v : le i-v n-v) -> P-v i-v) -> auto-v n-v (le-n n-v)

pred-Sn : (n-v : nat) -> matita-basics-logic.eq lzero nat n-v (pred (S n-v))
pred-Sn = λ (n-v : nat) -> matita-basics-logic.refl lzero nat n-v

injective-S : matita-basics-relations.||injective|| lzero lzero nat nat S
injective-S = λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat (S x-v) (S y-v)) -> matita-basics-logic.rewrite-l lzero lzero nat y-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v y-v) (matita-basics-logic.refl lzero nat y-v) x-v (matita-basics-logic.rewrite-r lzero lzero nat (pred (S x-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat y-v X---v) (matita-basics-logic.rewrite-r lzero lzero nat (S y-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat y-v (pred X---v)) (pred-Sn y-v) (S x-v) auto-v) x-v (pred-Sn x-v))

S-pred : (n-v : nat) -> (X---v : lt O n-v) -> matita-basics-logic.eq lzero nat (S (pred n-v)) n-v
S-pred = λ (n-v : nat) -> λ (posn-v : lt O n-v) -> match-le (S O) lzero (λ (X---v : nat) -> λ (X-0-v : le (S O) X---v) -> matita-basics-logic.eq lzero nat (S (pred X---v)) X---v) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (S O)) (matita-basics-logic.refl lzero nat (S O)) (pred (S O)) (pred-Sn O)) (λ (m-v : nat) -> λ (auto-v : le (S O) m-v) -> matita-basics-logic.rewrite-l lzero lzero nat m-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (S m-v)) (matita-basics-logic.refl lzero nat (S m-v)) (pred (S m-v)) (pred-Sn m-v)) n-v posn-v

plus-O-n : (n-v : nat) -> matita-basics-logic.eq lzero nat n-v (plus O n-v)
plus-O-n = λ (n-v : nat) -> matita-basics-logic.refl lzero nat n-v

plus-n-O : (n-v : nat) -> matita-basics-logic.eq lzero nat n-v (plus n-v O)
plus-n-O = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.eq lzero nat X-x-365-v (plus X-x-365-v O)) (matita-basics-logic.refl lzero nat O) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.eq lzero nat x-366-v (plus x-366-v O)) -> matita-basics-logic.rewrite-l lzero lzero nat x-366-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S x-366-v) (S X---v)) (matita-basics-logic.refl lzero nat (S x-366-v)) (plus x-366-v O) X-x-368-v) n-v

plus-n-Sm : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (S (plus n-v m-v)) (plus n-v (S m-v))
plus-n-Sm = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (S (plus X-x-365-v m-v)) (plus X-x-365-v (S m-v))) (λ (m-v : nat) -> matita-basics-logic.refl lzero nat (S m-v)) (λ (x-366-v : nat) -> λ (X-x-368-v : (m-v : nat) -> matita-basics-logic.eq lzero nat (S (plus x-366-v m-v)) (plus x-366-v (S m-v))) -> λ (m-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S m-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (S (plus x-366-v (S m-v)))) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S (S m-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S (plus x-366-v (S m-v)))) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S (S m-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (S (S m-v))) X---v) (matita-basics-logic.refl lzero nat (plus x-366-v (S (S m-v)))) (S (plus x-366-v (S m-v))) (X-x-368-v (S m-v))) (S (plus x-366-v (S m-v))) (X-x-368-v (S m-v))) (S (plus x-366-v m-v)) (X-x-368-v m-v)) n-v

commutative-plus : matita-basics-relations.commutative lzero nat plus
commutative-plus = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (y-v : nat) -> matita-basics-logic.eq lzero nat (plus X-x-365-v y-v) (plus y-v X-x-365-v)) (λ (y-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat y-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat y-v X---v) (matita-basics-logic.refl lzero nat y-v) (plus y-v O) (plus-n-O y-v)) (λ (x-366-v : nat) -> λ (X-x-368-v : (y-v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v y-v) (plus y-v x-366-v)) -> λ (y-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus y-v (S x-366-v))) (matita-basics-logic.rewrite-r lzero lzero nat (plus y-v (S x-366-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus y-v (S x-366-v))) (matita-basics-logic.refl lzero nat (plus y-v (S x-366-v))) (plus x-366-v (S y-v)) (matita-basics-logic.rewrite-l lzero lzero nat (S (plus x-366-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus y-v (S x-366-v))) (matita-basics-logic.rewrite-r lzero lzero nat (plus y-v x-366-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (plus y-v (S x-366-v))) (plus-n-Sm y-v x-366-v) (plus x-366-v y-v) (X-x-368-v y-v)) (plus x-366-v (S y-v)) (plus-n-Sm x-366-v y-v))) (S (plus x-366-v y-v)) (plus-n-Sm x-366-v y-v)) n-v

associative-plus : matita-basics-relations.associative lzero nat plus
associative-plus = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (plus (plus X-x-365-v y-v) z-v) (plus X-x-365-v (plus y-v z-v))) (λ (y-v : nat) -> λ (z-v : nat) -> matita-basics-logic.refl lzero nat (plus y-v z-v)) (λ (x-366-v : nat) -> λ (X-x-368-v : (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (plus (plus x-366-v y-v) z-v) (plus x-366-v (plus y-v z-v))) -> λ (y-v : nat) -> λ (z-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (plus y-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (S (plus x-366-v (plus y-v z-v)))) (matita-basics-logic.refl lzero nat (S (plus x-366-v (plus y-v z-v)))) (plus (plus x-366-v y-v) z-v) (X-x-368-v y-v z-v)) n-v

assoc-plus1 : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> matita-basics-logic.eq lzero nat (plus c-v (plus b-v a-v)) (plus (plus b-v c-v) a-v)
assoc-plus1 = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus a-v b-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus c-v X---v) (plus (plus b-v c-v) a-v)) (matita-basics-logic.rewrite-r lzero lzero nat (plus a-v (plus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus c-v (plus a-v b-v)) X---v) (matita-basics-logic.rewrite-r lzero lzero nat (plus a-v (plus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus a-v (plus b-v c-v))) (matita-basics-logic.refl lzero nat (plus a-v (plus b-v c-v))) (plus c-v (plus a-v b-v)) (matita-basics-logic.rewrite-l lzero lzero nat (plus (plus a-v b-v) c-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus c-v (plus a-v b-v)) X---v) (commutative-plus c-v (plus a-v b-v)) (plus a-v (plus b-v c-v)) (associative-plus a-v b-v c-v))) (plus (plus b-v c-v) a-v) (commutative-plus (plus b-v c-v) a-v)) (plus b-v a-v) (commutative-plus b-v a-v)

injective-plus-r : (n-v : nat) -> matita-basics-relations.||injective|| lzero lzero nat nat (λ (m-v : nat) -> plus n-v m-v)
injective-plus-r = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-relations.||injective|| lzero lzero nat nat (λ (m-v : nat) -> plus X-x-365-v m-v)) (λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat x-v y-v) -> matita-basics-logic.rewrite-l lzero lzero nat x-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat x-v X---v) (matita-basics-logic.refl lzero nat x-v) y-v auto-v) (λ (x-366-v : nat) -> λ (X-x-368-v : (x-v : nat) -> (y-v : nat) -> (X---v : matita-basics-logic.eq lzero nat (plus x-366-v x-v) (plus x-366-v y-v)) -> matita-basics-logic.eq lzero nat x-v y-v) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat (S (plus x-366-v x-v)) (S (plus x-366-v y-v))) -> X-x-368-v x-v y-v (injective-S (plus x-366-v x-v) (plus x-366-v y-v) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S x-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S (plus x-366-v y-v))) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (S x-v)) X---v) (matita-basics-logic.rewrite-l lzero lzero nat (plus x-366-v (S x-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (S x-v)) X---v) (matita-basics-logic.refl lzero nat (plus x-366-v (S x-v))) (plus x-366-v (S y-v)) (matita-basics-logic.rewrite-l lzero lzero nat (S (plus x-366-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (S x-v)) X---v) (matita-basics-logic.rewrite-l lzero lzero nat (S (plus x-366-v x-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S (plus x-366-v y-v))) auto-v (plus x-366-v (S x-v)) (plus-n-Sm x-366-v x-v)) (plus x-366-v (S y-v)) (plus-n-Sm x-366-v y-v))) (S (plus x-366-v y-v)) (plus-n-Sm x-366-v y-v)) (S (plus x-366-v x-v)) (plus-n-Sm x-366-v x-v)))) n-v

injective-plus-l : (n-v : nat) -> matita-basics-relations.||injective|| lzero lzero nat nat (λ (m-v : nat) -> plus m-v n-v)
injective-plus-l = λ (n-v : nat) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat (plus x-v n-v) (plus y-v n-v)) -> injective-plus-r n-v x-v y-v (matita-basics-logic.rewrite-r lzero lzero nat (plus n-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus n-v y-v)) (matita-basics-logic.refl lzero nat (plus n-v y-v)) (plus n-v x-v) (matita-basics-logic.rewrite-l lzero lzero nat (plus y-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus n-v x-v) X---v) (matita-basics-logic.rewrite-l lzero lzero nat (plus x-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus y-v n-v)) auto-v (plus n-v x-v) (commutative-plus x-v n-v)) (plus n-v y-v) (commutative-plus y-v n-v)))

times-Sn-m : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (plus m-v (times n-v m-v)) (times (S n-v) m-v)
times-Sn-m = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-logic.refl lzero nat (plus m-v (times n-v m-v))

times-O-n : (n-v : nat) -> matita-basics-logic.eq lzero nat O (times O n-v)
times-O-n = λ (n-v : nat) -> matita-basics-logic.refl lzero nat O

times-n-O : (n-v : nat) -> matita-basics-logic.eq lzero nat O (times n-v O)
times-n-O = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.eq lzero nat O (times X-x-365-v O)) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.refl lzero nat O) (times O O) (times-O-n O)) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.eq lzero nat O (times x-366-v O)) -> matita-basics-logic.rewrite-l lzero lzero nat (plus O (times x-366-v O)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O (plus O X---v)) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.refl lzero nat O) (plus O O) (plus-O-n O)) (times x-366-v O) X-x-368-v) (times (S x-366-v) O) (times-Sn-m x-366-v O)) n-v

times-n-Sm : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (plus n-v (times n-v m-v)) (times n-v (S m-v))
times-n-Sm = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (plus X-x-365-v (times X-x-365-v m-v)) (times X-x-365-v (S m-v))) (λ (X-m-v : nat) -> matita-basics-logic.refl lzero nat O) (λ (x-366-v : nat) -> λ (X-x-368-v : (m-v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (times x-366-v m-v)) (times x-366-v (S m-v))) -> λ (m-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S (plus m-v (times x-366-v m-v)))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S (plus m-v (times x-366-v (S m-v))))) (matita-basics-logic.rewrite-r lzero lzero nat (plus m-v (S (times x-366-v m-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v X---v) (S (plus m-v (times x-366-v (S m-v))))) (matita-basics-logic.rewrite-l lzero lzero nat (plus x-366-v (times x-366-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (plus m-v (S (times x-366-v m-v)))) (S (plus m-v X---v))) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (plus m-v (times x-366-v m-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (plus m-v (S (times x-366-v m-v)))) (S X---v)) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v (S (plus m-v (times x-366-v m-v)))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (plus m-v (S (times x-366-v m-v)))) X---v) (matita-basics-logic.rewrite-r lzero lzero nat (plus m-v (S (times x-366-v m-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-366-v (plus m-v (S (times x-366-v m-v)))) (plus x-366-v X---v)) (matita-basics-logic.refl lzero nat (plus x-366-v (plus m-v (S (times x-366-v m-v))))) (S (plus m-v (times x-366-v m-v))) (plus-n-Sm m-v (times x-366-v m-v))) (S (plus x-366-v (plus m-v (times x-366-v m-v)))) (plus-n-Sm x-366-v (plus m-v (times x-366-v m-v)))) (plus m-v (plus x-366-v (times x-366-v m-v))) (matita-basics-logic.rewrite-l lzero lzero nat (plus (plus x-366-v m-v) (times x-366-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus m-v (plus x-366-v (times x-366-v m-v))) X---v) (assoc-plus1 (times x-366-v m-v) x-366-v m-v) (plus x-366-v (plus m-v (times x-366-v m-v))) (associative-plus x-366-v m-v (times x-366-v m-v)))) (times x-366-v (S m-v)) (X-x-368-v m-v)) (S (plus m-v (times x-366-v m-v))) (plus-n-Sm m-v (times x-366-v m-v))) (S (plus x-366-v (plus m-v (times x-366-v m-v)))) (plus-n-Sm x-366-v (plus m-v (times x-366-v m-v)))) n-v

commutative-times : matita-basics-relations.commutative lzero nat times
commutative-times = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (y-v : nat) -> matita-basics-logic.eq lzero nat (times X-x-365-v y-v) (times y-v X-x-365-v)) (λ (y-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.refl lzero nat O) (times y-v O) (times-n-O y-v)) (λ (x-366-v : nat) -> λ (X-x-368-v : (y-v : nat) -> matita-basics-logic.eq lzero nat (times x-366-v y-v) (times y-v x-366-v)) -> λ (y-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat (plus y-v (times y-v x-366-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus y-v (times x-366-v y-v)) X---v) (matita-basics-logic.rewrite-l lzero lzero nat (times x-366-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus y-v (times x-366-v y-v)) (plus y-v X---v)) (matita-basics-logic.refl lzero nat (plus y-v (times x-366-v y-v))) (times y-v x-366-v) (X-x-368-v y-v)) (times y-v (S x-366-v)) (times-n-Sm y-v x-366-v)) n-v

distributive-times-plus : matita-basics-relations.distributive lzero nat times plus
distributive-times-plus = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (times X-x-365-v (plus y-v z-v)) (plus (times X-x-365-v y-v) (times X-x-365-v z-v))) (λ (X-y-v : nat) -> λ (X-z-v : nat) -> matita-basics-logic.refl lzero nat O) (λ (x-366-v : nat) -> λ (X-x-368-v : (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (times x-366-v (plus y-v z-v)) (plus (times x-366-v y-v) (times x-366-v z-v))) -> λ (y-v : nat) -> λ (z-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus y-v (plus z-v (times x-366-v (plus y-v z-v)))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus (plus y-v (times x-366-v y-v)) (plus z-v (times x-366-v z-v)))) (matita-basics-logic.rewrite-r lzero lzero nat (plus y-v (plus (times x-366-v y-v) (plus z-v (times x-366-v z-v)))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus y-v (plus z-v (times x-366-v (plus y-v z-v)))) X---v) (matita-basics-logic.rewrite-r lzero lzero nat (plus z-v (plus (times x-366-v y-v) (times x-366-v z-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus y-v (plus z-v (times x-366-v (plus y-v z-v)))) (plus y-v X---v)) (matita-basics-logic.rewrite-l lzero lzero nat (times x-366-v (plus y-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus y-v (plus z-v (times x-366-v (plus y-v z-v)))) (plus y-v (plus z-v X---v))) (matita-basics-logic.refl lzero nat (plus y-v (plus z-v (times x-366-v (plus y-v z-v))))) (plus (times x-366-v y-v) (times x-366-v z-v)) (X-x-368-v y-v z-v)) (plus (times x-366-v y-v) (plus z-v (times x-366-v z-v))) (matita-basics-logic.rewrite-l lzero lzero nat (plus (plus z-v (times x-366-v y-v)) (times x-366-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus (times x-366-v y-v) (plus z-v (times x-366-v z-v))) X---v) (assoc-plus1 (times x-366-v z-v) z-v (times x-366-v y-v)) (plus z-v (plus (times x-366-v y-v) (times x-366-v z-v))) (associative-plus z-v (times x-366-v y-v) (times x-366-v z-v)))) (plus (plus y-v (times x-366-v y-v)) (plus z-v (times x-366-v z-v))) (associative-plus y-v (times x-366-v y-v) (plus z-v (times x-366-v z-v)))) (plus (plus y-v z-v) (times x-366-v (plus y-v z-v))) (associative-plus y-v z-v (times x-366-v (plus y-v z-v)))) n-v

distributive-times-plus-r : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> matita-basics-logic.eq lzero nat (times (plus b-v c-v) a-v) (plus (times b-v a-v) (times c-v a-v))
distributive-times-plus-r = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (times a-v (plus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus (times b-v a-v) (times c-v a-v))) (matita-basics-logic.rewrite-r lzero lzero nat (times a-v b-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (times a-v (plus b-v c-v)) (plus X---v (times c-v a-v))) (matita-basics-logic.rewrite-r lzero lzero nat (times a-v c-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (times a-v (plus b-v c-v)) (plus (times a-v b-v) X---v)) (matita-basics-logic.rewrite-l lzero lzero nat (times a-v (plus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (times a-v (plus b-v c-v)) X---v) (matita-basics-logic.refl lzero nat (times a-v (plus b-v c-v))) (plus (times a-v b-v) (times a-v c-v)) (distributive-times-plus a-v b-v c-v)) (times c-v a-v) (commutative-times c-v a-v)) (times b-v a-v) (commutative-times b-v a-v)) (times (plus b-v c-v) a-v) (commutative-times (plus b-v c-v) a-v)

associative-times : matita-basics-relations.associative lzero nat times
associative-times = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (times (times X-x-365-v y-v) z-v) (times X-x-365-v (times y-v z-v))) (λ (X-y-v : nat) -> λ (X-z-v : nat) -> matita-basics-logic.refl lzero nat O) (λ (x-366-v : nat) -> λ (X-x-368-v : (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (times (times x-366-v y-v) z-v) (times x-366-v (times y-v z-v))) -> λ (y-v : nat) -> λ (z-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus (times y-v z-v) (times x-366-v (times y-v z-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus (times y-v z-v) (times x-366-v (times y-v z-v)))) (matita-basics-logic.refl lzero nat (plus (times y-v z-v) (times x-366-v (times y-v z-v)))) (times (plus y-v (times x-366-v y-v)) z-v) (matita-basics-logic.rewrite-l lzero lzero nat (times (times x-366-v y-v) z-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (times (plus y-v (times x-366-v y-v)) z-v) (plus (times y-v z-v) X---v)) (distributive-times-plus-r z-v y-v (times x-366-v y-v)) (times x-366-v (times y-v z-v)) (X-x-368-v y-v z-v))) n-v

times-times : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (times x-v (times y-v z-v)) (times y-v (times x-v z-v))
times-times = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (times y-v (times x-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (times y-v (times x-v z-v))) (matita-basics-logic.refl lzero nat (times y-v (times x-v z-v))) (times x-v (times y-v z-v)) (matita-basics-logic.rewrite-l lzero lzero nat (times (times x-v y-v) z-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (times y-v (times x-v z-v))) (matita-basics-logic.rewrite-l lzero lzero nat (times y-v x-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (times X---v z-v) (times y-v (times x-v z-v))) (associative-times y-v x-v z-v) (times x-v y-v) (commutative-times y-v x-v)) (times x-v (times y-v z-v)) (associative-times x-v y-v z-v))

times-n-1 : (n-v : nat) -> matita-basics-logic.eq lzero nat n-v (times n-v (S O))
times-n-1 = λ (n-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat (plus n-v (times n-v O)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v (plus n-v X---v)) (matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.refl lzero nat n-v) (plus n-v O) (plus-n-O n-v)) (times n-v O) (times-n-O n-v)) (times n-v (S O)) (times-n-Sm n-v O)

minus-S-S : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (minus (S n-v) (S m-v)) (minus n-v m-v)
minus-S-S = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-logic.refl lzero nat (minus (S n-v) (S m-v))

minus-O-n : (n-v : nat) -> matita-basics-logic.eq lzero nat O (minus O n-v)
minus-O-n = λ (n-v : nat) -> match-nat lzero (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O (minus O X---v)) (matita-basics-logic.refl lzero nat O) (λ (auto-v : nat) -> matita-basics-logic.refl lzero nat O) n-v

minus-n-O : (n-v : nat) -> matita-basics-logic.eq lzero nat n-v (minus n-v O)
minus-n-O = λ (n-v : nat) -> match-nat lzero (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (minus X---v O)) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.refl lzero nat O) (minus O O) (minus-O-n O)) (λ (auto-v : nat) -> matita-basics-logic.refl lzero nat (S auto-v)) n-v

minus-n-n : (n-v : nat) -> matita-basics-logic.eq lzero nat O (minus n-v n-v)
minus-n-n = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.eq lzero nat O (minus X-x-365-v X-x-365-v)) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.refl lzero nat O) (minus O O) (minus-O-n O)) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.eq lzero nat O (minus x-366-v x-366-v)) -> matita-basics-logic.rewrite-r lzero lzero nat (minus x-366-v x-366-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat O X---v) (matita-basics-logic.refl lzero nat O) (minus x-366-v x-366-v) X-x-368-v) (minus (S x-366-v) (S x-366-v)) (minus-S-S x-366-v x-366-v)) n-v



minus-Sn-n : (n-v : nat) -> matita-basics-logic.eq lzero nat (S O) (minus (S n-v) n-v)
minus-Sn-n = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.eq lzero nat (S O) (minus (S X-x-365-v) X-x-365-v)) (matita-basics-logic.refl lzero nat (S O)) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.eq lzero nat (S O) (match-nat lzero (λ (X---v : nat) -> nat) (S x-366-v) (λ (q-v : nat) -> minus x-366-v q-v) x-366-v)) -> matita-basics-logic.rewrite-r lzero lzero nat (match-nat lzero (λ (X---v : nat) -> nat) (S x-366-v) (λ (q-v : nat) -> minus x-366-v q-v) x-366-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (match-nat lzero (λ (X--1-v : nat) -> nat) (S x-366-v) (λ (q-v : nat) -> minus x-366-v q-v) x-366-v)) (matita-basics-logic.refl lzero nat (match-nat lzero (λ (X---v : nat) -> nat) (S x-366-v) (λ (q-v : nat) -> minus x-366-v q-v) x-366-v)) (S O) X-x-368-v) n-v


eq-minus-S-pred : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat (minus n-v (S m-v)) (pred (minus n-v m-v))
eq-minus-S-pred = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> matita-basics-logic.eq lzero nat (minus X---v (S X-0-v)) (pred (minus X---v X-0-v))) (λ (X-n-v : nat) -> matita-basics-logic.refl lzero nat O) (λ (n-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v n-v) (matita-basics-logic.refl lzero nat n-v) (minus n-v O) (minus-n-O n-v)) (λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat (minus n-v (S m-v)) (match-nat lzero (λ (X---v : nat) -> nat) O (λ (p-v : nat) -> p-v) (minus n-v m-v))) -> matita-basics-logic.rewrite-r lzero lzero nat (match-nat lzero (λ (X---v : nat) -> nat) O (λ (p-v : nat) -> p-v) (minus n-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (match-nat lzero (λ (X-0-v : nat) -> nat) O (λ (p-v : nat) -> p-v) (minus n-v m-v))) (matita-basics-logic.refl lzero nat (match-nat lzero (λ (X---v : nat) -> nat) O (λ (p-v : nat) -> p-v) (minus n-v m-v))) (minus n-v (S m-v)) auto-v)

let-clause-73 : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> (x134-v : nat) -> (x135-v : nat) -> (x136-v : nat) -> matita-basics-logic.eq lzero nat (plus x134-v (plus x135-v x136-v)) (plus x135-v (plus x134-v x136-v))
let-clause-73 = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> λ (x134-v : nat) -> λ (x135-v : nat) -> λ (x136-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat (plus (plus x135-v x134-v) x136-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x134-v (plus x135-v x136-v)) X---v) (assoc-plus1 x136-v x135-v x134-v) (plus x135-v (plus x134-v x136-v)) (associative-plus x135-v x134-v x136-v)

plus-plus-comm-23 : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> matita-basics-logic.eq lzero nat (plus (plus x-v y-v) z-v) (plus (plus x-v z-v) y-v)
plus-plus-comm-23 = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus z-v (plus x-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus (plus x-v z-v) y-v)) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-v (plus z-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (plus (plus x-v z-v) y-v)) (matita-basics-logic.rewrite-r lzero lzero nat (plus y-v z-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-v X---v) (plus (plus x-v z-v) y-v)) (matita-basics-logic.rewrite-r lzero lzero nat (plus y-v (plus x-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-v (plus y-v z-v)) X---v) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-v (plus y-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus x-v (plus y-v z-v)) X---v) (matita-basics-logic.refl lzero nat (plus x-v (plus y-v z-v))) (plus y-v (plus x-v z-v)) (let-clause-73 x-v y-v z-v y-v x-v z-v)) (plus (plus x-v z-v) y-v) (commutative-plus (plus x-v z-v) y-v)) (plus z-v y-v) (commutative-plus z-v y-v)) (plus z-v (plus x-v y-v)) (let-clause-73 x-v y-v z-v z-v x-v y-v)) (plus (plus x-v y-v) z-v) (commutative-plus (plus x-v y-v) z-v)

discr-plus-xy-minus-xz : (x-v : nat) -> (z-v : nat) -> (y-v : nat) -> (X---v : matita-basics-logic.eq lzero nat (plus x-v y-v) (minus x-v z-v)) -> matita-basics-logic.eq lzero nat y-v O
discr-plus-xy-minus-xz = λ (x-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (z-v : nat) -> (y-v : nat) -> (X---v : matita-basics-logic.eq lzero nat (plus X-x-365-v y-v) (minus X-x-365-v z-v)) -> matita-basics-logic.eq lzero nat y-v O) (λ (z-v : nat) -> λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat (plus O y-v) (minus O z-v)) -> matita-basics-logic.rewrite-l lzero lzero nat y-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat y-v X---v) (matita-basics-logic.refl lzero nat y-v) O (matita-basics-logic.rewrite-r lzero lzero nat (minus O z-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat y-v X---v) (matita-basics-logic.rewrite-r lzero lzero nat (plus y-v O) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (minus O z-v)) (matita-basics-logic.rewrite-l lzero lzero nat (plus O y-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (minus O z-v)) auto-v (plus y-v O) (commutative-plus O y-v)) y-v (plus-n-O y-v)) O (minus-O-n z-v))) (λ (x0-v : nat) -> λ (IHx-v : (z-v : nat) -> (y-v : nat) -> (X---v : matita-basics-logic.eq lzero nat (plus x0-v y-v) (minus x0-v z-v)) -> matita-basics-logic.eq lzero nat y-v O) -> λ (X-clearme-v : nat) -> match-nat lzero (λ (X---v : nat) -> (y-v : nat) -> (X--1-v : matita-basics-logic.eq lzero nat (plus (S x0-v) y-v) (minus (S x0-v) X---v)) -> matita-basics-logic.eq lzero nat y-v O) (λ (y-v : nat) -> λ (H-v : matita-basics-logic.eq lzero nat (S (plus x0-v y-v)) (S x0-v)) -> IHx-v O y-v (matita-basics-logic.eq-ind lzero lzero nat x0-v (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat x0-v x-1-v) -> matita-basics-logic.eq lzero nat (plus x0-v y-v) x-1-v) (injective-S (plus x0-v y-v) x0-v (matita-basics-logic.rewrite-r lzero lzero nat (plus x0-v (S y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S x0-v)) (matita-basics-logic.rewrite-r lzero lzero nat (S x0-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S x0-v)) (matita-basics-logic.refl lzero nat (S x0-v)) (plus x0-v (S y-v)) (matita-basics-logic.rewrite-l lzero lzero nat (S (plus x0-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S x0-v)) H-v (plus x0-v (S y-v)) (plus-n-Sm x0-v y-v))) (S (plus x0-v y-v)) (plus-n-Sm x0-v y-v))) (minus x0-v O) (minus-n-O x0-v))) (λ (z-v : nat) -> λ (y-v : nat) -> matita-basics-logic.eq-ind-r lzero lzero nat (plus x0-v (S y-v)) (λ (x1-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x1-v (plus x0-v (S y-v))) -> (X--1-v : matita-basics-logic.eq lzero nat x1-v (minus x0-v z-v)) -> matita-basics-logic.eq lzero nat y-v O) (λ (H-v : matita-basics-logic.eq lzero nat (plus x0-v (S y-v)) (minus x0-v z-v)) -> nat-discr lzero (S y-v) O (IHx-v z-v (S y-v) H-v) (matita-basics-logic.eq lzero nat y-v O)) (S (plus x0-v y-v)) (plus-n-Sm x0-v y-v)) X-clearme-v) x-v

not-eq-S : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v))
not-eq-S = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v)) (matita-basics-logic.eq lzero nat n-v m-v) (λ (auto'-v : matita-basics-logic.eq lzero nat (S n-v) (S m-v)) -> matita-basics-logic.rewrite-l lzero lzero nat m-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v m-v) (matita-basics-logic.refl lzero nat m-v) n-v (matita-basics-logic.rewrite-r lzero lzero nat (pred (S n-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat m-v X---v) (matita-basics-logic.rewrite-r lzero lzero nat (S m-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat m-v (pred X---v)) (pred-Sn m-v) (S n-v) auto'-v) n-v (pred-Sn n-v))) auto-v

not-eq-O-S : (n-v : nat) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat O (S n-v))
not-eq-O-S = λ (n-v : nat) -> matita-basics-logic.nmk lzero (matita-basics-logic.eq lzero nat O (S n-v)) (λ (eqOS-v : matita-basics-logic.eq lzero nat O (S n-v)) -> matita-basics-logic.eq-ind-r lzero lzero nat (S n-v) (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v (S n-v)) -> not-zero lzero x-v) (matita-basics-logic.I lzero) O eqOS-v)

not-eq-n-Sn : (n-v : nat) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v (S n-v))
not-eq-n-Sn = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat X-x-365-v (S X-x-365-v))) (not-eq-O-S O) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat x-366-v (S x-366-v))) -> not-eq-S x-366-v (S x-366-v) X-x-368-v) n-v

lt-to-not-zero : (l6-v : Level) -> (n-v : nat) -> (m-v : nat) -> (X---v : lt n-v m-v) -> not-zero l6-v m-v
lt-to-not-zero = λ (l6-v : Level) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (Hlt-v : lt n-v m-v) -> le-ind l6-v (S n-v) (λ (x-417-v : nat) -> λ (X-x-418-v : le (S n-v) x-417-v) -> not-zero l6-v x-417-v) (matita-basics-logic.I l6-v) (λ (m0-v : nat) -> λ (X-x-419-v : le (S n-v) m0-v) -> λ (X-x-421-v : not-zero l6-v m0-v) -> matita-basics-logic.I l6-v) m-v Hlt-v

le-S-S : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> le (S n-v) (S m-v)
le-S-S = λ (n-v : nat) -> λ (m-v : nat) -> λ (lenm-v : le n-v m-v) -> le-ind lzero n-v (λ (x-417-v : nat) -> λ (X-x-418-v : le n-v x-417-v) -> le (S n-v) (S x-417-v)) (le-n (S n-v)) (λ (m0-v : nat) -> λ (X-x-419-v : le n-v m0-v) -> λ (X-x-421-v : le (S n-v) (S m0-v)) -> le-S (S n-v) (S m0-v) X-x-421-v) m-v lenm-v

le-O-n : (n-v : nat) -> le O n-v
le-O-n = λ (n-v : nat) -> nat-ind lzero (le O) (le-n O) (λ (x-366-v : nat) -> λ (X-x-368-v : le O x-366-v) -> le-S O x-366-v X-x-368-v) n-v

le-n-Sn : (n-v : nat) -> le n-v (S n-v)
le-n-Sn = λ (n-v : nat) -> le-S n-v n-v (le-n n-v)

transitive-le : matita-basics-relations.transitive lzero lzero nat le
transitive-le = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (leab-v : le a-v b-v) -> λ (lebc-v : le b-v c-v) -> le-ind lzero b-v (λ (x-417-v : nat) -> λ (X-x-418-v : le b-v x-417-v) -> le a-v x-417-v) leab-v (λ (m-v : nat) -> λ (X-x-419-v : le b-v m-v) -> λ (X-x-421-v : le a-v m-v) -> le-S a-v m-v X-x-421-v) c-v lebc-v

le-pred-n : (n-v : nat) -> le (pred n-v) n-v
le-pred-n = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> le (pred X-x-365-v) X-x-365-v) (le-n (pred O)) (λ (x-366-v : nat) -> λ (X-x-368-v : le (pred x-366-v) x-366-v) -> le-n-Sn (pred (S x-366-v))) n-v

monotonic-pred : matita-basics-relations.monotonic lzero lzero nat le pred
monotonic-pred = λ (n-v : nat) -> λ (m-v : nat) -> λ (lenm-v : le n-v m-v) -> le-ind lzero n-v (λ (x-417-v : nat) -> λ (X-x-418-v : le n-v x-417-v) -> le (pred n-v) (pred x-417-v)) (le-n (pred n-v)) (λ (m0-v : nat) -> λ (X-x-419-v : le n-v m0-v) -> λ (X-x-421-v : le (pred n-v) (pred m0-v)) -> transitive-le (pred n-v) n-v (pred (S m0-v)) (le-pred-n n-v) X-x-419-v) m-v lenm-v

le-S-S-to-le : (n-v : nat) -> (m-v : nat) -> (X---v : le (S n-v) (S m-v)) -> le n-v m-v
le-S-S-to-le = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le (S n-v) (S m-v)) -> matita-basics-logic.eq-coerc lzero (le (pred (S n-v)) (pred (S m-v))) (le n-v m-v) (monotonic-pred (S n-v) (S m-v) auto-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S m-v))) (le n-v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v X---v) (le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v m-v)) (pred (S m-v)) (pred-Sn m-v)) (pred (S n-v)) (pred-Sn n-v))

monotonic-le-plus-r : (n-v : nat) -> matita-basics-relations.monotonic lzero lzero nat le (λ (m-v : nat) -> plus n-v m-v)
monotonic-le-plus-r = λ (n-v : nat) -> λ (a-v : nat) -> λ (b-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (X---v : le a-v b-v) -> le (plus X-x-365-v a-v) (plus X-x-365-v b-v)) (λ (auto-v : le a-v b-v) -> auto-v) (λ (m-v : nat) -> λ (H-v : (X---v : le a-v b-v) -> le (plus m-v a-v) (plus m-v b-v)) -> λ (leab-v : le a-v b-v) -> le-S-S (plus m-v a-v) (plus m-v b-v) (H-v leab-v)) n-v

monotonic-le-plus-l : (m-v : nat) -> matita-basics-relations.monotonic lzero lzero nat le (λ (n-v : nat) -> plus n-v m-v)
monotonic-le-plus-l = λ (m-v : nat) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : le x-v y-v) -> matita-basics-logic.eq-coerc lzero (le (plus m-v x-v) (plus m-v y-v)) (le (plus x-v m-v) (plus y-v m-v)) (monotonic-le-plus-r m-v x-v y-v auto-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v x-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus m-v x-v) (plus m-v y-v)) (le X---v (plus y-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus m-v x-v) (plus m-v y-v)) (le (plus m-v x-v) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus m-v x-v) (plus m-v y-v))) (plus y-v m-v) (commutative-plus y-v m-v)) (plus x-v m-v) (commutative-plus x-v m-v))

le-plus : (n1-v : nat) -> (n2-v : nat) -> (m1-v : nat) -> (m2-v : nat) -> (X---v : le n1-v n2-v) -> (X--1-v : le m1-v m2-v) -> le (plus n1-v m1-v) (plus n2-v m2-v)
le-plus = λ (n1-v : nat) -> λ (n2-v : nat) -> λ (m1-v : nat) -> λ (m2-v : nat) -> λ (len-v : le n1-v n2-v) -> λ (lem-v : le m1-v m2-v) -> transitive-le (plus n1-v m1-v) (plus n1-v m2-v) (plus n2-v m2-v) (monotonic-le-plus-r n1-v m1-v m2-v lem-v) (monotonic-le-plus-l m2-v n1-v n2-v len-v)

le-plus-n : (n-v : nat) -> (m-v : nat) -> le m-v (plus n-v m-v)
le-plus-n = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-logic.eq-coerc lzero (le (plus O m-v) (plus n-v m-v)) (le m-v (plus n-v m-v)) (monotonic-le-plus-l m-v O n-v (le-O-n n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (plus n-v m-v)) (le m-v (plus n-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le m-v (plus n-v m-v))) (plus O m-v) (plus-O-n m-v))

le-plus-a : (a-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> le n-v (plus a-v m-v)
le-plus-a = λ (a-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le n-v m-v) -> matita-basics-logic.eq-coerc lzero (le (plus O n-v) (plus a-v m-v)) (le n-v (plus a-v m-v)) (le-plus O a-v n-v m-v (le-O-n a-v) auto-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (plus a-v m-v)) (le n-v (plus a-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v (plus a-v m-v))) (plus O n-v) (plus-O-n n-v))

le-plus-b : (b-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le (plus n-v b-v) m-v) -> le n-v m-v
le-plus-b = λ (b-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le (plus n-v b-v) m-v) -> transitive-le n-v (plus n-v b-v) m-v (matita-basics-logic.eq-coerc lzero (le n-v (plus b-v n-v)) (le n-v (plus n-v b-v)) (le-plus-n b-v n-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus b-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v (plus b-v n-v)) (le n-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v (plus b-v n-v))) (plus n-v b-v) (commutative-plus n-v b-v))) auto-v

le-plus-n-r : (n-v : nat) -> (m-v : nat) -> le m-v (plus m-v n-v)
le-plus-n-r = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-logic.eq-coerc lzero (le m-v (plus n-v m-v)) (le m-v (plus m-v n-v)) (le-plus-n n-v m-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le m-v (plus n-v m-v)) (le m-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le m-v (plus n-v m-v))) (plus m-v n-v) (commutative-plus m-v n-v))

eq-plus-to-le : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : matita-basics-logic.eq lzero nat n-v (plus m-v p-v)) -> le m-v n-v
eq-plus-to-le = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat n-v (plus m-v p-v)) -> matita-basics-logic.eq-coerc lzero (le m-v (plus m-v p-v)) (le m-v n-v) (le-plus-n-r p-v m-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le m-v X---v) (le m-v n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le m-v n-v)) (plus m-v p-v) auto-v)

le-plus-to-le : (a-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le (plus a-v n-v) (plus a-v m-v)) -> le n-v m-v
le-plus-to-le = λ (a-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le (plus X-x-365-v n-v) (plus X-x-365-v m-v)) -> le n-v m-v) (λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le n-v m-v) -> auto-v) (λ (x-366-v : nat) -> λ (X-x-368-v : (n-v : nat) -> (m-v : nat) -> (X---v : le (plus x-366-v n-v) (plus x-366-v m-v)) -> le n-v m-v) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le (S (plus x-366-v n-v)) (S (plus x-366-v m-v))) -> matita-basics-logic.eq-coerc lzero (le (pred (S n-v)) (pred (S m-v))) (le n-v m-v) (monotonic-pred (S n-v) (S m-v) (X-x-368-v (S n-v) (S m-v) (matita-basics-logic.eq-coerc lzero (le (S (plus x-366-v n-v)) (S (plus x-366-v m-v))) (le (plus x-366-v (S n-v)) (plus x-366-v (S m-v))) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-366-v (S n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (S (plus x-366-v m-v))) (le (plus x-366-v (S n-v)) (plus x-366-v (S m-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-366-v (S m-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus x-366-v (S n-v)) X---v) (le (plus x-366-v (S n-v)) (plus x-366-v (S m-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus x-366-v (S n-v)) (plus x-366-v (S m-v)))) (S (plus x-366-v m-v)) (plus-n-Sm x-366-v m-v)) (S (plus x-366-v n-v)) (plus-n-Sm x-366-v n-v))))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S m-v))) (le n-v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v X---v) (le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v m-v)) (pred (S m-v)) (pred-Sn m-v)) (pred (S n-v)) (pred-Sn n-v))) a-v

le-plus-to-le-r : (a-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le (plus n-v a-v) (plus m-v a-v)) -> le n-v m-v
le-plus-to-le-r = λ (a-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le (plus n-v a-v) (plus m-v a-v)) -> le-plus-to-le a-v n-v m-v (matita-basics-logic.eq-coerc lzero (le (plus n-v a-v) (plus m-v a-v)) (le (plus a-v n-v) (plus a-v m-v)) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus a-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (plus m-v a-v)) (le (plus a-v n-v) (plus a-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus a-v m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus a-v n-v) X---v) (le (plus a-v n-v) (plus a-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus a-v n-v) (plus a-v m-v))) (plus m-v a-v) (commutative-plus m-v a-v)) (plus n-v a-v) (commutative-plus n-v a-v)))

monotonic-le-times-r : (n-v : nat) -> matita-basics-relations.monotonic lzero lzero nat le (λ (m-v : nat) -> times n-v m-v)
monotonic-le-times-r = λ (n-v : nat) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (lexy-v : le x-v y-v) -> nat-ind lzero (λ (X-x-365-v : nat) -> le (times X-x-365-v x-v) (times X-x-365-v y-v)) (le-O-n O) (λ (a-v : nat) -> λ (lea-v : le (times a-v x-v) (times a-v y-v)) -> le-plus x-v y-v (times a-v x-v) (times a-v y-v) lexy-v lea-v) n-v

le-times : (n1-v : nat) -> (n2-v : nat) -> (m1-v : nat) -> (m2-v : nat) -> (X---v : le n1-v n2-v) -> (X--1-v : le m1-v m2-v) -> le (times n1-v m1-v) (times n2-v m2-v)
le-times = λ (n1-v : nat) -> λ (n2-v : nat) -> λ (m1-v : nat) -> λ (m2-v : nat) -> λ (len-v : le n1-v n2-v) -> λ (lem-v : le m1-v m2-v) -> transitive-le (times n1-v m1-v) (times n1-v m2-v) (times n2-v m2-v) (monotonic-le-times-r n1-v m1-v m2-v lem-v) (matita-basics-logic.eq-coerc lzero (le (times m2-v n1-v) (times m2-v n2-v)) (le (times n1-v m2-v) (times n2-v m2-v)) (monotonic-le-times-r m2-v n1-v n2-v len-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times n1-v m2-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (times m2-v n2-v)) (le (times n1-v m2-v) (times n2-v m2-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times n2-v m2-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times n1-v m2-v) X---v) (le (times n1-v m2-v) (times n2-v m2-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (times n1-v m2-v) (times n2-v m2-v))) (times m2-v n2-v) (commutative-times m2-v n2-v)) (times m2-v n1-v) (commutative-times m2-v n1-v)))

lt-times-n : (n-v : nat) -> (m-v : nat) -> (X---v : lt O n-v) -> le m-v (times n-v m-v)
lt-times-n = λ (n-v : nat) -> λ (m-v : nat) -> λ (H-v : lt O n-v) -> matita-basics-logic.eq-coerc lzero (le (times m-v (S O)) (times m-v n-v)) (le m-v (times n-v m-v)) (monotonic-le-times-r m-v (S O) n-v H-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (times m-v n-v)) (le m-v (times n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times n-v m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le m-v X---v) (le m-v (times n-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le m-v (times n-v m-v))) (times m-v n-v) (commutative-times m-v n-v)) (times m-v (S O)) (times-n-1 m-v))

le-times-to-le : (a-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : lt O a-v) -> (X--1-v : le (times a-v n-v) (times a-v m-v)) -> le n-v m-v
le-times-to-le = λ (a-v : nat) -> nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> (X--1-v : lt O a-v) -> (X--2-v : le (times a-v X---v) (times a-v X-0-v)) -> le X---v X-0-v) (λ (n-v : nat) -> λ (auto-v : le (S O) a-v) -> λ (auto'-v : le (times a-v O) (times a-v n-v)) -> le-O-n n-v) (λ (n-v : nat) -> λ (H1-v : le (S O) a-v) -> λ (H2-v : le (times a-v (S n-v)) (times a-v O)) -> transitive-le (S n-v) (times a-v (S n-v)) O (matita-basics-logic.eq-coerc lzero (le (times (S n-v) (S O)) (times (S n-v) a-v)) (le (S n-v) (times a-v (S n-v))) (monotonic-le-times-r (S n-v) (S O) a-v H1-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus a-v (times a-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times (S n-v) (S O)) (times (S n-v) a-v)) (le (S n-v) X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times a-v (S n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times (S n-v) (S O)) X---v) (le (S n-v) (plus a-v (times a-v n-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (times a-v (S n-v))) (le (S n-v) (plus a-v (times a-v n-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus a-v (times a-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S n-v) X---v) (le (S n-v) (plus a-v (times a-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S n-v) (plus a-v (times a-v n-v)))) (times a-v (S n-v)) (times-n-Sm a-v n-v)) (times (S n-v) (S O)) (times-n-1 (S n-v))) (times (S n-v) a-v) (commutative-times (S n-v) a-v)) (times a-v (S n-v)) (times-n-Sm a-v n-v))) (matita-basics-logic.eq-coerc lzero (le (times a-v (S n-v)) (times a-v O)) (le (times a-v (S n-v)) O) H2-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus a-v (times a-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (times a-v O)) (le (times a-v (S n-v)) O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat O (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus a-v (times a-v n-v)) X---v) (le (times a-v (S n-v)) O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus a-v (times a-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus a-v (times a-v n-v)) O) (le X---v O)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus a-v (times a-v n-v)) O)) (times a-v (S n-v)) (times-n-Sm a-v n-v)) (times a-v O) (times-n-O a-v)) (times a-v (S n-v)) (times-n-Sm a-v n-v)))) (λ (n-v : nat) -> λ (m-v : nat) -> λ (H-v : (X---v : le (S O) a-v) -> (X--1-v : le (times a-v n-v) (times a-v m-v)) -> le n-v m-v) -> λ (lta-v : le (S O) a-v) -> λ (le-v : le (times a-v (S n-v)) (times a-v (S m-v))) -> le-S-S n-v m-v (H-v lta-v (le-plus-to-le a-v (times a-v n-v) (times a-v m-v) (matita-basics-logic.eq-coerc lzero (le (times a-v (S n-v)) (times a-v (S m-v))) (le (plus a-v (times a-v n-v)) (plus a-v (times a-v m-v))) le-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus a-v (times a-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (times a-v (S m-v))) (le (plus a-v (times a-v n-v)) (plus a-v (times a-v m-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus a-v (times a-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus a-v (times a-v n-v)) X---v) (le (plus a-v (times a-v n-v)) (plus a-v (times a-v m-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus a-v (times a-v n-v)) (plus a-v (times a-v m-v)))) (times a-v (S m-v)) (times-n-Sm a-v m-v)) (times a-v (S n-v)) (times-n-Sm a-v n-v))))))

le-plus-minus-m-m : (n-v : nat) -> (m-v : nat) -> le n-v (plus (minus n-v m-v) m-v)
le-plus-minus-m-m = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> (m-v : nat) -> le X-x-365-v (plus (minus X-x-365-v m-v) m-v)) (λ (m-v : nat) -> le-plus-n-r m-v O) (λ (a-v : nat) -> λ (Hind-v : (m-v : nat) -> le a-v (plus (minus a-v m-v) m-v)) -> λ (m-v : nat) -> match-nat lzero (λ (X---v : nat) -> le (S a-v) (plus (minus (S a-v) X---v) X---v)) (le-plus-n-r O (S a-v)) (λ (n0-v : nat) -> matita-basics-logic.eq-coerc lzero (le (S a-v) (S (plus (minus a-v n0-v) n0-v))) (le (S a-v) (plus (minus a-v n0-v) (S n0-v))) (le-S-S a-v (plus (minus a-v n0-v) n0-v) (Hind-v n0-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus (minus a-v n0-v) (S n0-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S a-v) X---v) (le (S a-v) (plus (minus a-v n0-v) (S n0-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S a-v) (plus (minus a-v n0-v) (S n0-v)))) (S (plus (minus a-v n0-v) n0-v)) (plus-n-Sm (minus a-v n0-v) n0-v))) m-v) n-v

le-plus-to-minus-r : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> (X---v : le (plus a-v b-v) c-v) -> le a-v (minus c-v b-v)
le-plus-to-minus-r = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (H-v : le (plus a-v b-v) c-v) -> le-plus-to-le-r b-v a-v (minus c-v b-v) (transitive-le (plus a-v b-v) c-v (plus (minus c-v b-v) b-v) H-v (le-plus-minus-m-m c-v b-v))

lt-to-le : (x-v : nat) -> (y-v : nat) -> (X---v : lt x-v y-v) -> le x-v y-v
lt-to-le = λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : lt x-v y-v) -> le-plus-b (S O) x-v y-v (matita-basics-logic.eq-coerc lzero (le (S x-v) y-v) (le (plus x-v (S O)) y-v) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v (S O)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v y-v) (le (plus x-v (S O)) y-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus x-v (S O)) y-v)) (S x-v) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-v O) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (plus x-v (S O))) (plus-n-Sm x-v O) x-v (plus-n-O x-v))))

inv-eq-minus-O : (x-v : nat) -> (y-v : nat) -> (X---v : matita-basics-logic.eq lzero nat (minus x-v y-v) O) -> le x-v y-v
inv-eq-minus-O = λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat (minus x-v y-v) O) -> matita-basics-logic.eq-coerc lzero (le x-v (plus (minus x-v y-v) y-v)) (le x-v y-v) (le-plus-minus-m-m x-v y-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus y-v (minus x-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le x-v X---v) (le x-v y-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat O (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le x-v (plus y-v X---v)) (le x-v y-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat y-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le x-v X---v) (le x-v y-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le x-v y-v)) (plus y-v O) (plus-n-O y-v)) (minus x-v y-v) auto-v) (plus (minus x-v y-v) y-v) (commutative-plus (minus x-v y-v) y-v))

le-x-times-x : (x-v : nat) -> le x-v (times x-v x-v)
le-x-times-x = λ (x-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> le X-x-365-v (times X-x-365-v X-x-365-v)) (le-O-n (times O O)) (λ (x-366-v : nat) -> λ (X-x-368-v : le x-366-v (times x-366-v x-366-v)) -> le-plus-n-r (times x-366-v (S x-366-v)) (S x-366-v)) x-v

transitive-lt : matita-basics-relations.transitive lzero lzero nat lt
transitive-lt = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (ltab-v : lt a-v b-v) -> λ (ltbc-v : lt b-v c-v) -> le-ind lzero (S b-v) (λ (x-417-v : nat) -> λ (X-x-418-v : le (S b-v) x-417-v) -> lt a-v x-417-v) (le-S (S a-v) b-v ltab-v) (λ (m-v : nat) -> λ (X-x-419-v : le (S b-v) m-v) -> λ (X-x-421-v : lt a-v m-v) -> le-S (S a-v) m-v X-x-421-v) c-v ltbc-v

lt-to-le-to-lt : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : lt n-v m-v) -> (X--1-v : le m-v p-v) -> lt n-v p-v
lt-to-le-to-lt = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (H-v : lt n-v m-v) -> λ (H1-v : le m-v p-v) -> le-ind lzero m-v (λ (x-417-v : nat) -> λ (X-x-418-v : le m-v x-417-v) -> lt n-v x-417-v) H-v (λ (m0-v : nat) -> λ (X-x-419-v : le m-v m0-v) -> λ (X-x-421-v : lt n-v m0-v) -> transitive-lt n-v m0-v (S m0-v) X-x-421-v (matita-basics-logic.eq-coerc lzero (le (S m0-v) (plus O (S m0-v))) (le (S m0-v) (S m0-v)) (le-plus-n O (S m0-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S m0-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S m0-v) X---v) (le (S m0-v) (S m0-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S m0-v) (S m0-v))) (plus O (S m0-v)) (plus-O-n (S m0-v))))) p-v H1-v

le-to-lt-to-lt : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : le n-v m-v) -> (X--1-v : lt m-v p-v) -> lt n-v p-v
le-to-lt-to-lt = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (H-v : le n-v m-v) -> le-ind lzero n-v (λ (x-417-v : nat) -> λ (X-x-418-v : le n-v x-417-v) -> (X---v : lt x-417-v p-v) -> lt n-v p-v) (λ (auto-v : lt n-v p-v) -> auto-v) (λ (m0-v : nat) -> λ (X-x-419-v : le n-v m0-v) -> λ (X-x-421-v : (X---v : lt m0-v p-v) -> lt n-v p-v) -> λ (auto-v : lt (S m0-v) p-v) -> X-x-421-v (transitive-lt m0-v (S m0-v) p-v (matita-basics-logic.eq-coerc lzero (le (S m0-v) (plus O (S m0-v))) (le (S m0-v) (S m0-v)) (le-plus-n O (S m0-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S m0-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S m0-v) X---v) (le (S m0-v) (S m0-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S m0-v) (S m0-v))) (plus O (S m0-v)) (plus-O-n (S m0-v)))) auto-v)) m-v H-v

lt-S-to-lt : (n-v : nat) -> (m-v : nat) -> (X---v : lt (S n-v) m-v) -> lt n-v m-v
lt-S-to-lt = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : lt (S n-v) m-v) -> transitive-lt n-v (S n-v) m-v (matita-basics-logic.eq-coerc lzero (le (S n-v) (plus O (S n-v))) (le (S n-v) (S n-v)) (le-plus-n O (S n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S n-v) X---v) (le (S n-v) (S n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S n-v) (S n-v))) (plus O (S n-v)) (plus-O-n (S n-v)))) auto-v

ltn-to-ltO : (n-v : nat) -> (m-v : nat) -> (X---v : lt n-v m-v) -> lt O m-v
ltn-to-ltO = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : lt n-v m-v) -> lt-to-le-to-lt O (S n-v) m-v (matita-basics-logic.eq-coerc lzero (le (S O) (plus n-v (S O))) (le (S O) (S n-v)) (le-plus-n n-v (S O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S O) X---v) (le (S O) (S n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S O) (S n-v))) (plus n-v (S O)) (matita-basics-logic.rewrite-r lzero lzero nat (plus n-v O) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (plus n-v (S O))) (plus-n-Sm n-v O) n-v (plus-n-O n-v)))) auto-v

lt-O-S : (n-v : nat) -> lt O (S n-v)
lt-O-S = λ (n-v : nat) -> ltn-to-ltO n-v (S n-v) (matita-basics-logic.eq-coerc lzero (le (S n-v) (plus O (S n-v))) (le (S n-v) (S n-v)) (le-plus-n O (S n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S n-v) X---v) (le (S n-v) (S n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S n-v) (S n-v))) (plus O (S n-v)) (plus-O-n (S n-v))))

monotonic-lt-plus-r : (n-v : nat) -> matita-basics-relations.monotonic lzero lzero nat lt (λ (m-v : nat) -> plus n-v m-v)
monotonic-lt-plus-r = λ (n-v : nat) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : lt x-v y-v) -> matita-basics-logic.eq-coerc lzero (le (plus n-v (S x-v)) (plus n-v y-v)) (le (S (plus n-v x-v)) (plus n-v y-v)) (monotonic-le-plus-r n-v (S x-v) y-v auto-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v (S x-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus n-v (S x-v)) (plus n-v y-v)) (le X---v (plus n-v y-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus n-v (S x-v)) (plus n-v y-v))) (S (plus n-v x-v)) (plus-n-Sm n-v x-v))

monotonic-lt-plus-l : (n-v : nat) -> matita-basics-relations.monotonic lzero lzero nat lt (λ (m-v : nat) -> plus m-v n-v)
monotonic-lt-plus-l = λ (n-v : nat) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (auto-v : lt x-v y-v) -> matita-basics-logic.eq-coerc lzero (le (plus n-v (S x-v)) (plus n-v y-v)) (le (S (plus x-v n-v)) (plus y-v n-v)) (monotonic-le-plus-r n-v (S x-v) y-v auto-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v x-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus n-v (S x-v)) (plus n-v y-v)) (le (S X---v) (plus y-v n-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v (S x-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus n-v (S x-v)) (plus n-v y-v)) (le X---v (plus y-v n-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus n-v (S x-v)) (plus n-v y-v)) (le (plus n-v (S x-v)) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus n-v (S x-v)) (plus n-v y-v))) (plus y-v n-v) (commutative-plus y-v n-v)) (S (plus n-v x-v)) (plus-n-Sm n-v x-v)) (plus x-v n-v) (commutative-plus x-v n-v))

lt-plus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt n-v m-v) -> (X--1-v : lt p-v q-v) -> lt (plus n-v p-v) (plus m-v q-v)
lt-plus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (ltnm-v : lt n-v m-v) -> λ (ltpq-v : lt p-v q-v) -> transitive-lt (plus n-v p-v) (plus n-v q-v) (plus m-v q-v) (matita-basics-logic.eq-coerc lzero (le (plus n-v (S p-v)) (plus n-v q-v)) (le (S (plus n-v p-v)) (plus n-v q-v)) (monotonic-le-plus-r n-v (S p-v) q-v ltpq-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v (S p-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus n-v (S p-v)) (plus n-v q-v)) (le X---v (plus n-v q-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus n-v (S p-v)) (plus n-v q-v))) (S (plus n-v p-v)) (plus-n-Sm n-v p-v))) (monotonic-lt-plus-l q-v n-v m-v ltnm-v)

lt-plus-to-lt-l : (n-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt (plus p-v n-v) (plus q-v n-v)) -> lt p-v q-v
lt-plus-to-lt-l = λ (n-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (auto-v : lt (plus p-v n-v) (plus q-v n-v)) -> le-plus-to-le n-v (S p-v) q-v (matita-basics-logic.eq-coerc lzero (le (S (plus p-v n-v)) (plus q-v n-v)) (le (plus n-v (S p-v)) (plus n-v q-v)) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v p-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S X---v) (plus q-v n-v)) (le (plus n-v (S p-v)) (plus n-v q-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v (S p-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (plus q-v n-v)) (le (plus n-v (S p-v)) (plus n-v q-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v q-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus n-v (S p-v)) X---v) (le (plus n-v (S p-v)) (plus n-v q-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus n-v (S p-v)) (plus n-v q-v))) (plus q-v n-v) (commutative-plus q-v n-v)) (S (plus n-v p-v)) (plus-n-Sm n-v p-v)) (plus p-v n-v) (commutative-plus p-v n-v)))

lt-plus-to-lt-r : (n-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt (plus n-v p-v) (plus n-v q-v)) -> lt p-v q-v
lt-plus-to-lt-r = λ (n-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (auto-v : lt (plus n-v p-v) (plus n-v q-v)) -> lt-plus-to-lt-l n-v p-v q-v (matita-basics-logic.eq-coerc lzero (lt (plus n-v p-v) (plus n-v q-v)) (lt (plus p-v n-v) (plus q-v n-v)) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus p-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt X---v (plus n-v q-v)) (lt (plus p-v n-v) (plus q-v n-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus q-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt (plus p-v n-v) X---v) (lt (plus p-v n-v) (plus q-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (lt (plus p-v n-v) (plus q-v n-v))) (plus n-v q-v) (commutative-plus n-v q-v)) (plus n-v p-v) (commutative-plus n-v p-v)))

increasing-to-monotonic : (f-v : (X---v : nat) -> nat) -> (X---v : increasing f-v) -> matita-basics-relations.monotonic lzero lzero nat lt f-v
increasing-to-monotonic = λ (f-v : (X---v : nat) -> nat) -> λ (incr-v : increasing f-v) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (ltnm-v : lt n-v m-v) -> le-ind lzero (S n-v) (λ (x-417-v : nat) -> λ (X-x-418-v : le (S n-v) x-417-v) -> lt (f-v n-v) (f-v x-417-v)) (incr-v n-v) (λ (m0-v : nat) -> λ (X-x-419-v : le (S n-v) m0-v) -> λ (X-x-421-v : lt (f-v n-v) (f-v m0-v)) -> transitive-lt (f-v n-v) (f-v m0-v) (f-v (S m0-v)) X-x-421-v (incr-v m0-v)) m-v ltnm-v

monotonic-lt-times-r : (c-v : nat) -> (X---v : lt O c-v) -> matita-basics-relations.monotonic lzero lzero nat lt (λ (t-v : nat) -> times c-v t-v)
monotonic-lt-times-r = λ (c-v : nat) -> λ (posc-v : lt O c-v) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (ltnm-v : lt n-v m-v) -> le-ind lzero (S n-v) (λ (x-417-v : nat) -> λ (X-x-418-v : le (S n-v) x-417-v) -> lt (times c-v n-v) (times c-v x-417-v)) (matita-basics-logic.eq-coerc lzero (le (S (plus O (times c-v n-v))) (plus c-v (times c-v n-v))) (le (S (times c-v n-v)) (times c-v (S n-v))) (monotonic-lt-plus-l (times c-v n-v) O c-v posc-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus O (S (times c-v n-v))) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (plus c-v (times c-v n-v))) (le (S (times c-v n-v)) (times c-v (S n-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus c-v (times c-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (plus O (S (times c-v n-v))) (plus c-v (times c-v n-v))) (le (S (times c-v n-v)) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S (times c-v n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (plus c-v (times c-v n-v))) (le (S (times c-v n-v)) (plus c-v (times c-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S (times c-v n-v)) (plus c-v (times c-v n-v)))) (plus O (S (times c-v n-v))) (plus-O-n (S (times c-v n-v)))) (times c-v (S n-v)) (times-n-Sm c-v n-v)) (S (plus O (times c-v n-v))) (plus-n-Sm O (times c-v n-v)))) (λ (a-v : nat) -> λ (X---v : le (S n-v) a-v) -> λ (lt1-v : le (S (times c-v n-v)) (times c-v a-v)) -> transitive-le (S (times c-v n-v)) (times c-v a-v) (times c-v (S a-v)) lt1-v (matita-basics-logic.eq-coerc lzero (le (times c-v a-v) (plus (times c-v a-v) c-v)) (le (times c-v a-v) (times c-v (S a-v))) (le-plus-n-r c-v (times c-v a-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (plus c-v (times c-v a-v)) (λ (X--1-v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times c-v a-v) (plus (times c-v a-v) c-v)) (le (times c-v a-v) X--1-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus c-v (times c-v a-v)) (λ (X--1-v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times c-v a-v) X--1-v) (le (times c-v a-v) (plus c-v (times c-v a-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (times c-v a-v) (plus c-v (times c-v a-v)))) (plus (times c-v a-v) c-v) (commutative-plus (times c-v a-v) c-v)) (times c-v (S a-v)) (times-n-Sm c-v a-v)))) m-v ltnm-v

monotonic-lt-times-l : (c-v : nat) -> (X---v : lt O c-v) -> matita-basics-relations.monotonic lzero lzero nat lt (λ (t-v : nat) -> times t-v c-v)
monotonic-lt-times-l = λ (c-v : nat) -> λ (auto-v : lt O c-v) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (auto'-v : lt x-v y-v) -> matita-basics-logic.eq-coerc lzero (le (S (times c-v x-v)) (times c-v y-v)) (le (S (times x-v c-v)) (times y-v c-v)) (monotonic-lt-times-r c-v auto-v x-v y-v auto'-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times c-v x-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S (times c-v x-v)) (times c-v y-v)) (le (S X---v) (times y-v c-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times c-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S (times c-v x-v)) (times c-v y-v)) (le (S (times c-v x-v)) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S (times c-v x-v)) (times c-v y-v))) (times y-v c-v) (commutative-times y-v c-v)) (times x-v c-v) (commutative-times x-v c-v))

lt-to-le-to-lt-times : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt n-v m-v) -> (X--1-v : le p-v q-v) -> (X--2-v : lt O q-v) -> lt (times n-v p-v) (times m-v q-v)
lt-to-le-to-lt-times = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (ltnm-v : lt n-v m-v) -> λ (lepq-v : le p-v q-v) -> λ (posq-v : lt O q-v) -> le-to-lt-to-lt (times n-v p-v) (times n-v q-v) (times m-v q-v) (monotonic-le-times-r n-v p-v q-v lepq-v) (monotonic-lt-times-l q-v posq-v n-v m-v ltnm-v)

lt-times : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt n-v m-v) -> (X--1-v : lt p-v q-v) -> lt (times n-v p-v) (times m-v q-v)
lt-times = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (ltnm-v : lt n-v m-v) -> λ (ltpq-v : lt p-v q-v) -> lt-to-le-to-lt-times n-v m-v p-v q-v ltnm-v (lt-to-le p-v q-v ltpq-v) (ltn-to-ltO p-v q-v ltpq-v)

lt-plus-to-minus-r : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> (X---v : lt (plus a-v b-v) c-v) -> lt a-v (minus c-v b-v)
lt-plus-to-minus-r = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (H-v : lt (plus a-v b-v) c-v) -> le-plus-to-minus-r (S a-v) b-v c-v H-v

lt-plus-Sn-r : (a-v : nat) -> (x-v : nat) -> (n-v : nat) -> lt a-v (plus (plus a-v x-v) (S n-v))
lt-plus-Sn-r = λ (a-v : nat) -> λ (x-v : nat) -> λ (n-v : nat) -> matita-basics-logic.eq-coerc lzero (le (S a-v) (S (plus (plus a-v x-v) n-v))) (le (S a-v) (plus (plus a-v x-v) (S n-v))) (le-S-S a-v (plus (plus a-v x-v) n-v) (matita-basics-logic.eq-coerc lzero (le a-v (plus a-v (plus x-v n-v))) (le a-v (plus (plus a-v x-v) n-v)) (le-plus-n-r (plus x-v n-v) a-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v (plus a-v x-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le a-v (plus a-v (plus x-v n-v))) (le a-v X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus a-v (plus n-v x-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le a-v (plus a-v (plus x-v n-v))) (le a-v X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le a-v (plus a-v (plus x-v n-v))) (le a-v (plus a-v X---v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le a-v (plus a-v (plus x-v n-v)))) (plus n-v x-v) (commutative-plus n-v x-v)) (plus n-v (plus a-v x-v)) (matita-basics-logic.rewrite-l lzero lzero nat (plus (plus a-v n-v) x-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus n-v (plus a-v x-v)) X---v) (assoc-plus1 x-v a-v n-v) (plus a-v (plus n-v x-v)) (associative-plus a-v n-v x-v))) (plus (plus a-v x-v) n-v) (commutative-plus (plus a-v x-v) n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus a-v (plus x-v (S n-v))) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S a-v) (S (plus (plus a-v x-v) n-v))) (le (S a-v) X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus (plus a-v x-v) (S n-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S a-v) X---v) (le (S a-v) (plus a-v (plus x-v (S n-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus a-v (plus x-v (S n-v))) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S a-v) X---v) (le (S a-v) (plus a-v (plus x-v (S n-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S a-v) (plus a-v (plus x-v (S n-v))))) (plus (plus a-v x-v) (S n-v)) (associative-plus a-v x-v (S n-v))) (S (plus (plus a-v x-v) n-v)) (plus-n-Sm (plus a-v x-v) n-v)) (plus (plus a-v x-v) (S n-v)) (associative-plus a-v x-v (S n-v)))

let-clause-16 : (n-v : nat) -> (m-v : nat) -> (auto-v : lt (S n-v) (S m-v)) -> (x32-v : nat) -> matita-basics-logic.eq lzero nat (S x32-v) (plus x32-v (S O))
let-clause-16 = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : lt (S n-v) (S m-v)) -> λ (x32-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (plus x32-v O) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (plus x32-v (S O))) (plus-n-Sm x32-v O) x32-v (plus-n-O x32-v)

lt-S-S-to-lt : (n-v : nat) -> (m-v : nat) -> (X---v : lt (S n-v) (S m-v)) -> lt n-v m-v
lt-S-S-to-lt = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : lt (S n-v) (S m-v)) -> lt-plus-to-lt-l (S O) n-v m-v (matita-basics-logic.eq-coerc lzero (lt (S n-v) (S m-v)) (lt (plus n-v (S O)) (plus m-v (S O))) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v (S O)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt X---v (S m-v)) (lt (plus n-v (S O)) (plus m-v (S O)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v (S O)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt (plus n-v (S O)) X---v) (lt (plus n-v (S O)) (plus m-v (S O)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (lt (plus n-v (S O)) (plus m-v (S O)))) (S m-v) (let-clause-16 n-v m-v auto-v m-v)) (S n-v) (let-clause-16 n-v m-v auto-v n-v)))

not-le-Sn-O : (n-v : nat) -> matita-basics-logic.Not lzero (le (S n-v) O)
not-le-Sn-O = λ (n-v : nat) -> matita-basics-logic.nmk lzero (le (S n-v) O) (λ (Hlen0-v : le (S n-v) O) -> lt-to-not-zero lzero n-v O Hlen0-v)

not-le-to-not-le-S-S : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.Not lzero (le (S n-v) (S m-v))
not-le-to-not-le-S-S = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.not-to-not lzero (le (S n-v) (S m-v)) (le n-v m-v) (λ (auto'-v : le (S n-v) (S m-v)) -> matita-basics-logic.eq-coerc lzero (le (pred (S n-v)) (pred (S m-v))) (le n-v m-v) (monotonic-pred (S n-v) (S m-v) auto'-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S m-v))) (le n-v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v X---v) (le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v m-v)) (pred (S m-v)) (pred-Sn m-v)) (pred (S n-v)) (pred-Sn n-v))) auto-v

not-le-S-S-to-not-le : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (le (S n-v) (S m-v))) -> matita-basics-logic.Not lzero (le n-v m-v)
not-le-S-S-to-not-le = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : matita-basics-logic.Not lzero (le (S n-v) (S m-v))) -> matita-basics-logic.not-to-not lzero (le n-v m-v) (le (S n-v) (S m-v)) (λ (auto'-v : le n-v m-v) -> le-S-S n-v m-v auto'-v) auto-v

not-le-Sn-n : (n-v : nat) -> matita-basics-logic.Not lzero (le (S n-v) n-v)
not-le-Sn-n = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.Not lzero (le (S X-x-365-v) X-x-365-v)) (not-le-Sn-O O) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.Not lzero (le (S x-366-v) x-366-v)) -> not-le-to-not-le-S-S (S x-366-v) x-366-v X-x-368-v) n-v

lt-to-not-le : (n-v : nat) -> (m-v : nat) -> (X---v : lt n-v m-v) -> matita-basics-logic.Not lzero (le m-v n-v)
lt-to-not-le = λ (n-v : nat) -> λ (m-v : nat) -> λ (Hltnm-v : lt n-v m-v) -> le-ind lzero (S n-v) (λ (x-417-v : nat) -> λ (X-x-418-v : le (S n-v) x-417-v) -> matita-basics-logic.Not lzero (le x-417-v n-v)) (not-le-Sn-n n-v) (λ (m0-v : nat) -> λ (X-x-419-v : le (S n-v) m0-v) -> λ (X-x-421-v : matita-basics-logic.Not lzero (le m0-v n-v)) -> matita-basics-logic.not-to-not lzero (le (S m0-v) n-v) (le m0-v n-v) (λ (auto-v : le (S m0-v) n-v) -> lt-to-le m0-v n-v auto-v) X-x-421-v) m-v Hltnm-v

not-le-to-lt : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (le n-v m-v)) -> lt m-v n-v
not-le-to-lt = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> (X--1-v : matita-basics-logic.Not lzero (le X---v X-0-v)) -> lt X-0-v X---v) (λ (n-v : nat) -> λ (abs-v : matita-basics-logic.Not lzero (le O n-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> lt n-v O) (matita-basics-logic.absurd lzero (le O n-v) (matita-basics-logic.eq-coerc lzero (le O (plus n-v O)) (le O n-v) (le-plus-n n-v O) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le O X---v) (le O n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le O n-v)) (plus n-v O) (plus-n-O n-v))) abs-v)) (λ (n-v : nat) -> λ (auto-v : matita-basics-logic.Not lzero (le (S n-v) O)) -> lt-O-S n-v) (λ (n-v : nat) -> λ (m-v : nat) -> λ (Hind-v : (X---v : matita-basics-logic.Not lzero (le n-v m-v)) -> lt m-v n-v) -> λ (HnotleSS-v : matita-basics-logic.Not lzero (le (S n-v) (S m-v))) -> le-S-S (S m-v) n-v (Hind-v (not-le-S-S-to-not-le n-v m-v HnotleSS-v)))

not-lt-to-le : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (lt n-v m-v)) -> le m-v n-v
not-lt-to-le = λ (n-v : nat) -> λ (m-v : nat) -> λ (H-v : matita-basics-logic.Not lzero (lt n-v m-v)) -> le-S-S-to-le m-v n-v (not-le-to-lt (S n-v) m-v (matita-basics-logic.not-to-not lzero (le (S n-v) m-v) (lt n-v m-v) (λ (auto-v : le (S n-v) m-v) -> auto-v) H-v))

le-to-not-lt : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> matita-basics-logic.Not lzero (lt m-v n-v)
le-to-not-lt = λ (n-v : nat) -> λ (m-v : nat) -> λ (H-v : le n-v m-v) -> lt-to-not-le n-v (S m-v) (le-to-lt-to-lt n-v m-v (S m-v) H-v (matita-basics-logic.eq-coerc lzero (le (S m-v) (plus O (S m-v))) (le (S m-v) (S m-v)) (le-plus-n O (S m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S m-v) X---v) (le (S m-v) (S m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S m-v) (S m-v))) (plus O (S m-v)) (plus-O-n (S m-v)))))

decidable-eq-nat : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero nat n-v m-v)
decidable-eq-nat = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero nat X---v X-0-v)) (λ (n-v : nat) -> match-nat lzero (λ (X---v : nat) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero nat O X---v)) (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero nat O O) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat O O)) (matita-basics-logic.refl lzero nat O)) (λ (auto-v : nat) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero nat O (S auto-v)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat O (S auto-v))) (not-eq-O-S auto-v)) n-v) (λ (n-v : nat) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero nat (S n-v) O) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat (S n-v) O)) (matita-basics-logic.sym-not-eq lzero nat O (S n-v) (not-eq-O-S n-v))) (λ (n-v : nat) -> λ (m-v : nat) -> λ (Hind-v : matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v))) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v))) (λ (auto-v : matita-basics-logic.eq lzero nat n-v m-v) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v))) (matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S n-v) (S X---v)) (matita-basics-logic.refl lzero nat (S n-v)) m-v auto-v)) (λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v))) (not-eq-S n-v m-v auto-v)) Hind-v)

decidable-le : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.decidable lzero (le n-v m-v)
decidable-le = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> matita-basics-logic.decidable lzero (le X---v X-0-v)) (λ (n-v : nat) -> matita-basics-logic.or-introl lzero lzero (le O n-v) (matita-basics-logic.Not lzero (le O n-v)) (le-O-n n-v)) (λ (n-v : nat) -> matita-basics-logic.or-intror lzero lzero (le (S n-v) O) (matita-basics-logic.Not lzero (le (S n-v) O)) (not-le-Sn-O n-v)) (λ (n-v : nat) -> λ (m-v : nat) -> λ (X-clearme-v : matita-basics-logic.decidable lzero (le n-v m-v)) -> matita-basics-logic.match-Or lzero lzero (le n-v m-v) (matita-basics-logic.Not lzero (le n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (le n-v m-v) (matita-basics-logic.Not lzero (le n-v m-v))) -> matita-basics-logic.decidable lzero (le (S n-v) (S m-v))) (λ (auto-v : le n-v m-v) -> matita-basics-logic.or-introl lzero lzero (le (S n-v) (S m-v)) (matita-basics-logic.Not lzero (le (S n-v) (S m-v))) (le-S-S n-v m-v auto-v)) (λ (auto-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.or-intror lzero lzero (le (S n-v) (S m-v)) (matita-basics-logic.Not lzero (le (S n-v) (S m-v))) (not-le-to-not-le-S-S n-v m-v auto-v)) X-clearme-v)

decidable-lt : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.decidable lzero (lt n-v m-v)
decidable-lt = λ (n-v : nat) -> λ (m-v : nat) -> decidable-le (S n-v) m-v

le-to-or-lt-eq : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> matita-basics-logic.Or lzero lzero (lt n-v m-v) (matita-basics-logic.eq lzero nat n-v m-v)
le-to-or-lt-eq = λ (n-v : nat) -> λ (m-v : nat) -> λ (lenm-v : le n-v m-v) -> le-ind lzero n-v (λ (x-417-v : nat) -> λ (X-x-418-v : le n-v x-417-v) -> matita-basics-logic.Or lzero lzero (lt n-v x-417-v) (matita-basics-logic.eq lzero nat n-v x-417-v)) (matita-basics-relations.RC-reflexive lzero lzero nat lt n-v) (λ (m0-v : nat) -> λ (X-x-419-v : le n-v m0-v) -> λ (X-x-421-v : matita-basics-logic.Or lzero lzero (lt n-v m0-v) (matita-basics-logic.eq lzero nat n-v m0-v)) -> matita-basics-logic.or-introl lzero lzero (lt n-v (S m0-v)) (matita-basics-logic.eq lzero nat n-v (S m0-v)) (le-to-lt-to-lt n-v m0-v (S m0-v) X-x-419-v (matita-basics-logic.eq-coerc lzero (le (S m0-v) (plus O (S m0-v))) (le (S m0-v) (S m0-v)) (le-plus-n O (S m0-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S m0-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S m0-v) X---v) (le (S m0-v) (S m0-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S m0-v) (S m0-v))) (plus O (S m0-v)) (plus-O-n (S m0-v)))))) m-v lenm-v

eq-or-gt : (n-v : nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat O n-v) (lt O n-v)
eq-or-gt = λ (n-v : nat) -> matita-basics-logic.Or-ind lzero lzero lzero (lt O n-v) (matita-basics-logic.eq lzero nat O n-v) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (lt O n-v) (matita-basics-logic.eq lzero nat O n-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat O n-v) (lt O n-v)) (λ (X-x-171-v : lt O n-v) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero nat O n-v) (lt O n-v) X-x-171-v) (λ (X-x-172-v : matita-basics-logic.eq lzero nat O n-v) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero nat O n-v) (lt O n-v) (matita-basics-logic.rewrite-r lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v n-v) (matita-basics-logic.refl lzero nat n-v) O X-x-172-v)) (le-to-or-lt-eq O n-v (le-O-n n-v))

increasing-to-le2 : (f-v : (X---v : nat) -> nat) -> (X---v : increasing f-v) -> (m-v : nat) -> (X--1-v : le (f-v O) m-v) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) m-v) (lt m-v (f-v (S i-v))))
increasing-to-le2 = λ (f-v : (X---v : nat) -> nat) -> λ (incr-v : increasing f-v) -> λ (m-v : nat) -> λ (lem-v : le (f-v O) m-v) -> le-ind lzero (f-v O) (λ (x-417-v : nat) -> λ (X-x-418-v : le (f-v O) x-417-v) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) x-417-v) (lt x-417-v (f-v (S i-v))))) (matita-basics-logic.ex-intro lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) (f-v O)) (lt (f-v O) (f-v (S i-v)))) O (matita-basics-logic.conj lzero lzero (le (f-v O) (f-v O)) (lt (f-v O) (f-v (S O))) (le-n (f-v O)) (incr-v O))) (λ (n-v : nat) -> λ (len-v : le (f-v O) n-v) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) n-v) (lt n-v (f-v (S i-v))))) -> matita-basics-logic.match-ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) n-v) (lt n-v (f-v (S i-v)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) n-v) (lt n-v (f-v (S i-v))))) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) (S n-v)) (lt (S n-v) (f-v (S i-v))))) (λ (a-v : nat) -> λ (X-clearme0-v : matita-basics-logic.And lzero lzero (le (f-v a-v) n-v) (lt n-v (f-v (S a-v)))) -> matita-basics-logic.match-And lzero lzero (le (f-v a-v) n-v) (lt n-v (f-v (S a-v))) lzero (λ (X---v : matita-basics-logic.And lzero lzero (le (f-v a-v) n-v) (lt n-v (f-v (S a-v)))) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) (S n-v)) (lt (S n-v) (f-v (S i-v))))) (λ (len0-v : le (f-v a-v) n-v) -> λ (ltnr-v : lt n-v (f-v (S a-v))) -> matita-basics-logic.match-Or lzero lzero (lt (S n-v) (f-v (S a-v))) (matita-basics-logic.eq lzero nat (S n-v) (f-v (S a-v))) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (lt (S n-v) (f-v (S a-v))) (matita-basics-logic.eq lzero nat (S n-v) (f-v (S a-v)))) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) (S n-v)) (lt (S n-v) (f-v (S i-v))))) (λ (H-v : lt (S n-v) (f-v (S a-v))) -> matita-basics-logic.ex-intro lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) (S n-v)) (lt (S n-v) (f-v (S i-v)))) a-v (matita-basics-logic.conj lzero lzero (le (f-v a-v) (S n-v)) (lt (S n-v) (f-v (S a-v))) (le-S (f-v a-v) n-v len0-v) H-v)) (λ (H-v : matita-basics-logic.eq lzero nat (S n-v) (f-v (S a-v))) -> matita-basics-logic.ex-intro lzero lzero nat (λ (i-v : nat) -> matita-basics-logic.And lzero lzero (le (f-v i-v) (S n-v)) (lt (S n-v) (f-v (S i-v)))) (S a-v) (matita-basics-logic.conj lzero lzero (le (f-v (S a-v)) (S n-v)) (lt (S n-v) (f-v (S (S a-v)))) (matita-basics-logic.eq-coerc lzero (le (S n-v) (S n-v)) (le (f-v (S a-v)) (S n-v)) (le-n (S n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S n-v) (S n-v)) (le X---v (S n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S n-v) (S n-v))) (f-v (S a-v)) H-v)) (matita-basics-logic.eq-coerc lzero (lt (f-v (S a-v)) (f-v (S (S a-v)))) (lt (S n-v) (f-v (S (S a-v)))) (incr-v (S a-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt X---v (f-v (S (S a-v)))) (lt (S n-v) (f-v (S (S a-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (lt (S n-v) (f-v (S (S a-v))))) (f-v (S a-v)) H-v)))) (le-to-or-lt-eq (S n-v) (f-v (S a-v)) ltnr-v)) X-clearme0-v) X-clearme-v) m-v lem-v

le-inv-plus-l : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> (X---v : le (plus x-v y-v) z-v) -> matita-basics-logic.And lzero lzero (le x-v (minus z-v y-v)) (le y-v z-v)
le-inv-plus-l = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> λ (auto-v : le (plus x-v y-v) z-v) -> matita-basics-logic.conj lzero lzero (le x-v (minus z-v y-v)) (le y-v z-v) (le-plus-to-minus-r x-v y-v z-v auto-v) (le-plus-b x-v y-v z-v (matita-basics-logic.eq-coerc lzero (le (plus x-v y-v) z-v) (le (plus y-v x-v) z-v) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus y-v x-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v z-v) (le (plus y-v x-v) z-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (plus y-v x-v) z-v)) (plus x-v y-v) (commutative-plus x-v y-v))))

lt-inv-plus-l : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> (X---v : lt (plus x-v y-v) z-v) -> matita-basics-logic.And lzero lzero (lt x-v z-v) (lt y-v (minus z-v x-v))
lt-inv-plus-l = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> λ (auto-v : lt (plus x-v y-v) z-v) -> matita-basics-logic.conj lzero lzero (lt x-v z-v) (lt y-v (minus z-v x-v)) (lt-to-le-to-lt x-v (S (plus x-v y-v)) z-v (matita-basics-logic.eq-coerc lzero (lt x-v (plus (plus x-v O) (S y-v))) (lt x-v (S (plus x-v y-v))) (lt-plus-Sn-r x-v O y-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v (plus O (S y-v))) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt x-v X---v) (lt x-v (S (plus x-v y-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v (S y-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt x-v (plus x-v (plus O (S y-v)))) (lt x-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (S y-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt x-v (plus x-v X---v)) (lt x-v (plus x-v (S y-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (lt x-v (plus x-v (S y-v)))) (plus O (S y-v)) (plus-O-n (S y-v))) (S (plus x-v y-v)) (plus-n-Sm x-v y-v)) (plus (plus x-v O) (S y-v)) (associative-plus x-v O (S y-v)))) auto-v) (lt-plus-to-minus-r y-v x-v z-v (matita-basics-logic.eq-coerc lzero (lt (plus x-v y-v) z-v) (lt (plus y-v x-v) z-v) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt (plus x-v y-v) z-v) (lt X---v z-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (lt (plus x-v y-v) z-v)) (plus y-v x-v) (commutative-plus y-v x-v))))

lt-or-ge : (m-v : nat) -> (n-v : nat) -> matita-basics-logic.Or lzero lzero (lt m-v n-v) (le n-v m-v)
lt-or-ge = λ (m-v : nat) -> λ (n-v : nat) -> matita-basics-logic.Or-ind lzero lzero lzero (lt m-v n-v) (matita-basics-logic.Not lzero (lt m-v n-v)) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (lt m-v n-v) (matita-basics-logic.Not lzero (lt m-v n-v))) -> matita-basics-logic.Or lzero lzero (lt m-v n-v) (le n-v m-v)) (λ (X-x-171-v : lt m-v n-v) -> matita-basics-logic.or-introl lzero lzero (lt m-v n-v) (le n-v m-v) X-x-171-v) (λ (X-x-172-v : matita-basics-logic.Not lzero (lt m-v n-v)) -> matita-basics-logic.or-intror lzero lzero (lt m-v n-v) (le n-v m-v) (not-lt-to-le m-v n-v X-x-172-v)) (decidable-lt m-v n-v)

le-or-ge : (m-v : nat) -> (n-v : nat) -> matita-basics-logic.Or lzero lzero (le m-v n-v) (le n-v m-v)
le-or-ge = λ (m-v : nat) -> λ (n-v : nat) -> matita-basics-logic.Or-ind lzero lzero lzero (le m-v n-v) (matita-basics-logic.Not lzero (le m-v n-v)) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (le m-v n-v) (matita-basics-logic.Not lzero (le m-v n-v))) -> matita-basics-logic.Or lzero lzero (le m-v n-v) (le n-v m-v)) (λ (X-x-171-v : le m-v n-v) -> matita-basics-logic.or-introl lzero lzero (le m-v n-v) (le n-v m-v) X-x-171-v) (λ (X-x-172-v : matita-basics-logic.Not lzero (le m-v n-v)) -> matita-basics-logic.or-intror lzero lzero (le m-v n-v) (le n-v m-v) (lt-to-le n-v m-v (not-le-to-lt m-v n-v X-x-172-v))) (decidable-le m-v n-v)

le-inv-S1 : (x-v : nat) -> (y-v : nat) -> (X---v : le (S x-v) y-v) -> matita-basics-logic.ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat y-v (S z-v))
le-inv-S1 = λ (x-v : nat) -> λ (y-v : nat) -> λ (H-v : le (S x-v) y-v) -> le-ind lzero (S x-v) (λ (x-417-v : nat) -> λ (X-x-418-v : le (S x-v) x-417-v) -> matita-basics-logic.ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat x-417-v (S z-v))) (matita-basics-logic.ex2-intro lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat (S x-v) (S z-v)) x-v (matita-basics-logic.eq-coerc lzero (le x-v (plus O x-v)) (le x-v x-v) (le-plus-n O x-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat x-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le x-v X---v) (le x-v x-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le x-v x-v)) (plus O x-v) (plus-O-n x-v))) (matita-basics-logic.refl lzero nat (S x-v))) (λ (y0-v : nat) -> λ (X---v : le (S x-v) y0-v) -> λ (X-clearme-v : matita-basics-logic.ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat y0-v (S z-v))) -> matita-basics-logic.match-ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat y0-v (S z-v)) lzero (λ (X-0-v : matita-basics-logic.ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat y0-v (S z-v))) -> matita-basics-logic.ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat (S y0-v) (S z-v))) (λ (n-v : nat) -> λ (Hxn-v : le x-v n-v) -> λ (H0-v : matita-basics-logic.eq lzero nat y0-v (S n-v)) -> matita-basics-logic.eq-ind-r lzero lzero nat (S n-v) (λ (x0-v : nat) -> λ (X-0-v : matita-basics-logic.eq lzero nat x0-v (S n-v)) -> matita-basics-logic.ex2 lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat (S x0-v) (S z-v))) (matita-basics-logic.ex2-intro lzero lzero lzero nat (λ (z-v : nat) -> le x-v z-v) (λ (z-v : nat) -> matita-basics-logic.eq lzero nat (S (S n-v)) (S z-v)) (S n-v) (le-S x-v n-v Hxn-v) (matita-basics-logic.refl lzero nat (S (S n-v)))) y0-v H0-v) X-clearme-v) y-v H-v

nat-ind-plus : (l20-v : Level) -> (R-v : matita-basics-relations.predicate lzero l20-v nat) -> (X---v : R-v O) -> (X--1-v : (n-v : nat) -> (X--1-v : R-v n-v) -> R-v (plus n-v (S O))) -> (n-v : nat) -> R-v n-v
nat-ind-plus = λ (l20-v : Level) -> λ (R-v : matita-basics-relations.predicate lzero l20-v nat) -> λ (auto-v : R-v O) -> λ (auto'-v : (n-v : nat) -> (X---v : R-v n-v) -> R-v (plus n-v (S O))) -> λ (n-v : nat) -> nat-ind l20-v R-v auto-v (λ (x-366-v : nat) -> λ (X-x-368-v : R-v x-366-v) -> matita-basics-logic.eq-coerc l20-v (R-v (plus x-366-v (S O))) (R-v (S x-366-v)) (auto'-v x-366-v X-x-368-v) (matita-basics-logic.rewrite-l lzero ((lsuc lzero) ⊔ (lsuc l20-v)) nat (S x-366-v) (λ (X---v : nat) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l20-v)) (Set l20-v) (R-v X---v) (R-v (S x-366-v))) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l20-v)) (Set l20-v) (R-v (S x-366-v))) (plus x-366-v (S O)) (matita-basics-logic.rewrite-r lzero lzero nat (plus x-366-v O) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S X---v) (plus x-366-v (S O))) (plus-n-Sm x-366-v O) x-366-v (plus-n-O x-366-v)))) n-v

lt-O-n-elim : (l13-v : Level) -> (n-v : nat) -> (X---v : lt O n-v) -> (P-v : (X--1-v : nat) -> Set l13-v) -> (X--1-v : (m-v : nat) -> P-v (S m-v)) -> P-v n-v
lt-O-n-elim = λ (l13-v : Level) -> λ (n-v : nat) -> nat-ind ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X-x-365-v : nat) -> (X---v : lt O X-x-365-v) -> (P-v : (X--1-v : nat) -> Set l13-v) -> (X--1-v : (m-v : nat) -> P-v (S m-v)) -> P-v X-x-365-v) (λ (abs-v : lt O O) -> matita-basics-logic.False-ind lzero ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X-x-66-v : matita-basics-logic.False lzero) -> (P-v : (X---v : nat) -> Set l13-v) -> (X---v : (m-v : nat) -> P-v (S m-v)) -> P-v O) (matita-basics-logic.absurd lzero (le (S O) O) abs-v (not-le-Sn-O O))) (λ (x-366-v : nat) -> λ (X-x-368-v : (X---v : lt O x-366-v) -> (P-v : (X--1-v : nat) -> Set l13-v) -> (X--1-v : (m-v : nat) -> P-v (S m-v)) -> P-v x-366-v) -> λ (auto-v : lt O (S x-366-v)) -> λ (P-v : (X---v : nat) -> Set l13-v) -> λ (auto'-v : (m-v : nat) -> P-v (S m-v)) -> auto'-v x-366-v) n-v

le-n-O-elim : (l9-v : Level) -> (n-v : nat) -> (X---v : le n-v O) -> (P-v : (X--1-v : nat) -> Set l9-v) -> (X--1-v : P-v O) -> P-v n-v
le-n-O-elim = λ (l9-v : Level) -> λ (n-v : nat) -> match-nat ((lsuc lzero) ⊔ (lsuc l9-v)) (λ (X---v : nat) -> (X--1-v : le X---v O) -> (P-v : (X--2-v : nat) -> Set l9-v) -> (X--2-v : P-v O) -> P-v X---v) (λ (auto-v : le O O) -> λ (P-v : (X---v : nat) -> Set l9-v) -> λ (auto'-v : P-v O) -> auto'-v) (λ (a-v : nat) -> λ (abs-v : le (S a-v) O) -> matita-basics-logic.False-ind lzero ((lsuc lzero) ⊔ (lsuc l9-v)) (λ (X-x-66-v : matita-basics-logic.False lzero) -> (P-v : (X---v : nat) -> Set l9-v) -> (X---v : P-v O) -> P-v (S a-v)) (matita-basics-logic.absurd lzero (le (S a-v) O) abs-v (not-le-Sn-O a-v))) n-v

le-n-Sm-elim : (l39-v : Level) -> (n-v : nat) -> (m-v : nat) -> (X---v : le n-v (S m-v)) -> (P-v : Set l39-v) -> (X--1-v : (X--1-v : le (S n-v) (S m-v)) -> P-v) -> (X--2-v : (X--2-v : matita-basics-logic.eq lzero nat n-v (S m-v)) -> P-v) -> P-v
le-n-Sm-elim = λ (l39-v : Level) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (Hle-v : le n-v (S m-v)) -> λ (P-v : Set l39-v) -> le-ind l39-v n-v (λ (x-417-v : nat) -> λ (X-x-418-v : le n-v x-417-v) -> (X---v : (X---v : le (S n-v) x-417-v) -> P-v) -> (X--1-v : (X--1-v : matita-basics-logic.eq lzero nat n-v x-417-v) -> P-v) -> P-v) (λ (auto-v : (X---v : le (S n-v) n-v) -> P-v) -> λ (auto'-v : (X---v : matita-basics-logic.eq lzero nat n-v n-v) -> P-v) -> auto'-v (matita-basics-logic.refl lzero nat n-v)) (λ (m0-v : nat) -> λ (X-x-419-v : le n-v m0-v) -> λ (X-x-421-v : (X---v : (X---v : le (S n-v) m0-v) -> P-v) -> (X--1-v : (X--1-v : matita-basics-logic.eq lzero nat n-v m0-v) -> P-v) -> P-v) -> λ (auto-v : (X---v : le (S n-v) (S m0-v)) -> P-v) -> λ (auto'-v : (X---v : matita-basics-logic.eq lzero nat n-v (S m0-v)) -> P-v) -> auto-v (le-S-S n-v m0-v X-x-419-v)) (S m-v) Hle-v

nat-elim1 : (l31-v : Level) -> (n-v : nat) -> (P-v : (X---v : nat) -> Set l31-v) -> (X---v : (m-v : nat) -> (X---v : (p-v : nat) -> (X---v : lt p-v m-v) -> P-v p-v) -> P-v m-v) -> P-v n-v
nat-elim1 = λ (l31-v : Level) -> λ (n-v : nat) -> λ (P-v : (X---v : nat) -> Set l31-v) -> λ (H-v : (m-v : nat) -> (X---v : (p-v : nat) -> (X---v : lt p-v m-v) -> P-v p-v) -> P-v m-v) -> nat-ind l31-v (λ (X-x-365-v : nat) -> (q-v : nat) -> (X---v : le q-v X-x-365-v) -> P-v q-v) (λ (q-v : nat) -> λ (HleO-v : le q-v O) -> le-n-O-elim l31-v q-v HleO-v P-v (H-v O (λ (p-v : nat) -> λ (ltpO-v : lt p-v O) -> matita-basics-logic.False-ind lzero l31-v (λ (X-x-66-v : matita-basics-logic.False lzero) -> P-v p-v) (matita-basics-logic.absurd lzero (le (S p-v) O) ltpO-v (not-le-Sn-O p-v))))) (λ (p-v : nat) -> λ (Hind-v : (q-v : nat) -> (X---v : le q-v p-v) -> P-v q-v) -> λ (q-v : nat) -> λ (HleS-v : le q-v (S p-v)) -> H-v q-v (λ (a-v : nat) -> λ (lta-v : lt a-v q-v) -> Hind-v a-v (le-S-S-to-le a-v p-v (transitive-le (S a-v) q-v (S p-v) lta-v HleS-v)))) n-v n-v (le-n n-v)

f-ind-aux : (l42-v l37-v : Level) -> (A-v : Set l42-v) -> (f-v : (X---v : A-v) -> nat) -> (P-v : matita-basics-relations.predicate l42-v l37-v A-v) -> (X---v : (n-v : nat) -> (X---v : (a-v : A-v) -> (X---v : lt (f-v a-v) n-v) -> P-v a-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) n-v) -> P-v a-v) -> (n-v : nat) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) n-v) -> P-v a-v
f-ind-aux = λ (l42-v l37-v : Level) -> λ (A-v : Set l42-v) -> λ (f-v : (X---v : A-v) -> nat) -> λ (P-v : matita-basics-relations.predicate l42-v l37-v A-v) -> λ (H-v : (n-v : nat) -> (X---v : (a-v : A-v) -> (X---v : lt (f-v a-v) n-v) -> P-v a-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) n-v) -> P-v a-v) -> λ (n-v : nat) -> nat-elim1 (l42-v ⊔ l37-v) n-v (λ (X---v : nat) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) X---v) -> P-v a-v) (λ (n0-v : nat) -> λ (auto-v : (p-v : nat) -> (X---v : lt p-v n0-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) p-v) -> P-v a-v) -> λ (a-v : A-v) -> λ (auto'-v : matita-basics-logic.eq lzero nat (f-v a-v) n0-v) -> H-v n0-v (λ (a0-v : A-v) -> λ (auto''-v : lt (f-v a0-v) n0-v) -> auto-v (f-v a0-v) auto''-v a0-v (matita-basics-logic.refl lzero nat (f-v a0-v))) a-v (matita-basics-logic.rewrite-r lzero lzero nat n0-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v n0-v) (matita-basics-logic.refl lzero nat n0-v) (f-v a-v) auto'-v))

f-ind : (l17-v l12-v : Level) -> (A-v : Set l17-v) -> (f-v : (X---v : A-v) -> nat) -> (P-v : matita-basics-relations.predicate l17-v l12-v A-v) -> (X---v : (n-v : nat) -> (X---v : (a-v : A-v) -> (X---v : lt (f-v a-v) n-v) -> P-v a-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) n-v) -> P-v a-v) -> (a-v : A-v) -> P-v a-v
f-ind = λ (l17-v l12-v : Level) -> λ (A-v : Set l17-v) -> λ (f-v : (X---v : A-v) -> nat) -> λ (P-v : matita-basics-relations.predicate l17-v l12-v A-v) -> λ (H-v : (n-v : nat) -> (X---v : (a-v : A-v) -> (X---v : lt (f-v a-v) n-v) -> P-v a-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a-v) n-v) -> P-v a-v) -> λ (a-v : A-v) -> f-ind-aux l17-v l12-v A-v f-v P-v H-v (f-v a-v) a-v (matita-basics-logic.refl lzero nat (f-v a-v))

f2-ind-aux : (l53-v l52-v l46-v : Level) -> (A1-v : Set l53-v) -> (A2-v : Set l52-v) -> (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> nat) -> (P-v : matita-basics-relations.relation2 l53-v l52-v l46-v A1-v A2-v) -> (X---v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (X---v : lt (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> (n-v : nat) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v
f2-ind-aux = λ (l53-v l52-v l46-v : Level) -> λ (A1-v : Set l53-v) -> λ (A2-v : Set l52-v) -> λ (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> nat) -> λ (P-v : matita-basics-relations.relation2 l53-v l52-v l46-v A1-v A2-v) -> λ (H-v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (X---v : lt (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> λ (n-v : nat) -> nat-elim1 ((l53-v ⊔ l52-v) ⊔ l46-v) n-v (λ (X---v : nat) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) X---v) -> P-v a1-v a2-v) (λ (n0-v : nat) -> λ (auto-v : (p-v : nat) -> (X---v : lt p-v n0-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) p-v) -> P-v a1-v a2-v) -> λ (a1-v : A1-v) -> λ (a2-v : A2-v) -> λ (auto'-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) n0-v) -> H-v n0-v (λ (a10-v : A1-v) -> λ (a20-v : A2-v) -> λ (auto''-v : lt (f-v a10-v a20-v) n0-v) -> auto-v (f-v a10-v a20-v) auto''-v a10-v a20-v (matita-basics-logic.refl lzero nat (f-v a10-v a20-v))) a1-v a2-v (matita-basics-logic.rewrite-r lzero lzero nat n0-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v n0-v) (matita-basics-logic.refl lzero nat n0-v) (f-v a1-v a2-v) auto'-v))

f2-ind : (l24-v l23-v l17-v : Level) -> (A1-v : Set l24-v) -> (A2-v : Set l23-v) -> (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> nat) -> (P-v : matita-basics-relations.relation2 l24-v l23-v l17-v A1-v A2-v) -> (X---v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (X---v : lt (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> P-v a1-v a2-v
f2-ind = λ (l24-v l23-v l17-v : Level) -> λ (A1-v : Set l24-v) -> λ (A2-v : Set l23-v) -> λ (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> nat) -> λ (P-v : matita-basics-relations.relation2 l24-v l23-v l17-v A1-v A2-v) -> λ (H-v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (X---v : lt (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v) n-v) -> P-v a1-v a2-v) -> λ (a1-v : A1-v) -> λ (a2-v : A2-v) -> f2-ind-aux l24-v l23-v l17-v A1-v A2-v f-v P-v H-v (f-v a1-v a2-v) a1-v a2-v (matita-basics-logic.refl lzero nat (f-v a1-v a2-v))

f3-ind-aux : (l64-v l63-v l62-v l55-v : Level) -> (A1-v : Set l64-v) -> (A2-v : Set l63-v) -> (A3-v : Set l62-v) -> (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> (X--2-v : A3-v) -> nat) -> (P-v : matita-basics-relations.relation3 l64-v l63-v l62-v l55-v A1-v A2-v A3-v) -> (X---v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X---v : lt (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> (n-v : nat) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v
f3-ind-aux = λ (l64-v l63-v l62-v l55-v : Level) -> λ (A1-v : Set l64-v) -> λ (A2-v : Set l63-v) -> λ (A3-v : Set l62-v) -> λ (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> (X--2-v : A3-v) -> nat) -> λ (P-v : matita-basics-relations.relation3 l64-v l63-v l62-v l55-v A1-v A2-v A3-v) -> λ (H-v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X---v : lt (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> λ (n-v : nat) -> nat-elim1 (((l62-v ⊔ l64-v) ⊔ l55-v) ⊔ l63-v) n-v (λ (X---v : nat) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) X---v) -> P-v a1-v a2-v a3-v) (λ (n0-v : nat) -> λ (auto-v : (p-v : nat) -> (X---v : lt p-v n0-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) p-v) -> P-v a1-v a2-v a3-v) -> λ (a1-v : A1-v) -> λ (a2-v : A2-v) -> λ (a3-v : A3-v) -> λ (auto'-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) n0-v) -> H-v n0-v (λ (a10-v : A1-v) -> λ (a20-v : A2-v) -> λ (a30-v : A3-v) -> λ (auto''-v : lt (f-v a10-v a20-v a30-v) n0-v) -> auto-v (f-v a10-v a20-v a30-v) auto''-v a10-v a20-v a30-v (matita-basics-logic.refl lzero nat (f-v a10-v a20-v a30-v))) a1-v a2-v a3-v (matita-basics-logic.rewrite-r lzero lzero nat n0-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v n0-v) (matita-basics-logic.refl lzero nat n0-v) (f-v a1-v a2-v a3-v) auto'-v))

f3-ind : (l31-v l30-v l29-v l22-v : Level) -> (A1-v : Set l31-v) -> (A2-v : Set l30-v) -> (A3-v : Set l29-v) -> (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> (X--2-v : A3-v) -> nat) -> (P-v : matita-basics-relations.relation3 l31-v l30-v l29-v l22-v A1-v A2-v A3-v) -> (X---v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X---v : lt (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> P-v a1-v a2-v a3-v
f3-ind = λ (l31-v l30-v l29-v l22-v : Level) -> λ (A1-v : Set l31-v) -> λ (A2-v : Set l30-v) -> λ (A3-v : Set l29-v) -> λ (f-v : (X---v : A1-v) -> (X--1-v : A2-v) -> (X--2-v : A3-v) -> nat) -> λ (P-v : matita-basics-relations.relation3 l31-v l30-v l29-v l22-v A1-v A2-v A3-v) -> λ (H-v : (n-v : nat) -> (X---v : (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X---v : lt (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> (a1-v : A1-v) -> (a2-v : A2-v) -> (a3-v : A3-v) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v a1-v a2-v a3-v) n-v) -> P-v a1-v a2-v a3-v) -> λ (a1-v : A1-v) -> λ (a2-v : A2-v) -> λ (a3-v : A3-v) -> f3-ind-aux l31-v l30-v l29-v l22-v A1-v A2-v A3-v f-v P-v H-v (f-v a1-v a2-v a3-v) a1-v a2-v a3-v (matita-basics-logic.refl lzero nat (f-v a1-v a2-v a3-v))

lt-to-not-eq : (n-v : nat) -> (m-v : nat) -> (X---v : lt n-v m-v) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)
lt-to-not-eq = λ (n-v : nat) -> λ (m-v : nat) -> λ (H-v : lt n-v m-v) -> matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.False lzero) (λ (auto-v : matita-basics-logic.eq lzero nat n-v m-v) -> matita-basics-logic.absurd lzero (le (S n-v) n-v) (matita-basics-logic.eq-coerc lzero (le (S n-v) m-v) (le (S n-v) n-v) H-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (S n-v) X---v) (le (S n-v) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (S n-v) n-v)) m-v auto-v)) (not-le-Sn-n n-v)) (matita-basics-logic.nmk lzero (matita-basics-logic.False lzero) (λ (auto-v : matita-basics-logic.False lzero) -> auto-v))

le-n-O-to-eq : (n-v : nat) -> (X---v : le n-v O) -> matita-basics-logic.eq lzero nat O n-v
le-n-O-to-eq = λ (n-v : nat) -> match-nat lzero (λ (X---v : nat) -> (X--1-v : le X---v O) -> matita-basics-logic.eq lzero nat O X---v) (λ (auto-v : le O O) -> matita-basics-logic.refl lzero nat O) (λ (a-v : nat) -> λ (abs-v : le (S a-v) O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero nat O (S a-v)) (matita-basics-logic.absurd lzero (le (S a-v) O) abs-v (not-le-Sn-O a-v))) n-v

le-to-le-to-eq : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> (X--1-v : le m-v n-v) -> matita-basics-logic.eq lzero nat n-v m-v
le-to-le-to-eq = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> (X--1-v : le X---v X-0-v) -> (X--2-v : le X-0-v X---v) -> matita-basics-logic.eq lzero nat X---v X-0-v) (λ (n-v : nat) -> λ (auto-v : le O n-v) -> λ (auto'-v : le n-v O) -> matita-basics-logic.sym-eq lzero nat n-v O (matita-basics-logic.sym-eq lzero nat O n-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat O n-v) (matita-basics-logic.eq lzero nat O n-v) (le-n-O-to-eq n-v auto'-v) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat O n-v))))) (λ (n-v : nat) -> λ (auto-v : le (S n-v) O) -> λ (auto'-v : le O (S n-v)) -> matita-basics-logic.sym-eq lzero nat O (S n-v) (le-n-O-to-eq (S n-v) auto-v)) (λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : (X---v : le n-v m-v) -> (X--1-v : le m-v n-v) -> matita-basics-logic.eq lzero nat n-v m-v) -> λ (auto'-v : le (S n-v) (S m-v)) -> λ (auto''-v : le (S m-v) (S n-v)) -> matita-basics-logic.eq-f lzero lzero nat nat S n-v m-v (auto-v (matita-basics-logic.eq-coerc lzero (le (pred (S n-v)) (pred (S m-v))) (le n-v m-v) (monotonic-pred (S n-v) (S m-v) auto'-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S m-v))) (le n-v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v X---v) (le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v m-v)) (pred (S m-v)) (pred-Sn m-v)) (pred (S n-v)) (pred-Sn n-v))) (matita-basics-logic.eq-coerc lzero (le (pred (S m-v)) (pred (S n-v))) (le m-v n-v) (monotonic-pred (S m-v) (S n-v) auto''-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S n-v))) (le m-v n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le m-v X---v) (le m-v n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le m-v n-v)) (pred (S n-v)) (pred-Sn n-v)) (pred (S m-v)) (pred-Sn m-v)))))

increasing-to-injective : (f-v : (X---v : nat) -> nat) -> (X---v : increasing f-v) -> matita-basics-relations.||injective|| lzero lzero nat nat f-v
increasing-to-injective = λ (f-v : (X---v : nat) -> nat) -> λ (incr-v : increasing f-v) -> λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-logic.match-Or lzero lzero (le n-v m-v) (matita-basics-logic.Not lzero (le n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (le n-v m-v) (matita-basics-logic.Not lzero (le n-v m-v))) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) -> matita-basics-logic.eq lzero nat n-v m-v) (λ (lenm-v : le n-v m-v) -> matita-basics-logic.match-Or lzero lzero (lt n-v m-v) (matita-basics-logic.eq lzero nat n-v m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (lt n-v m-v) (matita-basics-logic.eq lzero nat n-v m-v)) -> (X--1-v : matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) -> matita-basics-logic.eq lzero nat n-v m-v) (λ (lenm0-v : lt n-v m-v) -> λ (eqf-v : matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) eqf-v (lt-to-not-eq (f-v n-v) (f-v m-v) (increasing-to-monotonic f-v incr-v n-v m-v lenm0-v)))) (λ (auto-v : matita-basics-logic.eq lzero nat n-v m-v) -> λ (auto'-v : matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) -> matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.refl lzero nat n-v) m-v auto-v) (le-to-or-lt-eq n-v m-v lenm-v)) (λ (nlenm-v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (eqf-v : matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero nat (f-v n-v) (f-v m-v)) eqf-v (matita-basics-logic.sym-not-eq lzero nat (f-v m-v) (f-v n-v) (lt-to-not-eq (f-v m-v) (f-v n-v) (increasing-to-monotonic f-v incr-v m-v n-v (not-le-to-lt n-v m-v nlenm-v)))))) (decidable-le n-v m-v)

minus-Sn-m : (m-v : nat) -> (n-v : nat) -> (X---v : le m-v n-v) -> matita-basics-logic.eq lzero nat (minus (S n-v) m-v) (S (minus n-v m-v))
minus-Sn-m = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> (X--1-v : le X---v X-0-v) -> matita-basics-logic.eq lzero nat (minus (S X-0-v) X---v) (S (minus X-0-v X---v))) (λ (n-v : nat) -> λ (auto-v : le O n-v) -> matita-basics-logic.rewrite-l lzero lzero nat (S n-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (S (minus n-v O))) (matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S n-v) (S X---v)) (matita-basics-logic.refl lzero nat (S n-v)) (minus n-v O) (minus-n-O n-v)) (minus (S n-v) O) (minus-n-O (S n-v))) (λ (n-v : nat) -> λ (abs-v : le (S n-v) O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero nat (minus (S O) (S n-v)) (S (minus O (S n-v)))) (matita-basics-logic.absurd lzero (le (S n-v) O) abs-v (not-le-Sn-O n-v))) (λ (n-v : nat) -> λ (m-v : nat) -> λ (Hind-v : (X---v : le n-v m-v) -> matita-basics-logic.eq lzero nat (minus (S m-v) n-v) (S (minus m-v n-v))) -> λ (c-v : le (S n-v) (S m-v)) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (minus (S m-v) n-v) (S (minus m-v n-v))) (matita-basics-logic.eq lzero nat (minus (S (S m-v)) (S n-v)) (S (minus (S m-v) (S n-v)))) (Hind-v (matita-basics-logic.eq-coerc lzero (le (pred (S n-v)) (pred (S m-v))) (le n-v m-v) (monotonic-pred (S n-v) (S m-v) c-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S m-v))) (le n-v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v X---v) (le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v m-v)) (pred (S m-v)) (pred-Sn m-v)) (pred (S n-v)) (pred-Sn n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (minus (S m-v) n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (S m-v) n-v) (S (minus m-v n-v))) (matita-basics-logic.eq lzero nat X---v (S (minus (S m-v) (S n-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (minus m-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (S m-v) n-v) (S (minus m-v n-v))) (matita-basics-logic.eq lzero nat (minus (S m-v) n-v) (S X---v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (S m-v) n-v) (S (minus m-v n-v)))) (minus (S m-v) (S n-v)) (minus-S-S m-v n-v)) (minus (S (S m-v)) (S n-v)) (minus-S-S (S m-v) n-v)))

plus-minus : (m-v : nat) -> (n-v : nat) -> (p-v : nat) -> (X---v : le m-v n-v) -> matita-basics-logic.eq lzero nat (plus (minus n-v m-v) p-v) (minus (plus n-v p-v) m-v)
plus-minus = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> (p-v : nat) -> (X--1-v : le X---v X-0-v) -> matita-basics-logic.eq lzero nat (plus (minus X-0-v X---v) p-v) (minus (plus X-0-v p-v) X---v)) (λ (n-v : nat) -> λ (p-v : nat) -> λ (auto-v : le O n-v) -> matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus X---v p-v) (minus (plus n-v p-v) O)) (matita-basics-logic.rewrite-l lzero lzero nat (plus n-v p-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (plus n-v p-v) X---v) (matita-basics-logic.refl lzero nat (plus n-v p-v)) (minus (plus n-v p-v) O) (minus-n-O (plus n-v p-v))) (minus n-v O) (minus-n-O n-v)) (λ (n-v : nat) -> λ (p-v : nat) -> λ (abs-v : le (S n-v) O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero nat (plus (minus O (S n-v)) p-v) (minus (plus O p-v) (S n-v))) (matita-basics-logic.absurd lzero (le (S n-v) O) abs-v (not-le-Sn-O n-v))) (λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : (p-v : nat) -> (X---v : le n-v m-v) -> matita-basics-logic.eq lzero nat (plus (minus m-v n-v) p-v) (minus (plus m-v p-v) n-v)) -> λ (p-v : nat) -> λ (auto'-v : le (S n-v) (S m-v)) -> auto-v p-v (matita-basics-logic.eq-coerc lzero (le (pred (S n-v)) (pred (S m-v))) (le n-v m-v) (monotonic-pred (S n-v) (S m-v) auto'-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S m-v))) (le n-v m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat m-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v X---v) (le n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v m-v)) (pred (S m-v)) (pred-Sn m-v)) (pred (S n-v)) (pred-Sn n-v))))

minus-plus-m-m : (n-v : nat) -> (m-v : nat) -> matita-basics-logic.eq lzero nat n-v (minus (plus n-v m-v) m-v)
minus-plus-m-m = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (plus (minus m-v m-v) n-v) (minus (plus m-v n-v) m-v)) (matita-basics-logic.eq lzero nat n-v (minus (plus n-v m-v) m-v)) (plus-minus m-v m-v n-v (le-n m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat O (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus X---v n-v) (minus (plus m-v n-v) m-v)) (matita-basics-logic.eq lzero nat n-v (minus (plus n-v m-v) m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat X---v (minus (plus m-v n-v) m-v)) (matita-basics-logic.eq lzero nat n-v (minus (plus n-v m-v) m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat n-v (minus X---v m-v)) (matita-basics-logic.eq lzero nat n-v (minus (plus n-v m-v) m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat n-v (minus (plus n-v m-v) m-v))) (plus m-v n-v) (commutative-plus m-v n-v)) (plus O n-v) (plus-O-n n-v)) (minus m-v m-v) (minus-n-n m-v))

plus-minus-m-m : (n-v : nat) -> (m-v : nat) -> (X---v : le m-v n-v) -> matita-basics-logic.eq lzero nat n-v (plus (minus n-v m-v) m-v)
plus-minus-m-m = λ (n-v : nat) -> λ (m-v : nat) -> λ (lemn-v : le m-v n-v) -> matita-basics-logic.sym-eq lzero nat (plus (minus n-v m-v) m-v) n-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (plus (minus n-v m-v) m-v) (minus (plus n-v m-v) m-v)) (matita-basics-logic.eq lzero nat (plus (minus n-v m-v) m-v) n-v) (plus-minus m-v n-v m-v lemn-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v (minus n-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus (minus n-v m-v) m-v) (minus (plus n-v m-v) m-v)) (matita-basics-logic.eq lzero nat X---v n-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v (minus n-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat X---v (minus (plus n-v m-v) m-v)) (matita-basics-logic.eq lzero nat (plus m-v (minus n-v m-v)) n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus m-v (minus n-v m-v)) X---v) (matita-basics-logic.eq lzero nat (plus m-v (minus n-v m-v)) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus m-v (minus n-v m-v)) n-v)) (minus (plus n-v m-v) m-v) (minus-plus-m-m n-v m-v)) (plus (minus n-v m-v) m-v) (commutative-plus (minus n-v m-v) m-v)) (plus (minus n-v m-v) m-v) (commutative-plus (minus n-v m-v) m-v)))

minus-to-plus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : le m-v n-v) -> (X--1-v : matita-basics-logic.eq lzero nat (minus n-v m-v) p-v) -> matita-basics-logic.eq lzero nat n-v (plus m-v p-v)
minus-to-plus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (lemn-v : le m-v n-v) -> λ (eqp-v : matita-basics-logic.eq lzero nat (minus n-v m-v) p-v) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat n-v (plus (minus n-v m-v) m-v)) (matita-basics-logic.eq lzero nat n-v (plus m-v p-v)) (plus-minus-m-m n-v m-v lemn-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v (minus n-v m-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.eq lzero nat n-v (plus m-v p-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat p-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat n-v (plus m-v X---v)) (matita-basics-logic.eq lzero nat n-v (plus m-v p-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat n-v (plus m-v p-v))) (minus n-v m-v) eqp-v) (plus (minus n-v m-v) m-v) (commutative-plus (minus n-v m-v) m-v))

plus-to-minus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : matita-basics-logic.eq lzero nat n-v (plus m-v p-v)) -> matita-basics-logic.eq lzero nat (minus n-v m-v) p-v
plus-to-minus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (eqp-v : matita-basics-logic.eq lzero nat n-v (plus m-v p-v)) -> matita-basics-logic.sym-eq lzero nat p-v (minus n-v m-v) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat p-v (minus (plus p-v m-v) m-v)) (matita-basics-logic.eq lzero nat p-v (minus n-v m-v)) (minus-plus-m-m p-v m-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v p-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat p-v (minus X---v m-v)) (matita-basics-logic.eq lzero nat p-v (minus n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat p-v (minus X---v m-v)) (matita-basics-logic.eq lzero nat p-v (minus n-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat p-v (minus n-v m-v))) (plus m-v p-v) eqp-v) (plus p-v m-v) (commutative-plus p-v m-v)))

minus-pred-pred : (n-v : nat) -> (m-v : nat) -> (X---v : lt O n-v) -> (X--1-v : lt O m-v) -> matita-basics-logic.eq lzero nat (minus (pred n-v) (pred m-v)) (minus n-v m-v)
minus-pred-pred = λ (n-v : nat) -> λ (m-v : nat) -> λ (posn-v : lt O n-v) -> λ (posm-v : lt O m-v) -> lt-O-n-elim lzero n-v posn-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus (pred X---v) (pred m-v)) (minus X---v m-v)) (lt-O-n-elim lzero m-v posm-v (λ (X---v : nat) -> (m0-v : nat) -> matita-basics-logic.eq lzero nat (minus (pred (S m0-v)) (pred X---v)) (minus (S m0-v) X---v)) (λ (m0-v : nat) -> λ (m00-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat m00-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus X---v (pred (S m0-v))) (minus (S m00-v) (S m0-v))) (matita-basics-logic.rewrite-l lzero lzero nat m0-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus m00-v X---v) (minus (S m00-v) (S m0-v))) (matita-basics-logic.rewrite-r lzero lzero nat (minus m00-v m0-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus m00-v m0-v) X---v) (matita-basics-logic.refl lzero nat (minus m00-v m0-v)) (minus (S m00-v) (S m0-v)) (minus-S-S m00-v m0-v)) (pred (S m0-v)) (pred-Sn m0-v)) (pred (S m00-v)) (pred-Sn m00-v)))

plus-minus-associative : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> (X---v : le z-v y-v) -> matita-basics-logic.eq lzero nat (plus x-v (minus y-v z-v)) (minus (plus x-v y-v) z-v)
plus-minus-associative = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> λ (auto-v : le z-v y-v) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (plus (minus y-v z-v) x-v) (minus (plus y-v x-v) z-v)) (matita-basics-logic.eq lzero nat (plus x-v (minus y-v z-v)) (minus (plus x-v y-v) z-v)) (plus-minus z-v y-v x-v auto-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v (minus y-v z-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat X---v (minus (plus y-v x-v) z-v)) (matita-basics-logic.eq lzero nat (plus x-v (minus y-v z-v)) (minus (plus x-v y-v) z-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus x-v (minus y-v z-v)) (minus X---v z-v)) (matita-basics-logic.eq lzero nat (plus x-v (minus y-v z-v)) (minus (plus x-v y-v) z-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus x-v (minus y-v z-v)) (minus (plus x-v y-v) z-v))) (plus y-v x-v) (commutative-plus y-v x-v)) (plus (minus y-v z-v) x-v) (commutative-plus (minus y-v z-v) x-v))

le-n-fn : (f-v : (X---v : nat) -> nat) -> (X---v : increasing f-v) -> (n-v : nat) -> le n-v (f-v n-v)
le-n-fn = λ (f-v : (X---v : nat) -> nat) -> λ (incr-v : increasing f-v) -> λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> le X-x-365-v (f-v X-x-365-v)) (le-O-n (f-v O)) (λ (x-366-v : nat) -> λ (X-x-368-v : le x-366-v (f-v x-366-v)) -> le-to-lt-to-lt x-366-v (f-v x-366-v) (f-v (S x-366-v)) X-x-368-v (incr-v x-366-v)) n-v

monotonic-le-minus-l : (p-v : nat) -> (q-v : nat) -> (n-v : nat) -> (X---v : le q-v p-v) -> le (minus q-v n-v) (minus p-v n-v)
monotonic-le-minus-l = nat-elim2 lzero (λ (X---v : nat) -> λ (X-0-v : nat) -> (n-v : nat) -> (X--1-v : le X-0-v X---v) -> le (minus X-0-v n-v) (minus X---v n-v)) (λ (p-v : nat) -> λ (q-v : nat) -> λ (lePO-v : le p-v O) -> le-n-O-elim lzero p-v lePO-v (λ (X---v : nat) -> le (minus X---v q-v) (minus O q-v)) (le-n (minus O q-v))) (λ (p-v : nat) -> λ (q-v : nat) -> λ (auto-v : le O (S p-v)) -> le-plus-minus-m-m (minus O q-v) (match-nat lzero (λ (X---v : nat) -> nat) (S p-v) (λ (q0-v : nat) -> minus p-v q0-v) q-v)) (λ (p-v : nat) -> λ (q-v : nat) -> λ (Hind-v : (n0-v : nat) -> (X---v : le q-v p-v) -> le (minus q-v n0-v) (minus p-v n0-v)) -> λ (n-v : nat) -> match-nat lzero (λ (X---v : nat) -> (X--1-v : le (S q-v) (S p-v)) -> le (minus (S q-v) X---v) (minus (S p-v) X---v)) (λ (auto-v : le (S q-v) (S p-v)) -> auto-v) (λ (a-v : nat) -> λ (leSS-v : le (S q-v) (S p-v)) -> Hind-v a-v (matita-basics-logic.eq-coerc lzero (le (pred (S q-v)) (pred (S p-v))) (le q-v p-v) (monotonic-pred (S q-v) (S p-v) leSS-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat q-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v (pred (S p-v))) (le q-v p-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat p-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le q-v X---v) (le q-v p-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le q-v p-v)) (pred (S p-v)) (pred-Sn p-v)) (pred (S q-v)) (pred-Sn q-v)))) n-v)

le-minus-to-plus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : le (minus n-v m-v) p-v) -> le n-v (plus p-v m-v)
le-minus-to-plus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (lep-v : le (minus n-v m-v) p-v) -> transitive-le n-v (plus (minus n-v m-v) m-v) (plus p-v m-v) (le-plus-minus-m-m n-v m-v) (monotonic-le-plus-l m-v (minus n-v m-v) p-v lep-v)

le-minus-to-plus-r : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> (X---v : le c-v b-v) -> (X--1-v : le a-v (minus b-v c-v)) -> le (plus a-v c-v) b-v
le-minus-to-plus-r = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (Hlecb-v : le c-v b-v) -> λ (H-v : le a-v (minus b-v c-v)) -> matita-basics-logic.eq-ind-r lzero lzero nat (plus (minus b-v c-v) c-v) (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v (plus (minus b-v c-v) c-v)) -> le (plus a-v c-v) x-v) (monotonic-le-plus-l c-v a-v (minus b-v c-v) H-v) b-v (plus-minus-m-m b-v c-v Hlecb-v)

le-plus-to-minus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : le n-v (plus p-v m-v)) -> le (minus n-v m-v) p-v
le-plus-to-minus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (lep-v : le n-v (plus p-v m-v)) -> matita-basics-logic.eq-coerc lzero (le (minus n-v m-v) (minus (plus p-v m-v) m-v)) (le (minus n-v m-v) p-v) (monotonic-le-minus-l (plus p-v m-v) n-v m-v lep-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat p-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus n-v m-v) X---v) (le (minus n-v m-v) p-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus n-v m-v) p-v)) (minus (plus p-v m-v) m-v) (minus-plus-m-m p-v m-v))

monotonic-le-minus-r : (p-v : nat) -> (q-v : nat) -> (n-v : nat) -> (X---v : le q-v p-v) -> le (minus n-v p-v) (minus n-v q-v)
monotonic-le-minus-r = λ (p-v : nat) -> λ (q-v : nat) -> λ (n-v : nat) -> λ (lepq-v : le q-v p-v) -> le-plus-to-minus n-v p-v (minus n-v q-v) (transitive-le n-v (plus (minus n-v q-v) q-v) (plus (minus n-v q-v) p-v) (le-plus-minus-m-m n-v q-v) (monotonic-le-plus-r (minus n-v q-v) q-v p-v lepq-v))

increasing-to-le : (f-v : (X---v : nat) -> nat) -> (X---v : increasing f-v) -> (m-v : nat) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> le m-v (f-v i-v))
increasing-to-le = λ (f-v : (X---v : nat) -> nat) -> λ (incr-v : increasing f-v) -> λ (m-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> le X-x-365-v (f-v i-v))) (matita-basics-logic.ex-intro lzero lzero nat (λ (i-v : nat) -> le O (f-v i-v)) m-v (matita-basics-logic.eq-coerc lzero (le O (plus (f-v m-v) O)) (le O (f-v m-v)) (le-plus-n (f-v m-v) O) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (f-v m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le O X---v) (le O (f-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le O (f-v m-v))) (plus (f-v m-v) O) (plus-n-O (f-v m-v))))) (λ (n-v : nat) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> le n-v (f-v i-v))) -> matita-basics-logic.match-ex lzero lzero nat (λ (i-v : nat) -> le n-v (f-v i-v)) lzero (λ (X---v : matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> le n-v (f-v i-v))) -> matita-basics-logic.ex lzero lzero nat (λ (i-v : nat) -> le (S n-v) (f-v i-v))) (λ (a-v : nat) -> λ (lenfa-v : le n-v (f-v a-v)) -> matita-basics-logic.ex-intro lzero lzero nat (λ (i-v : nat) -> le (S n-v) (f-v i-v)) (S a-v) (le-to-lt-to-lt n-v (f-v a-v) (f-v (S a-v)) lenfa-v (incr-v a-v))) X-clearme-v) m-v

minus-le : (x-v : nat) -> (y-v : nat) -> le (minus x-v y-v) x-v
minus-le = λ (x-v : nat) -> λ (y-v : nat) -> matita-basics-logic.eq-coerc lzero (le (minus x-v y-v) (minus (plus x-v y-v) y-v)) (le (minus x-v y-v) x-v) (monotonic-le-minus-l (plus x-v y-v) x-v y-v (le-plus-n-r y-v x-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat x-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus x-v y-v) X---v) (le (minus x-v y-v) x-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus x-v y-v) x-v)) (minus (plus x-v y-v) y-v) (minus-plus-m-m x-v y-v))

not-eq-to-le-to-lt : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> (X--1-v : le n-v m-v) -> lt n-v m-v
not-eq-to-le-to-lt = λ (n-v : nat) -> λ (m-v : nat) -> λ (Hneq-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> λ (Hle-v : le n-v m-v) -> matita-basics-logic.match-Or lzero lzero (lt n-v m-v) (matita-basics-logic.eq lzero nat n-v m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (lt n-v m-v) (matita-basics-logic.eq lzero nat n-v m-v)) -> lt n-v m-v) (λ (auto-v : lt n-v m-v) -> auto-v) (λ (Heq-v : matita-basics-logic.eq lzero nat n-v m-v) -> not-le-to-lt m-v n-v (matita-basics-logic.not-to-not lzero (le m-v n-v) (matita-basics-logic.eq lzero nat n-v m-v) (λ (auto-v : le m-v n-v) -> matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.refl lzero nat n-v) m-v Heq-v) Hneq-v)) (le-to-or-lt-eq n-v m-v Hle-v)

lt-times-n-to-lt-l : (n-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt (times p-v n-v) (times q-v n-v)) -> lt p-v q-v
lt-times-n-to-lt-l = λ (n-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (Hlt-v : lt (times p-v n-v) (times q-v n-v)) -> matita-basics-logic.Or-ind lzero lzero lzero (lt p-v q-v) (matita-basics-logic.Not lzero (lt p-v q-v)) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (lt p-v q-v) (matita-basics-logic.Not lzero (lt p-v q-v))) -> lt p-v q-v) (λ (X-x-171-v : lt p-v q-v) -> X-x-171-v) (λ (nltpq-v : matita-basics-logic.Not lzero (lt p-v q-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> lt p-v q-v) (matita-basics-logic.absurd lzero (le (times q-v n-v) (times p-v n-v)) (matita-basics-logic.eq-coerc lzero (le (times n-v q-v) (times n-v p-v)) (le (times q-v n-v) (times p-v n-v)) (monotonic-le-times-r n-v q-v p-v (not-lt-to-le p-v q-v nltpq-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times n-v q-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times n-v q-v) (times n-v p-v)) (le X---v (times p-v n-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times n-v p-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (times n-v q-v) (times n-v p-v)) (le (times n-v q-v) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (times n-v q-v) (times n-v p-v))) (times p-v n-v) (commutative-times p-v n-v)) (times q-v n-v) (commutative-times q-v n-v))) (lt-to-not-le (times p-v n-v) (times q-v n-v) Hlt-v))) (decidable-lt p-v q-v)

lt-times-n-to-lt-r : (n-v : nat) -> (p-v : nat) -> (q-v : nat) -> (X---v : lt (times n-v p-v) (times n-v q-v)) -> lt p-v q-v
lt-times-n-to-lt-r = λ (n-v : nat) -> λ (p-v : nat) -> λ (q-v : nat) -> λ (auto-v : lt (times n-v p-v) (times n-v q-v)) -> lt-times-n-to-lt-l n-v p-v q-v (matita-basics-logic.eq-coerc lzero (lt (times n-v p-v) (times n-v q-v)) (lt (times p-v n-v) (times q-v n-v)) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times p-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt X---v (times n-v q-v)) (lt (times p-v n-v) (times q-v n-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (times q-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (lt (times p-v n-v) X---v) (lt (times p-v n-v) (times q-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (lt (times p-v n-v) (times q-v n-v))) (times n-v q-v) (commutative-times n-v q-v)) (times n-v p-v) (commutative-times n-v p-v)))

lt-minus-to-plus : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> (X---v : lt (minus a-v b-v) c-v) -> lt a-v (plus c-v b-v)
lt-minus-to-plus = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (H-v : lt (minus a-v b-v) c-v) -> not-le-to-lt (plus c-v b-v) a-v (matita-basics-logic.not-to-not lzero (le (plus c-v b-v) a-v) (le c-v (minus a-v b-v)) (λ (auto-v : le (plus c-v b-v) a-v) -> le-plus-to-minus-r c-v b-v a-v auto-v) (lt-to-not-le (minus a-v b-v) c-v H-v))

lt-minus-to-plus-r : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> (X---v : lt a-v (minus b-v c-v)) -> lt (plus a-v c-v) b-v
lt-minus-to-plus-r = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> λ (H-v : lt a-v (minus b-v c-v)) -> not-le-to-lt b-v (plus a-v c-v) (matita-basics-logic.not-to-not lzero (le b-v (plus a-v c-v)) (le (minus b-v c-v) a-v) (le-plus-to-minus b-v c-v a-v) (lt-to-not-le a-v (minus b-v c-v) H-v))

lt-plus-to-minus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : le m-v n-v) -> (X--1-v : lt n-v (plus p-v m-v)) -> lt (minus n-v m-v) p-v
lt-plus-to-minus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (lenm-v : le m-v n-v) -> λ (H-v : lt n-v (plus p-v m-v)) -> matita-basics-logic.eq-ind lzero lzero nat (minus (S n-v) m-v) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (minus (S n-v) m-v) x-1-v) -> le x-1-v p-v) (le-plus-to-minus (S n-v) m-v p-v H-v) (S (minus n-v m-v)) (minus-Sn-m m-v n-v lenm-v)

monotonic-lt-minus-l : (p-v : nat) -> (q-v : nat) -> (n-v : nat) -> (X---v : le n-v q-v) -> (X--1-v : lt q-v p-v) -> lt (minus q-v n-v) (minus p-v n-v)
monotonic-lt-minus-l = λ (p-v : nat) -> λ (q-v : nat) -> λ (n-v : nat) -> λ (H1-v : le n-v q-v) -> λ (H2-v : lt q-v p-v) -> lt-plus-to-minus-r (minus q-v n-v) n-v p-v (matita-basics-logic.eq-ind lzero lzero nat q-v (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat q-v x-1-v) -> lt x-1-v p-v) H2-v (plus (minus q-v n-v) n-v) (plus-minus-m-m q-v n-v H1-v))

discr-minus-x-xy : (x-v : nat) -> (y-v : nat) -> (X---v : matita-basics-logic.eq lzero nat x-v (minus x-v y-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat x-v O) (matita-basics-logic.eq lzero nat y-v O)
discr-minus-x-xy = λ (X-clearme-v : nat) -> match-nat lzero (λ (X---v : nat) -> (y-v : nat) -> (X--1-v : matita-basics-logic.eq lzero nat X---v (minus X---v y-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat X---v O) (matita-basics-logic.eq lzero nat y-v O)) (λ (y-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat O (minus O y-v)) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero nat O O) (matita-basics-logic.eq lzero nat y-v O) (matita-basics-logic.refl lzero nat O)) (λ (x-v : nat) -> λ (X-clearme0-v : nat) -> match-nat lzero (λ (X---v : nat) -> (X--1-v : matita-basics-logic.eq lzero nat (S x-v) (minus (S x-v) X---v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat (S x-v) O) (matita-basics-logic.eq lzero nat X---v O)) (λ (auto-v : matita-basics-logic.eq lzero nat (S x-v) (minus (S x-v) O)) -> matita-basics-relations.RC-reflexive lzero lzero nat (λ (X---v : nat) -> λ (X-0-v : nat) -> matita-basics-logic.eq lzero nat (S x-v) O) O) (λ (y-v : nat) -> λ (H-v : matita-basics-logic.eq lzero nat (S x-v) (minus x-v y-v)) -> matita-basics-logic.eq-ind lzero lzero nat (S x-v) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (S x-v) x-1-v) -> (X---v : le x-1-v x-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat (S x-v) O) (matita-basics-logic.eq lzero nat (S y-v) O)) (λ (H0-v : le (S x-v) x-v) -> matita-basics-logic.Not-ind lzero lzero (le (S x-v) x-v) (λ (X-x-79-v : matita-basics-logic.Not lzero (le (S x-v) x-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat (S x-v) O) (matita-basics-logic.eq lzero nat (S y-v) O)) (λ (H00-v : (X---v : le (S x-v) x-v) -> matita-basics-logic.False lzero) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero nat (S x-v) O) (matita-basics-logic.eq lzero nat (S y-v) O)) (H00-v H0-v)) (not-le-Sn-n x-v)) (minus x-v y-v) H-v (minus-le x-v y-v)) X-clearme0-v) X-clearme-v

plus-le-0 : (x-v : nat) -> (y-v : nat) -> (X---v : le (plus x-v y-v) O) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero nat x-v O) (matita-basics-logic.eq lzero nat y-v O)
plus-le-0 = λ (x-v : nat) -> λ (y-v : nat) -> λ (H-v : le (plus x-v y-v) O) -> matita-basics-logic.And-ind lzero lzero lzero (le x-v (minus O y-v)) (le y-v O) (λ (X-x-118-v : matita-basics-logic.And lzero lzero (le x-v (minus O y-v)) (le y-v O)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero nat x-v O) (matita-basics-logic.eq lzero nat y-v O)) (λ (H1-v : le x-v (minus O y-v)) -> λ (H2-v : le y-v O) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.eq lzero nat x-v O) (matita-basics-logic.eq lzero nat y-v O) (matita-basics-logic.sym-eq lzero nat O x-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat O x-v) (matita-basics-logic.eq lzero nat O x-v) (le-n-O-to-eq x-v H1-v) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat O x-v)))) (matita-basics-logic.sym-eq lzero nat O y-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat O y-v) (matita-basics-logic.eq lzero nat O y-v) (le-n-O-to-eq y-v H2-v) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat O y-v))))) (le-inv-plus-l x-v y-v O H-v)

eq-minus-O : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> matita-basics-logic.eq lzero nat (minus n-v m-v) O
eq-minus-O = λ (n-v : nat) -> λ (m-v : nat) -> λ (lenm-v : le n-v m-v) -> le-n-O-elim lzero (minus n-v m-v) (matita-basics-logic.eq-coerc lzero (le (minus n-v m-v) (minus n-v n-v)) (le (minus n-v m-v) O) (monotonic-le-minus-r m-v n-v n-v lenm-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat O (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus n-v m-v) X---v) (le (minus n-v m-v) O)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus n-v m-v) O)) (minus n-v n-v) (minus-n-n n-v))) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v O) (matita-basics-logic.refl lzero nat O)

distributive-times-minus : matita-basics-relations.distributive lzero nat times minus
distributive-times-minus = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> matita-basics-logic.match-Or lzero lzero (lt b-v c-v) (matita-basics-logic.Not lzero (lt b-v c-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (lt b-v c-v) (matita-basics-logic.Not lzero (lt b-v c-v))) -> matita-basics-logic.eq lzero nat (times a-v (minus b-v c-v)) (minus (times a-v b-v) (times a-v c-v))) (λ (Hbc-v : lt b-v c-v) -> matita-basics-logic.eq-ind-r lzero lzero nat O (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v O) -> matita-basics-logic.eq lzero nat (times a-v x-v) (minus (times a-v b-v) (times a-v c-v))) (matita-basics-logic.eq-ind-r lzero lzero nat O (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v O) -> matita-basics-logic.eq lzero nat (times a-v O) x-v) (matita-basics-logic.rewrite-l lzero lzero nat O (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v O) (matita-basics-logic.refl lzero nat O) (times a-v O) (times-n-O a-v)) (minus (times a-v b-v) (times a-v c-v)) (eq-minus-O (times a-v b-v) (times a-v c-v) (monotonic-le-times-r a-v b-v c-v (lt-to-le b-v c-v Hbc-v)))) (minus b-v c-v) (eq-minus-O b-v c-v (lt-to-le b-v c-v Hbc-v))) (λ (Hbc-v : matita-basics-logic.Not lzero (lt b-v c-v)) -> matita-basics-logic.sym-eq lzero nat (minus (times a-v b-v) (times a-v c-v)) (times a-v (minus b-v c-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (minus (times a-v b-v) (times a-v c-v)) (times a-v (minus b-v c-v))) (matita-basics-logic.eq lzero nat (minus (times a-v b-v) (times a-v c-v)) (times a-v (minus b-v c-v))) (plus-to-minus (times a-v b-v) (times a-v c-v) (times a-v (minus b-v c-v)) (matita-basics-logic.eq-ind lzero lzero nat (times a-v (plus c-v (minus b-v c-v))) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (times a-v (plus c-v (minus b-v c-v))) x-1-v) -> matita-basics-logic.eq lzero nat (times a-v b-v) x-1-v) (matita-basics-logic.eq-f lzero lzero nat nat (times a-v) b-v (plus c-v (minus b-v c-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat b-v (plus (minus b-v c-v) c-v)) (matita-basics-logic.eq lzero nat b-v (plus c-v (minus b-v c-v))) (plus-minus-m-m b-v c-v (not-lt-to-le b-v c-v Hbc-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus c-v (minus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat b-v X---v) (matita-basics-logic.eq lzero nat b-v (plus c-v (minus b-v c-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat b-v (plus c-v (minus b-v c-v)))) (plus (minus b-v c-v) c-v) (commutative-plus (minus b-v c-v) c-v)))) (plus (times a-v c-v) (times a-v (minus b-v c-v))) (distributive-times-plus a-v c-v (minus b-v c-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (times a-v b-v) (times a-v c-v)) (times a-v (minus b-v c-v)))))) (decidable-lt b-v c-v)

minus-plus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> matita-basics-logic.eq lzero nat (minus (minus n-v m-v) p-v) (minus n-v (plus m-v p-v))
minus-plus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> matita-basics-logic.match-Or lzero lzero (le (plus m-v p-v) n-v) (matita-basics-logic.Not lzero (le (plus m-v p-v) n-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (le (plus m-v p-v) n-v) (matita-basics-logic.Not lzero (le (plus m-v p-v) n-v))) -> matita-basics-logic.eq lzero nat (minus (minus n-v m-v) p-v) (minus n-v (plus m-v p-v))) (λ (Hlt-v : le (plus m-v p-v) n-v) -> plus-to-minus (minus n-v m-v) p-v (minus n-v (plus m-v p-v)) (plus-to-minus n-v m-v (plus p-v (minus n-v (plus m-v p-v))) (matita-basics-logic.eq-ind lzero lzero nat (plus (plus m-v p-v) (minus n-v (plus m-v p-v))) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (plus (plus m-v p-v) (minus n-v (plus m-v p-v))) x-1-v) -> matita-basics-logic.eq lzero nat n-v x-1-v) (minus-to-plus n-v (plus m-v p-v) (minus n-v (plus m-v p-v)) Hlt-v (matita-basics-logic.refl lzero nat (minus n-v (plus m-v p-v)))) (plus m-v (plus p-v (minus n-v (plus m-v p-v)))) (associative-plus m-v p-v (minus n-v (plus m-v p-v)))))) (λ (Hlt-v : matita-basics-logic.Not lzero (le (plus m-v p-v) n-v)) -> matita-basics-logic.eq-ind-r lzero lzero nat O (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v O) -> matita-basics-logic.eq lzero nat x-v (minus n-v (plus m-v p-v))) (matita-basics-logic.sym-eq lzero nat (minus n-v (plus m-v p-v)) O (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (minus n-v (plus m-v p-v)) O) (matita-basics-logic.eq lzero nat (minus n-v (plus m-v p-v)) O) (eq-minus-O n-v (plus m-v p-v) (transitive-le n-v (S n-v) (plus m-v p-v) (le-n-Sn n-v) (not-le-to-lt (plus m-v p-v) n-v Hlt-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus n-v (plus m-v p-v)) O)))) (minus (minus n-v m-v) p-v) (eq-minus-O (minus n-v m-v) p-v (matita-basics-logic.eq-coerc lzero (le (minus n-v m-v) (minus (plus p-v m-v) m-v)) (le (minus n-v m-v) p-v) (monotonic-le-minus-l (plus p-v m-v) n-v m-v (matita-basics-logic.eq-coerc lzero (le n-v (plus m-v p-v)) (le n-v (plus p-v m-v)) (transitive-le n-v (S n-v) (plus m-v p-v) (le-n-Sn n-v) (not-le-to-lt (plus m-v p-v) n-v Hlt-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus m-v p-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le n-v (plus m-v p-v)) (le n-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le n-v (plus m-v p-v))) (plus p-v m-v) (commutative-plus p-v m-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat p-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus n-v m-v) X---v) (le (minus n-v m-v) p-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus n-v m-v) p-v)) (minus (plus p-v m-v) m-v) (minus-plus-m-m p-v m-v))))) (decidable-le (plus m-v p-v) n-v)

minus-minus : (n-v : nat) -> (m-v : nat) -> (p-v : nat) -> (X---v : le p-v m-v) -> (X--1-v : le m-v n-v) -> matita-basics-logic.eq lzero nat (plus p-v (minus n-v m-v)) (minus n-v (minus m-v p-v))
minus-minus = λ (n-v : nat) -> λ (m-v : nat) -> λ (p-v : nat) -> λ (lepm-v : le p-v m-v) -> λ (lemn-v : le m-v n-v) -> matita-basics-logic.sym-eq lzero nat (minus n-v (minus m-v p-v)) (plus p-v (minus n-v m-v)) (plus-to-minus n-v (minus m-v p-v) (plus p-v (minus n-v m-v)) (matita-basics-logic.eq-ind lzero lzero nat (plus (plus (minus m-v p-v) p-v) (minus n-v m-v)) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (plus (plus (minus m-v p-v) p-v) (minus n-v m-v)) x-1-v) -> matita-basics-logic.eq lzero nat n-v x-1-v) (matita-basics-logic.eq-ind lzero lzero nat m-v (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat m-v x-1-v) -> matita-basics-logic.eq lzero nat n-v (plus x-1-v (minus n-v m-v))) (matita-basics-logic.eq-ind lzero lzero nat (plus (minus n-v m-v) m-v) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (plus (minus n-v m-v) m-v) x-1-v) -> matita-basics-logic.eq lzero nat n-v x-1-v) (matita-basics-logic.eq-ind lzero lzero nat n-v (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat n-v x-1-v) -> matita-basics-logic.eq lzero nat n-v x-1-v) (matita-basics-logic.refl lzero nat n-v) (plus (minus n-v m-v) m-v) (plus-minus-m-m n-v m-v lemn-v)) (plus m-v (minus n-v m-v)) (commutative-plus (minus n-v m-v) m-v)) (plus (minus m-v p-v) p-v) (plus-minus-m-m m-v p-v lepm-v)) (plus (minus m-v p-v) (plus p-v (minus n-v m-v))) (associative-plus (minus m-v p-v) p-v (minus n-v m-v))))

minus-minus-associative : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> (X---v : le z-v y-v) -> (X--1-v : le y-v x-v) -> matita-basics-logic.eq lzero nat (minus x-v (minus y-v z-v)) (plus (minus x-v y-v) z-v)
minus-minus-associative = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> λ (auto-v : le z-v y-v) -> λ (auto'-v : le y-v x-v) -> matita-basics-logic.sym-eq lzero nat (plus (minus x-v y-v) z-v) (minus x-v (minus y-v z-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (plus z-v (minus x-v y-v)) (minus x-v (minus y-v z-v))) (matita-basics-logic.eq lzero nat (plus (minus x-v y-v) z-v) (minus x-v (minus y-v z-v))) (minus-minus x-v y-v z-v auto-v auto'-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus z-v (minus x-v y-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus z-v (minus x-v y-v)) (minus x-v (minus y-v z-v))) (matita-basics-logic.eq lzero nat X---v (minus x-v (minus y-v z-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (plus z-v (minus x-v y-v)) (minus x-v (minus y-v z-v)))) (plus (minus x-v y-v) z-v) (commutative-plus (minus x-v y-v) z-v)))

minus-minus-comm : (a-v : nat) -> (b-v : nat) -> (c-v : nat) -> matita-basics-logic.eq lzero nat (minus (minus a-v b-v) c-v) (minus (minus a-v c-v) b-v)
minus-minus-comm = λ (a-v : nat) -> λ (b-v : nat) -> λ (c-v : nat) -> le-to-le-to-eq (minus (minus a-v b-v) c-v) (minus (minus a-v c-v) b-v) (matita-basics-logic.eq-coerc lzero (le (minus (minus a-v b-v) c-v) (minus (plus (minus (minus a-v c-v) b-v) c-v) c-v)) (le (minus (minus a-v b-v) c-v) (minus (minus a-v c-v) b-v)) (monotonic-le-minus-l (plus (minus (minus a-v c-v) b-v) c-v) (minus a-v b-v) c-v (matita-basics-logic.eq-coerc lzero (le (minus a-v b-v) (plus (minus (minus a-v b-v) c-v) c-v)) (le (minus a-v b-v) (plus (minus (minus a-v c-v) b-v) c-v)) (le-plus-minus-m-m (minus a-v b-v) c-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (minus a-v (plus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v b-v) (plus X---v c-v)) (le (minus a-v b-v) (plus (minus (minus a-v c-v) b-v) c-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus c-v (minus a-v (plus b-v c-v))) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v b-v) X---v) (le (minus a-v b-v) (plus (minus (minus a-v c-v) b-v) c-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus c-v (minus (minus a-v c-v) b-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v b-v) (plus c-v (minus a-v (plus b-v c-v)))) (le (minus a-v b-v) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (minus (minus a-v c-v) b-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v b-v) (plus c-v X---v)) (le (minus a-v b-v) (plus c-v (minus (minus a-v c-v) b-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus a-v b-v) (plus c-v (minus (minus a-v c-v) b-v)))) (minus a-v (plus b-v c-v)) (matita-basics-logic.rewrite-l lzero lzero nat (plus c-v b-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus (minus a-v c-v) b-v) (minus a-v X---v)) (minus-plus a-v c-v b-v) (plus b-v c-v) (commutative-plus c-v b-v))) (plus (minus (minus a-v c-v) b-v) c-v) (commutative-plus (minus (minus a-v c-v) b-v) c-v)) (plus (minus a-v (plus b-v c-v)) c-v) (commutative-plus (minus a-v (plus b-v c-v)) c-v)) (minus (minus a-v b-v) c-v) (minus-plus a-v b-v c-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (minus (minus a-v c-v) b-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus (minus a-v b-v) c-v) X---v) (le (minus (minus a-v b-v) c-v) (minus (minus a-v c-v) b-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus (minus a-v b-v) c-v) (minus (minus a-v c-v) b-v))) (minus (plus (minus (minus a-v c-v) b-v) c-v) c-v) (minus-plus-m-m (minus (minus a-v c-v) b-v) c-v))) (matita-basics-logic.eq-coerc lzero (le (minus (minus a-v c-v) b-v) (minus (plus (minus (minus a-v b-v) c-v) b-v) b-v)) (le (minus (minus a-v c-v) b-v) (minus (minus a-v b-v) c-v)) (monotonic-le-minus-l (plus (minus (minus a-v b-v) c-v) b-v) (minus a-v c-v) b-v (matita-basics-logic.eq-coerc lzero (le (minus a-v c-v) (plus (minus (minus a-v c-v) b-v) b-v)) (le (minus a-v c-v) (plus (minus (minus a-v b-v) c-v) b-v)) (le-plus-minus-m-m (minus a-v c-v) b-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (minus a-v (plus c-v b-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v c-v) (plus X---v b-v)) (le (minus a-v c-v) (plus (minus (minus a-v b-v) c-v) b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus b-v (minus a-v (plus c-v b-v))) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v c-v) X---v) (le (minus a-v c-v) (plus (minus (minus a-v b-v) c-v) b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus b-v (minus (minus a-v b-v) c-v)) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v c-v) (plus b-v (minus a-v (plus c-v b-v)))) (le (minus a-v c-v) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (minus (minus a-v b-v) c-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus a-v c-v) (plus b-v X---v)) (le (minus a-v c-v) (plus b-v (minus (minus a-v b-v) c-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus a-v c-v) (plus b-v (minus (minus a-v b-v) c-v)))) (minus a-v (plus c-v b-v)) (matita-basics-logic.rewrite-l lzero lzero nat (plus b-v c-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus (minus a-v b-v) c-v) (minus a-v X---v)) (minus-plus a-v b-v c-v) (plus c-v b-v) (commutative-plus b-v c-v))) (plus (minus (minus a-v b-v) c-v) b-v) (commutative-plus (minus (minus a-v b-v) c-v) b-v)) (plus (minus a-v (plus c-v b-v)) b-v) (commutative-plus (minus a-v (plus c-v b-v)) b-v)) (minus (minus a-v c-v) b-v) (minus-plus a-v c-v b-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat (minus (minus a-v b-v) c-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le (minus (minus a-v c-v) b-v) X---v) (le (minus (minus a-v c-v) b-v) (minus (minus a-v b-v) c-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (minus (minus a-v c-v) b-v) (minus (minus a-v b-v) c-v))) (minus (plus (minus (minus a-v b-v) c-v) b-v) b-v) (minus-plus-m-m (minus (minus a-v b-v) c-v) b-v)))

minus-le-minus-minus-comm : (b-v : nat) -> (c-v : nat) -> (a-v : nat) -> (X---v : le c-v b-v) -> matita-basics-logic.eq lzero nat (minus a-v (minus b-v c-v)) (minus (plus a-v c-v) b-v)
minus-le-minus-minus-comm = λ (b-v : nat) -> λ (c-v : nat) -> λ (a-v : nat) -> λ (H-v : le c-v b-v) -> matita-basics-logic.eq-ind-r lzero lzero nat (plus (minus b-v c-v) c-v) (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v (plus (minus b-v c-v) c-v)) -> matita-basics-logic.eq lzero nat (minus a-v (minus b-v c-v)) (minus (plus a-v c-v) x-v)) (matita-basics-logic.rewrite-r lzero lzero nat (plus c-v a-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus a-v (minus b-v c-v)) (minus X---v (plus (minus b-v c-v) c-v))) (matita-basics-logic.rewrite-r lzero lzero nat (plus c-v (minus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus a-v (minus b-v c-v)) (minus (plus c-v a-v) X---v)) (matita-basics-logic.rewrite-l lzero lzero nat (minus (minus (plus c-v a-v) c-v) (minus b-v c-v)) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus a-v (minus b-v c-v)) X---v) (matita-basics-logic.rewrite-r lzero lzero nat (minus (plus c-v a-v) c-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus X---v (minus b-v c-v)) (minus (minus (plus c-v a-v) c-v) (minus b-v c-v))) (matita-basics-logic.refl lzero nat (minus (minus (plus c-v a-v) c-v) (minus b-v c-v))) a-v (matita-basics-logic.rewrite-l lzero lzero nat (plus a-v c-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat a-v (minus X---v c-v)) (minus-plus-m-m a-v c-v) (plus c-v a-v) (commutative-plus a-v c-v))) (minus (plus c-v a-v) (plus c-v (minus b-v c-v))) (minus-plus (plus c-v a-v) c-v (minus b-v c-v))) (plus (minus b-v c-v) c-v) (commutative-plus (minus b-v c-v) c-v)) (plus a-v c-v) (commutative-plus a-v c-v)) b-v (plus-minus-m-m b-v c-v H-v)

minus-minus-m-m : (m-v : nat) -> (n-v : nat) -> (X---v : le n-v m-v) -> matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) n-v
minus-minus-m-m = λ (m-v : nat) -> λ (n-v : nat) -> λ (auto-v : le n-v m-v) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) (minus (plus m-v n-v) m-v)) (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) n-v) (minus-le-minus-minus-comm m-v n-v m-v auto-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus n-v m-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) (minus X---v m-v)) (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat n-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) X---v) (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus m-v (minus m-v n-v)) n-v)) (minus (plus n-v m-v) m-v) (minus-plus-m-m n-v m-v)) (plus m-v n-v) (commutative-plus m-v n-v))

minus-plus-plus-l : (x-v : nat) -> (y-v : nat) -> (h-v : nat) -> matita-basics-logic.eq lzero nat (minus (plus x-v h-v) (plus y-v h-v)) (minus x-v y-v)
minus-plus-plus-l = λ (x-v : nat) -> λ (y-v : nat) -> λ (h-v : nat) -> matita-basics-logic.rewrite-l lzero lzero nat (minus (minus (plus x-v h-v) y-v) h-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (minus x-v y-v)) (matita-basics-logic.rewrite-r lzero lzero nat (minus x-v y-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (minus x-v y-v)) (matita-basics-logic.refl lzero nat (minus x-v y-v)) (minus (minus (plus x-v h-v) y-v) h-v) (matita-basics-logic.rewrite-r lzero lzero nat (minus (plus x-v h-v) h-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus (minus (plus x-v h-v) y-v) h-v) (minus X---v y-v)) (minus-minus-comm (plus x-v h-v) y-v h-v) x-v (minus-plus-m-m x-v h-v))) (minus (plus x-v h-v) (plus y-v h-v)) (minus-plus (plus x-v h-v) y-v h-v)

plus-minus-plus-plus-l : (z-v : nat) -> (x-v : nat) -> (y-v : nat) -> (h-v : nat) -> matita-basics-logic.eq lzero nat (minus (plus z-v (plus x-v h-v)) (plus y-v h-v)) (minus (plus z-v x-v) y-v)
plus-minus-plus-plus-l = λ (z-v : nat) -> λ (x-v : nat) -> λ (y-v : nat) -> λ (h-v : nat) -> matita-basics-logic.rewrite-r lzero lzero nat (minus (plus z-v x-v) y-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat X---v (minus (plus z-v x-v) y-v)) (matita-basics-logic.refl lzero nat (minus (plus z-v x-v) y-v)) (minus (plus z-v (plus x-v h-v)) (plus y-v h-v)) (matita-basics-logic.rewrite-l lzero lzero nat (plus (plus z-v x-v) h-v) (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (minus X---v (plus y-v h-v)) (minus (plus z-v x-v) y-v)) (minus-plus-plus-l (plus z-v x-v) y-v h-v) (plus z-v (plus x-v h-v)) (associative-plus z-v x-v h-v))

minus-plus-minus-l : (x-v : nat) -> (y-v : nat) -> (z-v : nat) -> (X---v : le y-v z-v) -> matita-basics-logic.eq lzero nat (minus (plus z-v x-v) (minus z-v y-v)) (plus x-v y-v)
minus-plus-minus-l = λ (x-v : nat) -> λ (y-v : nat) -> λ (z-v : nat) -> λ (auto-v : le y-v z-v) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero nat (minus (plus x-v z-v) (minus z-v y-v)) (plus (minus (plus x-v z-v) z-v) y-v)) (matita-basics-logic.eq lzero nat (minus (plus z-v x-v) (minus z-v y-v)) (plus x-v y-v)) (minus-minus-associative (plus x-v z-v) z-v y-v auto-v (matita-basics-logic.eq-coerc lzero (le z-v (plus z-v x-v)) (le z-v (plus x-v z-v)) (le-plus-n-r x-v z-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v z-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le z-v X---v) (le z-v (plus x-v z-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le z-v (plus x-v z-v))) (plus z-v x-v) (commutative-plus z-v x-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (plus x-v z-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (plus x-v z-v) (minus z-v y-v)) (plus (minus (plus x-v z-v) z-v) y-v)) (matita-basics-logic.eq lzero nat (minus X---v (minus z-v y-v)) (plus x-v y-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) nat x-v (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (plus x-v z-v) (minus z-v y-v)) (plus X---v y-v)) (matita-basics-logic.eq lzero nat (minus (plus x-v z-v) (minus z-v y-v)) (plus x-v y-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero nat (minus (plus x-v z-v) (minus z-v y-v)) (plus x-v y-v))) (minus (plus x-v z-v) z-v) (minus-plus-m-m x-v z-v)) (plus z-v x-v) (commutative-plus z-v x-v))

le-fwd-plus-plus-ge : (m1-v : nat) -> (m2-v : nat) -> (X---v : le m2-v m1-v) -> (n1-v : nat) -> (n2-v : nat) -> (X--1-v : le (plus m1-v n1-v) (plus m2-v n2-v)) -> le n1-v n2-v
le-fwd-plus-plus-ge = λ (m1-v : nat) -> λ (m2-v : nat) -> λ (H-v : le m2-v m1-v) -> λ (n1-v : nat) -> λ (n2-v : nat) -> matita-basics-logic.eq-ind-r lzero lzero nat (plus n1-v m1-v) (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v (plus n1-v m1-v)) -> (X--1-v : le x-v (plus m2-v n2-v)) -> le n1-v n2-v) (λ (H0-v : le (plus n1-v m1-v) (plus m2-v n2-v)) -> matita-basics-logic.And-ind lzero lzero lzero (le n1-v (minus (plus m2-v n2-v) m1-v)) (le m1-v (plus m2-v n2-v)) (λ (X-x-118-v : matita-basics-logic.And lzero lzero (le n1-v (minus (plus m2-v n2-v) m1-v)) (le m1-v (plus m2-v n2-v))) -> le n1-v n2-v) (matita-basics-logic.eq-ind-r lzero lzero nat (plus n2-v m2-v) (λ (x-v : nat) -> λ (X---v : matita-basics-logic.eq lzero nat x-v (plus n2-v m2-v)) -> (X-x-120-v : le n1-v (minus x-v m1-v)) -> (X-x-119-v : le m1-v x-v) -> le n1-v n2-v) (matita-basics-logic.eq-ind lzero lzero nat (minus n2-v (minus m1-v m2-v)) (λ (x-1-v : nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero nat (minus n2-v (minus m1-v m2-v)) x-1-v) -> (X-x-120-v : le n1-v x-1-v) -> (X-x-119-v : le m1-v (plus n2-v m2-v)) -> le n1-v n2-v) (λ (H1-v : le n1-v (minus n2-v (minus m1-v m2-v))) -> λ (X---v : le m1-v (plus n2-v m2-v)) -> transitive-le n1-v (minus n2-v (minus m1-v m2-v)) n2-v H1-v (minus-le n2-v (minus m1-v m2-v))) (minus (plus n2-v m2-v) m1-v) (minus-le-minus-minus-comm m1-v m2-v n2-v H-v)) (plus m2-v n2-v) (commutative-plus m2-v n2-v)) (le-inv-plus-l n1-v m1-v (plus m2-v n2-v) H0-v)) (plus m1-v n1-v) (commutative-plus m1-v n1-v)

eqb : (X---v : nat) -> (X--1-v : nat) -> matita-basics-bool.bool
eqb O y = match-nat lzero (λ (X--1-v : nat) -> matita-basics-bool.bool) matita-basics-bool.true (λ (q-v : nat) -> matita-basics-bool.false) y
eqb (S x) y = match-nat lzero (λ (X--1-v : nat) -> matita-basics-bool.bool) matita-basics-bool.false (λ (q-v : nat) -> eqb x q-v) y


eqb-elim : (l28-v : Level) -> (n-v : nat) -> (m-v : nat) -> (P-v : (X---v : matita-basics-bool.bool) -> Set l28-v) -> (X---v : (X---v : matita-basics-logic.eq lzero nat n-v m-v) -> P-v matita-basics-bool.true) -> (X--1-v : (X--1-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> P-v matita-basics-bool.false) -> P-v (eqb n-v m-v)
eqb-elim = λ (l28-v : Level) -> nat-elim2 ((lsuc lzero) ⊔ (lsuc l28-v)) (λ (X---v : nat) -> λ (X-0-v : nat) -> (P-v : (X--1-v : matita-basics-bool.bool) -> Set l28-v) -> (X--1-v : (X--1-v : matita-basics-logic.eq lzero nat X---v X-0-v) -> P-v matita-basics-bool.true) -> (X--2-v : (X--2-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat X---v X-0-v)) -> P-v matita-basics-bool.false) -> P-v (eqb X---v X-0-v)) (λ (n-v : nat) -> match-nat ((lsuc lzero) ⊔ (lsuc l28-v)) (λ (X---v : nat) -> (P-v : (X--1-v : matita-basics-bool.bool) -> Set l28-v) -> (X--1-v : (X--1-v : matita-basics-logic.eq lzero nat O X---v) -> P-v matita-basics-bool.true) -> (X--2-v : (X--2-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat O X---v)) -> P-v matita-basics-bool.false) -> P-v (eqb O X---v)) (λ (P-v : (X---v : matita-basics-bool.bool) -> Set l28-v) -> λ (auto-v : (X---v : matita-basics-logic.eq lzero nat O O) -> P-v matita-basics-bool.true) -> λ (auto'-v : (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat O O)) -> P-v matita-basics-bool.false) -> auto-v (matita-basics-logic.refl lzero nat O)) (λ (auto-v : nat) -> λ (P-v : (X---v : matita-basics-bool.bool) -> Set l28-v) -> λ (auto'-v : (X---v : matita-basics-logic.eq lzero nat O (S auto-v)) -> P-v matita-basics-bool.true) -> λ (auto''-v : (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat O (S auto-v))) -> P-v matita-basics-bool.false) -> auto''-v (not-eq-O-S auto-v)) n-v) (λ (n-v : nat) -> λ (P-v : (X---v : matita-basics-bool.bool) -> Set l28-v) -> λ (auto-v : (X---v : matita-basics-logic.eq lzero nat (S n-v) O) -> P-v matita-basics-bool.true) -> λ (auto'-v : (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat (S n-v) O)) -> P-v matita-basics-bool.false) -> auto'-v (matita-basics-logic.sym-not-eq lzero nat O (S n-v) (not-eq-O-S n-v))) (λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : (P-v : (X---v : matita-basics-bool.bool) -> Set l28-v) -> (X---v : (X---v : matita-basics-logic.eq lzero nat n-v m-v) -> P-v matita-basics-bool.true) -> (X--1-v : (X--1-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> P-v matita-basics-bool.false) -> P-v (eqb n-v m-v)) -> λ (P-v : (X---v : matita-basics-bool.bool) -> Set l28-v) -> λ (auto'-v : (X---v : matita-basics-logic.eq lzero nat (S n-v) (S m-v)) -> P-v matita-basics-bool.true) -> λ (auto''-v : (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat (S n-v) (S m-v))) -> P-v matita-basics-bool.false) -> auto-v P-v (λ (auto'''-v : matita-basics-logic.eq lzero nat n-v m-v) -> auto'-v (matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat (S n-v) (S X---v)) (matita-basics-logic.refl lzero nat (S n-v)) m-v auto'''-v)) (λ (auto'''-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> auto''-v (not-eq-S n-v m-v auto'''-v)))

eqb-n-n : (n-v : nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (eqb n-v n-v) matita-basics-bool.true
eqb-n-n = λ (n-v : nat) -> nat-ind lzero (λ (X-x-365-v : nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (eqb X-x-365-v X-x-365-v) matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (λ (x-366-v : nat) -> λ (X-x-368-v : matita-basics-logic.eq lzero matita-basics-bool.bool (eqb x-366-v x-366-v) matita-basics-bool.true) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (eqb x-366-v x-366-v) X-x-368-v) n-v

eqb-true-to-eq : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (eqb n-v m-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero nat n-v m-v
eqb-true-to-eq = λ (n-v : nat) -> λ (m-v : nat) -> eqb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) -> matita-basics-logic.eq lzero nat n-v m-v) (λ (auto-v : matita-basics-logic.eq lzero nat n-v m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.true) -> matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.refl lzero nat n-v) m-v auto-v) (λ (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> λ (abs-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.true) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X--1-v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X--1-v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false abs-v) matita-basics-bool.not-eq-true-false))

eqb-false-to-not-eq : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (eqb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)
eqb-false-to-not-eq = λ (n-v : nat) -> λ (m-v : nat) -> eqb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) (λ (auto-v : matita-basics-logic.eq lzero nat n-v m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) -> matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (λ (auto''-v : matita-basics-logic.eq lzero nat n-v m-v) -> matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X---v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false auto'-v) matita-basics-bool.not-eq-true-false) (λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.false) -> auto-v)

eq-to-eqb-true : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.eq lzero nat n-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (eqb n-v m-v) matita-basics-bool.true
eq-to-eqb-true = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : matita-basics-logic.eq lzero nat n-v m-v) -> matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (eqb n-v X---v) matita-basics-bool.true) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (eqb n-v n-v) (eqb-n-n n-v)) m-v auto-v

not-eq-to-eqb-false : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (eqb n-v m-v) matita-basics-bool.false
not-eq-to-eqb-false = λ (n-v : nat) -> λ (m-v : nat) -> λ (noteq-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> eqb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (λ (Heq-v : matita-basics-logic.eq lzero nat n-v m-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero nat n-v m-v) (matita-basics-logic.rewrite-l lzero lzero nat n-v (λ (X---v : nat) -> matita-basics-logic.eq lzero nat n-v X---v) (matita-basics-logic.refl lzero nat n-v) m-v Heq-v) noteq-v)) (λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero nat n-v m-v)) -> matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false)


leb : (X---v : nat) -> (X--1-v : nat) -> matita-basics-bool.bool
leb O _ = matita-basics-bool.true
leb (S x) y = match-nat lzero (λ (X--1-v : nat) -> matita-basics-bool.bool) matita-basics-bool.false (λ (q-v : nat) -> leb x q-v) y

leb-elim : (l22-v : Level) -> (n-v : nat) -> (m-v : nat) -> (P-v : (X---v : matita-basics-bool.bool) -> Set l22-v) -> (X---v : (X---v : le n-v m-v) -> P-v matita-basics-bool.true) -> (X--1-v : (X--1-v : matita-basics-logic.Not lzero (le n-v m-v)) -> P-v matita-basics-bool.false) -> P-v (leb n-v m-v)
leb-elim = λ (l22-v : Level) -> nat-elim2 ((lsuc lzero) ⊔ (lsuc l22-v)) (λ (X---v : nat) -> λ (X-0-v : nat) -> (P-v : (X--1-v : matita-basics-bool.bool) -> Set l22-v) -> (X--1-v : (X--1-v : le X---v X-0-v) -> P-v matita-basics-bool.true) -> (X--2-v : (X--2-v : matita-basics-logic.Not lzero (le X---v X-0-v)) -> P-v matita-basics-bool.false) -> P-v (leb X---v X-0-v)) (λ (n-v : nat) -> λ (P-v : (X---v : matita-basics-bool.bool) -> Set l22-v) -> λ (auto-v : (X---v : le O n-v) -> P-v matita-basics-bool.true) -> λ (auto'-v : (X---v : matita-basics-logic.Not lzero (le O n-v)) -> P-v matita-basics-bool.false) -> auto-v (le-O-n n-v)) (λ (n-v : nat) -> λ (P-v : (X---v : matita-basics-bool.bool) -> Set l22-v) -> λ (auto-v : (X---v : le (S n-v) O) -> P-v matita-basics-bool.true) -> λ (auto'-v : (X---v : matita-basics-logic.Not lzero (le (S n-v) O)) -> P-v matita-basics-bool.false) -> auto'-v (not-le-Sn-O n-v)) (λ (n-v : nat) -> λ (m-v : nat) -> λ (Hind-v : (P-v : (X---v : matita-basics-bool.bool) -> Set l22-v) -> (X---v : (X---v : le n-v m-v) -> P-v matita-basics-bool.true) -> (X--1-v : (X--1-v : matita-basics-logic.Not lzero (le n-v m-v)) -> P-v matita-basics-bool.false) -> P-v (leb n-v m-v)) -> λ (P-v : (X---v : matita-basics-bool.bool) -> Set l22-v) -> λ (Pt-v : (X---v : le (S n-v) (S m-v)) -> P-v matita-basics-bool.true) -> λ (Pf-v : (X---v : matita-basics-logic.Not lzero (le (S n-v) (S m-v))) -> P-v matita-basics-bool.false) -> Hind-v P-v (λ (lenm-v : le n-v m-v) -> Pt-v (le-S-S n-v m-v lenm-v)) (λ (nlenm-v : matita-basics-logic.Not lzero (le n-v m-v)) -> Pf-v (not-le-to-not-le-S-S n-v m-v nlenm-v)))

leb-true-to-le : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (leb n-v m-v) matita-basics-bool.true) -> le n-v m-v
leb-true-to-le = λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) -> le n-v m-v) (λ (auto-v : le n-v m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.true) -> auto-v) (λ (X---v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (abs-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.true) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> le n-v m-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X--1-v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X--1-v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false abs-v) matita-basics-bool.not-eq-true-false))

leb-false-to-not-le : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (leb n-v m-v) matita-basics-bool.false) -> matita-basics-logic.Not lzero (le n-v m-v)
leb-false-to-not-le = λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) -> matita-basics-logic.Not lzero (le n-v m-v)) (λ (X---v : le n-v m-v) -> λ (abs-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.Not lzero (le n-v m-v)) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X--1-v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X--1-v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false abs-v) matita-basics-bool.not-eq-true-false)) (λ (auto-v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.false) -> auto-v)

le-to-leb-true : (n-v : nat) -> (m-v : nat) -> (X---v : le n-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (leb n-v m-v) matita-basics-bool.true
le-to-leb-true = λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : le n-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (λ (auto-v : le n-v m-v) -> λ (auto'-v : le n-v m-v) -> matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (λ (H-v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (H1-v : le n-v m-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.true) (matita-basics-logic.absurd lzero (le n-v m-v) H1-v H-v))

not-le-to-leb-false : (n-v : nat) -> (m-v : nat) -> (X---v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (leb n-v m-v) matita-basics-bool.false
not-le-to-leb-false = λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (λ (H-v : le n-v m-v) -> λ (H1-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.absurd lzero (le n-v m-v) H-v H1-v)) (λ (auto-v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (auto'-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false)

lt-to-leb-false : (n-v : nat) -> (m-v : nat) -> (X---v : lt m-v n-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (leb n-v m-v) matita-basics-bool.false
lt-to-leb-false = λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : lt m-v n-v) -> not-le-to-leb-false n-v m-v (lt-to-not-le m-v n-v auto-v)

min : (X---v : nat) -> (X--1-v : nat) -> nat
min = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> nat) n-v m-v (leb n-v m-v)

max : (X---v : nat) -> (X--1-v : nat) -> nat
max = λ (n-v : nat) -> λ (m-v : nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> nat) m-v n-v (leb n-v m-v)

commutative-min : matita-basics-relations.commutative lzero nat min
commutative-min = λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v X---v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v (leb m-v n-v))) (leb-elim lzero m-v n-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : le n-v m-v) -> matita-basics-logic.eq lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v matita-basics-bool.true) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v X---v)) (λ (auto-v : le m-v n-v) -> λ (auto'-v : le n-v m-v) -> le-to-le-to-eq n-v m-v auto'-v auto-v) (λ (auto-v : matita-basics-logic.Not lzero (le m-v n-v)) -> λ (auto'-v : le n-v m-v) -> matita-basics-logic.refl lzero nat n-v)) (λ (notle-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v matita-basics-bool.false) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v x-v)) (matita-basics-logic.refl lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v matita-basics-bool.false)) (leb m-v n-v) (le-to-leb-true m-v n-v (transitive-le m-v (S m-v) n-v (le-n-Sn m-v) (not-le-to-lt n-v m-v notle-v))))

le-minr : (i-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le i-v (min n-v m-v)) -> le i-v m-v
le-minr = λ (i-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : le i-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v X---v)) -> le i-v m-v) (λ (auto-v : le n-v m-v) -> λ (auto'-v : le i-v n-v) -> transitive-le i-v n-v m-v auto'-v auto-v) (λ (auto-v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (auto'-v : le i-v m-v) -> auto'-v)

le-minl : (i-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le i-v (min n-v m-v)) -> le i-v n-v
le-minl = λ (i-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le i-v (min n-v m-v)) -> le-minr i-v m-v n-v (matita-basics-logic.eq-coerc lzero (le i-v (min n-v m-v)) (le i-v (min m-v n-v)) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (min m-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le i-v X---v) (le i-v (min m-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le i-v (min m-v n-v))) (min n-v m-v) (commutative-min n-v m-v)))

to-min : (i-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le i-v n-v) -> (X--1-v : le i-v m-v) -> le i-v (min n-v m-v)
to-min = λ (i-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (lein-v : le i-v n-v) -> λ (leim-v : le i-v m-v) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> le i-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v X---v)) lein-v leim-v (leb n-v m-v)

commutative-max : matita-basics-relations.commutative lzero nat max
commutative-max = λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v X---v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v (leb m-v n-v))) (leb-elim lzero m-v n-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : le n-v m-v) -> matita-basics-logic.eq lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v matita-basics-bool.true) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v X---v)) (λ (auto-v : le m-v n-v) -> λ (auto'-v : le n-v m-v) -> le-to-le-to-eq m-v n-v auto-v auto'-v) (λ (auto-v : matita-basics-logic.Not lzero (le m-v n-v)) -> λ (auto'-v : le n-v m-v) -> matita-basics-logic.refl lzero nat m-v)) (λ (notle-v : matita-basics-logic.Not lzero (le n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v matita-basics-bool.false) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) n-v m-v x-v)) (matita-basics-logic.refl lzero nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v matita-basics-bool.false)) (leb m-v n-v) (le-to-leb-true m-v n-v (transitive-le m-v (S m-v) n-v (le-n-Sn m-v) (not-le-to-lt n-v m-v notle-v))))

le-maxl : (i-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le (max n-v m-v) i-v) -> le n-v i-v
le-maxl = λ (i-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : le (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v X---v) i-v) -> le n-v i-v) (λ (auto-v : le n-v m-v) -> λ (auto'-v : le m-v i-v) -> transitive-le n-v m-v i-v auto-v auto'-v) (λ (auto-v : matita-basics-logic.Not lzero (le n-v m-v)) -> λ (auto'-v : le n-v i-v) -> auto'-v)

le-maxr : (i-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le (max n-v m-v) i-v) -> le m-v i-v
le-maxr = λ (i-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (auto-v : le (max n-v m-v) i-v) -> le-maxl i-v m-v n-v (matita-basics-logic.eq-coerc lzero (le (max n-v m-v) i-v) (le (max m-v n-v) i-v) auto-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) nat (max m-v n-v) (λ (X---v : nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (le X---v i-v) (le (max m-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (le (max m-v n-v) i-v)) (max n-v m-v) (commutative-max n-v m-v)))

to-max : (i-v : nat) -> (n-v : nat) -> (m-v : nat) -> (X---v : le n-v i-v) -> (X--1-v : le m-v i-v) -> le (max n-v m-v) i-v
to-max = λ (i-v : nat) -> λ (n-v : nat) -> λ (m-v : nat) -> λ (leni-v : le n-v i-v) -> λ (lemi-v : le m-v i-v) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> le (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> nat) m-v n-v X---v) i-v) lemi-v leni-v (leb n-v m-v)


