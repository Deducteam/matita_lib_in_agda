
open import Agda.Primitive
import matita-basics-types
import matita-arithmetics-div-and-mod
import matita-basics-bool
import matita-basics-relations
import matita-basics-logic
import matita-arithmetics-nat
sameF-upto : (l17-v : Level) -> (X---v : matita-arithmetics-nat.nat) -> (A-v : Set l17-v) -> matita-basics-relations.relation l17-v l17-v ((X--1-v : matita-arithmetics-nat.nat) -> A-v)
sameF-upto = λ (l17-v : Level) -> λ (k-v : matita-arithmetics-nat.nat) -> λ (A-v : Set l17-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v k-v) -> matita-basics-logic.eq l17-v A-v (f-v i-v) (g-v i-v)

sameF-p : (l24-v : Level) -> (X---v : matita-arithmetics-nat.nat) -> (X--1-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (A-v : Set l24-v) -> matita-basics-relations.relation l24-v l24-v ((X--2-v : matita-arithmetics-nat.nat) -> A-v)
sameF-p = λ (l24-v : Level) -> λ (k-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (A-v : Set l24-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v k-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq l24-v A-v (f-v i-v) (g-v i-v)

sameF-upto-le : (l15-v : Level) -> (A-v : Set l15-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (g-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v m-v) -> (X--1-v : sameF-upto l15-v m-v A-v f-v g-v) -> sameF-upto l15-v n-v A-v f-v g-v
sameF-upto-le = λ (l15-v : Level) -> λ (A-v : Set l15-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (samef-v : sameF-upto l15-v m-v A-v f-v g-v) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (ltin-v : matita-arithmetics-nat.lt i-v n-v) -> samef-v i-v (matita-arithmetics-nat.lt-to-le-to-lt i-v n-v m-v ltin-v lenm-v)

sameF-p-le : (l24-v : Level) -> (A-v : Set l24-v) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (g-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v m-v) -> (X--1-v : sameF-p l24-v m-v p-v A-v f-v g-v) -> sameF-p l24-v n-v p-v A-v f-v g-v
sameF-p-le = λ (l24-v : Level) -> λ (A-v : Set l24-v) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (samef-v : sameF-p l24-v m-v p-v A-v f-v g-v) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (ltin-v : matita-arithmetics-nat.lt i-v n-v) -> λ (pi-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> samef-v i-v (matita-arithmetics-nat.lt-to-le-to-lt i-v n-v m-v ltin-v lenm-v) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v i-v) pi-v)

prodF : (l9-v l8-v : Level) -> (A-v : Set l9-v) -> (B-v : Set l8-v) -> (X-f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (X-g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-x-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l9-v l8-v A-v B-v
prodF = λ (l9-v l8-v : Level) -> λ (A-v : Set l9-v) -> λ (B-v : Set l8-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-types.mk-Prod l9-v l8-v A-v B-v (f-v (matita-arithmetics-div-and-mod.div x-v m-v)) (g-v (matita-arithmetics-div-and-mod.mod x-v m-v))

bigop : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (H-v : Set (lzero)) -> (X--2-v : H-v) -> (X--3-v : (X--3-v : H-v) -> (X--4-v : H-v) -> H-v) -> (X--4-v : (X--4-v : matita-arithmetics-nat.nat) -> H-v) -> H-v
bigop matita-arithmetics-nat.O p B nil op f = nil
bigop (matita-arithmetics-nat.S k) p B nil op f = matita-basics-bool.match-bool lzero (λ (X--1-v : matita-basics-bool.bool) -> B) (op (f k) (bigop k p B nil op f)) (bigop k p B nil op f) (p k)


bigop-Strue : (k-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S k-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op-v (f-v k-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))
bigop-Strue = λ (k-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v k-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (op-v (f-v k-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (matita-basics-logic.refl lzero B-v (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (op-v (f-v k-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) matita-basics-bool.true)) (p-v k-v) H-v

bigop-Sfalse : (k-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k-v) matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S k-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))
bigop-Sfalse = λ (k-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v k-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (matita-basics-logic.refl lzero B-v (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (op-v (f-v k-v) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) matita-basics-bool.false)) (p-v k-v) H-v

same-bigop : (k-v : matita-arithmetics-nat.nat) -> (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : sameF-upto lzero k-v matita-basics-bool.bool p1-v p2-v) -> (X--1-v : sameF-p lzero k-v p1-v B-v f-v g-v) -> matita-basics-logic.eq lzero B-v (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))
same-bigop = λ (k-v : matita-arithmetics-nat.nat) -> λ (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (X---v : sameF-upto lzero X-x-365-v matita-basics-bool.bool p1-v p2-v) -> (X--1-v : sameF-p lzero X-x-365-v p1-v B-v f-v g-v) -> matita-basics-logic.eq lzero B-v (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (λ (auto-v : sameF-upto lzero matita-arithmetics-nat.O matita-basics-bool.bool p1-v p2-v) -> λ (auto'-v : sameF-p lzero matita-arithmetics-nat.O p1-v B-v f-v g-v) -> matita-basics-logic.refl lzero B-v (bigop matita-arithmetics-nat.O (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (n-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (X---v : sameF-upto lzero n-v matita-basics-bool.bool p1-v p2-v) -> (X--1-v : sameF-p lzero n-v p1-v B-v f-v g-v) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) -> λ (samep-v : sameF-upto lzero (matita-arithmetics-nat.S n-v) matita-basics-bool.bool p1-v p2-v) -> λ (samef-v : sameF-p lzero (matita-arithmetics-nat.S n-v) p1-v B-v f-v g-v) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v n-v) x-v) x-v (p1-v n-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (g-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (p2-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-basics-bool.bool (p1-v n-v) (λ (x-1-v : matita-basics-bool.bool) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) x-1-v) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (op-v (f-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (p1-v n-v)) (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (op-v (g-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) x-1-v)) (matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (p1-v n-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (g-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (p1-v n-v))) (λ (H1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) x-v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (g-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) x-v)) (matita-basics-logic.eq-ind lzero lzero B-v (f-v n-v) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (f-v n-v) x-1-v) -> matita-basics-logic.eq lzero B-v (op-v (f-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (op-v x-1-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (matita-basics-logic.refl lzero B-v (op-v (f-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (g-v n-v) (samef-v n-v (matita-arithmetics-nat.le-n (matita-arithmetics-nat.S n-v)) H1-v)) (p1-v n-v) H1-v) (λ (H1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) x-v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (g-v n-v) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) x-v)) (matita-basics-logic.refl lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (p1-v n-v) H1-v) (matita-basics-bool.true-or-false (p1-v n-v))) (p2-v n-v) (samep-v n-v (matita-arithmetics-nat.le-n (matita-arithmetics-nat.S n-v)))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (Hind-v (sameF-upto-le lzero matita-basics-bool.bool p1-v p2-v n-v (matita-arithmetics-nat.S n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.le-pred-n (matita-arithmetics-nat.S n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S n-v))) (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.pred-Sn n-v))) samep-v) (sameF-p-le lzero B-v p1-v f-v g-v n-v (matita-arithmetics-nat.S n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.le-pred-n (matita-arithmetics-nat.S n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S n-v))) (matita-arithmetics-nat.pred (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.pred-Sn n-v))) samef-v))) k-v

pad-bigop : (k-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le n-v k-v) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))
pad-bigop = λ (k-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (lenk-v : matita-arithmetics-nat.le n-v k-v) -> matita-arithmetics-nat.le-ind lzero n-v (λ (x-417-v : matita-arithmetics-nat.nat) -> λ (X-x-418-v : matita-arithmetics-nat.le n-v x-417-v) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop x-417-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (same-bigop n-v p-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v X---v) (matita-arithmetics-nat.leb n-v X---v)) B-v nil-v op-v f-v f-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) x-v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (p-v i-v)) (matita-arithmetics-nat.leb n-v i-v) (matita-arithmetics-nat.not-le-to-leb-false n-v i-v (matita-arithmetics-nat.lt-to-not-le i-v n-v lti-v))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v i-v))) (λ (j-v : matita-arithmetics-nat.nat) -> λ (leup-v : matita-arithmetics-nat.le n-v j-v) -> λ (Hind-v : matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (matita-basics-logic.rewrite-l lzero lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) X---v) (matita-basics-logic.refl lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) Hind-v) (matita-arithmetics-nat.leb n-v j-v) (matita-arithmetics-nat.le-to-leb-true n-v j-v leup-v)) (bigop (matita-arithmetics-nat.S j-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v i-v) (matita-arithmetics-nat.leb n-v i-v)) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse j-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v X---v) (matita-arithmetics-nat.leb n-v X---v)) B-v nil-v op-v f-v (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v j-v) x-v) matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p-v j-v) matita-basics-bool.true)) (matita-arithmetics-nat.leb n-v j-v) (matita-arithmetics-nat.le-to-leb-true n-v j-v leup-v)))) k-v lenk-v

let-clause-1047 : (k-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (lenk-v : matita-arithmetics-nat.le n-v k-v) -> (j-v : matita-arithmetics-nat.nat) -> (leup-v : matita-arithmetics-nat.le n-v j-v) -> (Hind-v : (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v j-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> (Hfalse-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S j-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> (x2571-v : matita-arithmetics-nat.nat) -> (x2572-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2571-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x2572-v (matita-arithmetics-div-and-mod.div x2571-v x2572-v)) (matita-arithmetics-div-and-mod.mod x2571-v x2572-v))
let-clause-1047 = λ (k-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (lenk-v : matita-arithmetics-nat.le n-v k-v) -> λ (j-v : matita-arithmetics-nat.nat) -> λ (leup-v : matita-arithmetics-nat.le n-v j-v) -> λ (Hind-v : (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v j-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> λ (Hfalse-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S j-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> λ (x2571-v : matita-arithmetics-nat.nat) -> λ (x2572-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div x2571-v x2572-v) x2572-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2571-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod x2571-v x2572-v))) (matita-arithmetics-div-and-mod.div-mod x2571-v x2572-v) (matita-arithmetics-nat.times x2572-v (matita-arithmetics-div-and-mod.div x2571-v x2572-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div x2571-v x2572-v) x2572-v)

pad-bigop1 : (k-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le n-v k-v) -> (X--1-v : (i-v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.le n-v i-v) -> (X--2-v : matita-arithmetics-nat.lt i-v k-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))
pad-bigop1 = λ (k-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (lenk-v : matita-arithmetics-nat.le n-v k-v) -> matita-arithmetics-nat.le-ind lzero n-v (λ (x-417-v : matita-arithmetics-nat.nat) -> λ (X-x-418-v : matita-arithmetics-nat.le n-v x-417-v) -> (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v x-417-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop x-417-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> same-bigop n-v p-v p-v B-v nil-v op-v f-v f-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.refl lzero matita-basics-bool.bool (p-v i-v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v i-v))) (λ (j-v : matita-arithmetics-nat.nat) -> λ (leup-v : matita-arithmetics-nat.le n-v j-v) -> λ (Hind-v : (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v j-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> λ (Hfalse-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S j-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (Hind-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (leni-v : matita-arithmetics-nat.le n-v i-v) -> λ (ltij-v : matita-arithmetics-nat.lt i-v j-v) -> Hfalse-v i-v leni-v (matita-arithmetics-nat.le-S (matita-arithmetics-nat.S i-v) j-v ltij-v))) (bigop (matita-arithmetics-nat.S j-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse j-v p-v B-v nil-v op-v f-v (Hfalse-v j-v leup-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.lt j-v (matita-arithmetics-nat.S j-v)) (matita-arithmetics-nat.lt-plus-Sn-r (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O)) matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat j-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.lt j-v (matita-arithmetics-nat.S j-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat j-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.plus j-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.lt j-v (matita-arithmetics-nat.S j-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.S j-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt j-v X---v) (matita-arithmetics-nat.lt j-v (matita-arithmetics-nat.S j-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt j-v (matita-arithmetics-nat.S j-v))) (matita-arithmetics-nat.plus j-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus j-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.plus j-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.plus-n-Sm j-v matita-arithmetics-nat.O) j-v (matita-arithmetics-nat.plus-n-O j-v))) (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat j-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat j-v X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat j-v (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat j-v X---v) (let-clause-1047 k-v n-v p-v B-v nil-v op-v f-v lenk-v j-v leup-v Hind-v Hfalse-v j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O))) matita-arithmetics-nat.O (matita-arithmetics-nat.times-O-n (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-O-n (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O)))) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat j-v X---v) (let-clause-1047 k-v n-v p-v B-v nil-v op-v f-v lenk-v j-v leup-v Hind-v Hfalse-v j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div j-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod j-v matita-arithmetics-nat.O)))))))) k-v lenk-v

bigop-false : (n-v : matita-arithmetics-nat.nat) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) nil-v
bigop-false = λ (n-v : matita-arithmetics-nat.nat) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) nil-v) (matita-basics-logic.refl lzero B-v (bigop matita-arithmetics-nat.O (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (n1-v : matita-arithmetics-nat.nat) -> λ (Hind-v : matita-basics-logic.eq lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) nil-v) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v x-v nil-v) (matita-basics-logic.rewrite-r lzero lzero B-v nil-v (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v X---v nil-v) (matita-basics-logic.refl lzero B-v nil-v) (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) Hind-v) (bigop (matita-arithmetics-nat.S n1-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse n1-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v op-v f-v (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false))) n-v

data Aop (l1-v : Level) (A-v : Set l1-v)  (nil-v : A-v) : Set l1-v where
  mk-Aop' : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l1-v A-v (op-v nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l1-v A-v (op-v a-v nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l1-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Aop l1-v A-v nil-v

mk-Aop : (l11-v : Level) -> (A-v : Set l11-v) -> (nil-v : A-v) -> (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v a-v nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Aop l11-v A-v nil-v
mk-Aop _ _ _ = mk-Aop'

match-Aop : (l18-v : Level) -> (A-v : Set l18-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Aop l18-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l18-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l18-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l18-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> return-type-v (mk-Aop l18-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (z-v : Aop l18-v A-v X-nil-v) -> return-type-v z-v
match-Aop _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-ind : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-861-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-861-v : Aop l21-v A-v X-nil-v) -> Q--v x-861-v
Aop-ind _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type5 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type5 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type4 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type4 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type3 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type3 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type2 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type2 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type1 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type1 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type0 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type0 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

op : (l4-v : Level) -> (A-v : Set l4-v) -> (nil-v : A-v) -> (X-xxx-v : Aop l4-v A-v nil-v) -> (X-x-887-v : A-v) -> (X-x-888-v : A-v) -> A-v
op l9-v A-v nil-v X-xxx-v = match-Aop l9-v A-v nil-v l9-v (λ (xxx0-v : Aop l9-v A-v nil-v) -> (X-x-887-v : A-v) -> (X-x-888-v : A-v) -> A-v) (λ (yyy-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X---v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v (yyy-v b-v c-v)) (yyy-v (yyy-v a-v b-v) c-v)) -> yyy-v) X-xxx-v

nill : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v nil-v a-v) a-v
nill l8-v A-v nil-v xxx-v = match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx0-v nil-v a-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

nilr : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v a-v nil-v) a-v
nilr l8-v A-v nil-v xxx-v = match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx0-v a-v nil-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

assoc : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : Aop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l5-v A-v (op l5-v A-v nil-v xxx-v a-v (op l5-v A-v nil-v xxx-v b-v c-v)) (op l5-v A-v nil-v xxx-v (op l5-v A-v nil-v xxx-v a-v b-v) c-v)
assoc l17-v A-v nil-v xxx-v = match-Aop l17-v A-v nil-v l17-v (λ (xxx0-v : Aop l17-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (op l17-v A-v nil-v xxx0-v a-v (op l17-v A-v nil-v xxx0-v b-v c-v)) (op l17-v A-v nil-v xxx0-v (op l17-v A-v nil-v xxx0-v a-v b-v) c-v)) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v nil-v a-v) a-v) -> λ (X-1-v : (a-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v a-v nil-v) a-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

Aop-inv-ind : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1500-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1501-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-ind = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1500-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1501-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-ind l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-861-v : Aop l39-v x1-v x2-v) -> (X-z1501-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-861-v) -> P-v X-x-861-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type4 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1506-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1507-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type4 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1506-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1507-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type4 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-863-v : Aop l39-v x1-v x2-v) -> (X-z1507-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-863-v) -> P-v X-x-863-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type3 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1512-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1513-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type3 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1512-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1513-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type3 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-867-v : Aop l39-v x1-v x2-v) -> (X-z1513-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-867-v) -> P-v X-x-867-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type2 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1518-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1519-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type2 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1518-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1519-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type2 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-869-v : Aop l39-v x1-v x2-v) -> (X-z1519-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-869-v) -> P-v X-x-869-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type1 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1524-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1525-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type1 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1524-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1525-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type1 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-871-v : Aop l39-v x1-v x2-v) -> (X-z1525-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-871-v) -> P-v X-x-871-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type0 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1530-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1531-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type0 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1530-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1531-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type0 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-873-v : Aop l39-v x1-v x2-v) -> (X-z1531-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-873-v) -> P-v X-x-873-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-discr : (l3178-v l4236-v : Level) -> (a1-v : Set l3178-v) -> (a2-v : a1-v) -> (x-v : Aop l3178-v a1-v a2-v) -> (y-v : Aop l3178-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq l3178-v (Aop l3178-v a1-v a2-v) x-v y-v) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (t0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (t1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a2-v a-v) a-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v a2-v) a-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v (t0-v b-v c-v)) (t0-v (t0-v a-v b-v) c-v)) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (u0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (u1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) -> (P-v : Set l4236-v) -> (X-z55-v : (e0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) t1-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) y-v) x-v
Aop-discr = λ (l3178-v l4236-v : Level) -> λ (a1-v : Set l3178-v) -> λ (a2-v : a1-v) -> λ (x-v : Aop l3178-v a1-v a2-v) -> λ (y-v : Aop l3178-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq l3178-v (Aop l3178-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 l3178-v ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v)) (Aop l3178-v a1-v a2-v) x-v (λ (x-13-v : Aop l3178-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq l3178-v (Aop l3178-v a1-v a2-v) x-v x-13-v) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (t0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (t1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a2-v a-v) a-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v a2-v) a-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v (t0-v b-v c-v)) (t0-v (t0-v a-v b-v) c-v)) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (u0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (u1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) -> (P-v : Set l4236-v) -> (X-z55-v : (e0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) t1-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) x-13-v) x-v) (match-Aop l3178-v a1-v a2-v ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v)) (λ (X---v : Aop l3178-v a1-v a2-v) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X-0-v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (t0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (t1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a2-v a-v) a-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v a2-v) a-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v (t0-v b-v c-v)) (t0-v (t0-v a-v b-v) c-v)) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X-0-v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (u0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (u1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) -> (P-v : Set l4236-v) -> (X-z55-v : (e0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x01-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) t1-v (λ (x01-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (a10-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) -> λ (a20-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) -> λ (a3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v (a0-v b-v c-v)) (a0-v (a0-v a-v b-v) c-v)) -> λ (P-v : Set l4236-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v) a0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v e0-v) a10-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v a0-v e0-v a10-v e1-v) a20-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v (a0-v b-v c-v)) (a0-v (a0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) a10-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) a20-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) a3-v a0-v e0-v a10-v e1-v a20-v e2-v) a3-v) -> P-v) -> DH-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)))) (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)))))) (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v (a0-v b-v c-v)) (a0-v (a0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) a10-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) a20-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) a3-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)))) a20-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v))))))))) x-v) y-v Deq-v

dpi1--o--op : (l12-v l8-v : Level) -> (x0-v : Set l12-v) -> (x1-v : x0-v) -> (x2-v : (X---v : Aop l12-v x0-v x1-v) -> Set l8-v) -> (x3-v : matita-basics-types.DPair l12-v l8-v (Aop l12-v x0-v x1-v) x2-v) -> (X-x-887-v : x0-v) -> (X-x-888-v : x0-v) -> x0-v
dpi1--o--op = λ (l12-v l8-v : Level) -> λ (x0-v : Set l12-v) -> λ (x1-v : x0-v) -> λ (x2-v : (X---v : Aop l12-v x0-v x1-v) -> Set l8-v) -> λ (x3-v : matita-basics-types.DPair l12-v l8-v (Aop l12-v x0-v x1-v) x2-v) -> op l12-v x0-v x1-v (matita-basics-types.dpi1 l12-v l8-v (Aop l12-v x0-v x1-v) x2-v x3-v)

pad-bigop-nil : (k-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le n-v k-v) -> (X--1-v : (i-v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.le n-v i-v) -> (X--2-v : matita-arithmetics-nat.lt i-v k-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))
pad-bigop-nil = λ (k-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (lenk-v : matita-arithmetics-nat.le n-v k-v) -> matita-arithmetics-nat.le-ind lzero n-v (λ (x-417-v : matita-arithmetics-nat.nat) -> λ (X-x-418-v : matita-arithmetics-nat.le n-v x-417-v) -> (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v x-417-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop x-417-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> same-bigop n-v p-v p-v B-v nil-v (op lzero B-v nil-v op-v) f-v f-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.refl lzero matita-basics-bool.bool (p-v i-v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v i-v))) (λ (j-v : matita-arithmetics-nat.nat) -> λ (leup-v : matita-arithmetics-nat.le n-v j-v) -> λ (Hind-v : (X---v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v j-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> λ (Hfalse-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v i-v) -> (X--1-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S j-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop (matita-arithmetics-nat.S j-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (Hpj-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v op-v (f-v j-v) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (f-v j-v) (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (matita-basics-logic.eq-ind-r lzero lzero B-v nil-v (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v nil-v) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v op-v x-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (Hind-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (leni-v : matita-arithmetics-nat.le n-v i-v) -> λ (ltij-v : matita-arithmetics-nat.lt i-v j-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v i-v) auto-v)) (λ (auto-v : matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) (matita-basics-logic.rewrite-r lzero lzero B-v nil-v (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v X---v nil-v) (matita-basics-logic.refl lzero B-v nil-v) (f-v i-v) auto-v)) (Hfalse-v i-v leni-v (matita-arithmetics-nat.le-S (matita-arithmetics-nat.S i-v) j-v ltij-v)))) (op lzero B-v nil-v op-v nil-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (nill lzero B-v nil-v op-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (f-v j-v) (matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v j-v) nil-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v j-v) nil-v)) -> matita-basics-logic.eq lzero B-v (f-v j-v) nil-v) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero B-v (f-v j-v) nil-v) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) -> matita-basics-bool.bool-discr lzero matita-basics-bool.true matita-basics-bool.false H-v (matita-basics-logic.eq lzero B-v (f-v j-v) nil-v)) (p-v j-v) Hpj-v) (λ (auto-v : matita-basics-logic.eq lzero B-v (f-v j-v) nil-v) -> matita-basics-logic.rewrite-r lzero lzero B-v nil-v (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v X---v nil-v) (matita-basics-logic.refl lzero B-v nil-v) (f-v j-v) auto-v) (Hfalse-v j-v leup-v (matita-arithmetics-nat.le-n (matita-arithmetics-nat.S j-v))))) (bigop (matita-arithmetics-nat.S j-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Strue j-v p-v B-v nil-v (op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v j-v) Hpj-v))) (λ (Hpj-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v j-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop j-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (Hind-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (leni-v : matita-arithmetics-nat.le n-v i-v) -> λ (ltij-v : matita-arithmetics-nat.lt i-v j-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v i-v) auto-v)) (λ (auto-v : matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.false) (matita-basics-logic.eq lzero B-v (f-v i-v) nil-v) (matita-basics-logic.rewrite-r lzero lzero B-v nil-v (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v X---v nil-v) (matita-basics-logic.refl lzero B-v nil-v) (f-v i-v) auto-v)) (Hfalse-v i-v leni-v (matita-arithmetics-nat.le-S (matita-arithmetics-nat.S i-v) j-v ltij-v)))) (bigop (matita-arithmetics-nat.S j-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse j-v p-v B-v nil-v (op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v j-v) Hpj-v))) (matita-basics-bool.true-or-false (p-v j-v))) k-v lenk-v

bigop-sum : (k1-v : matita-arithmetics-nat.nat) -> (k2-v : matita-arithmetics-nat.nat) -> (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop k1-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop (matita-arithmetics-nat.plus k1-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i-v k2-v)) (p2-v i-v) (matita-arithmetics-nat.leb k2-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i-v k2-v)) (g-v i-v) (matita-arithmetics-nat.leb k2-v i-v)))
bigop-sum = λ (k1-v : matita-arithmetics-nat.nat) -> λ (k2-v : matita-arithmetics-nat.nat) -> λ (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop (matita-arithmetics-nat.plus X-x-365-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i-v k2-v)) (p2-v i-v) (matita-arithmetics-nat.leb k2-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i-v k2-v)) (g-v i-v) (matita-arithmetics-nat.leb k2-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) -> matita-basics-logic.eq lzero B-v x-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i-v k2-v)) (p2-v i-v) (matita-arithmetics-nat.leb k2-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i-v k2-v)) (g-v i-v) (matita-arithmetics-nat.leb k2-v i-v)))) (same-bigop k2-v p2-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus X---v k2-v)) (p2-v X---v) (matita-arithmetics-nat.leb k2-v X---v)) B-v nil-v (op lzero B-v nil-v op-v) g-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus X---v k2-v)) (g-v X---v) (matita-arithmetics-nat.leb k2-v X---v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v k2-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p2-v i-v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i-v k2-v)) (p2-v i-v) x-v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (p2-v i-v)) (matita-arithmetics-nat.leb k2-v i-v) (matita-arithmetics-nat.lt-to-leb-false k2-v i-v lti-v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v k2-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p2-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (g-v i-v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i-v k2-v)) (g-v i-v) x-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p2-v i-v) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (g-v i-v)) (matita-arithmetics-nat.leb k2-v i-v) (matita-arithmetics-nat.lt-to-leb-false k2-v i-v lti-v))) (op lzero B-v nil-v op-v nil-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (nill lzero B-v nil-v op-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (Hind-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)))) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat i-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v x-1-v) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (p1-v i-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v x-1-v) (g-v (matita-arithmetics-nat.plus i-v k2-v)) (matita-arithmetics-nat.leb k2-v (matita-arithmetics-nat.plus i-v k2-v))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v x-1-v) (p2-v (matita-arithmetics-nat.plus i-v k2-v)) (matita-arithmetics-nat.leb k2-v (matita-arithmetics-nat.plus i-v k2-v))))) (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) X---v) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v i-v) (g-v (matita-arithmetics-nat.plus i-v k2-v)) (matita-arithmetics-nat.leb k2-v (matita-arithmetics-nat.plus i-v k2-v))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) X---v (p2-v (matita-arithmetics-nat.plus i-v k2-v)) (matita-arithmetics-nat.leb k2-v (matita-arithmetics-nat.plus i-v k2-v))))) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) matita-basics-bool.true) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v i-v) (g-v (matita-arithmetics-nat.plus i-v k2-v)) x-v) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.true (p2-v (matita-arithmetics-nat.plus i-v k2-v)) x-v))) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) x-1-v) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (op lzero B-v nil-v op-v (f-v i-v) x-1-v)) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v op-v (f-v i-v) (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v)))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (f-v i-v) (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v)))) x-1-v) -> matita-basics-logic.eq lzero B-v x-1-v (op lzero B-v nil-v op-v (f-v i-v) (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))))) (matita-basics-logic.refl lzero B-v (op lzero B-v nil-v op-v (f-v i-v) (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))))) (op lzero B-v nil-v op-v (op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (assoc lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v)))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v))) Hind-v) (matita-arithmetics-nat.leb k2-v (matita-arithmetics-nat.plus i-v k2-v)) (matita-arithmetics-nat.le-to-leb-true k2-v (matita-arithmetics-nat.plus i-v k2-v) (matita-arithmetics-nat.le-plus-n i-v k2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) matita-basics-bool.false) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op lzero B-v nil-v op-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v i-v) (g-v (matita-arithmetics-nat.plus i-v k2-v)) x-v) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v))) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (p2-v (matita-arithmetics-nat.plus i-v k2-v)) x-v))) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) x-1-v) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v))) x-1-v) (matita-basics-logic.refl lzero B-v (op lzero B-v nil-v op-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> g-v i0-v)))) (bigop (matita-arithmetics-nat.plus i-v k2-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p1-v (matita-arithmetics-nat.minus i0-v k2-v)) (p2-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.minus i0-v k2-v)) (g-v i0-v) (matita-arithmetics-nat.leb k2-v i0-v))) Hind-v) (matita-arithmetics-nat.leb k2-v (matita-arithmetics-nat.plus i-v k2-v)) (matita-arithmetics-nat.le-to-leb-true k2-v (matita-arithmetics-nat.plus i-v k2-v) (matita-arithmetics-nat.le-plus-n i-v k2-v))) (p1-v i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v k2-v) k2-v) (matita-arithmetics-nat.minus-plus-m-m i-v k2-v)) k1-v

plus-minus1 : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le c-v b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v b-v) c-v)
plus-minus1 = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (lecb-v : matita-arithmetics-nat.le c-v b-v) -> matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v b-v) c-v) (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)) (matita-arithmetics-nat.plus-to-minus (matita-arithmetics-nat.plus a-v b-v) c-v (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)) c-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)) c-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v c-v) c-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v c-v) c-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat b-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.plus a-v x-1-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v b-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v c-v) c-v) (matita-arithmetics-nat.plus-minus-m-m b-v c-v lecb-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)) c-v) (matita-arithmetics-nat.associative-plus a-v (matita-arithmetics-nat.minus b-v c-v) c-v)) (matita-arithmetics-nat.plus c-v (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v))) (matita-arithmetics-nat.commutative-plus c-v (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v c-v)))))

bigop-I : (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))
bigop-I = λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat n-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) -> matita-basics-logic.eq lzero B-v (bigop x-1-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (same-bigop n-v (λ (X---v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) p-v B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) f-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v X---v) (p-v i-v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (p-v i-v)) (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O i-v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v n-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)) matita-basics-bool.true) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v X---v) (f-v i-v)) (matita-basics-logic.refl lzero B-v (f-v i-v)) (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O i-v))) (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O n-v)

bigop-I-gen : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le a-v b-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop b-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))
bigop-I-gen = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind (lsuc lzero) (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le a-v X-x-365-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus X-x-365-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (auto-v : matita-arithmetics-nat.le a-v matita-arithmetics-nat.O) -> matita-basics-logic.refl lzero B-v (bigop (matita-arithmetics-nat.minus matita-arithmetics-nat.O a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v)))) (λ (b0-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le a-v b0-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus b0-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (lea-v : matita-arithmetics-nat.le a-v (matita-arithmetics-nat.S b0-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.S b0-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.S b0-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.S b0-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.S b0-v))) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop (matita-arithmetics-nat.S b0-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (Ha-v : matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.S b0-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v b0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v b0-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v b0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v b0-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop (matita-arithmetics-nat.S b0-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v b0-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v op-v (f-v b0-v) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (f-v b0-v) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v a-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v a-v))) -> matita-basics-logic.eq lzero B-v (bigop x-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (f-v b0-v) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v op-v (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v)) (bigop (matita-arithmetics-nat.minus b0-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v)))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v)) (bigop (matita-arithmetics-nat.minus b0-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))) -> matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (f-v b0-v) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (matita-basics-logic.eq-f2 lzero lzero lzero B-v B-v B-v (op lzero B-v nil-v op-v) (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v)) (f-v b0-v) (bigop (matita-arithmetics-nat.minus b0-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat B-v f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v) b0-v (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat b0-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b0-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v b0-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat b0-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v) (matita-arithmetics-nat.plus-minus-m-m b0-v a-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v)))) (Hind-v p-v B-v nil-v op-v f-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v))) (bigop (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop-Strue (matita-arithmetics-nat.minus b0-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus X---v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v a-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat b0-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b0-v x-1-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v x-1-v) matita-basics-bool.true) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v b0-v) Hcase-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v) (matita-arithmetics-nat.plus-minus-m-m b0-v a-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v))))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) a-v) (matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.le X---v b0-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) X---v) (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v X---v))) (λ (auto-v : matita-arithmetics-nat.le matita-arithmetics-nat.O b0-v) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S b0-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v matita-arithmetics-nat.O))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat b0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S b0-v) (matita-arithmetics-nat.S X---v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S b0-v)) (matita-arithmetics-nat.minus b0-v matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O b0-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.S b0-v))) (λ (a1-v : matita-arithmetics-nat.nat) -> λ (lta1-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S a1-v) b0-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus b0-v a1-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus b0-v a1-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v) (matita-arithmetics-nat.S x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus b0-v a1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v) x-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v)) (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus b0-v a1-v))) (matita-arithmetics-nat.S-pred (matita-arithmetics-nat.minus b0-v a1-v) (matita-arithmetics-nat.lt-plus-to-minus-r matita-arithmetics-nat.O a1-v b0-v lta1-v))) (matita-arithmetics-nat.minus b0-v (matita-arithmetics-nat.S a1-v)) (matita-arithmetics-nat.eq-minus-S-pred b0-v a1-v)) a-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v))) (bigop (matita-arithmetics-nat.S b0-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Strue b0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v X---v) (p-v X---v)) B-v nil-v (op lzero B-v nil-v op-v) f-v (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-arithmetics-nat.leb a-v b0-v) x-v) matita-basics-bool.true) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb x-v matita-basics-bool.true) matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.true matita-basics-bool.true)) (matita-arithmetics-nat.leb a-v b0-v) (matita-arithmetics-nat.le-to-leb-true a-v b0-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v))) (p-v b0-v) Hcase-v))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v b0-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v a-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v a-v))) -> matita-basics-logic.eq lzero B-v (bigop x-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.minus b0-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.minus b0-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop b0-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (Hind-v p-v B-v nil-v op-v f-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v)) (bigop (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop-Sfalse (matita-arithmetics-nat.minus b0-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus X---v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v a-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat b0-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b0-v x-1-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v x-1-v) matita-basics-bool.false) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v b0-v) Hcase-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b0-v a-v) a-v) (matita-arithmetics-nat.plus-minus-m-m b0-v a-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v))))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) a-v) (matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.le X---v b0-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) X---v) (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v X---v))) (λ (auto-v : matita-arithmetics-nat.le matita-arithmetics-nat.O b0-v) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S b0-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S (matita-arithmetics-nat.minus b0-v matita-arithmetics-nat.O))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat b0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S b0-v) (matita-arithmetics-nat.S X---v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S b0-v)) (matita-arithmetics-nat.minus b0-v matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O b0-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b0-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.S b0-v))) (λ (a1-v : matita-arithmetics-nat.nat) -> λ (lta1-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S a1-v) b0-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus b0-v a1-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus b0-v a1-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v) (matita-arithmetics-nat.S x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus b0-v a1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v) x-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b0-v a1-v)) (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus b0-v a1-v))) (matita-arithmetics-nat.S-pred (matita-arithmetics-nat.minus b0-v a1-v) (matita-arithmetics-nat.lt-plus-to-minus-r matita-arithmetics-nat.O a1-v b0-v lta1-v))) (matita-arithmetics-nat.minus b0-v (matita-arithmetics-nat.S a1-v)) (matita-arithmetics-nat.eq-minus-S-pred b0-v a1-v)) a-v (matita-arithmetics-nat.le-S-S-to-le a-v b0-v Ha-v))) (bigop (matita-arithmetics-nat.S b0-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse b0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v X---v) (p-v X---v)) B-v nil-v (op lzero B-v nil-v op-v) f-v (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-arithmetics-nat.leb a-v b0-v) x-v) matita-basics-bool.false) (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb X---v matita-basics-bool.false) matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.true matita-basics-bool.false)) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false matita-basics-bool.false)) (matita-arithmetics-nat.leb a-v b0-v)) (p-v b0-v) Hcase-v))) (matita-basics-bool.true-or-false (p-v b0-v))) (λ (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.S b0-v)) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat a-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v x-1-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus x-1-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop x-1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-basics-logic.eq lzero B-v (bigop x-1-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop a-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (matita-basics-logic.eq-ind lzero lzero B-v (bigop a-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (bigop a-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-1-v) -> matita-basics-logic.eq lzero B-v x-1-v (bigop a-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v i-v) (p-v i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (same-bigop a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.false) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-arithmetics-nat.leb a-v X---v) (p-v X---v)) B-v nil-v (op lzero B-v nil-v op-v) f-v f-v (λ (i-v : matita-arithmetics-nat.nat) -> λ (ltia-v : matita-arithmetics-nat.lt i-v a-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false (matita-basics-bool.andb x-v (p-v i-v))) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (matita-arithmetics-nat.leb a-v i-v) (matita-arithmetics-nat.not-le-to-leb-false a-v i-v (matita-arithmetics-nat.lt-to-not-le i-v a-v ltia-v))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v a-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v i-v))) nil-v (bigop-false a-v B-v nil-v (op lzero B-v nil-v op-v) f-v)) (matita-arithmetics-nat.minus a-v a-v) (matita-arithmetics-nat.minus-n-n a-v)) (matita-arithmetics-nat.S b0-v) Ha-v) (matita-arithmetics-nat.le-to-or-lt-eq a-v (matita-arithmetics-nat.S b0-v) lea-v)) b-v

bigop-sumI : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le a-v b-v) -> (X--1-v : matita-arithmetics-nat.le b-v c-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus c-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus c-v b-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v b-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v b-v))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))
bigop-sumI = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (leab-v : matita-arithmetics-nat.le a-v b-v) -> λ (lebc-v : matita-arithmetics-nat.le b-v c-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus c-v a-v) (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus b-v a-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus c-v a-v) (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus b-v a-v))) -> matita-basics-logic.eq lzero B-v (bigop x-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus c-v b-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v b-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v b-v))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus c-v (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus c-v (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)))) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.plus x-v (matita-arithmetics-nat.minus b-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus c-v b-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v b-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v b-v))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v)) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v x-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus c-v b-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v b-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v b-v))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat b-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b-v x-1-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v x-1-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus c-v b-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v b-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v b-v))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (p-v (matita-arithmetics-nat.plus i-v a-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.minus b-v a-v) i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (f-v (matita-arithmetics-nat.plus i-v a-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.minus b-v a-v) i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (p-v (matita-arithmetics-nat.plus i-v a-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.minus b-v a-v) i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (f-v (matita-arithmetics-nat.plus i-v a-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.minus b-v a-v) i-v)))) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) x-v) (same-bigop (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus X---v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (p-v (matita-arithmetics-nat.plus X---v a-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.minus b-v a-v) X---v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (f-v (matita-arithmetics-nat.plus X---v a-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.minus b-v a-v) X---v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (ltic-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v))) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.minus b-v a-v) i-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v a-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (p-v (matita-arithmetics-nat.plus i-v a-v)) X---v)) (λ (lei-v : matita-arithmetics-nat.le (matita-arithmetics-nat.minus b-v a-v) i-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) x-1-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v a-v)) (p-v x-1-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v X---v) (p-v (matita-arithmetics-nat.plus i-v a-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus a-v i-v)) (p-v X---v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus a-v i-v))) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v b-v) (matita-arithmetics-nat.minus b-v a-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) x-1-v) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v) a-v (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v)) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v)) a-v (matita-arithmetics-nat.plus-to-minus b-v (matita-arithmetics-nat.minus b-v a-v) a-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) b-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v b-v) a-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) b-v) (plus-minus1 a-v b-v a-v leab-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v b-v) a-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v b-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus X---v a-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat b-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus b-v a-v) a-v) (matita-arithmetics-nat.minus-plus-m-m b-v a-v)) (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.commutative-plus a-v b-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus b-v a-v) a-v))))))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (plus-minus1 i-v b-v (matita-arithmetics-nat.minus b-v a-v) (matita-arithmetics-nat.minus-le b-v a-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.minus b-v a-v) i-v b-v lei-v))) (λ (auto-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus b-v a-v) i-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v X---v) (p-v (matita-arithmetics-nat.plus i-v a-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus a-v i-v)) (p-v X---v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus a-v i-v))) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (ltic-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v))) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.minus b-v a-v) i-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v a-v)) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-nat.plus i-v a-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (f-v (matita-arithmetics-nat.plus i-v a-v)) X---v)) (λ (lei-v : matita-arithmetics-nat.le (matita-arithmetics-nat.minus b-v a-v) i-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) x-1-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v a-v)) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-nat.plus i-v a-v)) (f-v x-1-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v a-v)) matita-basics-bool.true) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v X---v) (f-v (matita-arithmetics-nat.plus i-v a-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-nat.plus a-v i-v)) (f-v X---v)) (matita-basics-logic.refl lzero B-v (f-v (matita-arithmetics-nat.plus a-v i-v))) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v b-v) (matita-arithmetics-nat.minus b-v a-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v a-v) x-1-v) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (matita-arithmetics-nat.plus i-v) a-v (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v)) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus b-v (matita-arithmetics-nat.minus b-v a-v)) a-v (matita-arithmetics-nat.plus-to-minus b-v (matita-arithmetics-nat.minus b-v a-v) a-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) b-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v b-v) a-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) b-v) (plus-minus1 a-v b-v a-v leab-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v b-v) a-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v b-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus X---v a-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat b-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) b-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus b-v a-v) a-v) (matita-arithmetics-nat.minus-plus-m-m b-v a-v)) (matita-arithmetics-nat.plus a-v b-v) (matita-arithmetics-nat.commutative-plus a-v b-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus b-v a-v) a-v))))))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v b-v) (matita-arithmetics-nat.minus b-v a-v)) (plus-minus1 i-v b-v (matita-arithmetics-nat.minus b-v a-v) (matita-arithmetics-nat.minus-le b-v a-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.minus b-v a-v)) b-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.minus b-v a-v) i-v b-v lei-v))) (λ (auto-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus b-v a-v) i-v)) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v (matita-arithmetics-nat.plus i-v a-v)) matita-basics-bool.true) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v X---v) (f-v (matita-arithmetics-nat.plus i-v a-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus a-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-nat.plus a-v i-v)) (f-v X---v)) (matita-basics-logic.refl lzero B-v (f-v (matita-arithmetics-nat.plus a-v i-v))) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)) (matita-arithmetics-nat.plus i-v a-v) (matita-arithmetics-nat.commutative-plus i-v a-v)))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus c-v b-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v b-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v b-v))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus i-v a-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v)))) (bigop-sum (matita-arithmetics-nat.minus c-v b-v) (matita-arithmetics-nat.minus b-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus X---v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> p-v (matita-arithmetics-nat.plus X---v a-v)) B-v nil-v op-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v a-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus b-v a-v) a-v) (matita-arithmetics-nat.plus-minus-m-m b-v a-v leab-v)) (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.commutative-plus a-v (matita-arithmetics-nat.minus b-v a-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus c-v a-v) (matita-arithmetics-nat.minus b-v a-v)) (matita-arithmetics-nat.minus-plus c-v a-v (matita-arithmetics-nat.minus b-v a-v))) (matita-arithmetics-nat.minus c-v a-v) (matita-arithmetics-nat.plus-minus-m-m (matita-arithmetics-nat.minus c-v a-v) (matita-arithmetics-nat.minus b-v a-v) (matita-arithmetics-nat.monotonic-le-minus-l c-v b-v a-v lebc-v))

bigop-a : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.le a-v b-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v a-v)))) (f-v a-v))
bigop-a = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (leab-v : matita-arithmetics-nat.le a-v b-v) -> matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) (matita-arithmetics-nat.S a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.S a-v)))) (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S a-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v)))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) (matita-arithmetics-nat.S a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.S a-v)))) (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S a-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))))) -> matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v a-v)))) (f-v a-v))) (matita-basics-logic.eq-f2 lzero lzero lzero B-v B-v B-v (op lzero B-v nil-v op-v) (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) (matita-arithmetics-nat.S a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.S a-v)))) (bigop (matita-arithmetics-nat.minus b-v a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v a-v)))) (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S a-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (f-v a-v) (same-bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) (matita-arithmetics-nat.S a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S a-v))) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus X---v a-v))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) (matita-arithmetics-nat.S a-v))) -> matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) (matita-arithmetics-nat.S a-v))) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.true) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v X---v) (f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v a-v)))) (matita-basics-logic.refl lzero B-v (f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v a-v)))) (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.S a-v)) (matita-arithmetics-nat.plus-n-Sm i-v a-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) x-1-v) -> matita-basics-logic.eq lzero B-v (bigop x-1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (f-v a-v)) (nilr lzero B-v nil-v op-v (f-v a-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.S a-v) a-v) (matita-arithmetics-nat.minus-Sn-n a-v))) (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S b-v) a-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v a-v))) (bigop-sumI a-v (matita-arithmetics-nat.S a-v) (matita-arithmetics-nat.S b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v op-v f-v (matita-arithmetics-nat.le-n-Sn a-v) (matita-arithmetics-nat.le-S-S a-v b-v leab-v))

bigop-0 : (n-v : matita-arithmetics-nat.nat) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S n-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v op-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S i-v))) (f-v matita-arithmetics-nat.O))
bigop-0 = λ (n-v : matita-arithmetics-nat.nat) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq-ind lzero lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O))) x-1-v) -> matita-basics-logic.eq lzero B-v x-1-v (op lzero B-v nil-v op-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S i-v))) (f-v matita-arithmetics-nat.O))) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)))) (f-v matita-arithmetics-nat.O)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)))) (f-v matita-arithmetics-nat.O))) -> matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S i-v))) (f-v matita-arithmetics-nat.O))) (matita-basics-logic.eq-f2 lzero lzero lzero B-v B-v B-v (op lzero B-v nil-v op-v) (bigop (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S i-v))) (f-v matita-arithmetics-nat.O) (f-v matita-arithmetics-nat.O) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat n-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) -> matita-basics-logic.eq lzero B-v (bigop x-1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O)))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S i-v)))) (same-bigop n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O))) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.S X---v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v n-v) -> matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (λ (i-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i-v n-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.true) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-nat.S X---v)) (f-v (matita-arithmetics-nat.S i-v))) (matita-basics-logic.refl lzero B-v (f-v (matita-arithmetics-nat.S i-v))) (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O i-v))) (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O n-v)) (matita-basics-logic.refl lzero B-v (f-v matita-arithmetics-nat.O))) (bigop (matita-arithmetics-nat.minus (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-nat.plus i-v matita-arithmetics-nat.O))) (bigop-a matita-arithmetics-nat.O n-v B-v nil-v op-v f-v (matita-arithmetics-nat.le-O-n n-v))) (bigop (matita-arithmetics-nat.S n-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-I (matita-arithmetics-nat.S n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.true) B-v nil-v op-v f-v)

bigop-prod : (k1-v : matita-arithmetics-nat.nat) -> (k2-v : matita-arithmetics-nat.nat) -> (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p2-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : Aop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq lzero B-v (bigop k1-v (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) (bigop (matita-arithmetics-nat.times k1-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))
bigop-prod = λ (k1-v : matita-arithmetics-nat.nat) -> λ (k2-v : matita-arithmetics-nat.nat) -> λ (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p2-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : Aop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> B-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (bigop X-x-365-v (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) (bigop (matita-arithmetics-nat.times X-x-365-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (matita-basics-logic.refl lzero B-v (bigop matita-arithmetics-nat.O (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v)))) (λ (n-v : matita-arithmetics-nat.nat) -> λ (Hind-v : matita-basics-logic.eq lzero B-v (bigop n-v (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S n-v) (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (λ (Hp1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v op-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v n-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v n-v i-v)) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i-v i0-v)))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v op-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v n-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v n-v i-v)) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i-v i0-v))))) -> matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v op-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v n-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v n-v i-v)) x-v) (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) i-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (same-bigop (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div X---v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v))) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) X---v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div X---v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times n-v k2-v))) (f-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v)) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) X---v)) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v))) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.times n-v k2-v) i-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) X---v) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (λ (lei-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div x-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div x-v k2-v) (matita-arithmetics-div-and-mod.mod x-v k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb (p1-v x-v) (p2-v x-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb x-v (p2-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb matita-basics-bool.true (p2-v n-v x-v))) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true)) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v) (matita-arithmetics-div-and-mod.mod-plus-times k2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) k2-v) (matita-arithmetics-nat.monotonic-lt-minus-l (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.minus-plus-plus-l (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v))) lti-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v X---v)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v X---v) k2-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat k2-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) X---v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m k2-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) (p1-v n-v) Hp1-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v) (matita-arithmetics-div-and-mod.div-plus-times k2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) k2-v) (matita-arithmetics-nat.monotonic-lt-minus-l (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.minus-plus-plus-l (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v))) lti-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v X---v)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v X---v) k2-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat k2-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) X---v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m k2-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) i-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) (λ (auto-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v)) -> matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.false))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v))) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.times n-v k2-v) i-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) X---v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)) X---v) (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (λ (lei-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) -> λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times n-v k2-v))) (f-v (matita-arithmetics-div-and-mod.div x-v k2-v) (matita-arithmetics-div-and-mod.mod x-v k2-v)) matita-basics-bool.true) (f-v (matita-arithmetics-div-and-mod.div x-v k2-v) (matita-arithmetics-div-and-mod.mod x-v k2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v))) (f-v x-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)) matita-basics-bool.true) (f-v x-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v))) (f-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)) matita-basics-bool.true) (f-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) -> matita-basics-logic.eq lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v))) (f-v n-v x-v) matita-basics-bool.true) (f-v n-v x-v)) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat B-v (f-v n-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v)) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v)) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) (matita-arithmetics-nat.times n-v k2-v)) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times n-v k2-v)) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus i-v X---v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus i-v X---v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v) (matita-arithmetics-div-and-mod.mod-plus-times k2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) k2-v) (matita-arithmetics-nat.monotonic-lt-minus-l (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.minus-plus-plus-l (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v))) lti-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v X---v)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v X---v) k2-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat k2-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) X---v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m k2-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) (p1-v n-v) Hp1-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v) (matita-arithmetics-div-and-mod.div-plus-times k2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) k2-v) (matita-arithmetics-nat.monotonic-lt-minus-l (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.minus-plus-plus-l (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times n-v k2-v))) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v))) lti-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v X---v)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v X---v) k2-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat k2-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) X---v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m k2-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) i-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) (λ (auto-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v)) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.false) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> B-v) (f-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)) matita-basics-bool.false)))) (op lzero B-v nil-v op-v (bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v n-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v n-v i-v)) (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (bigop-sum k2-v (matita-arithmetics-nat.times n-v k2-v) (p2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div X---v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v))) B-v nil-v op-v (f-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v)))) (bigop n-v (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) Hind-v) (bigop (matita-arithmetics-nat.S n-v) (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i-v i0-v))) (bigop-Strue n-v p1-v B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v X---v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v X---v i-v)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p1-v n-v) Hp1-v))) (λ (Hp1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i-v i0-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i-v i0-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) i-v)) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (same-bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div X---v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v))) (matita-arithmetics-nat.leb (matita-arithmetics-nat.times n-v k2-v) X---v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div X---v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v)) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v)) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.times n-v k2-v) i-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) X---v) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (λ (lei-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div x-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div x-v k2-v) (matita-arithmetics-div-and-mod.mod x-v k2-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb (p1-v x-v) (p2-v x-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)))) (matita-basics-logic.trans-eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-basics-bool.andb (p1-v n-v) (p2-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v))) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-basics-bool.andb X---v (p2-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) k2-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod i-v k2-v))) (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod X---v k2-v)))) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb matita-basics-bool.false (p2-v n-v (matita-arithmetics-div-and-mod.mod i-v k2-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (p1-v n-v) Hp1-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) k2-v) (matita-arithmetics-div-and-mod.div-plus-times k2-v n-v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)) k2-v) (matita-arithmetics-nat.monotonic-lt-minus-l (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.commutative-times n-v k2-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.minus-plus-plus-l (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v))) lti-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v (matita-arithmetics-nat.S n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v X---v) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v X---v) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.times k2-v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.times-n-Sm k2-v n-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S n-v) k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v X---v) k2-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat k2-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) X---v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) k2-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m k2-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) i-v (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times k2-v n-v) i-v (matita-arithmetics-nat.times k2-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v) lei-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) i-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times n-v k2-v))) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v X---v)) i-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v))) i-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.minus-plus-m-m i-v (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus i-v (matita-arithmetics-nat.times k2-v n-v)) (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) (λ (auto-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v)) -> matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.false))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v)) -> matita-arithmetics-nat.leb-elim lzero (matita-arithmetics-nat.times n-v k2-v) i-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) X---v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v)) (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (λ (auto-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.true) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (λ (auto-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) i-v)) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false (matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) matita-basics-bool.false) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))))) (bigop (matita-arithmetics-nat.times n-v k2-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div i-v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v k2-v) (matita-arithmetics-div-and-mod.mod i-v k2-v))) (pad-bigop (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (matita-arithmetics-nat.times n-v k2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p1-v (matita-arithmetics-div-and-mod.div X---v k2-v)) (p2-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v))) B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v k2-v) (matita-arithmetics-div-and-mod.mod X---v k2-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) k2-v) (matita-arithmetics-nat.plus matita-arithmetics-nat.O k2-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) k2-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v)) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v k2-v) k2-v) (matita-arithmetics-nat.plus matita-arithmetics-nat.O k2-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus X---v k2-v) (matita-arithmetics-nat.plus matita-arithmetics-nat.O k2-v)) (matita-arithmetics-nat.plus X---v k2-v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v (matita-arithmetics-nat.S n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v) (matita-arithmetics-nat.plus matita-arithmetics-nat.O k2-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v) (matita-arithmetics-nat.plus matita-arithmetics-nat.O k2-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times k2-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times k2-v n-v) (matita-arithmetics-nat.plus k2-v (matita-arithmetics-nat.times k2-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times k2-v n-v) k2-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (matita-arithmetics-nat.times k2-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times k2-v n-v) k2-v) (matita-arithmetics-nat.plus matita-arithmetics-nat.O k2-v)) (matita-arithmetics-nat.minus-plus-plus-l (matita-arithmetics-nat.times k2-v n-v) matita-arithmetics-nat.O k2-v)) (matita-arithmetics-nat.times k2-v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.times-n-Sm k2-v n-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) k2-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S n-v) k2-v)) (matita-arithmetics-nat.times n-v k2-v) (matita-arithmetics-nat.commutative-times n-v k2-v))))) (bigop n-v (λ (x-v : matita-arithmetics-nat.nat) -> p1-v x-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v x-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) Hind-v) (bigop (matita-arithmetics-nat.S n-v) (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p2-v i-v i0-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i-v i0-v))) (bigop-Sfalse n-v p1-v B-v nil-v (op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> bigop k2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v X---v i-v) B-v nil-v (op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v X---v i-v)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p1-v n-v) Hp1-v))) (matita-basics-bool.true-or-false (p1-v n-v))) k1-v

data ACop (l0-v : Level) (A-v : Set l0-v) (nil-v : A-v) : Set l0-v where
  mk-ACop' : (aop-v : Aop l0-v A-v nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l0-v A-v (op l0-v A-v nil-v aop-v a-v b-v) (op l0-v A-v nil-v aop-v b-v a-v)) -> ACop l0-v A-v nil-v

mk-ACop : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (aop-v : Aop l5-v A-v nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l5-v A-v (op l5-v A-v nil-v aop-v a-v b-v) (op l5-v A-v nil-v aop-v b-v a-v)) -> ACop l5-v A-v nil-v
mk-ACop _ _ _ = mk-ACop'

match-ACop : (l12-v : Level) -> (A-v : Set l12-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : ACop l12-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-ACop-v : (aop-v : Aop l12-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l12-v A-v (op l12-v A-v X-nil-v aop-v a-v b-v) (op l12-v A-v X-nil-v aop-v b-v a-v)) -> return-type-v (mk-ACop l12-v A-v X-nil-v aop-v X-comm-v)) -> (z-v : ACop l12-v A-v X-nil-v) -> return-type-v z-v
match-ACop _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2


ACop-ind : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-889-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-889-v : ACop l15-v A-v X-nil-v) -> Q--v x-889-v
ACop-ind  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type5 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type5  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type4 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type4  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type3 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type3  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type2 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type2  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type1 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type1  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type0 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type0  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2


aop : (l3-v : Level) -> (A-v : Set l3-v) -> (nil-v : A-v) -> (X-xxx-v : ACop l3-v A-v nil-v) -> Aop l3-v A-v nil-v
aop l4-v A-v nil-v X-xxx-v = match-ACop l4-v A-v nil-v l4-v (λ (xxx0-v : ACop l4-v A-v nil-v) -> Aop l4-v A-v nil-v) (λ (yyy-v : Aop l4-v A-v nil-v) -> λ (X---v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l4-v A-v (op l4-v A-v nil-v yyy-v a-v b-v) (op l4-v A-v nil-v yyy-v b-v a-v)) -> yyy-v) X-xxx-v

comm : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : ACop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l5-v A-v (op l5-v A-v nil-v (aop l5-v A-v nil-v xxx-v) a-v b-v) (op l5-v A-v nil-v (aop l5-v A-v nil-v xxx-v) b-v a-v)
comm l14-v A-v nil-v xxx-v = match-ACop l14-v A-v nil-v l14-v (λ (xxx0-v : ACop l14-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l14-v A-v (op l14-v A-v nil-v (aop l14-v A-v nil-v xxx0-v) a-v b-v) (op l14-v A-v nil-v (aop l14-v A-v nil-v xxx0-v) b-v a-v)) (λ (X---v : Aop l14-v A-v nil-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> matita-basics-logic.eq l14-v A-v (op l14-v A-v nil-v X---v a-v b-v) (op l14-v A-v nil-v X---v b-v a-v)) -> yyy-v) xxx-v


ACop-inv-ind : (l33-v l27-v : Level) -> (x1-v : Set l33-v) -> (x2-v : x1-v) -> (Hterm-v : ACop l33-v x1-v x2-v) -> (P-v : (X-z1566-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> (X-H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1567-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v Hterm-v
ACop-inv-ind = λ (l33-v l27-v : Level) -> λ (x1-v : Set l33-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : ACop l33-v x1-v x2-v) -> λ (P-v : (X-z1566-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> λ (H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1567-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> ACop-ind l33-v (l33-v ⊔ l27-v) x1-v x2-v (λ (X-x-889-v : ACop l33-v x1-v x2-v) -> (X-z1567-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v X-x-889-v) -> P-v X-x-889-v) H1-v Hterm-v (matita-basics-logic.refl l33-v (ACop l33-v x1-v x2-v) Hterm-v)

ACop-inv-rect-Type4 : (l33-v l27-v : Level) -> (x1-v : Set l33-v) -> (x2-v : x1-v) -> (Hterm-v : ACop l33-v x1-v x2-v) -> (P-v : (X-z1572-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> (X-H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1573-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v Hterm-v
ACop-inv-rect-Type4 = λ (l33-v l27-v : Level) -> λ (x1-v : Set l33-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : ACop l33-v x1-v x2-v) -> λ (P-v : (X-z1572-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> λ (H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1573-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> ACop-rect-Type4 l33-v (l33-v ⊔ l27-v) x1-v x2-v (λ (X-x-891-v : ACop l33-v x1-v x2-v) -> (X-z1573-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v X-x-891-v) -> P-v X-x-891-v) H1-v Hterm-v (matita-basics-logic.refl l33-v (ACop l33-v x1-v x2-v) Hterm-v)

ACop-inv-rect-Type3 : (l33-v l27-v : Level) -> (x1-v : Set l33-v) -> (x2-v : x1-v) -> (Hterm-v : ACop l33-v x1-v x2-v) -> (P-v : (X-z1578-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> (X-H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1579-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v Hterm-v
ACop-inv-rect-Type3 = λ (l33-v l27-v : Level) -> λ (x1-v : Set l33-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : ACop l33-v x1-v x2-v) -> λ (P-v : (X-z1578-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> λ (H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1579-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> ACop-rect-Type3 l33-v (l33-v ⊔ l27-v) x1-v x2-v (λ (X-x-895-v : ACop l33-v x1-v x2-v) -> (X-z1579-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v X-x-895-v) -> P-v X-x-895-v) H1-v Hterm-v (matita-basics-logic.refl l33-v (ACop l33-v x1-v x2-v) Hterm-v)

ACop-inv-rect-Type2 : (l33-v l27-v : Level) -> (x1-v : Set l33-v) -> (x2-v : x1-v) -> (Hterm-v : ACop l33-v x1-v x2-v) -> (P-v : (X-z1584-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> (X-H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1585-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v Hterm-v
ACop-inv-rect-Type2 = λ (l33-v l27-v : Level) -> λ (x1-v : Set l33-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : ACop l33-v x1-v x2-v) -> λ (P-v : (X-z1584-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> λ (H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1585-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> ACop-rect-Type2 l33-v (l33-v ⊔ l27-v) x1-v x2-v (λ (X-x-897-v : ACop l33-v x1-v x2-v) -> (X-z1585-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v X-x-897-v) -> P-v X-x-897-v) H1-v Hterm-v (matita-basics-logic.refl l33-v (ACop l33-v x1-v x2-v) Hterm-v)

ACop-inv-rect-Type1 : (l33-v l27-v : Level) -> (x1-v : Set l33-v) -> (x2-v : x1-v) -> (Hterm-v : ACop l33-v x1-v x2-v) -> (P-v : (X-z1590-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> (X-H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1591-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v Hterm-v
ACop-inv-rect-Type1 = λ (l33-v l27-v : Level) -> λ (x1-v : Set l33-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : ACop l33-v x1-v x2-v) -> λ (P-v : (X-z1590-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> λ (H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1591-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> ACop-rect-Type1 l33-v (l33-v ⊔ l27-v) x1-v x2-v (λ (X-x-899-v : ACop l33-v x1-v x2-v) -> (X-z1591-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v X-x-899-v) -> P-v X-x-899-v) H1-v Hterm-v (matita-basics-logic.refl l33-v (ACop l33-v x1-v x2-v) Hterm-v)

ACop-inv-rect-Type0 : (l33-v l27-v : Level) -> (x1-v : Set l33-v) -> (x2-v : x1-v) -> (Hterm-v : ACop l33-v x1-v x2-v) -> (P-v : (X-z1596-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> (X-H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1597-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v Hterm-v
ACop-inv-rect-Type0 = λ (l33-v l27-v : Level) -> λ (x1-v : Set l33-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : ACop l33-v x1-v x2-v) -> λ (P-v : (X-z1596-v : ACop l33-v x1-v x2-v) -> Set l27-v) -> λ (H1-v : (aop-v : Aop l33-v x1-v x2-v) -> (X-comm-v : (a-v : x1-v) -> (b-v : x1-v) -> matita-basics-logic.eq l33-v x1-v (op l33-v x1-v x2-v aop-v a-v b-v) (op l33-v x1-v x2-v aop-v b-v a-v)) -> (X-z1597-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> P-v (mk-ACop l33-v x1-v x2-v aop-v X-comm-v)) -> ACop-rect-Type0 l33-v (l33-v ⊔ l27-v) x1-v x2-v (λ (X-x-901-v : ACop l33-v x1-v x2-v) -> (X-z1597-v : matita-basics-logic.eq l33-v (ACop l33-v x1-v x2-v) Hterm-v X-x-901-v) -> P-v X-x-901-v) H1-v Hterm-v (matita-basics-logic.refl l33-v (ACop l33-v x1-v x2-v) Hterm-v)

ACop-discr : (l370-v l481-v : Level) -> (a1-v : Set l370-v) -> (a2-v : a1-v) -> (x-v : ACop l370-v a1-v a2-v) -> (y-v : ACop l370-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq l370-v (ACop l370-v a1-v a2-v) x-v y-v) -> match-ACop l370-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481-v)) ⊔ (lsuc l370-v))) (λ (X---v : ACop l370-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v))) (λ (t0-v : Aop l370-v a1-v a2-v) -> λ (t1-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v t0-v a-v b-v) (op l370-v a1-v a2-v t0-v b-v a-v)) -> match-ACop l370-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481-v)) ⊔ (lsuc l370-v))) (λ (X---v : ACop l370-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v))) (λ (u0-v : Aop l370-v a1-v a2-v) -> λ (u1-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v u0-v a-v b-v) (op l370-v a1-v a2-v u0-v b-v a-v)) -> (P-v : Set l481-v) -> (X-z57-v : (e0-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) (matita-basics-logic.R0 l370-v (Aop l370-v a1-v a2-v) t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l370-v ((a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v u0-v a-v b-v) (op l370-v a1-v a2-v u0-v b-v a-v)) (matita-basics-logic.R1 l370-v l370-v (Aop l370-v a1-v a2-v) t0-v (λ (x-19-v : Aop l370-v a1-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) t0-v x-19-v) -> (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v x-19-v a-v b-v) (op l370-v a1-v a2-v x-19-v b-v a-v)) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) y-v) x-v
ACop-discr = λ (l370-v l481-v : Level) -> λ (a1-v : Set l370-v) -> λ (a2-v : a1-v) -> λ (x-v : ACop l370-v a1-v a2-v) -> λ (y-v : ACop l370-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq l370-v (ACop l370-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 l370-v ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v)) (ACop l370-v a1-v a2-v) x-v (λ (x-13-v : ACop l370-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq l370-v (ACop l370-v a1-v a2-v) x-v x-13-v) -> match-ACop l370-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481-v)) ⊔ (lsuc l370-v))) (λ (X---v : ACop l370-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v))) (λ (t0-v : Aop l370-v a1-v a2-v) -> λ (t1-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v t0-v a-v b-v) (op l370-v a1-v a2-v t0-v b-v a-v)) -> match-ACop l370-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481-v)) ⊔ (lsuc l370-v))) (λ (X---v : ACop l370-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v))) (λ (u0-v : Aop l370-v a1-v a2-v) -> λ (u1-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v u0-v a-v b-v) (op l370-v a1-v a2-v u0-v b-v a-v)) -> (P-v : Set l481-v) -> (X-z57-v : (e0-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) (matita-basics-logic.R0 l370-v (Aop l370-v a1-v a2-v) t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l370-v ((a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v u0-v a-v b-v) (op l370-v a1-v a2-v u0-v b-v a-v)) (matita-basics-logic.R1 l370-v l370-v (Aop l370-v a1-v a2-v) t0-v (λ (x-19-v : Aop l370-v a1-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) t0-v x-19-v) -> (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v x-19-v a-v b-v) (op l370-v a1-v a2-v x-19-v b-v a-v)) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) x-13-v) x-v) (match-ACop l370-v a1-v a2-v ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v)) (λ (X---v : ACop l370-v a1-v a2-v) -> match-ACop l370-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481-v)) ⊔ (lsuc l370-v))) (λ (X-0-v : ACop l370-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v))) (λ (t0-v : Aop l370-v a1-v a2-v) -> λ (t1-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v t0-v a-v b-v) (op l370-v a1-v a2-v t0-v b-v a-v)) -> match-ACop l370-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481-v)) ⊔ (lsuc l370-v))) (λ (X-0-v : ACop l370-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l481-v) ⊔ l370-v))) (λ (u0-v : Aop l370-v a1-v a2-v) -> λ (u1-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v u0-v a-v b-v) (op l370-v a1-v a2-v u0-v b-v a-v)) -> (P-v : Set l481-v) -> (X-z57-v : (e0-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) (matita-basics-logic.R0 l370-v (Aop l370-v a1-v a2-v) t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq l370-v ((a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v u0-v a-v b-v) (op l370-v a1-v a2-v u0-v b-v a-v)) (matita-basics-logic.R1 l370-v l370-v (Aop l370-v a1-v a2-v) t0-v (λ (x-19-v : Aop l370-v a1-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) t0-v x-19-v) -> (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v x-19-v a-v b-v) (op l370-v a1-v a2-v x-19-v b-v a-v)) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : Aop l370-v a1-v a2-v) -> λ (a10-v : (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v a0-v a-v b-v) (op l370-v a1-v a2-v a0-v b-v a-v)) -> λ (P-v : Set l481-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) (matita-basics-logic.R0 l370-v (Aop l370-v a1-v a2-v) a0-v) a0-v) -> (X-e1-v : matita-basics-logic.eq l370-v ((a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v a0-v a-v b-v) (op l370-v a1-v a2-v a0-v b-v a-v)) (matita-basics-logic.R1 l370-v l370-v (Aop l370-v a1-v a2-v) a0-v (λ (x-19-v : Aop l370-v a1-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) a0-v x-19-v) -> (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v x-19-v a-v b-v) (op l370-v a1-v a2-v x-19-v b-v a-v)) a10-v a0-v e0-v) a10-v) -> P-v) -> DH-v (matita-basics-logic.refl l370-v (Aop l370-v a1-v a2-v) (matita-basics-logic.R0 l370-v (Aop l370-v a1-v a2-v) a0-v)) (matita-basics-logic.refl l370-v ((a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v a0-v a-v b-v) (op l370-v a1-v a2-v a0-v b-v a-v)) (matita-basics-logic.R1 l370-v l370-v (Aop l370-v a1-v a2-v) a0-v (λ (x-19-v : Aop l370-v a1-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq l370-v (Aop l370-v a1-v a2-v) a0-v x-19-v) -> (a-v : a1-v) -> (b-v : a1-v) -> matita-basics-logic.eq l370-v a1-v (op l370-v a1-v a2-v x-19-v a-v b-v) (op l370-v a1-v a2-v x-19-v b-v a-v)) a10-v a0-v (matita-basics-logic.refl l370-v (Aop l370-v a1-v a2-v) (matita-basics-logic.R0 l370-v (Aop l370-v a1-v a2-v) a0-v))))) x-v) y-v Deq-v

dpi1--o--aop : (l12-v l8-v : Level) -> (x0-v : Set l12-v) -> (x1-v : x0-v) -> (x2-v : (X---v : ACop l12-v x0-v x1-v) -> Set l8-v) -> (x3-v : matita-basics-types.DPair l12-v l8-v (ACop l12-v x0-v x1-v) x2-v) -> Aop l12-v x0-v x1-v
dpi1--o--aop = λ (l12-v l8-v : Level) -> λ (x0-v : Set l12-v) -> λ (x1-v : x0-v) -> λ (x2-v : (X---v : ACop l12-v x0-v x1-v) -> Set l8-v) -> λ (x3-v : matita-basics-types.DPair l12-v l8-v (ACop l12-v x0-v x1-v) x2-v) -> aop l12-v x0-v x1-v (matita-basics-types.dpi1 l12-v l8-v (ACop l12-v x0-v x1-v) x2-v x3-v)

aop--o--op : (l5-v : Level) -> (x0-v : Set l5-v) -> (x1-v : x0-v) -> (x2-v : ACop l5-v x0-v x1-v) -> (X-x-887-v : x0-v) -> (X-x-888-v : x0-v) -> x0-v
aop--o--op = λ (l5-v : Level) -> λ (x0-v : Set l5-v) -> λ (x1-v : x0-v) -> λ (x2-v : ACop l5-v x0-v x1-v) -> op l5-v x0-v x1-v (aop l5-v x0-v x1-v x2-v)

dpi1--o--aop--o--op : (l13-v l9-v : Level) -> (x0-v : Set l13-v) -> (x1-v : x0-v) -> (x2-v : (X---v : ACop l13-v x0-v x1-v) -> Set l9-v) -> (x3-v : matita-basics-types.DPair l13-v l9-v (ACop l13-v x0-v x1-v) x2-v) -> (X-x-887-v : x0-v) -> (X-x-888-v : x0-v) -> x0-v
dpi1--o--aop--o--op = λ (l13-v l9-v : Level) -> λ (x0-v : Set l13-v) -> λ (x1-v : x0-v) -> λ (x2-v : (X---v : ACop l13-v x0-v x1-v) -> Set l9-v) -> λ (x3-v : matita-basics-types.DPair l13-v l9-v (ACop l13-v x0-v x1-v) x2-v) -> op l13-v x0-v x1-v (aop l13-v x0-v x1-v (matita-basics-types.dpi1 l13-v l9-v (ACop l13-v x0-v x1-v) x2-v x3-v))

bigop-op : (k-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : ACop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop k-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))
bigop-op = λ (k-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : ACop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (g-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (nill lzero B-v nil-v (aop lzero B-v nil-v op-v) nil-v) (λ (k0-v : matita-arithmetics-nat.nat) -> λ (Hind-v : matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k0-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k0-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k0-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v x-v (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (aop--o--op lzero B-v nil-v op-v (f-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) x-v) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (aop--o--op lzero B-v nil-v op-v (f-v k0-v) (g-v k0-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (aop--o--op lzero B-v nil-v op-v (f-v k0-v) (g-v k0-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v))))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (aop--o--op lzero B-v nil-v op-v (f-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (aop--o--op lzero B-v nil-v op-v (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) x-v) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))))) x-1-v) -> matita-basics-logic.eq lzero B-v x-1-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (g-v k0-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) x-1-v) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))))) x-1-v) (matita-basics-logic.eq-f lzero lzero B-v B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (g-v k0-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (g-v k0-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) -> matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) x-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) x-1-v) -> matita-basics-logic.eq lzero B-v x-1-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) (matita-basics-logic.eq-f lzero lzero B-v B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))) Hind-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (assoc lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (g-v k0-v)) (comm lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (g-v k0-v))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (assoc lzero B-v nil-v (aop lzero B-v nil-v op-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (g-v k0-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v)))) (assoc lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (g-v i-v))))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (assoc lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (g-v k0-v) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v))) (bigop-Strue k0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v X---v) (g-v X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v k0-v) H-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (bigop-Strue k0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) g-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v k0-v) H-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Strue k0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v k0-v) H-v))) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k0-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v x-v (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) x-v) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v)))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) x-v) (matita-basics-logic.rewrite-l lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v))) X---v) (matita-basics-logic.refl lzero B-v (aop--o--op lzero B-v nil-v op-v (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)))) (bigop k0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v))) Hind-v) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v i-v) (g-v i-v))) (bigop-Sfalse k0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> aop--o--op lzero B-v nil-v op-v (f-v X---v) (g-v X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v k0-v) H-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> g-v i-v)) (bigop-Sfalse k0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) g-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v k0-v) H-v))) (bigop (matita-arithmetics-nat.S k0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse k0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v k0-v) H-v))) (matita-basics-bool.true-or-false (p-v k0-v))) k-v

bigop-diff : (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : ACop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (i-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))
bigop-diff = λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : ACop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v X-x-365-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (bigop X-x-365-v (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop X-x-365-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) (λ (ltO-v : matita-arithmetics-nat.lt i-v matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (bigop matita-arithmetics-nat.O (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop matita-arithmetics-nat.O (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) matita-arithmetics-nat.O) ltO-v (matita-arithmetics-nat.not-le-Sn-O i-v))) (λ (n0-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (X---v : matita-arithmetics-nat.lt i-v n0-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) -> λ (lein-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.S n0-v)) -> λ (pi-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i-v) matita-basics-bool.true) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt i-v n0-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v n0-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt i-v n0-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v n0-v)) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S n0-v) (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) (λ (Hi-v : matita-arithmetics-nat.lt i-v n0-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S n0-v) (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) (λ (pn-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) -> matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x0-v)) (p-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f-v x0-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (aop--o--op lzero B-v nil-v op-v (f-v i-v) x-v)) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (f-v n0-v)) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (f-v n0-v)) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) x-v) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (f-v i-v))) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) x-v (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) (matita-basics-logic.eq-ind lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) x-1-v) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) x-1-v) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x0-v)) (p-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f-v x0-v)))) -> matita-basics-logic.eq lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) x-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))))) (matita-basics-logic.refl lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v))))) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (Hind-v Hi-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v i-v) pi-v))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (f-v i-v)) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (assoc lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (f-v i-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (f-v n0-v)) (comm lzero B-v nil-v op-v (f-v i-v) (f-v n0-v))) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (op lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) (assoc lzero B-v nil-v (aop lzero B-v nil-v op-v) (f-v i-v) (f-v n0-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) (p-v i0-v) matita-basics-bool.false (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-bool.bool) matita-basics-bool.false matita-basics-bool.true (matita-arithmetics-nat.eqb i-v i0-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop-Strue n0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v X---v)) (p-v X---v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) X---v) matita-basics-bool.true) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) matita-basics-bool.true) (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool (p-v n0-v) (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) matita-basics-bool.true) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool (p-v n0-v) (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) X---v) (p-v n0-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb x-v) (p-v n0-v)) (p-v n0-v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb matita-basics-bool.false) (p-v n0-v))) (matita-arithmetics-nat.eqb i-v n0-v) (matita-arithmetics-nat.not-eq-to-eqb-false i-v n0-v (matita-arithmetics-nat.lt-to-not-eq i-v n0-v Hi-v))) matita-basics-bool.true pn-v) matita-basics-bool.true pn-v)) (p-v n0-v) pn-v))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop-Strue n0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v n0-v) pn-v))) (λ (pn-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) -> matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x0-v)) (p-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f-v x0-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) -> matita-basics-logic.eq lzero B-v (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) x-v)) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x0-v)) (p-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f-v x0-v)))) -> matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) (matita-basics-logic.refl lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) (bigop n0-v (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (Hind-v Hi-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v i-v) pi-v))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop-Sfalse n0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v X---v)) (p-v X---v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) X---v) matita-basics-bool.false) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) matita-basics-bool.false) (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool (p-v n0-v) (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) matita-basics-bool.false) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool (p-v n0-v) (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v n0-v)) X---v) (p-v n0-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb x-v) (p-v n0-v)) (p-v n0-v)) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb matita-basics-bool.false) (p-v n0-v))) (matita-arithmetics-nat.eqb i-v n0-v) (matita-arithmetics-nat.not-eq-to-eqb-false i-v n0-v (matita-arithmetics-nat.lt-to-not-eq i-v n0-v Hi-v))) matita-basics-bool.false pn-v) matita-basics-bool.false pn-v)) (p-v n0-v) pn-v))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop-Sfalse n0-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v n0-v) pn-v))) (matita-basics-bool.true-or-false (p-v n0-v))) (λ (Hi-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v n0-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat i-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v x-1-v) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S x-1-v) (λ (x-v : matita-arithmetics-nat.nat) -> p-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop (matita-arithmetics-nat.S x-1-v) (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)))) -> matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f-v i-v) (bigop (matita-arithmetics-nat.S i-v) (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x0-v)) (p-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f-v x0-v)))) (matita-basics-logic.eq-f lzero lzero B-v B-v (aop--o--op lzero B-v nil-v op-v (f-v i-v)) (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop (matita-arithmetics-nat.S i-v) (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v x-v)) (p-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f-v x-v)) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v))) -> matita-basics-logic.eq lzero B-v (bigop i-v (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) x-v) (same-bigop i-v p-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v X---v)) (p-v X---v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v f-v (λ (k-v : matita-arithmetics-nat.nat) -> λ (ltki-v : matita-arithmetics-nat.lt k-v i-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p-v k-v) (matita-basics-bool.andb (matita-basics-bool.notb x-v) (p-v k-v))) (matita-basics-logic.refl lzero matita-basics-bool.bool (p-v k-v)) (matita-arithmetics-nat.eqb i-v k-v) (matita-arithmetics-nat.not-eq-to-eqb-false i-v k-v (matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v k-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) i-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v k-v) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S k-v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) i-v) ltki-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S X---v) i-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) i-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) i-v)) k-v auto-v)) (matita-arithmetics-nat.not-le-Sn-n i-v)))) (λ (i0-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt i0-v i-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v i0-v) matita-basics-bool.true) -> matita-basics-logic.refl lzero B-v (f-v i0-v))) (bigop (matita-arithmetics-nat.S i-v) (λ (i0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v i0-v)) (p-v i0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop-Sfalse i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb i-v X---v)) (p-v X---v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb x-v) (p-v i-v)) matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb matita-basics-bool.true) (p-v i-v))) (matita-arithmetics-nat.eqb i-v i-v) (matita-arithmetics-nat.eq-to-eqb-true i-v i-v (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i-v)))))) (bigop (matita-arithmetics-nat.S i-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v)) (bigop-Strue i-v p-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v i-v) pi-v))) n0-v Hi-v) (matita-arithmetics-nat.le-to-or-lt-eq i-v n0-v (matita-arithmetics-nat.le-S-S-to-le i-v n0-v lein-v))) n-v

data range (A-v : Set (lzero)) : Set (lzero) where
  mk-range' : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> range A-v

mk-range : (A-v : Set (lzero)) -> (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> range A-v
mk-range _ = mk-range'

match-range : (X-A-v : Set (lzero)) -> (return-sort-v : Level) -> (return-type-v : (z-v : range X-A-v) -> Set return-sort-v) -> (case-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> return-type-v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (z-v : range X-A-v) -> return-type-v z-v
match-range _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-ind : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-915-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-915-v : range X-A-v) -> Q--v x-915-v
range-ind _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type5 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type5 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type4 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type4 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type3 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type3 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type2 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type2 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type1 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type1 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type0 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> X-A-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type0 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

enum : (A-v : Set (lzero)) -> (X-xxx-v : range A-v) -> (X-x-942-v : matita-arithmetics-nat.nat) -> A-v
enum A-v X-xxx-v = match-range A-v lzero (λ (xxx0-v : range A-v) -> (X-x-942-v : matita-arithmetics-nat.nat) -> A-v) (λ (yyy-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (X---v : matita-arithmetics-nat.nat) -> λ (X-0-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> yyy-v) X-xxx-v

upto : (A-v : Set (lzero)) -> (X-xxx-v : range A-v) -> matita-arithmetics-nat.nat
upto A-v X-xxx-v = match-range A-v lzero (λ (xxx0-v : range A-v) -> matita-arithmetics-nat.nat) (λ (X---v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (yyy-v : matita-arithmetics-nat.nat) -> λ (X-0-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> yyy-v) X-xxx-v

filter : (A-v : Set (lzero)) -> (X-xxx-v : range A-v) -> (X-x-941-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool
filter A-v X-xxx-v = match-range A-v lzero (λ (xxx0-v : range A-v) -> (X-x-941-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) (λ (X---v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (X-0-v : matita-arithmetics-nat.nat) -> λ (yyy-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> yyy-v) X-xxx-v

range-inv-ind : (l16-v : Level) -> (x1-v : Set (lzero)) -> (Hterm-v : range x1-v) -> (P-v : (X-z1632-v : range x1-v) -> Set l16-v) -> (X-H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1633-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v Hterm-v
range-inv-ind = λ (l16-v : Level) -> λ (x1-v : Set (lzero)) -> λ (Hterm-v : range x1-v) -> λ (P-v : (X-z1632-v : range x1-v) -> Set l16-v) -> λ (H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1633-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> range-ind l16-v x1-v (λ (X-x-915-v : range x1-v) -> (X-z1633-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v X-x-915-v) -> P-v X-x-915-v) H1-v Hterm-v (matita-basics-logic.refl lzero (range x1-v) Hterm-v)

range-inv-rect-Type4 : (l16-v : Level) -> (x1-v : Set (lzero)) -> (Hterm-v : range x1-v) -> (P-v : (X-z1638-v : range x1-v) -> Set l16-v) -> (X-H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1639-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v Hterm-v
range-inv-rect-Type4 = λ (l16-v : Level) -> λ (x1-v : Set (lzero)) -> λ (Hterm-v : range x1-v) -> λ (P-v : (X-z1638-v : range x1-v) -> Set l16-v) -> λ (H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1639-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> range-rect-Type4 l16-v x1-v (λ (X-x-917-v : range x1-v) -> (X-z1639-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v X-x-917-v) -> P-v X-x-917-v) H1-v Hterm-v (matita-basics-logic.refl lzero (range x1-v) Hterm-v)

range-inv-rect-Type3 : (l16-v : Level) -> (x1-v : Set (lzero)) -> (Hterm-v : range x1-v) -> (P-v : (X-z1644-v : range x1-v) -> Set l16-v) -> (X-H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1645-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v Hterm-v
range-inv-rect-Type3 = λ (l16-v : Level) -> λ (x1-v : Set (lzero)) -> λ (Hterm-v : range x1-v) -> λ (P-v : (X-z1644-v : range x1-v) -> Set l16-v) -> λ (H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1645-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> range-rect-Type3 l16-v x1-v (λ (X-x-921-v : range x1-v) -> (X-z1645-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v X-x-921-v) -> P-v X-x-921-v) H1-v Hterm-v (matita-basics-logic.refl lzero (range x1-v) Hterm-v)

range-inv-rect-Type2 : (l16-v : Level) -> (x1-v : Set (lzero)) -> (Hterm-v : range x1-v) -> (P-v : (X-z1650-v : range x1-v) -> Set l16-v) -> (X-H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1651-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v Hterm-v
range-inv-rect-Type2 = λ (l16-v : Level) -> λ (x1-v : Set (lzero)) -> λ (Hterm-v : range x1-v) -> λ (P-v : (X-z1650-v : range x1-v) -> Set l16-v) -> λ (H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1651-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> range-rect-Type2 l16-v x1-v (λ (X-x-923-v : range x1-v) -> (X-z1651-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v X-x-923-v) -> P-v X-x-923-v) H1-v Hterm-v (matita-basics-logic.refl lzero (range x1-v) Hterm-v)

range-inv-rect-Type1 : (l16-v : Level) -> (x1-v : Set (lzero)) -> (Hterm-v : range x1-v) -> (P-v : (X-z1656-v : range x1-v) -> Set l16-v) -> (X-H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1657-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v Hterm-v
range-inv-rect-Type1 = λ (l16-v : Level) -> λ (x1-v : Set (lzero)) -> λ (Hterm-v : range x1-v) -> λ (P-v : (X-z1656-v : range x1-v) -> Set l16-v) -> λ (H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1657-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> range-rect-Type1 l16-v x1-v (λ (X-x-925-v : range x1-v) -> (X-z1657-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v X-x-925-v) -> P-v X-x-925-v) H1-v Hterm-v (matita-basics-logic.refl lzero (range x1-v) Hterm-v)

range-inv-rect-Type0 : (l16-v : Level) -> (x1-v : Set (lzero)) -> (Hterm-v : range x1-v) -> (P-v : (X-z1662-v : range x1-v) -> Set l16-v) -> (X-H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1663-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v Hterm-v
range-inv-rect-Type0 = λ (l16-v : Level) -> λ (x1-v : Set (lzero)) -> λ (Hterm-v : range x1-v) -> λ (P-v : (X-z1662-v : range x1-v) -> Set l16-v) -> λ (H1-v : (X-enum-v : (X---v : matita-arithmetics-nat.nat) -> x1-v) -> (X-upto-v : matita-arithmetics-nat.nat) -> (X-filter-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X-z1663-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> P-v (mk-range x1-v X-enum-v X-upto-v X-filter-v)) -> range-rect-Type0 l16-v x1-v (λ (X-x-927-v : range x1-v) -> (X-z1663-v : matita-basics-logic.eq lzero (range x1-v) Hterm-v X-x-927-v) -> P-v X-x-927-v) H1-v Hterm-v (matita-basics-logic.refl lzero (range x1-v) Hterm-v)

range-discr : (l845-v : Level) -> (a1-v : Set (lzero)) -> (x-v : range a1-v) -> (y-v : range a1-v) -> (X-e-v : matita-basics-logic.eq lzero (range a1-v) x-v y-v) -> match-range a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845-v))) (λ (X---v : range a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l845-v))) (λ (t0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (t1-v : matita-arithmetics-nat.nat) -> λ (t2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> match-range a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845-v))) (λ (X---v : range a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l845-v))) (λ (u0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (u1-v : matita-arithmetics-nat.nat) -> λ (u2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (P-v : Set l845-v) -> (X-z59-v : (e0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> matita-arithmetics-nat.nat) t1-v u0-v e0-v) u1-v) -> (X-e2-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) (matita-basics-logic.R2 lzero lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> matita-arithmetics-nat.nat) t1-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (p1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x00-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p00-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x00-v) -> matita-arithmetics-nat.nat) t1-v x0-v p0-v) x1-v) -> (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) t2-v u0-v e0-v u1-v e1-v) u2-v) -> P-v) -> P-v) y-v) x-v
range-discr = λ (l845-v : Level) -> λ (a1-v : Set (lzero)) -> λ (x-v : range a1-v) -> λ (y-v : range a1-v) -> λ (Deq-v : matita-basics-logic.eq lzero (range a1-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l845-v)) (range a1-v) x-v (λ (x-13-v : range a1-v) -> λ (X-x-14-v : matita-basics-logic.eq lzero (range a1-v) x-v x-13-v) -> match-range a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845-v))) (λ (X---v : range a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l845-v))) (λ (t0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (t1-v : matita-arithmetics-nat.nat) -> λ (t2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> match-range a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845-v))) (λ (X---v : range a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l845-v))) (λ (u0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (u1-v : matita-arithmetics-nat.nat) -> λ (u2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (P-v : Set l845-v) -> (X-z59-v : (e0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> matita-arithmetics-nat.nat) t1-v u0-v e0-v) u1-v) -> (X-e2-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) (matita-basics-logic.R2 lzero lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> matita-arithmetics-nat.nat) t1-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (p1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x00-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p00-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) t0-v x00-v) -> matita-arithmetics-nat.nat) t1-v x0-v p0-v) x1-v) -> (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) t2-v u0-v e0-v u1-v e1-v) u2-v) -> P-v) -> P-v) x-13-v) x-v) (match-range a1-v ((lsuc lzero) ⊔ (lsuc l845-v)) (λ (X---v : range a1-v) -> match-range a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845-v))) (λ (X-0-v : range a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l845-v))) (λ (t0-v : (X--1-v : matita-arithmetics-nat.nat) -> a1-v) -> λ (t1-v : matita-arithmetics-nat.nat) -> λ (t2-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> match-range a1-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845-v))) (λ (X-0-v : range a1-v) -> Set ((lsuc lzero) ⊔ (lsuc l845-v))) (λ (u0-v : (X--1-v : matita-arithmetics-nat.nat) -> a1-v) -> λ (u1-v : matita-arithmetics-nat.nat) -> λ (u2-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (P-v : Set l845-v) -> (X-z59-v : (e0-v : matita-basics-logic.eq lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x0-v : (X--1-v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> matita-arithmetics-nat.nat) t1-v u0-v e0-v) u1-v) -> (X-e2-v : matita-basics-logic.eq lzero ((X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) (matita-basics-logic.R2 lzero lzero lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x0-v : (X--1-v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> matita-arithmetics-nat.nat) t1-v (λ (x0-v : (X--1-v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v x0-v) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (p1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v (λ (x00-v : (X--1-v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p00-v : matita-basics-logic.eq lzero ((X--1-v : matita-arithmetics-nat.nat) -> a1-v) t0-v x00-v) -> matita-arithmetics-nat.nat) t1-v x0-v p0-v) x1-v) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) t2-v u0-v e0-v u1-v e1-v) u2-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (a10-v : matita-arithmetics-nat.nat) -> λ (a2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (P-v : Set l845-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v) a0-v) -> (e1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> matita-arithmetics-nat.nat) a10-v a0-v e0-v) a10-v) -> (X-e2-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) (matita-basics-logic.R2 lzero lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> matita-arithmetics-nat.nat) a10-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (p1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x00-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p00-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x00-v) -> matita-arithmetics-nat.nat) a10-v x0-v p0-v) x1-v) -> (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) a2-v a0-v e0-v a10-v e1-v) a2-v) -> P-v) -> DH-v (matita-basics-logic.refl lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> matita-arithmetics-nat.nat) a10-v a0-v (matita-basics-logic.refl lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v)))) (matita-basics-logic.refl lzero ((X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) (matita-basics-logic.R2 lzero lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> matita-arithmetics-nat.nat) a10-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (p1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x00-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p00-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x00-v) -> matita-arithmetics-nat.nat) a10-v x0-v p0-v) x1-v) -> (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) a2-v a0-v (matita-basics-logic.refl lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-logic.R1 lzero lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v (λ (x0-v : (X---v : matita-arithmetics-nat.nat) -> a1-v) -> λ (p0-v : matita-basics-logic.eq lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v x0-v) -> matita-arithmetics-nat.nat) a10-v a0-v (matita-basics-logic.refl lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) (matita-basics-logic.R0 lzero ((X---v : matita-arithmetics-nat.nat) -> a1-v) a0-v))))))) x-v) y-v Deq-v

sub-hk : (X---v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (X--1-v : (X--1-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (A-v : Set (lzero)) -> matita-basics-relations.relation lzero lzero (range A-v)
sub-hk = λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (A-v : Set (lzero)) -> λ (I-v : range A-v) -> λ (J-v : range A-v) -> (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (upto A-v I-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v i-v) matita-basics-bool.true) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v)

iso : (A-v : Set (lzero)) -> matita-basics-relations.relation lzero lzero (range A-v)
iso = λ (A-v : Set (lzero)) -> λ (I-v : range A-v) -> λ (J-v : range A-v) -> matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (upto A-v I-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero A-v (enum A-v I-v i-v) (enum A-v J-v (h-v i-v))) (sub-hk h-v k-v A-v I-v J-v)) (sub-hk k-v h-v A-v J-v I-v)))

sub-hkO : (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (A-v : Set (lzero)) -> (I-v : range A-v) -> (J-v : range A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (upto A-v I-v) matita-arithmetics-nat.O) -> sub-hk h-v k-v A-v I-v J-v
sub-hkO = λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (A-v : Set (lzero)) -> λ (I-v : range A-v) -> λ (J-v : range A-v) -> λ (up0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (upto A-v I-v) matita-arithmetics-nat.O) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (upto A-v I-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v matita-arithmetics-nat.O) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v i-v) matita-basics-bool.true) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v)) (matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v i-v) matita-basics-bool.true) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v)) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) (upto A-v I-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) matita-arithmetics-nat.O) lti-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) matita-arithmetics-nat.O)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S i-v) matita-arithmetics-nat.O)) (upto A-v I-v) up0-v)) (matita-arithmetics-nat.not-le-Sn-O i-v))) (upto A-v I-v) up0-v

sub0-to-false : (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (A-v : Set (lzero)) -> (I-v : range A-v) -> (J-v : range A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (upto A-v I-v) matita-arithmetics-nat.O) -> (X--1-v : sub-hk h-v k-v A-v J-v I-v) -> (i-v : matita-arithmetics-nat.nat) -> (X--2-v : matita-arithmetics-nat.lt i-v (upto A-v J-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false
sub0-to-false = λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (A-v : Set (lzero)) -> λ (I-v : range A-v) -> λ (J-v : range A-v) -> λ (up0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (upto A-v I-v) matita-arithmetics-nat.O) -> λ (sub-v : sub-hk h-v k-v A-v J-v I-v) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (upto A-v J-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false) (λ (ptrue-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.true) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v I-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v (h-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v I-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v (h-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false) (λ (X-clearme-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v I-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v (h-v i-v)) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v I-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v (h-v i-v)) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i-v) (upto A-v I-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v (h-v i-v)) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false) (λ (hi-v : matita-arithmetics-nat.lt (h-v i-v) (upto A-v I-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v (h-v i-v)) matita-basics-bool.true) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i-v)) i-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (h-v i-v)) matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S (h-v i-v)) (upto A-v I-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (h-v i-v)) matita-arithmetics-nat.O) hi-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (h-v i-v)) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (h-v i-v)) matita-arithmetics-nat.O)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S (h-v i-v)) matita-arithmetics-nat.O)) (upto A-v I-v) up0-v)) (matita-arithmetics-nat.not-le-Sn-O (h-v i-v)))) X-clearme-v) (sub-v i-v lti-v ptrue-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v i-v) matita-basics-bool.false) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (filter A-v J-v i-v) auto-v) (matita-basics-bool.true-or-false (filter A-v J-v i-v))

sub-lt : (A-v : Set (lzero)) -> (e-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v m-v) -> sub-hk (λ (x-v : matita-arithmetics-nat.nat) -> x-v) (λ (x-v : matita-arithmetics-nat.nat) -> x-v) A-v (mk-range A-v e-v n-v p-v) (mk-range A-v e-v m-v p-v)
sub-lt = λ (A-v : Set (lzero)) -> λ (e-v : (X---v : matita-arithmetics-nat.nat) -> A-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v n-v) -> λ (fi-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v i-v) matita-basics-bool.true) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt i-v m-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v i-v) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v i-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt i-v m-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v i-v) matita-basics-bool.true) (matita-arithmetics-nat.lt-to-le-to-lt i-v n-v m-v lti-v lenm-v) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (f-v i-v) fi-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i-v)

transitive-sub : (h1-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (k1-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (h2-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (k2-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (A-v : Set (lzero)) -> (I-v : range A-v) -> (J-v : range A-v) -> (K-v : range A-v) -> (X---v : sub-hk h1-v k1-v A-v I-v J-v) -> (X--1-v : sub-hk h2-v k2-v A-v J-v K-v) -> sub-hk (λ (x-v : matita-arithmetics-nat.nat) -> h2-v (h1-v x-v)) (λ (x-v : matita-arithmetics-nat.nat) -> k1-v (k2-v x-v)) A-v I-v K-v
transitive-sub = λ (h1-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (k1-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (h2-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (k2-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (A-v : Set (lzero)) -> λ (I-v : range A-v) -> λ (J-v : range A-v) -> λ (K-v : range A-v) -> λ (sub1-v : sub-hk h1-v k1-v A-v I-v J-v) -> λ (sub2-v : sub-hk h2-v k2-v A-v J-v K-v) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (upto A-v I-v)) -> λ (fi-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v I-v i-v) matita-basics-bool.true) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h1-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h1-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (h1-v i-v)) i-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h1-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h1-v i-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (h1-v i-v)) i-v)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (k2-v (h2-v (h1-v i-v)))) i-v)) (λ (X-clearme-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h1-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h1-v i-v)) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (h1-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h1-v i-v)) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h1-v i-v) (upto A-v J-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h1-v i-v)) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (h1-v i-v)) i-v) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (k2-v (h2-v (h1-v i-v)))) i-v)) (λ (lth1i-v : matita-arithmetics-nat.lt (h1-v i-v) (upto A-v J-v)) -> λ (fh1i-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v J-v (h1-v i-v)) matita-basics-bool.true) -> λ (ei-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (h1-v i-v)) i-v) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k2-v (h2-v (h1-v i-v))) (h1-v i-v)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k2-v (h2-v (h1-v i-v))) (h1-v i-v))) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (k2-v (h2-v (h1-v i-v)))) i-v)) (λ (X-clearme0-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k2-v (h2-v (h1-v i-v))) (h1-v i-v)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (k2-v (h2-v (h1-v i-v)))) i-v)) (λ (H1-v : matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) -> λ (H2-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true) -> λ (H3-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k2-v (h2-v (h1-v i-v))) (h1-v i-v)) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v (k2-v (h2-v (h1-v i-v)))) i-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (h2-v (h1-v i-v)) (upto A-v K-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter A-v K-v (h2-v (h1-v i-v))) matita-basics-bool.true) H1-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (filter A-v K-v (h2-v (h1-v i-v))) H2-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (h1-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k1-v X---v) i-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i-v) (k1-v (h1-v i-v)) ei-v) (k2-v (h2-v (h1-v i-v))) H3-v)) X-clearme0-v) (sub2-v (h1-v i-v) lth1i-v fh1i-v)) X-clearme-v) (sub1-v i-v lti-v fi-v)

let-clause-10471 : (n1-v : matita-arithmetics-nat.nat) -> (n2-v : matita-arithmetics-nat.nat) -> (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : ACop lzero B-v nil-v) -> (f1-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (f2-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X-clearme-v : iso B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v)) -> (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)))) -> (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> (X-clearme1-v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v))) -> (X-clearme2-v : matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) -> (same-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) -> (i-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (Hind-v : (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v m-v f-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v m-v f-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> matita-basics-logic.eq lzero B-v (bigop matita-arithmetics-nat.O (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop m-v (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) -> (p20-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> (sub1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v)) -> (sub2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> (x2571-v : matita-arithmetics-nat.nat) -> (x2572-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2571-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x2572-v (matita-arithmetics-div-and-mod.div x2571-v x2572-v)) (matita-arithmetics-div-and-mod.mod x2571-v x2572-v))
let-clause-10471 = λ (n1-v : matita-arithmetics-nat.nat) -> λ (n2-v : matita-arithmetics-nat.nat) -> λ (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : ACop lzero B-v nil-v) -> λ (f1-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (f2-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (X-clearme-v : iso B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v)) -> λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)))) -> λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v))) -> λ (X-clearme2-v : matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) -> λ (same-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v m-v f-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v m-v f-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> matita-basics-logic.eq lzero B-v (bigop matita-arithmetics-nat.O (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop m-v (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) -> λ (p20-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> λ (sub1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v)) -> λ (sub2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> λ (x2571-v : matita-arithmetics-nat.nat) -> λ (x2572-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div x2571-v x2572-v) x2572-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2571-v (matita-arithmetics-nat.plus X--1-v (matita-arithmetics-div-and-mod.mod x2571-v x2572-v))) (matita-arithmetics-div-and-mod.div-mod x2571-v x2572-v) (matita-arithmetics-nat.times x2572-v (matita-arithmetics-div-and-mod.div x2571-v x2572-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div x2571-v x2572-v) x2572-v)

bigop-iso : (n1-v : matita-arithmetics-nat.nat) -> (n2-v : matita-arithmetics-nat.nat) -> (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : ACop lzero B-v nil-v) -> (f1-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (f2-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : iso B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v)) -> matita-basics-logic.eq lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f1-v i-v)) (bigop n2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f2-v i-v))
bigop-iso = λ (n1-v : matita-arithmetics-nat.nat) -> λ (n2-v : matita-arithmetics-nat.nat) -> λ (p1-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p2-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : ACop lzero B-v nil-v) -> λ (f1-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (f2-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (X-clearme-v : iso B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v)) -> matita-basics-logic.match-ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (upto B-v (mk-range B-v f1-v n1-v p1-v))) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f1-v n1-v p1-v) i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (enum B-v (mk-range B-v f1-v n1-v p1-v) i-v) (enum B-v (mk-range B-v f2-v n2-v p2-v) (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (upto B-v (mk-range B-v f1-v n1-v p1-v))) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f1-v n1-v p1-v) i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (enum B-v (mk-range B-v f1-v n1-v p1-v) i-v) (enum B-v (mk-range B-v f2-v n2-v p2-v) (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v))))) -> matita-basics-logic.eq lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f1-v i-v)) (bigop n2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f2-v i-v))) (λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)))) -> matita-basics-logic.match-ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)))) -> matita-basics-logic.eq lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f1-v i-v)) (bigop n2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f2-v i-v))) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v))) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) (sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v))) -> matita-basics-logic.eq lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f1-v i-v)) (bigop n2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f2-v i-v))) (λ (X-clearme2-v : matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) -> matita-basics-logic.match-And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v)) lzero (λ (X---v : matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v f1-v n1-v p1-v) (mk-range B-v f2-v n2-v p2-v))) -> (X--1-v : sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v n1-v p1-v)) -> matita-basics-logic.eq lzero B-v (bigop n1-v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f1-v i-v)) (bigop n2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f2-v i-v))) (λ (same-v : (i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n1-v) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f1-v i-v) (f2-v (h-v i-v))) -> matita-arithmetics-nat.le-gen lzero (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v X---v p1-v) (mk-range B-v f2-v n2-v p2-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p2-v) (mk-range B-v f1-v X---v p1-v)) -> matita-basics-logic.eq lzero B-v (bigop X---v (λ (i-v : matita-arithmetics-nat.nat) -> p1-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f1-v i-v)) (bigop n2-v (λ (i-v : matita-arithmetics-nat.nat) -> p2-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f2-v i-v))) n1-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le X-x-365-v n1-v) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v X-x-365-v p1-v) (mk-range B-v f2-v n2-v f-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v f-v) (mk-range B-v f1-v X-x-365-v p1-v)) -> matita-basics-logic.eq lzero B-v (bigop X-x-365-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v X-x-365-v f-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v X-x-365-v f-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> matita-basics-logic.eq lzero B-v (bigop matita-arithmetics-nat.O (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop X-x-365-v (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (λ (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (auto-v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> λ (auto'-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v matita-arithmetics-nat.O f-v)) -> λ (auto''-v : sub-hk k-v h-v B-v (mk-range B-v f2-v matita-arithmetics-nat.O f-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> matita-basics-logic.refl lzero B-v (bigop matita-arithmetics-nat.O (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) (λ (m-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v m-v f-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v m-v f-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> matita-basics-logic.eq lzero B-v (bigop matita-arithmetics-nat.O (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop m-v (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) -> λ (p20-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (X---v : matita-arithmetics-nat.le matita-arithmetics-nat.O n1-v) -> λ (sub1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v)) -> λ (sub2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop m-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v)) (λ (x-v : B-v) -> λ (X-0-v : matita-basics-logic.eq lzero B-v x-v (bigop m-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) -> matita-basics-logic.eq lzero B-v (bigop matita-arithmetics-nat.O (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) x-v) (Hind-v p20-v (matita-arithmetics-nat.le-O-n n1-v) (sub-hkO h-v k-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v m-v p20-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (upto B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v)))) (transitive-sub (λ (x-v : matita-arithmetics-nat.nat) -> x-v) (λ (x-v : matita-arithmetics-nat.nat) -> x-v) k-v h-v B-v (mk-range B-v f2-v m-v p20-v) (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v) (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (sub-lt B-v f2-v p20-v m-v (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.le-n-Sn m-v)) sub2-v)) (bigop (matita-arithmetics-nat.S m-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v)) (bigop-Sfalse m-v p20-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f2-v (sub0-to-false k-v h-v B-v (mk-range B-v f1-v matita-arithmetics-nat.O p1-v) (mk-range B-v f2-v (matita-arithmetics-nat.S m-v) p20-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O) sub2-v m-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.lt m-v (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.lt-plus-Sn-r (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O)) matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus X--1-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.lt m-v (matita-arithmetics-nat.S m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X--1-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.lt m-v (matita-arithmetics-nat.S m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.S m-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt m-v X--1-v) (matita-arithmetics-nat.lt m-v (matita-arithmetics-nat.S m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt m-v (matita-arithmetics-nat.S m-v))) (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v matita-arithmetics-nat.O) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X--1-v) (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.plus-n-Sm m-v matita-arithmetics-nat.O) m-v (matita-arithmetics-nat.plus-n-O m-v))) (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O)) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X--1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) matita-arithmetics-nat.O) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X--1-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O)) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) X--1-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O)) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X--1-v) (let-clause-10471 n1-v n2-v p1-v p2-v B-v nil-v op-v f1-v f2-v X-clearme-v h-v X-clearme0-v k-v X-clearme1-v X-clearme2-v same-v i-v m-v Hind-v p20-v X---v sub1-v sub2-v m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O))) matita-arithmetics-nat.O (matita-arithmetics-nat.times-O-n (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-O-n (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O)))) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O)) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X--1-v) (let-clause-10471 n1-v n2-v p1-v p2-v B-v nil-v op-v f1-v f2-v X-clearme-v h-v X-clearme0-v k-v X-clearme1-v X-clearme2-v same-v i-v m-v Hind-v p20-v X---v sub1-v sub2-v m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.div m-v matita-arithmetics-nat.O)) (matita-arithmetics-div-and-mod.mod m-v matita-arithmetics-nat.O)))))))) n2-v) (λ (n-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (f-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (X---v : matita-arithmetics-nat.le n-v n1-v) -> (X--1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v n-v p1-v) (mk-range B-v f2-v n2-v f-v)) -> (X--2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v f-v) (mk-range B-v f1-v n-v p1-v)) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> f-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) -> λ (p20-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (ltn-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) n1-v) -> λ (sub1-v : sub-hk h-v k-v B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v) (mk-range B-v f2-v n2-v p20-v)) -> λ (sub2-v : sub-hk k-v h-v B-v (mk-range B-v f2-v n2-v p20-v) (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.S n-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (λ (p1n-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f1-v n-v) (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f1-v n-v) (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v n-v) (upto B-v (mk-range B-v f2-v n2-v p20-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f2-v n2-v p20-v) (h-v n-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v n-v)) n-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v n-v) (upto B-v (mk-range B-v f2-v n2-v p20-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f2-v n2-v p20-v) (h-v n-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v n-v)) n-v)) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (f1-v n-v) (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (λ (X-clearme3-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v n-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v n-v)) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (h-v n-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v n-v)) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v n-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v n-v)) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v n-v)) n-v) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (f1-v n-v) (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (λ (hn-v : matita-arithmetics-nat.lt (h-v n-v) n2-v) -> λ (p2hn-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v n-v)) matita-basics-bool.true) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v n-v)) n-v) -> matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v op-v (f2-v (h-v n-v)) (bigop n2-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) x-v)) (p20-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f2-v x-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v op-v (f2-v (h-v n-v)) (bigop n2-v (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) x0-v)) (p20-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f2-v x0-v)))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v (f1-v n-v) (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) x-v) (matita-basics-logic.eq-ind-r lzero lzero B-v (f2-v (h-v n-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (f2-v (h-v n-v))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v op-v x-v (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) (aop--o--op lzero B-v nil-v op-v (f2-v (h-v n-v)) (bigop n2-v (λ (x0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) x0-v)) (p20-v x0-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x0-v : matita-arithmetics-nat.nat) -> f2-v x0-v)))) (matita-basics-logic.eq-f lzero lzero B-v B-v (aop--o--op lzero B-v nil-v op-v (f2-v (h-v n-v))) (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop n2-v (λ (x-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) x-v)) (p20-v x-v)) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f2-v x-v)) (Hind-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) X---v)) (p20-v X---v)) (matita-arithmetics-nat.lt-to-le n-v n1-v ltn-v) (λ (i0-v : matita-arithmetics-nat.nat) -> λ (ltin-v : matita-arithmetics-nat.lt i0-v n-v) -> λ (p1i-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v i0-v) matita-basics-bool.true) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) (upto B-v (mk-range B-v f2-v n2-v p20-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f2-v n2-v p20-v) (h-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) (upto B-v (mk-range B-v f2-v n2-v p20-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f2-v n2-v p20-v) (h-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) (h-v i0-v))) (p20-v (h-v i0-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v)) (λ (X-clearme4-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v i0-v)) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v i0-v)) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v i0-v)) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) (h-v i0-v))) (p20-v (h-v i0-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v)) (λ (h1i-v : matita-arithmetics-nat.lt (h-v i0-v) n2-v) -> λ (p2h1i-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v (h-v i0-v)) matita-basics-bool.true) -> λ (eqi-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) (h-v i0-v))) (p20-v (h-v i0-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v (h-v i0-v)) i0-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (h-v i0-v) n2-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) (h-v i0-v))) (p20-v (h-v i0-v))) matita-basics-bool.true) h1i-v (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb x-v) (p20-v (h-v i0-v))) matita-basics-bool.true) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p20-v (h-v i0-v)) p2h1i-v) (matita-arithmetics-nat.eqb (h-v n-v) (h-v i0-v)) (matita-arithmetics-nat.not-eq-to-eqb-false (h-v n-v) (h-v i0-v) (matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v n-v) (h-v i0-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i0-v n-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v n-v) (h-v i0-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) i0-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (k-v (h-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) eqn-v i0-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (h-v i0-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v X---v) i0-v) eqi-v (h-v n-v) auto-v))) (matita-arithmetics-nat.lt-to-not-eq i0-v n-v ltin-v))))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat i0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i0-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i0-v) (k-v (h-v i0-v)) eqi-v)) X-clearme4-v) (sub1-v i0-v (matita-arithmetics-nat.le-S (matita-arithmetics-nat.S i0-v) n-v ltin-v) p1i-v)) (λ (j-v : matita-arithmetics-nat.nat) -> λ (ltj-v : matita-arithmetics-nat.lt j-v n2-v) -> λ (p2j-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) j-v)) (p20-v j-v)) matita-basics-bool.true) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) (upto B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v) (k-v j-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) (upto B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v) (k-v j-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v)) (λ (X-clearme4-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v)) (λ (ltkj-v : matita-arithmetics-nat.lt (k-v j-v) (matita-arithmetics-nat.S n-v)) -> λ (p1kj-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true) -> λ (eqj-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v j-v)) j-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v j-v)) matita-basics-bool.true) (matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v j-v) n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v j-v) n-v)) -> matita-arithmetics-nat.lt (k-v j-v) n-v) (λ (auto-v : matita-arithmetics-nat.lt (k-v j-v) n-v) -> auto-v) (λ (eqkj-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v j-v) n-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt (k-v j-v) n-v) (matita-arithmetics-nat.eqb-elim lzero (h-v n-v) j-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (matita-basics-bool.notb X---v) (p20-v j-v)) matita-basics-bool.true) -> matita-basics-logic.False lzero) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v n-v) j-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.false matita-basics-bool.true) -> matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X---v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false auto'-v) matita-basics-bool.not-eq-true-false) (λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v n-v) j-v)) -> λ (auto'-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v j-v) matita-basics-bool.true) -> matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v n-v) j-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat j-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v j-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat j-v) (h-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (k-v j-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v X---v) j-v) eqj-v n-v eqkj-v)) auto-v) p2j-v)) (matita-arithmetics-nat.le-to-or-lt-eq (k-v j-v) n-v (matita-arithmetics-nat.le-S-S-to-le (k-v j-v) n-v ltkj-v))) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p1-v (k-v j-v)) p1kj-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat j-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v j-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat j-v) (h-v (k-v j-v)) eqj-v)) X-clearme4-v) (sub2-v j-v ltj-v (matita-basics-bool.andb-true-r (matita-basics-bool.notb (matita-arithmetics-nat.eqb (h-v n-v) j-v)) (p20-v j-v) p2j-v))))) (f1-v n-v) (same-v n-v ltn-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p1-v n-v) p1n-v))) (bigop n2-v (λ (x-v : matita-arithmetics-nat.nat) -> p20-v x-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (x-v : matita-arithmetics-nat.nat) -> f2-v x-v)) (bigop-diff p20-v B-v nil-v op-v f2-v (h-v n-v) n2-v hn-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p20-v (h-v n-v)) p2hn-v))) X-clearme3-v) (sub1-v n-v (matita-arithmetics-nat.le-n (matita-arithmetics-nat.S n-v)) p1n-v)) (bigop (matita-arithmetics-nat.S n-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop-Strue n-v p1-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f1-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p1-v n-v) p1n-v))) (λ (p1n-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v n-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n-v (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v))) -> matita-basics-logic.eq lzero B-v x-v (bigop n2-v (λ (i0-v : matita-arithmetics-nat.nat) -> p20-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f2-v i0-v))) (Hind-v p20-v (matita-arithmetics-nat.lt-to-le n-v n1-v ltn-v) (transitive-sub (λ (x-v : matita-arithmetics-nat.nat) -> x-v) (λ (x-v : matita-arithmetics-nat.nat) -> x-v) h-v k-v B-v (mk-range B-v f1-v n-v p1-v) (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v) (mk-range B-v f2-v n2-v p20-v) (sub-lt B-v f1-v p1-v n-v (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.le-n-Sn n-v)) sub1-v) (λ (i0-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i0-v n2-v) -> λ (p2i-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p20-v i0-v) matita-basics-bool.true) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) (upto B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v) (k-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) (upto B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v))) (matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v f1-v (matita-arithmetics-nat.S n-v) p1-v) (k-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v)) (λ (X-clearme3-v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) (matita-arithmetics-nat.S n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v)) (λ (ltki-v : matita-arithmetics-nat.lt (k-v i0-v) (matita-arithmetics-nat.S n-v)) -> λ (p1ki-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true) -> λ (eqi-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (h-v (k-v i0-v)) i0-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v (k-v i0-v)) matita-basics-bool.true) (matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v i0-v) n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v i0-v) n-v)) -> matita-arithmetics-nat.lt (k-v i0-v) n-v) (λ (auto-v : matita-arithmetics-nat.lt (k-v i0-v) n-v) -> auto-v) (λ (eqki-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (k-v i0-v) n-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt (k-v i0-v) n-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true matita-basics-bool.false) (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true X---v) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) matita-basics-bool.false (matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool (p1-v n-v) (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) p1n-v matita-basics-bool.true (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (k-v i0-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-basics-bool.bool (p1-v X---v) matita-basics-bool.true) p1ki-v n-v eqki-v))) matita-basics-bool.not-eq-true-false)) (matita-arithmetics-nat.le-to-or-lt-eq (k-v i0-v) n-v (matita-arithmetics-nat.le-S-S-to-le (k-v i0-v) n-v ltki-v))) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p1-v (k-v i0-v)) p1ki-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat i0-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i0-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i0-v) (h-v (k-v i0-v)) eqi-v)) X-clearme3-v) (sub2-v i0-v lti-v p2i-v))) (bigop (matita-arithmetics-nat.S n-v) (λ (i0-v : matita-arithmetics-nat.nat) -> p1-v i0-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i0-v : matita-arithmetics-nat.nat) -> f1-v i0-v)) (bigop-Sfalse n-v p1-v B-v nil-v (aop--o--op lzero B-v nil-v op-v) f1-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p1-v n-v) p1n-v))) (matita-basics-bool.true-or-false (p1-v n-v))) i-v p2-v)) X-clearme2-v) X-clearme1-v) X-clearme0-v) X-clearme-v

bigop-commute : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (p11-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p12-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p21-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (p22-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (op-v : ACop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> B-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--2-v : (i-v : matita-arithmetics-nat.nat) -> (j-v : matita-arithmetics-nat.nat) -> (X--2-v : matita-arithmetics-nat.lt i-v n-v) -> (X--3-v : matita-arithmetics-nat.lt j-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v i-v) (p12-v i-v j-v)) (matita-basics-bool.andb (p21-v j-v) (p22-v i-v j-v))) -> matita-basics-logic.eq lzero B-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p11-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> bigop m-v (λ (j-v : matita-arithmetics-nat.nat) -> p12-v i-v j-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (j-v : matita-arithmetics-nat.nat) -> f-v i-v j-v))) (bigop m-v (λ (j-v : matita-arithmetics-nat.nat) -> p21-v j-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (j-v : matita-arithmetics-nat.nat) -> bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p22-v i-v j-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v j-v)))
bigop-commute = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (p11-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p12-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p21-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (p22-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (op-v : ACop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> B-v) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (Heq-v : (i-v : matita-arithmetics-nat.nat) -> (j-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v n-v) -> (X--1-v : matita-arithmetics-nat.lt j-v m-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v i-v) (p12-v i-v j-v)) (matita-basics-bool.andb (p21-v j-v) (p22-v i-v j-v))) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.times n-v m-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times n-v m-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)))) -> matita-basics-logic.eq lzero B-v x-v (bigop m-v (λ (j-v : matita-arithmetics-nat.nat) -> p21-v j-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (j-v : matita-arithmetics-nat.nat) -> bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p22-v i-v j-v) B-v nil-v (aop--o--op lzero B-v nil-v op-v) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v j-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop (matita-arithmetics-nat.times m-v n-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div i-v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop (matita-arithmetics-nat.times m-v n-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div i-v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v)))) -> matita-basics-logic.eq lzero B-v (bigop (matita-arithmetics-nat.times n-v m-v) (λ (i-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) x-v) (bigop-iso (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v))) B-v nil-v op-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-basics-logic.ex-intro lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (h-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (upto B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)))))) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (filter B-v (mk-range B-v (λ (X-0-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X-0-v m-v) (matita-arithmetics-div-and-mod.mod X-0-v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X-0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X-0-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X-0-v m-v) (matita-arithmetics-div-and-mod.mod X-0-v m-v)))) i-v) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (enum B-v (mk-range B-v (λ (X-0-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X-0-v m-v) (matita-arithmetics-div-and-mod.mod X-0-v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X-0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X-0-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X-0-v m-v) (matita-arithmetics-div-and-mod.mod X-0-v m-v)))) i-v) (enum B-v (mk-range B-v (λ (X-0-v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X-0-v n-v) (matita-arithmetics-div-and-mod.div X-0-v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X-0-v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X-0-v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X-0-v n-v) (matita-arithmetics-div-and-mod.div X-0-v n-v)))) (h-v i-v))) (sub-hk h-v k-v B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)))))) (sub-hk k-v h-v B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v))))))) (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-basics-logic.ex-intro lzero lzero ((X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (λ (k-v : (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times n-v m-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)) (f-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) (sub-hk (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) k-v B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)))))) (sub-hk k-v (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)))))) (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times n-v m-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)) (f-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) (sub-hk (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)))))) (sub-hk (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v))))) (matita-basics-logic.conj lzero lzero ((i-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times n-v m-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) matita-basics-bool.true) -> matita-basics-logic.eq lzero B-v (f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)) (f-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) (sub-hk (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) (λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) B-v (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)) (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div X---v m-v)) (p12-v (matita-arithmetics-div-and-mod.div X---v m-v) (matita-arithmetics-div-and-mod.mod X---v m-v)))) (mk-range B-v (λ (X---v : matita-arithmetics-nat.nat) -> f-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v)) (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div X---v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod X---v n-v) (matita-arithmetics-div-and-mod.div X---v n-v))))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times n-v m-v)) -> λ (Heq0-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) matita-basics-bool.true) -> matita-basics-logic.eq-f2 lzero lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat B-v f-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod-plus-times n-v (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div-plus-times n-v (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v)))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times n-v m-v)) -> λ (Hi-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) matita-basics-bool.true) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-nat.times m-v n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v)) (p22-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) m-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v)) i-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-nat.times m-v n-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v)) (p22-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) matita-basics-bool.true) (matita-arithmetics-nat.lt-to-le-to-lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) n-v) (matita-arithmetics-nat.times m-v n-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div i-v m-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div i-v m-v)))) -> matita-arithmetics-nat.le x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) n-v)) (matita-arithmetics-nat.monotonic-le-plus-r (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div i-v m-v)) n-v (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v)) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v))) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v))) -> matita-arithmetics-nat.le x-v (matita-arithmetics-nat.times m-v n-v)) (matita-arithmetics-nat.le-times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod i-v m-v)) m-v n-v n-v (matita-arithmetics-div-and-mod.lt-mod-m-m i-v m-v posm-v) (matita-arithmetics-nat.le-n n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) n-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.mod i-v m-v)) (p22-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v)) (p22-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) matita-basics-bool.true) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div i-v m-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.div i-v m-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.mod i-v m-v)) (p22-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v)) (p22-v x-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v))) matita-basics-bool.true) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod i-v m-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.mod i-v m-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.mod i-v m-v)) (p22-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p21-v x-v) (p22-v (matita-arithmetics-div-and-mod.div i-v m-v) x-v)) matita-basics-bool.true) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool matita-basics-bool.true (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.mod i-v m-v)) (p22-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v)))) -> matita-basics-logic.rewrite-l lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.mod i-v m-v)) (p22-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) auto-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div-plus-times n-v (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.mod-plus-times n-v (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v))) (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div i-v m-v)) (p12-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v))) Hi-v (Heq-v (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v) (matita-arithmetics-div-and-mod.lt-mod-m-m i-v m-v posm-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div i-v m-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.div i-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x-v m-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v)) i-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod i-v m-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.mod i-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div i-v m-v) m-v) x-v) i-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod i-v m-v)) i-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-div-and-mod.mod i-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div i-v m-v) m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod i-v m-v))) (matita-arithmetics-div-and-mod.div-mod i-v m-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div i-v m-v) m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-div-and-mod.mod i-v m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-div-and-mod.mod i-v m-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (matita-arithmetics-div-and-mod.div i-v m-v)) (matita-arithmetics-div-and-mod.mod i-v m-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div i-v m-v) m-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div i-v m-v) m-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.div-plus-times n-v (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v m-v) n-v) (matita-arithmetics-div-and-mod.div i-v m-v)) n-v) (matita-arithmetics-div-and-mod.mod-plus-times n-v (matita-arithmetics-div-and-mod.mod i-v m-v) (matita-arithmetics-div-and-mod.div i-v m-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div n-v i-v m-v lti-v))))) (λ (i-v : matita-arithmetics-nat.nat) -> λ (lti-v : matita-arithmetics-nat.lt i-v (matita-arithmetics-nat.times m-v n-v)) -> λ (Hi-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div i-v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) matita-basics-bool.true) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-nat.times n-v m-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v)) (p12-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v))) matita-basics-bool.true)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v)) i-v) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-nat.times n-v m-v)) (matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v)) (p12-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v))) matita-basics-bool.true) (matita-arithmetics-nat.lt-to-le-to-lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) m-v) (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div i-v n-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div i-v n-v)))) -> matita-arithmetics-nat.le x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) m-v)) (matita-arithmetics-nat.monotonic-le-plus-r (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.div i-v n-v)) m-v (matita-arithmetics-div-and-mod.lt-times-to-lt-div m-v i-v n-v lti-v)) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v))) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v))) -> matita-arithmetics-nat.le x-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.le-times (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod i-v n-v)) n-v m-v m-v (matita-arithmetics-div-and-mod.lt-mod-m-m i-v n-v posn-v) (matita-arithmetics-nat.le-n m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) m-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) m-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.mod i-v n-v)) (p12-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) x-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v)) (p12-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v))) matita-basics-bool.true) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div i-v n-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.div i-v n-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.mod i-v n-v)) (p12-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v)) (p12-v (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) x-v)) matita-basics-bool.true) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod i-v n-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.mod i-v n-v)) -> (X--1-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.mod i-v n-v)) (p12-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v x-v) (p12-v x-v (matita-arithmetics-div-and-mod.div i-v n-v))) matita-basics-bool.true) (λ (auto-v : matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.mod i-v n-v)) (p12-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) matita-basics-bool.true) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (matita-basics-bool.andb (p11-v (matita-arithmetics-div-and-mod.mod i-v n-v)) (p12-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) auto-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.div-plus-times m-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div m-v i-v n-v lti-v))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.mod-plus-times m-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div m-v i-v n-v lti-v))) (matita-basics-bool.andb (p21-v (matita-arithmetics-div-and-mod.div i-v n-v)) (p22-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v))) Hi-v (Heq-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v) (matita-arithmetics-div-and-mod.lt-mod-m-m i-v n-v posn-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div m-v i-v n-v lti-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.div i-v n-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.div i-v n-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x-v n-v) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v)) i-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod i-v n-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-div-and-mod.mod i-v n-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div i-v n-v) n-v) x-v) i-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod i-v n-v)) i-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v i-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat i-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-div-and-mod.mod i-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div i-v n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod i-v n-v))) (matita-arithmetics-div-and-mod.div-mod i-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div i-v n-v) n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-div-and-mod.mod i-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-div-and-mod.mod i-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div i-v n-v)) (matita-arithmetics-div-and-mod.mod i-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div i-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div i-v n-v) n-v)) (matita-arithmetics-div-and-mod.div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.div-plus-times m-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div m-v i-v n-v lti-v))) (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.mod i-v n-v) m-v) (matita-arithmetics-div-and-mod.div i-v n-v)) m-v) (matita-arithmetics-div-and-mod.mod-plus-times m-v (matita-arithmetics-div-and-mod.mod i-v n-v) (matita-arithmetics-div-and-mod.div i-v n-v) (matita-arithmetics-div-and-mod.lt-times-to-lt-div m-v i-v n-v lti-v)))))))) (bigop m-v (λ (x-v : matita-arithmetics-nat.nat) -> p21-v x-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (x-v : matita-arithmetics-nat.nat) -> bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p22-v i-v x-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v x-v))) (bigop-prod m-v n-v p21-v (λ (X---v : matita-arithmetics-nat.nat) -> λ (X-0-v : matita-arithmetics-nat.nat) -> p22-v X-0-v X---v) B-v nil-v (aop lzero B-v nil-v op-v) (λ (X---v : matita-arithmetics-nat.nat) -> λ (X-0-v : matita-arithmetics-nat.nat) -> f-v X-0-v X---v))) (bigop n-v (λ (x-v : matita-arithmetics-nat.nat) -> p11-v x-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (x-v : matita-arithmetics-nat.nat) -> bigop m-v (λ (i-v : matita-arithmetics-nat.nat) -> p12-v x-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v op-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v x-v i-v))) (bigop-prod n-v m-v p11-v p12-v B-v nil-v (aop lzero B-v nil-v op-v) f-v)

data Dop (l10-v : Level) (A-v : Set l10-v) (nil-v : A-v) : Set l10-v where
  mk-Dop' : (sum-v : ACop l10-v A-v nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l10-v A-v (prod-v a-v nil-v) nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l10-v A-v (prod-v a-v (aop--o--op l10-v A-v nil-v sum-v b-v c-v)) (aop--o--op l10-v A-v nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Dop l10-v A-v nil-v

mk-Dop : (l10-v : Level) -> (A-v : Set l10-v) -> (nil-v : A-v) -> (sum-v : ACop l10-v A-v nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l10-v A-v (prod-v a-v nil-v) nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l10-v A-v (prod-v a-v (aop--o--op l10-v A-v nil-v sum-v b-v c-v)) (aop--o--op l10-v A-v nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Dop l10-v A-v nil-v
mk-Dop _ _ _ = mk-Dop'

match-Dop : (l19-v : Level) -> (A-v : Set l19-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Dop l19-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-Dop-v : (sum-v : ACop l19-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l19-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l19-v A-v (prod-v a-v (aop--o--op l19-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l19-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> return-type-v (mk-Dop l19-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (z-v : Dop l19-v A-v X-nil-v) -> return-type-v z-v
match-Dop _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-ind : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-943-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-943-v : Dop l22-v A-v X-nil-v) -> Q--v x-943-v
Dop-ind _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type5 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type5 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type4 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type4 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type3 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type3 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type2 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type2 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type1 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type1 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type0 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type0 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

sum : (l3-v : Level) -> (A-v : Set l3-v) -> (nil-v : A-v) -> (X-xxx-v : Dop l3-v A-v nil-v) -> ACop l3-v A-v nil-v
sum l4-v A-v nil-v X-xxx-v = match-Dop l4-v A-v nil-v l4-v (λ (xxx0-v : Dop l4-v A-v nil-v) -> ACop l4-v A-v nil-v) (λ (yyy-v : ACop l4-v A-v nil-v) -> λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l4-v A-v (X---v a-v nil-v) nil-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l4-v A-v (X---v a-v (aop--o--op l4-v A-v nil-v yyy-v b-v c-v)) (aop--o--op l4-v A-v nil-v yyy-v (X---v a-v b-v) (X---v a-v c-v))) -> yyy-v) X-xxx-v

prod : (l4-v : Level) -> (A-v : Set l4-v) -> (nil-v : A-v) -> (X-xxx-v : Dop l4-v A-v nil-v) -> (X-x-969-v : A-v) -> (X-x-970-v : A-v) -> A-v
prod l9-v A-v nil-v X-xxx-v = match-Dop l9-v A-v nil-v l9-v (λ (xxx0-v : Dop l9-v A-v nil-v) -> (X-x-969-v : A-v) -> (X-x-970-v : A-v) -> A-v) (λ (X---v : ACop l9-v A-v nil-v) -> λ (yyy-v : (X--1-v : A-v) -> (X--2-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v nil-v) nil-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v (aop--o--op l9-v A-v nil-v X---v b-v c-v)) (aop--o--op l9-v A-v nil-v X---v (yyy-v a-v b-v) (yyy-v a-v c-v))) -> yyy-v) X-xxx-v

null : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Dop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (prod l2-v A-v nil-v xxx-v a-v nil-v) nil-v
null l8-v A-v nil-v xxx-v = match-Dop l8-v A-v nil-v l8-v (λ (xxx0-v : Dop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (prod l8-v A-v nil-v xxx0-v a-v nil-v) nil-v) (λ (X---v : ACop l8-v A-v nil-v) -> λ (X-0-v : (X--1-v : A-v) -> (X--2-v : A-v) -> A-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X-0-v a-v nil-v) nil-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X-0-v a-v (aop--o--op l8-v A-v nil-v X---v b-v c-v)) (aop--o--op l8-v A-v nil-v X---v (X-0-v a-v b-v) (X-0-v a-v c-v))) -> yyy-v) xxx-v

distr : (l8-v : Level) -> (A-v : Set l8-v) -> (nil-v : A-v) -> (xxx-v : Dop l8-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (prod l8-v A-v nil-v xxx-v a-v (aop--o--op l8-v A-v nil-v (sum l8-v A-v nil-v xxx-v) b-v c-v)) (aop--o--op l8-v A-v nil-v (sum l8-v A-v nil-v xxx-v) (prod l8-v A-v nil-v xxx-v a-v b-v) (prod l8-v A-v nil-v xxx-v a-v c-v))
distr l20-v A-v nil-v xxx-v = match-Dop l20-v A-v nil-v l20-v (λ (xxx0-v : Dop l20-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l20-v A-v (prod l20-v A-v nil-v xxx0-v a-v (aop--o--op l20-v A-v nil-v (sum l20-v A-v nil-v xxx0-v) b-v c-v)) (aop--o--op l20-v A-v nil-v (sum l20-v A-v nil-v xxx0-v) (prod l20-v A-v nil-v xxx0-v a-v b-v) (prod l20-v A-v nil-v xxx0-v a-v c-v))) (λ (X---v : ACop l20-v A-v nil-v) -> λ (X-0-v : (X--1-v : A-v) -> (X--2-v : A-v) -> A-v) -> λ (X-1-v : (a-v : A-v) -> matita-basics-logic.eq l20-v A-v (X-0-v a-v nil-v) nil-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l20-v A-v (X-0-v a-v (aop--o--op l20-v A-v nil-v X---v b-v c-v)) (aop--o--op l20-v A-v nil-v X---v (X-0-v a-v b-v) (X-0-v a-v c-v))) -> yyy-v) xxx-v

Dop-inv-ind : (l40-v l34-v : Level) -> (x1-v : Set l40-v) -> (x2-v : x1-v) -> (Hterm-v : Dop l40-v x1-v x2-v) -> (P-v : (X-z1698-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> (X-H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1699-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v Hterm-v
Dop-inv-ind = λ (l40-v l34-v : Level) -> λ (x1-v : Set l40-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Dop l40-v x1-v x2-v) -> λ (P-v : (X-z1698-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> λ (H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1699-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> Dop-ind l40-v (l40-v ⊔ l34-v) x1-v x2-v (λ (X-x-943-v : Dop l40-v x1-v x2-v) -> (X-z1699-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v X-x-943-v) -> P-v X-x-943-v) H1-v Hterm-v (matita-basics-logic.refl l40-v (Dop l40-v x1-v x2-v) Hterm-v)

Dop-inv-rect-Type4 : (l40-v l34-v : Level) -> (x1-v : Set l40-v) -> (x2-v : x1-v) -> (Hterm-v : Dop l40-v x1-v x2-v) -> (P-v : (X-z1704-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> (X-H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1705-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v Hterm-v
Dop-inv-rect-Type4 = λ (l40-v l34-v : Level) -> λ (x1-v : Set l40-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Dop l40-v x1-v x2-v) -> λ (P-v : (X-z1704-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> λ (H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1705-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> Dop-rect-Type4 l40-v (l40-v ⊔ l34-v) x1-v x2-v (λ (X-x-945-v : Dop l40-v x1-v x2-v) -> (X-z1705-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v X-x-945-v) -> P-v X-x-945-v) H1-v Hterm-v (matita-basics-logic.refl l40-v (Dop l40-v x1-v x2-v) Hterm-v)

Dop-inv-rect-Type3 : (l40-v l34-v : Level) -> (x1-v : Set l40-v) -> (x2-v : x1-v) -> (Hterm-v : Dop l40-v x1-v x2-v) -> (P-v : (X-z1710-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> (X-H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1711-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v Hterm-v
Dop-inv-rect-Type3 = λ (l40-v l34-v : Level) -> λ (x1-v : Set l40-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Dop l40-v x1-v x2-v) -> λ (P-v : (X-z1710-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> λ (H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1711-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> Dop-rect-Type3 l40-v (l40-v ⊔ l34-v) x1-v x2-v (λ (X-x-949-v : Dop l40-v x1-v x2-v) -> (X-z1711-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v X-x-949-v) -> P-v X-x-949-v) H1-v Hterm-v (matita-basics-logic.refl l40-v (Dop l40-v x1-v x2-v) Hterm-v)

Dop-inv-rect-Type2 : (l40-v l34-v : Level) -> (x1-v : Set l40-v) -> (x2-v : x1-v) -> (Hterm-v : Dop l40-v x1-v x2-v) -> (P-v : (X-z1716-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> (X-H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1717-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v Hterm-v
Dop-inv-rect-Type2 = λ (l40-v l34-v : Level) -> λ (x1-v : Set l40-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Dop l40-v x1-v x2-v) -> λ (P-v : (X-z1716-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> λ (H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1717-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> Dop-rect-Type2 l40-v (l40-v ⊔ l34-v) x1-v x2-v (λ (X-x-951-v : Dop l40-v x1-v x2-v) -> (X-z1717-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v X-x-951-v) -> P-v X-x-951-v) H1-v Hterm-v (matita-basics-logic.refl l40-v (Dop l40-v x1-v x2-v) Hterm-v)

Dop-inv-rect-Type1 : (l40-v l34-v : Level) -> (x1-v : Set l40-v) -> (x2-v : x1-v) -> (Hterm-v : Dop l40-v x1-v x2-v) -> (P-v : (X-z1722-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> (X-H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1723-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v Hterm-v
Dop-inv-rect-Type1 = λ (l40-v l34-v : Level) -> λ (x1-v : Set l40-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Dop l40-v x1-v x2-v) -> λ (P-v : (X-z1722-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> λ (H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1723-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> Dop-rect-Type1 l40-v (l40-v ⊔ l34-v) x1-v x2-v (λ (X-x-953-v : Dop l40-v x1-v x2-v) -> (X-z1723-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v X-x-953-v) -> P-v X-x-953-v) H1-v Hterm-v (matita-basics-logic.refl l40-v (Dop l40-v x1-v x2-v) Hterm-v)

Dop-inv-rect-Type0 : (l40-v l34-v : Level) -> (x1-v : Set l40-v) -> (x2-v : x1-v) -> (Hterm-v : Dop l40-v x1-v x2-v) -> (P-v : (X-z1728-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> (X-H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1729-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v Hterm-v
Dop-inv-rect-Type0 = λ (l40-v l34-v : Level) -> λ (x1-v : Set l40-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Dop l40-v x1-v x2-v) -> λ (P-v : (X-z1728-v : Dop l40-v x1-v x2-v) -> Set l34-v) -> λ (H1-v : (sum-v : ACop l40-v x1-v x2-v) -> (prod-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-null-v : (a-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v x2-v) x2-v) -> (X-distr-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l40-v x1-v (prod-v a-v (aop--o--op l40-v x1-v x2-v sum-v b-v c-v)) (aop--o--op l40-v x1-v x2-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> (X-z1729-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> P-v (mk-Dop l40-v x1-v x2-v sum-v prod-v X-null-v X-distr-v)) -> Dop-rect-Type0 l40-v (l40-v ⊔ l34-v) x1-v x2-v (λ (X-x-955-v : Dop l40-v x1-v x2-v) -> (X-z1729-v : matita-basics-logic.eq l40-v (Dop l40-v x1-v x2-v) Hterm-v X-x-955-v) -> P-v X-x-955-v) H1-v Hterm-v (matita-basics-logic.refl l40-v (Dop l40-v x1-v x2-v) Hterm-v)

Dop-discr : (l2400-v l3206-v : Level) -> (a1-v : Set l2400-v) -> (a2-v : a1-v) -> (x-v : Dop l2400-v a1-v a2-v) -> (y-v : Dop l2400-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq l2400-v (Dop l2400-v a1-v a2-v) x-v y-v) -> match-Dop l2400-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206-v)) ⊔ (lsuc l2400-v))) (λ (X---v : Dop l2400-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v))) (λ (t0-v : ACop l2400-v a1-v a2-v) -> λ (t1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (t1-v a-v a2-v) a2-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (t1-v a-v (aop--o--op l2400-v a1-v a2-v t0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v t0-v (t1-v a-v b-v) (t1-v a-v c-v))) -> match-Dop l2400-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206-v)) ⊔ (lsuc l2400-v))) (λ (X---v : Dop l2400-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v))) (λ (u0-v : ACop l2400-v a1-v a2-v) -> λ (u1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v a2-v) a2-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v (aop--o--op l2400-v a1-v a2-v u0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v u0-v (u1-v a-v b-v) (u1-v a-v c-v))) -> (P-v : Set l3206-v) -> (X-z61-v : (e0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v (aop--o--op l2400-v a1-v a2-v u0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v u0-v (u1-v a-v b-v) (u1-v a-v c-v))) (matita-basics-logic.R3 l2400-v l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) t2-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> λ (x11-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x02-v : ACop l2400-v a1-v a2-v) -> λ (p02-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x02-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x11-v a-v a2-v) a2-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v (aop--o--op l2400-v a1-v a2-v x0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v x0-v (x1-v a-v b-v) (x1-v a-v c-v))) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) y-v) x-v
Dop-discr = λ (l2400-v l3206-v : Level) -> λ (a1-v : Set l2400-v) -> λ (a2-v : a1-v) -> λ (x-v : Dop l2400-v a1-v a2-v) -> λ (y-v : Dop l2400-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq l2400-v (Dop l2400-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 l2400-v ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v)) (Dop l2400-v a1-v a2-v) x-v (λ (x-13-v : Dop l2400-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq l2400-v (Dop l2400-v a1-v a2-v) x-v x-13-v) -> match-Dop l2400-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206-v)) ⊔ (lsuc l2400-v))) (λ (X---v : Dop l2400-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v))) (λ (t0-v : ACop l2400-v a1-v a2-v) -> λ (t1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (t1-v a-v a2-v) a2-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (t1-v a-v (aop--o--op l2400-v a1-v a2-v t0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v t0-v (t1-v a-v b-v) (t1-v a-v c-v))) -> match-Dop l2400-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206-v)) ⊔ (lsuc l2400-v))) (λ (X---v : Dop l2400-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v))) (λ (u0-v : ACop l2400-v a1-v a2-v) -> λ (u1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v a2-v) a2-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v (aop--o--op l2400-v a1-v a2-v u0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v u0-v (u1-v a-v b-v) (u1-v a-v c-v))) -> (P-v : Set l3206-v) -> (X-z61-v : (e0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v (aop--o--op l2400-v a1-v a2-v u0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v u0-v (u1-v a-v b-v) (u1-v a-v c-v))) (matita-basics-logic.R3 l2400-v l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) t2-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> λ (x11-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x02-v : ACop l2400-v a1-v a2-v) -> λ (p02-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x02-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x11-v a-v a2-v) a2-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v (aop--o--op l2400-v a1-v a2-v x0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v x0-v (x1-v a-v b-v) (x1-v a-v c-v))) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) x-13-v) x-v) (match-Dop l2400-v a1-v a2-v ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v)) (λ (X---v : Dop l2400-v a1-v a2-v) -> match-Dop l2400-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206-v)) ⊔ (lsuc l2400-v))) (λ (X-0-v : Dop l2400-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v))) (λ (t0-v : ACop l2400-v a1-v a2-v) -> λ (t1-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (t1-v a-v a2-v) a2-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (t1-v a-v (aop--o--op l2400-v a1-v a2-v t0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v t0-v (t1-v a-v b-v) (t1-v a-v c-v))) -> match-Dop l2400-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206-v)) ⊔ (lsuc l2400-v))) (λ (X-0-v : Dop l2400-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l3206-v) ⊔ l2400-v))) (λ (u0-v : ACop l2400-v a1-v a2-v) -> λ (u1-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v a2-v) a2-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v (aop--o--op l2400-v a1-v a2-v u0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v u0-v (u1-v a-v b-v) (u1-v a-v c-v))) -> (P-v : Set l3206-v) -> (X-z61-v : (e0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l2400-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l2400-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (u1-v a-v (aop--o--op l2400-v a1-v a2-v u0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v u0-v (u1-v a-v b-v) (u1-v a-v c-v))) (matita-basics-logic.R3 l2400-v l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l2400-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) t2-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x0-v) -> λ (x1-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p1-v : matita-basics-logic.eq l2400-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) -> λ (X--1-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x01-v) -> λ (x11-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l2400-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) t0-v (λ (x02-v : ACop l2400-v a1-v a2-v) -> λ (p02-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) t0-v x02-v) -> (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x11-v a-v a2-v) a2-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v (aop--o--op l2400-v a1-v a2-v x0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v x0-v (x1-v a-v b-v) (x1-v a-v c-v))) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : ACop l2400-v a1-v a2-v) -> λ (a10-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (a20-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v a2-v) a2-v) -> λ (a3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v (aop--o--op l2400-v a1-v a2-v a0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v a0-v (a10-v a-v b-v) (a10-v a-v c-v))) -> λ (P-v : Set l3206-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v) a0-v) -> (e1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v a0-v e0-v) a10-v) -> (e2-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) a20-v a0-v e0-v a10-v e1-v) a20-v) -> (X-e3-v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v (aop--o--op l2400-v a1-v a2-v a0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v a0-v (a10-v a-v b-v) (a10-v a-v c-v))) (matita-basics-logic.R3 l2400-v l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) a20-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> λ (x11-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x02-v : ACop l2400-v a1-v a2-v) -> λ (p02-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x02-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x11-v a-v a2-v) a2-v) a20-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v (aop--o--op l2400-v a1-v a2-v x0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v x0-v (x1-v a-v b-v) (x1-v a-v c-v))) a3-v a0-v e0-v a10-v e1-v a20-v e2-v) a3-v) -> P-v) -> DH-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)) (matita-basics-logic.refl l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)))) (matita-basics-logic.refl l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) a20-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)) a10-v (matita-basics-logic.refl l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)))))) (matita-basics-logic.refl l2400-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v (aop--o--op l2400-v a1-v a2-v a0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v a0-v (a10-v a-v b-v) (a10-v a-v c-v))) (matita-basics-logic.R3 l2400-v l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) a20-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p1-v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> λ (x11-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x02-v : ACop l2400-v a1-v a2-v) -> λ (p02-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x02-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x11-v a-v a2-v) a2-v) a20-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v (aop--o--op l2400-v a1-v a2-v x0-v b-v c-v)) (aop--o--op l2400-v a1-v a2-v x0-v (x1-v a-v b-v) (x1-v a-v c-v))) a3-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)) a10-v (matita-basics-logic.refl l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)))) a20-v (matita-basics-logic.refl l2400-v ((a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (a10-v a-v a2-v) a2-v) (matita-basics-logic.R2 l2400-v l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> λ (x1-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x01-v : ACop l2400-v a1-v a2-v) -> λ (p01-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x01-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l2400-v a1-v (x1-v a-v a2-v) a2-v) a20-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v)) a10-v (matita-basics-logic.refl l2400-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R1 l2400-v l2400-v (ACop l2400-v a1-v a2-v) a0-v (λ (x0-v : ACop l2400-v a1-v a2-v) -> λ (p0-v : matita-basics-logic.eq l2400-v (ACop l2400-v a1-v a2-v) a0-v x0-v) -> (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a10-v a0-v (matita-basics-logic.refl l2400-v (ACop l2400-v a1-v a2-v) (matita-basics-logic.R0 l2400-v (ACop l2400-v a1-v a2-v) a0-v))))))))) x-v) y-v Deq-v

let-aop : (l7-v : Level) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set l7-v) -> (nil-v : B-v) -> (R-v : Dop l7-v B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (a-v : B-v) -> ACop l7-v B-v nil-v
let-aop = λ (l7-v : Level) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set l7-v) -> λ (nil-v : B-v) -> λ (R-v : Dop l7-v B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (a-v : B-v) -> sum l7-v B-v nil-v R-v

let-mop : (l7-v : Level) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set l7-v) -> (nil-v : B-v) -> (R-v : Dop l7-v B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (a-v : B-v) -> (X-x-969-v : B-v) -> (X-x-970-v : B-v) -> B-v
let-mop = λ (l7-v : Level) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set l7-v) -> λ (nil-v : B-v) -> λ (R-v : Dop l7-v B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (a-v : B-v) -> prod l7-v B-v nil-v R-v

bigop-distr : (n-v : matita-arithmetics-nat.nat) -> (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> (B-v : Set (lzero)) -> (nil-v : B-v) -> (R-v : Dop lzero B-v nil-v) -> (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> (a-v : B-v) -> matita-basics-logic.eq lzero B-v (let-mop lzero n-v p-v B-v nil-v R-v f-v a-v a-v (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v (let-aop lzero n-v p-v B-v nil-v R-v f-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop n-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (aop--o--op lzero B-v nil-v (let-aop lzero n-v p-v B-v nil-v R-v f-v a-v)) (λ (i-v : matita-arithmetics-nat.nat) -> let-mop lzero n-v p-v B-v nil-v R-v f-v a-v a-v (f-v i-v)))
bigop-distr = λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : (X---v : matita-arithmetics-nat.nat) -> matita-basics-bool.bool) -> λ (B-v : Set (lzero)) -> λ (nil-v : B-v) -> λ (R-v : Dop lzero B-v nil-v) -> λ (f-v : (X---v : matita-arithmetics-nat.nat) -> B-v) -> λ (a-v : B-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop X-x-365-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) (null lzero B-v nil-v R-v a-v) (λ (n0-v : matita-arithmetics-nat.nat) -> λ (Hind-v : matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (f-v n0-v) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (f-v n0-v) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v x-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))))) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (f-v n0-v) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) x-v) (matita-basics-logic.eq-ind-r lzero lzero B-v (aop--o--op lzero B-v nil-v (sum lzero B-v nil-v R-v) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (aop--o--op lzero B-v nil-v (sum lzero B-v nil-v R-v) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))))) -> matita-basics-logic.eq lzero B-v x-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) -> matita-basics-logic.eq lzero B-v (aop--o--op lzero B-v nil-v (sum lzero B-v nil-v R-v) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) x-v) (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v)) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))))) (matita-basics-logic.refl lzero B-v (aop--o--op lzero B-v nil-v (sum lzero B-v nil-v R-v) (prod lzero B-v nil-v R-v a-v (f-v n0-v)) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))))) (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) Hind-v) (prod lzero B-v nil-v R-v a-v (aop--o--op lzero B-v nil-v (sum lzero B-v nil-v R-v) (f-v n0-v) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (distr lzero B-v nil-v R-v a-v (f-v n0-v) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))) (bigop-Strue n0-v p-v B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (X---v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v n0-v) H-v))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Strue n0-v p-v B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v n0-v) H-v))) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v n0-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v x-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) (matita-basics-logic.eq-ind-r lzero lzero B-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq lzero B-v x-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v)))) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) x-v) (matita-basics-logic.rewrite-l lzero lzero B-v (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) (λ (X---v : B-v) -> matita-basics-logic.eq lzero B-v (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v))) X---v) (matita-basics-logic.refl lzero B-v (prod lzero B-v nil-v R-v a-v (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)))) (bigop n0-v (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))) Hind-v) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v i-v))) (bigop-Sfalse n0-v p-v B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (X---v : matita-arithmetics-nat.nat) -> prod lzero B-v nil-v R-v a-v (f-v X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v n0-v) H-v))) (bigop (matita-arithmetics-nat.S n0-v) (λ (i-v : matita-arithmetics-nat.nat) -> p-v i-v) B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) (λ (i-v : matita-arithmetics-nat.nat) -> f-v i-v)) (bigop-Sfalse n0-v p-v B-v nil-v (op lzero B-v nil-v (aop lzero B-v nil-v (sum lzero B-v nil-v R-v))) f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v n0-v) H-v))) (matita-basics-bool.true-or-false (p-v n0-v))) n-v


