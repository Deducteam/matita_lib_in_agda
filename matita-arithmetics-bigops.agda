open import Agda.Primitive
open import matita-basics-types
open import matita-basics-relations
open import matita-arithmetics-div-and-mod
open import matita-basics-logic
open import matita-basics-bool
open import matita-arithmetics-nat
sameF-upto : (l17 : Level) -> (X-- : nat) -> (A : Set l17) -> relation l17 l17 ((X--1 : nat) -> A)
sameF-upto = λ (l17 : Level) -> λ (k : nat) -> λ (A : Set l17) -> λ (f : (X-- : nat) -> A) -> λ (g : (X-- : nat) -> A) -> (i : nat) -> (X-- : lt i k) -> eq l17 A (f i) (g i)

sameF-p : (l24 : Level) -> (X-- : nat) -> (X--1 : (X--1 : nat) -> bool) -> (A : Set l24) -> relation l24 l24 ((X--2 : nat) -> A)
sameF-p = λ (l24 : Level) -> λ (k : nat) -> λ (p : (X-- : nat) -> bool) -> λ (A : Set l24) -> λ (f : (X-- : nat) -> A) -> λ (g : (X-- : nat) -> A) -> (i : nat) -> (X-- : lt i k) -> (X--1 : eq lzero bool (p i) true) -> eq l24 A (f i) (g i)

sameF-upto-le : (l15 : Level) -> (A : Set l15) -> (f : (X-- : nat) -> A) -> (g : (X-- : nat) -> A) -> (n : nat) -> (m : nat) -> (X-- : le n m) -> (X--1 : sameF-upto l15 m A f g) -> sameF-upto l15 n A f g
sameF-upto-le = λ (l15 : Level) -> λ (A : Set l15) -> λ (f : (X-- : nat) -> A) -> λ (g : (X-- : nat) -> A) -> λ (n : nat) -> λ (m : nat) -> λ (lenm : le n m) -> λ (samef : sameF-upto l15 m A f g) -> λ (i : nat) -> λ (ltin : lt i n) -> samef i (lt-to-le-to-lt i n m ltin lenm)

sameF-p-le : (l24 : Level) -> (A : Set l24) -> (p : (X-- : nat) -> bool) -> (f : (X-- : nat) -> A) -> (g : (X-- : nat) -> A) -> (n : nat) -> (m : nat) -> (X-- : le n m) -> (X--1 : sameF-p l24 m p A f g) -> sameF-p l24 n p A f g
sameF-p-le = λ (l24 : Level) -> λ (A : Set l24) -> λ (p : (X-- : nat) -> bool) -> λ (f : (X-- : nat) -> A) -> λ (g : (X-- : nat) -> A) -> λ (n : nat) -> λ (m : nat) -> λ (lenm : le n m) -> λ (samef : sameF-p l24 m p A f g) -> λ (i : nat) -> λ (ltin : lt i n) -> λ (pi : eq lzero bool (p i) true) -> samef i (lt-to-le-to-lt i n m ltin lenm) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p i) pi)

prodF : (l9 l8 : Level) -> (A : Set l9) -> (B : Set l8) -> (X-f : (X-- : nat) -> A) -> (X-g : (X-- : nat) -> B) -> (X-m : nat) -> (X-x : nat) -> Prod l9 l8 A B
prodF = λ (l9 l8 : Level) -> λ (A : Set l9) -> λ (B : Set l8) -> λ (f : (X-- : nat) -> A) -> λ (g : (X-- : nat) -> B) -> λ (m : nat) -> λ (x : nat) -> mk-Prod l9 l8 A B (f (div x m)) (g (mod x m))

bigop : (X---v : nat) -> (X--1-v : (X--1-v : nat) -> bool) -> (H-v : Set (lzero)) -> (X--2-v : H-v) -> (X--3-v : (X--3-v : H-v) -> (X--4-v : H-v) -> H-v) -> (X--4-v : (X--4-v : nat) -> H-v) -> H-v
bigop O p B nil op f = nil
bigop (S k) p B nil op f = match-bool lzero (λ (X--1-v : bool) -> B) (op (f k) (bigop k p B nil op f)) (bigop k p B nil op f) (p k)

bigop-Strue : (k : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> (X-- : eq lzero bool (p k) true) -> eq lzero B (bigop (S k) (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (op (f k) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)))
bigop-Strue = λ (k : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> λ (H : eq lzero bool (p k) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (op (f k) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) x) (op (f k) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)))) (refl lzero B (match-bool lzero (λ (X-- : bool) -> B) (op (f k) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) true)) (p k) H

bigop-Sfalse : (k : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> (X-- : eq lzero bool (p k) false) -> eq lzero B (bigop (S k) (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))
bigop-Sfalse = λ (k : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> λ (H : eq lzero bool (p k) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (op (f k) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) x) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (refl lzero B (match-bool lzero (λ (X-- : bool) -> B) (op (f k) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) false)) (p k) H

same-bigop : (k : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> (g : (X-- : nat) -> B) -> (X-- : sameF-upto lzero k bool p1 p2) -> (X--1 : sameF-p lzero k p1 B f g) -> eq lzero B (bigop k (λ (i : nat) -> p1 i) B nil op (λ (i : nat) -> f i)) (bigop k (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))
same-bigop = λ (k : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> λ (g : (X-- : nat) -> B) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : sameF-upto lzero X-x-365 bool p1 p2) -> (X--1 : sameF-p lzero X-x-365 p1 B f g) -> eq lzero B (bigop X-x-365 (λ (i : nat) -> p1 i) B nil op (λ (i : nat) -> f i)) (bigop X-x-365 (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (λ (auto : sameF-upto lzero O bool p1 p2) -> λ (auto' : sameF-p lzero O p1 B f g) -> refl lzero B (bigop O (λ (i : nat) -> p1 i) B nil op (λ (i : nat) -> f i))) (λ (n : nat) -> λ (Hind : (X-- : sameF-upto lzero n bool p1 p2) -> (X--1 : sameF-p lzero n p1 B f g) -> eq lzero B (bigop n (λ (i : nat) -> p1 i) B nil op (λ (i : nat) -> f i)) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) -> λ (samep : sameF-upto lzero (S n) bool p1 p2) -> λ (samef : sameF-p lzero (S n) p1 B f g) -> eq-ind-r lzero lzero B (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (op (f n) x) x (p1 n)) (match-bool lzero (λ (X-0 : bool) -> B) (op (g n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) (p2 n))) (eq-ind lzero lzero bool (p1 n) (λ (x-1 : bool) -> λ (X-x-2 : eq lzero bool (p1 n) x-1) -> eq lzero B (match-bool lzero (λ (X-- : bool) -> B) (op (f n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) (p1 n)) (match-bool lzero (λ (X-- : bool) -> B) (op (g n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) x-1)) (match-Or lzero lzero (eq lzero bool (p1 n) true) (eq lzero bool (p1 n) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p1 n) true) (eq lzero bool (p1 n) false)) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (op (f n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) (p1 n)) (match-bool lzero (λ (X-0 : bool) -> B) (op (g n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) (p1 n))) (λ (H1 : eq lzero bool (p1 n) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (op (f n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) x) (match-bool lzero (λ (X-0 : bool) -> B) (op (g n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) x)) (eq-ind lzero lzero B (f n) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (f n) x-1) -> eq lzero B (op (f n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (op x-1 (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)))) (refl lzero B (op (f n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)))) (g n) (samef n (le-n (S n)) H1)) (p1 n) H1) (λ (H1 : eq lzero bool (p1 n) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (op (f n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) x) (match-bool lzero (λ (X-0 : bool) -> B) (op (g n) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i)) x)) (refl lzero B (bigop n (λ (i : nat) -> p2 i) B nil op (λ (i : nat) -> g i))) (p1 n) H1) (true-or-false (p1 n))) (p2 n) (samep n (le-n (S n)))) (bigop n (λ (i : nat) -> p1 i) B nil op (λ (i : nat) -> f i)) (Hind (sameF-upto-le lzero bool p1 p2 n (S n) (eq-coerc lzero (le (pred (S n)) (S n)) (le n (S n)) (le-pred-n (S n)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (S n)) (le n (S n))) (refl (lsuc lzero) (Set (lzero)) (le n (S n))) (pred (S n)) (pred-Sn n))) samep) (sameF-p-le lzero B p1 f g n (S n) (eq-coerc lzero (le (pred (S n)) (S n)) (le n (S n)) (le-pred-n (S n)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (S n)) (le n (S n))) (refl (lsuc lzero) (Set (lzero)) (le n (S n))) (pred (S n)) (pred-Sn n))) samef))) k

pad-bigop : (k : nat) -> (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> (X-- : le n k) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop k (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i))
pad-bigop = λ (k : nat) -> λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> λ (lenk : le n k) -> le-ind lzero n (λ (x-417 : nat) -> λ (X-x-418 : le n x-417) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop x-417 (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i))) (same-bigop n p (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p X--) (leb n X--)) B nil op f f (λ (i : nat) -> λ (lti : lt i n) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (p i) (match-bool lzero (λ (X-0 : bool) -> bool) false (p i) x)) (refl lzero bool (p i)) (leb n i) (not-le-to-leb-false n i (lt-to-not-le i n lti))) (λ (i : nat) -> λ (lti : lt i n) -> λ (auto : eq lzero bool (p i) true) -> refl lzero B (f i))) (λ (j : nat) -> λ (leup : le n j) -> λ (Hind : eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop j (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i))) -> eq-ind-r lzero lzero B (bigop j (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop j (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i))) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) x) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop j (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i))) (rewrite-l lzero lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (λ (X-- : B) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) X--) (refl lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (bigop j (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i)) Hind) (leb n j) (le-to-leb-true n j leup)) (bigop (S j) (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p i) (leb n i)) B nil op (λ (i : nat) -> f i)) (bigop-Sfalse j (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (p X--) (leb n X--)) B nil op f (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (p j) x) false) (refl lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (p j) true)) (leb n j) (le-to-leb-true n j leup)))) k lenk

let-clause-1047 : (k : nat) -> (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> (lenk : le n k) -> (j : nat) -> (leup : le n j) -> (Hind : (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i j) -> eq lzero bool (p i) false) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop j (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) -> (Hfalse : (i : nat) -> (X-- : le n i) -> (X--1 : lt i (S j)) -> eq lzero bool (p i) false) -> (x2571 : nat) -> (x2572 : nat) -> eq lzero nat x2571 (plus (times x2572 (div x2571 x2572)) (mod x2571 x2572))
let-clause-1047 = λ (k : nat) -> λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> λ (lenk : le n k) -> λ (j : nat) -> λ (leup : le n j) -> λ (Hind : (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i j) -> eq lzero bool (p i) false) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop j (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) -> λ (Hfalse : (i : nat) -> (X-- : le n i) -> (X--1 : lt i (S j)) -> eq lzero bool (p i) false) -> λ (x2571 : nat) -> λ (x2572 : nat) -> rewrite-l lzero lzero nat (times (div x2571 x2572) x2572) (λ (X-- : nat) -> eq lzero nat x2571 (plus X-- (mod x2571 x2572))) (div-mod x2571 x2572) (times x2572 (div x2571 x2572)) (commutative-times (div x2571 x2572) x2572)

pad-bigop1 : (k : nat) -> (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> (X-- : le n k) -> (X--1 : (i : nat) -> (X--1 : le n i) -> (X--2 : lt i k) -> eq lzero bool (p i) false) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop k (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))
pad-bigop1 = λ (k : nat) -> λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> λ (lenk : le n k) -> le-ind lzero n (λ (x-417 : nat) -> λ (X-x-418 : le n x-417) -> (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i x-417) -> eq lzero bool (p i) false) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop x-417 (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) (λ (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i n) -> eq lzero bool (p i) false) -> same-bigop n p p B nil op f f (λ (i : nat) -> λ (lti : lt i n) -> refl lzero bool (p i)) (λ (i : nat) -> λ (lti : lt i n) -> λ (auto : eq lzero bool (p i) true) -> refl lzero B (f i))) (λ (j : nat) -> λ (leup : le n j) -> λ (Hind : (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i j) -> eq lzero bool (p i) false) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop j (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) -> λ (Hfalse : (i : nat) -> (X-- : le n i) -> (X--1 : lt i (S j)) -> eq lzero bool (p i) false) -> eq-ind-r lzero lzero B (bigop j (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop j (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i))) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) x) (Hind (λ (i : nat) -> λ (leni : le n i) -> λ (ltij : lt i j) -> Hfalse i leni (le-S (S i) j ltij))) (bigop (S j) (λ (i : nat) -> p i) B nil op (λ (i : nat) -> f i)) (bigop-Sfalse j p B nil op f (Hfalse j leup (eq-coerc lzero (lt (mod j O) (plus (plus (mod j O) (times O (div j O))) (S O))) (lt j (S j)) (lt-plus-Sn-r (mod j O) (times O (div j O)) O) (rewrite-l lzero (lsuc lzero) nat j (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod j O) (plus X-- (S O))) (lt j (S j))) (rewrite-l lzero (lsuc lzero) nat j (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus j (S O))) (lt j (S j))) (rewrite-l lzero (lsuc lzero) nat (S j) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt j X--) (lt j (S j))) (refl (lsuc lzero) (Set (lzero)) (lt j (S j))) (plus j (S O)) (rewrite-r lzero lzero nat (plus j O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus j (S O))) (plus-n-Sm j O) j (plus-n-O j))) (mod j O) (rewrite-r lzero lzero nat (plus O (mod j O)) (λ (X-- : nat) -> eq lzero nat j X--) (rewrite-l lzero lzero nat (plus (mod j O) O) (λ (X-- : nat) -> eq lzero nat j X--) (rewrite-r lzero lzero nat (times O (div j O)) (λ (X-- : nat) -> eq lzero nat j (plus (mod j O) X--)) (rewrite-l lzero lzero nat (plus (times O (div j O)) (mod j O)) (λ (X-- : nat) -> eq lzero nat j X--) (let-clause-1047 k n p B nil op f lenk j leup Hind Hfalse j O) (plus (mod j O) (times O (div j O))) (commutative-plus (times O (div j O)) (mod j O))) O (times-O-n (div j O))) (plus O (mod j O)) (commutative-plus (mod j O) O)) (mod j O) (plus-O-n (mod j O)))) (plus (mod j O) (times O (div j O))) (rewrite-l lzero lzero nat (plus (times O (div j O)) (mod j O)) (λ (X-- : nat) -> eq lzero nat j X--) (let-clause-1047 k n p B nil op f lenk j leup Hind Hfalse j O) (plus (mod j O) (times O (div j O))) (commutative-plus (times O (div j O)) (mod j O)))))))) k lenk

bigop-false : (n : nat) -> (B : Set (lzero)) -> (nil : B) -> (op : (X-- : B) -> (X--1 : B) -> B) -> (f : (X-- : nat) -> B) -> eq lzero B (bigop n (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i)) nil
bigop-false = λ (n : nat) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op : (X-- : B) -> (X--1 : B) -> B) -> λ (f : (X-- : nat) -> B) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero B (bigop X-x-365 (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i)) nil) (refl lzero B (bigop O (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i))) (λ (n1 : nat) -> λ (Hind : eq lzero B (bigop n1 (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i)) nil) -> eq-ind-r lzero lzero B (bigop n1 (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n1 (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i))) -> eq lzero B x nil) (rewrite-r lzero lzero B nil (λ (X-- : B) -> eq lzero B X-- nil) (refl lzero B nil) (bigop n1 (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i)) Hind) (bigop (S n1) (λ (i : nat) -> false) B nil op (λ (i : nat) -> f i)) (bigop-Sfalse n1 (λ (X-- : nat) -> false) B nil op f (refl lzero bool false))) n


data Aop (l1-v : Level) (A-v : Set l1-v)  (nil-v : A-v) : Set l1-v where
  mk-Aop' : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l1-v A-v (op-v nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l1-v A-v (op-v a-v nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l1-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Aop l1-v A-v nil-v

mk-Aop : (l11-v : Level) -> (A-v : Set l11-v) -> (nil-v : A-v) -> (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l11-v A-v (op-v nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l11-v A-v (op-v a-v nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l11-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Aop l11-v A-v nil-v
mk-Aop _ _ _ = mk-Aop'

match-Aop : (l18-v : Level) -> (A-v : Set l18-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Aop l18-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l18-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l18-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l18-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> return-type-v (mk-Aop l18-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (z-v : Aop l18-v A-v X-nil-v) -> return-type-v z-v
match-Aop _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-ind : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-861-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-861-v : Aop l21-v A-v X-nil-v) -> Q--v x-861-v
Aop-ind _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type5 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type5 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type4 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type4 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type3 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type3 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type2 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type2 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type1 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type1 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


Aop-rect-Type0 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-863-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-863-v : Aop l21-v A-v X-nil-v) -> Q--v x-863-v
Aop-rect-Type0 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

op : (l4-v : Level) -> (A-v : Set l4-v) -> (nil-v : A-v) -> (X-xxx-v : Aop l4-v A-v nil-v) -> (X-x-887-v : A-v) -> (X-x-888-v : A-v) -> A-v
op l9-v A-v nil-v X-xxx-v = match-Aop l9-v A-v nil-v l9-v (λ (xxx0-v : Aop l9-v A-v nil-v) -> (X-x-887-v : A-v) -> (X-x-888-v : A-v) -> A-v) (λ (yyy-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X---v : (a-v : A-v) -> eq l9-v A-v (yyy-v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> eq l9-v A-v (yyy-v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l9-v A-v (yyy-v a-v (yyy-v b-v c-v)) (yyy-v (yyy-v a-v b-v) c-v)) -> yyy-v) X-xxx-v

nill : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> eq l2-v A-v (op l2-v A-v nil-v xxx-v nil-v a-v) a-v
nill l8-v A-v nil-v xxx-v = match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> eq l8-v A-v (op l8-v A-v nil-v xxx0-v nil-v a-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (yyy-v : (a-v : A-v) -> eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

nilr : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> eq l2-v A-v (op l2-v A-v nil-v xxx-v a-v nil-v) a-v
nilr l8-v A-v nil-v xxx-v = match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> eq l8-v A-v (op l8-v A-v nil-v xxx0-v a-v nil-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (yyy-v : (a-v : A-v) -> eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

assoc : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : Aop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l5-v A-v (op l5-v A-v nil-v xxx-v a-v (op l5-v A-v nil-v xxx-v b-v c-v)) (op l5-v A-v nil-v xxx-v (op l5-v A-v nil-v xxx-v a-v b-v) c-v)
assoc l17-v A-v nil-v xxx-v = match-Aop l17-v A-v nil-v l17-v (λ (xxx0-v : Aop l17-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l17-v A-v (op l17-v A-v nil-v xxx0-v a-v (op l17-v A-v nil-v xxx0-v b-v c-v)) (op l17-v A-v nil-v xxx0-v (op l17-v A-v nil-v xxx0-v a-v b-v) c-v)) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> eq l17-v A-v (X---v nil-v a-v) a-v) -> λ (X-1-v : (a-v : A-v) -> eq l17-v A-v (X---v a-v nil-v) a-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l17-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v



Aop-inv-ind : (l39 l33 : Level) -> (x1 : Set l39) -> (x2 : x1) -> (Hterm : Aop l39 x1 x2) -> (P : (X-z1500 : Aop l39 x1 x2) -> Set l33) -> (X-H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1501 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P Hterm
Aop-inv-ind = λ (l39 l33 : Level) -> λ (x1 : Set l39) -> λ (x2 : x1) -> λ (Hterm : Aop l39 x1 x2) -> λ (P : (X-z1500 : Aop l39 x1 x2) -> Set l33) -> λ (H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1501 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> Aop-ind l39 (l39 ⊔ l33) x1 x2 (λ (X-x-861 : Aop l39 x1 x2) -> (X-z1501 : eq l39 (Aop l39 x1 x2) Hterm X-x-861) -> P X-x-861) H1 Hterm (refl l39 (Aop l39 x1 x2) Hterm)

Aop-inv-rect-Type4 : (l39 l33 : Level) -> (x1 : Set l39) -> (x2 : x1) -> (Hterm : Aop l39 x1 x2) -> (P : (X-z1506 : Aop l39 x1 x2) -> Set l33) -> (X-H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1507 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P Hterm
Aop-inv-rect-Type4 = λ (l39 l33 : Level) -> λ (x1 : Set l39) -> λ (x2 : x1) -> λ (Hterm : Aop l39 x1 x2) -> λ (P : (X-z1506 : Aop l39 x1 x2) -> Set l33) -> λ (H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1507 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> Aop-rect-Type4 l39 (l39 ⊔ l33) x1 x2 (λ (X-x-863 : Aop l39 x1 x2) -> (X-z1507 : eq l39 (Aop l39 x1 x2) Hterm X-x-863) -> P X-x-863) H1 Hterm (refl l39 (Aop l39 x1 x2) Hterm)

Aop-inv-rect-Type3 : (l39 l33 : Level) -> (x1 : Set l39) -> (x2 : x1) -> (Hterm : Aop l39 x1 x2) -> (P : (X-z1512 : Aop l39 x1 x2) -> Set l33) -> (X-H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1513 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P Hterm
Aop-inv-rect-Type3 = λ (l39 l33 : Level) -> λ (x1 : Set l39) -> λ (x2 : x1) -> λ (Hterm : Aop l39 x1 x2) -> λ (P : (X-z1512 : Aop l39 x1 x2) -> Set l33) -> λ (H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1513 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> Aop-rect-Type3 l39 (l39 ⊔ l33) x1 x2 (λ (X-x-867 : Aop l39 x1 x2) -> (X-z1513 : eq l39 (Aop l39 x1 x2) Hterm X-x-867) -> P X-x-867) H1 Hterm (refl l39 (Aop l39 x1 x2) Hterm)

Aop-inv-rect-Type2 : (l39 l33 : Level) -> (x1 : Set l39) -> (x2 : x1) -> (Hterm : Aop l39 x1 x2) -> (P : (X-z1518 : Aop l39 x1 x2) -> Set l33) -> (X-H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1519 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P Hterm
Aop-inv-rect-Type2 = λ (l39 l33 : Level) -> λ (x1 : Set l39) -> λ (x2 : x1) -> λ (Hterm : Aop l39 x1 x2) -> λ (P : (X-z1518 : Aop l39 x1 x2) -> Set l33) -> λ (H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1519 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> Aop-rect-Type2 l39 (l39 ⊔ l33) x1 x2 (λ (X-x-869 : Aop l39 x1 x2) -> (X-z1519 : eq l39 (Aop l39 x1 x2) Hterm X-x-869) -> P X-x-869) H1 Hterm (refl l39 (Aop l39 x1 x2) Hterm)

Aop-inv-rect-Type1 : (l39 l33 : Level) -> (x1 : Set l39) -> (x2 : x1) -> (Hterm : Aop l39 x1 x2) -> (P : (X-z1524 : Aop l39 x1 x2) -> Set l33) -> (X-H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1525 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P Hterm
Aop-inv-rect-Type1 = λ (l39 l33 : Level) -> λ (x1 : Set l39) -> λ (x2 : x1) -> λ (Hterm : Aop l39 x1 x2) -> λ (P : (X-z1524 : Aop l39 x1 x2) -> Set l33) -> λ (H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1525 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> Aop-rect-Type1 l39 (l39 ⊔ l33) x1 x2 (λ (X-x-871 : Aop l39 x1 x2) -> (X-z1525 : eq l39 (Aop l39 x1 x2) Hterm X-x-871) -> P X-x-871) H1 Hterm (refl l39 (Aop l39 x1 x2) Hterm)

Aop-inv-rect-Type0 : (l39 l33 : Level) -> (x1 : Set l39) -> (x2 : x1) -> (Hterm : Aop l39 x1 x2) -> (P : (X-z1530 : Aop l39 x1 x2) -> Set l33) -> (X-H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1531 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P Hterm
Aop-inv-rect-Type0 = λ (l39 l33 : Level) -> λ (x1 : Set l39) -> λ (x2 : x1) -> λ (Hterm : Aop l39 x1 x2) -> λ (P : (X-z1530 : Aop l39 x1 x2) -> Set l33) -> λ (H1 : (op-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-nill : (a : x1) -> eq l39 x1 (op-v x2 a) a) -> (X-nilr : (a : x1) -> eq l39 x1 (op-v a x2) a) -> (X-assoc : (a : x1) -> (b : x1) -> (c : x1) -> eq l39 x1 (op-v a (op-v b c)) (op-v (op-v a b) c)) -> (X-z1531 : eq l39 (Aop l39 x1 x2) Hterm (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> P (mk-Aop l39 x1 x2 op-v X-nill X-nilr X-assoc)) -> Aop-rect-Type0 l39 (l39 ⊔ l33) x1 x2 (λ (X-x-873 : Aop l39 x1 x2) -> (X-z1531 : eq l39 (Aop l39 x1 x2) Hterm X-x-873) -> P X-x-873) H1 Hterm (refl l39 (Aop l39 x1 x2) Hterm)

Aop-discr : (l3178 l4236 : Level) -> (a1 : Set l3178) -> (a2 : a1) -> (x : Aop l3178 a1 a2) -> (y : Aop l3178 a1 a2) -> (X-e : eq l3178 (Aop l3178 a1 a2) x y) -> match-Aop l3178 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236)) ⊔ (lsuc l3178))) (λ (X-- : Aop l3178 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178))) (λ (t0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (t1 : (a : a1) -> eq l3178 a1 (t0 a2 a) a) -> λ (t2 : (a : a1) -> eq l3178 a1 (t0 a a2) a) -> λ (t3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (t0 a (t0 b c)) (t0 (t0 a b) c)) -> match-Aop l3178 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236)) ⊔ (lsuc l3178))) (λ (X-- : Aop l3178 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178))) (λ (u0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (u1 : (a : a1) -> eq l3178 a1 (u0 a2 a) a) -> λ (u2 : (a : a1) -> eq l3178 a1 (u0 a a2) a) -> λ (u3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (u0 a (u0 b c)) (u0 (u0 a b) c)) -> (P : Set l4236) -> (X-z55 : (e0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0) u0) -> (e1 : eq l3178 ((a : a1) -> eq l3178 a1 (u0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 u0 e0) u1) -> (e2 : eq l3178 ((a : a1) -> eq l3178 a1 (u0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) t1 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) t2 u0 e0 u1 e1) u2) -> (X-e3 : eq l3178 ((a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (u0 a (u0 b c)) (u0 (u0 a b) c)) (R3 l3178 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) t1 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) t2 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (p1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l3178 a1 (x0 a a2) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x01) -> (a : a1) -> eq l3178 a1 (x01 a2 a) a) t1 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p01 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x01) -> λ (x11 : (a : a1) -> eq l3178 a1 (x01 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x01 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x01 p01) x11) -> (a : a1) -> eq l3178 a1 (x01 a a2) a) t2 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (x0 a (x0 b c)) (x0 (x0 a b) c)) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P) y) x
Aop-discr = λ (l3178 l4236 : Level) -> λ (a1 : Set l3178) -> λ (a2 : a1) -> λ (x : Aop l3178 a1 a2) -> λ (y : Aop l3178 a1 a2) -> λ (Deq : eq l3178 (Aop l3178 a1 a2) x y) -> eq-rect-Type2 l3178 ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178)) (Aop l3178 a1 a2) x (λ (x-13 : Aop l3178 a1 a2) -> λ (X-x-14 : eq l3178 (Aop l3178 a1 a2) x x-13) -> match-Aop l3178 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236)) ⊔ (lsuc l3178))) (λ (X-- : Aop l3178 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178))) (λ (t0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (t1 : (a : a1) -> eq l3178 a1 (t0 a2 a) a) -> λ (t2 : (a : a1) -> eq l3178 a1 (t0 a a2) a) -> λ (t3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (t0 a (t0 b c)) (t0 (t0 a b) c)) -> match-Aop l3178 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236)) ⊔ (lsuc l3178))) (λ (X-- : Aop l3178 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178))) (λ (u0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (u1 : (a : a1) -> eq l3178 a1 (u0 a2 a) a) -> λ (u2 : (a : a1) -> eq l3178 a1 (u0 a a2) a) -> λ (u3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (u0 a (u0 b c)) (u0 (u0 a b) c)) -> (P : Set l4236) -> (X-z55 : (e0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0) u0) -> (e1 : eq l3178 ((a : a1) -> eq l3178 a1 (u0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 u0 e0) u1) -> (e2 : eq l3178 ((a : a1) -> eq l3178 a1 (u0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) t1 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) t2 u0 e0 u1 e1) u2) -> (X-e3 : eq l3178 ((a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (u0 a (u0 b c)) (u0 (u0 a b) c)) (R3 l3178 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) t1 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) t2 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (p1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l3178 a1 (x0 a a2) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x01) -> (a : a1) -> eq l3178 a1 (x01 a2 a) a) t1 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p01 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x01) -> λ (x11 : (a : a1) -> eq l3178 a1 (x01 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x01 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x01 p01) x11) -> (a : a1) -> eq l3178 a1 (x01 a a2) a) t2 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (x0 a (x0 b c)) (x0 (x0 a b) c)) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P) x-13) x) (match-Aop l3178 a1 a2 ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178)) (λ (X-- : Aop l3178 a1 a2) -> match-Aop l3178 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236)) ⊔ (lsuc l3178))) (λ (X-0 : Aop l3178 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178))) (λ (t0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (t1 : (a : a1) -> eq l3178 a1 (t0 a2 a) a) -> λ (t2 : (a : a1) -> eq l3178 a1 (t0 a a2) a) -> λ (t3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (t0 a (t0 b c)) (t0 (t0 a b) c)) -> match-Aop l3178 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236)) ⊔ (lsuc l3178))) (λ (X-0 : Aop l3178 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l4236) ⊔ l3178))) (λ (u0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (u1 : (a : a1) -> eq l3178 a1 (u0 a2 a) a) -> λ (u2 : (a : a1) -> eq l3178 a1 (u0 a a2) a) -> λ (u3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (u0 a (u0 b c)) (u0 (u0 a b) c)) -> (P : Set l4236) -> (X-z55 : (e0 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) (R0 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0) u0) -> (e1 : eq l3178 ((a : a1) -> eq l3178 a1 (u0 a2 a) a) (R1 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x-19 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 u0 e0) u1) -> (e2 : eq l3178 ((a : a1) -> eq l3178 a1 (u0 a a2) a) (R2 l3178 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X--1 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) t1 (λ (x0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (p0 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X--1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x-19 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) t2 u0 e0 u1 e1) u2) -> (X-e3 : eq l3178 ((a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (u0 a (u0 b c)) (u0 (u0 a b) c)) (R3 l3178 l3178 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X--1 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) t1 (λ (x0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (p0 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X--1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x-19 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) t2 (λ (x0 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (p0 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (p1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x-19 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l3178 a1 (x0 a a2) a) -> λ (X--1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a a2) a) (R2 l3178 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x01 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X--1 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x01) -> (a : a1) -> eq l3178 a1 (x01 a2 a) a) t1 (λ (x01 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (p01 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x01) -> λ (x11 : (a : a1) -> eq l3178 a1 (x01 a2 a) a) -> λ (X--1 : eq l3178 ((a : a1) -> eq l3178 a1 (x01 a2 a) a) (R1 l3178 l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 (λ (x-19 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X--1 : a1) -> (X--2 : a1) -> a1) t0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) t1 x01 p01) x11) -> (a : a1) -> eq l3178 a1 (x01 a a2) a) t2 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (x0 a (x0 b c)) (x0 (x0 a b) c)) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P) X--) X--) (λ (a0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (a10 : (a : a1) -> eq l3178 a1 (a0 a2 a) a) -> λ (a20 : (a : a1) -> eq l3178 a1 (a0 a a2) a) -> λ (a3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (a0 a (a0 b c)) (a0 (a0 a b) c)) -> λ (P : Set l4236) -> λ (DH : (e0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0) a0) -> (e1 : eq l3178 ((a : a1) -> eq l3178 a1 (a0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 a0 e0) a10) -> (e2 : eq l3178 ((a : a1) -> eq l3178 a1 (a0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) a10 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) a20 a0 e0 a10 e1) a20) -> (X-e3 : eq l3178 ((a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (a0 a (a0 b c)) (a0 (a0 a b) c)) (R3 l3178 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) a10 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) a20 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (p1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l3178 a1 (x0 a a2) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x01) -> (a : a1) -> eq l3178 a1 (x01 a2 a) a) a10 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p01 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x01) -> λ (x11 : (a : a1) -> eq l3178 a1 (x01 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x01 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x01 p01) x11) -> (a : a1) -> eq l3178 a1 (x01 a a2) a) a20 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (x0 a (x0 b c)) (x0 (x0 a b) c)) a3 a0 e0 a10 e1 a20 e2) a3) -> P) -> DH (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)) (refl l3178 ((a : a1) -> eq l3178 a1 (a0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)))) (refl l3178 ((a : a1) -> eq l3178 a1 (a0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) a10 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) a20 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)) a10 (refl l3178 ((a : a1) -> eq l3178 a1 (a0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)))))) (refl l3178 ((a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (a0 a (a0 b c)) (a0 (a0 a b) c)) (R3 l3178 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) a10 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) a20 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (p1 : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l3178 a1 (x0 a a2) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x01) -> (a : a1) -> eq l3178 a1 (x01 a2 a) a) a10 (λ (x01 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p01 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x01) -> λ (x11 : (a : a1) -> eq l3178 a1 (x01 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x01 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x01 p01) x11) -> (a : a1) -> eq l3178 a1 (x01 a a2) a) a20 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l3178 a1 (x0 a (x0 b c)) (x0 (x0 a b) c)) a3 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)) a10 (refl l3178 ((a : a1) -> eq l3178 a1 (a0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)))) a20 (refl l3178 ((a : a1) -> eq l3178 a1 (a0 a a2) a) (R2 l3178 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> (a : a1) -> eq l3178 a1 (x0 a2 a) a) a10 (λ (x0 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p0 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x0) -> λ (x1 : (a : a1) -> eq l3178 a1 (x0 a2 a) a) -> λ (X-- : eq l3178 ((a : a1) -> eq l3178 a1 (x0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 x0 p0) x1) -> (a : a1) -> eq l3178 a1 (x0 a a2) a) a20 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0)) a10 (refl l3178 ((a : a1) -> eq l3178 a1 (a0 a2 a) a) (R1 l3178 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 (λ (x-19 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-x-20 : eq l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0 x-19) -> (a : a1) -> eq l3178 a1 (x-19 a2 a) a) a10 a0 (refl l3178 ((X-- : a1) -> (X--1 : a1) -> a1) (R0 l3178 ((X-- : a1) -> (X--1 : a1) -> a1) a0))))))))) x) y Deq

dpi1--o--op : (l12 l8 : Level) -> (x0 : Set l12) -> (x1 : x0) -> (x2 : (X-- : Aop l12 x0 x1) -> Set l8) -> (x3 : DPair l12 l8 (Aop l12 x0 x1) x2) -> (X-x-887 : x0) -> (X-x-888 : x0) -> x0
dpi1--o--op = λ (l12 l8 : Level) -> λ (x0 : Set l12) -> λ (x1 : x0) -> λ (x2 : (X-- : Aop l12 x0 x1) -> Set l8) -> λ (x3 : DPair l12 l8 (Aop l12 x0 x1) x2) -> op l12 x0 x1 (dpi1 l12 l8 (Aop l12 x0 x1) x2 x3)

pad-bigop-nil : (k : nat) -> (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (X-- : le n k) -> (X--1 : (i : nat) -> (X--1 : le n i) -> (X--2 : lt i k) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))
pad-bigop-nil = λ (k : nat) -> λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (lenk : le n k) -> le-ind lzero n (λ (x-417 : nat) -> λ (X-x-418 : le n x-417) -> (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i x-417) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop x-417 (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i n) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> same-bigop n p p B nil (op lzero B nil op-v) f f (λ (i : nat) -> λ (lti : lt i n) -> refl lzero bool (p i)) (λ (i : nat) -> λ (lti : lt i n) -> λ (auto : eq lzero bool (p i) true) -> refl lzero B (f i))) (λ (j : nat) -> λ (leup : le n j) -> λ (Hind : (X-- : (i : nat) -> (X-- : le n i) -> (X--1 : lt i j) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) -> λ (Hfalse : (i : nat) -> (X-- : le n i) -> (X--1 : lt i (S j)) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> match-Or lzero lzero (eq lzero bool (p j) true) (eq lzero bool (p j) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p j) true) (eq lzero bool (p j) false)) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop (S j) (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (Hpj : eq lzero bool (p j) true) -> eq-ind-r lzero lzero B (op lzero B nil op-v (f j) (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil op-v (f j) (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)))) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) x) (eq-ind-r lzero lzero B nil (λ (x : B) -> λ (X-- : eq lzero B x nil) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (op lzero B nil op-v x (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)))) (eq-ind-r lzero lzero B (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) x) (Hind (λ (i : nat) -> λ (leni : le n i) -> λ (ltij : lt i j) -> match-Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) (λ (auto : eq lzero bool (p i) false) -> or-introl lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p i) auto)) (λ (auto : eq lzero B (f i) nil) -> or-intror lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil) (rewrite-r lzero lzero B nil (λ (X-- : B) -> eq lzero B X-- nil) (refl lzero B nil) (f i) auto)) (Hfalse i leni (le-S (S i) j ltij)))) (op lzero B nil op-v nil (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (nill lzero B nil op-v (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)))) (f j) (match-Or lzero lzero (eq lzero bool (p j) false) (eq lzero B (f j) nil) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p j) false) (eq lzero B (f j) nil)) -> eq lzero B (f j) nil) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero bool x false) -> eq lzero B (f j) nil) (λ (H : eq lzero bool true false) -> bool-discr lzero true false H (eq lzero B (f j) nil)) (p j) Hpj) (λ (auto : eq lzero B (f j) nil) -> rewrite-r lzero lzero B nil (λ (X-- : B) -> eq lzero B X-- nil) (refl lzero B nil) (f j) auto) (Hfalse j leup (le-n (S j))))) (bigop (S j) (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-Strue j p B nil (op lzero B nil op-v) f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p j) Hpj))) (λ (Hpj : eq lzero bool (p j) false) -> eq-ind-r lzero lzero B (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop j (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) -> eq lzero B (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) x) (Hind (λ (i : nat) -> λ (leni : le n i) -> λ (ltij : lt i j) -> match-Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) -> Or lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil)) (λ (auto : eq lzero bool (p i) false) -> or-introl lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p i) auto)) (λ (auto : eq lzero B (f i) nil) -> or-intror lzero lzero (eq lzero bool (p i) false) (eq lzero B (f i) nil) (rewrite-r lzero lzero B nil (λ (X-- : B) -> eq lzero B X-- nil) (refl lzero B nil) (f i) auto)) (Hfalse i leni (le-S (S i) j ltij)))) (bigop (S j) (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-Sfalse j p B nil (op lzero B nil op-v) f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p j) Hpj))) (true-or-false (p j))) k lenk

bigop-sum : (k1 : nat) -> (k2 : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (g : (X-- : nat) -> B) -> eq lzero B (op lzero B nil op-v (bigop k1 (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k2 (λ (i : nat) -> p2 i) B nil (op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop (plus k1 k2) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i k2)) (p2 i) (leb k2 i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i k2)) (g i) (leb k2 i)))
bigop-sum = λ (k1 : nat) -> λ (k2 : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (g : (X-- : nat) -> B) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero B (op lzero B nil op-v (bigop X-x-365 (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k2 (λ (i : nat) -> p2 i) B nil (op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop (plus X-x-365 k2) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i k2)) (p2 i) (leb k2 i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i k2)) (g i) (leb k2 i)))) (eq-ind-r lzero lzero B (bigop k2 (λ (i : nat) -> p2 i) B nil (op lzero B nil op-v) (λ (i : nat) -> g i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop k2 (λ (i : nat) -> p2 i) B nil (op lzero B nil op-v) (λ (i : nat) -> g i))) -> eq lzero B x (bigop k2 (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i k2)) (p2 i) (leb k2 i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i k2)) (g i) (leb k2 i)))) (same-bigop k2 p2 (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus X-- k2)) (p2 X--) (leb k2 X--)) B nil (op lzero B nil op-v) g (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus X-- k2)) (g X--) (leb k2 X--)) (λ (i : nat) -> λ (lti : lt i k2) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (p2 i) (match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i k2)) (p2 i) x)) (refl lzero bool (p2 i)) (leb k2 i) (lt-to-leb-false k2 i lti)) (λ (i : nat) -> λ (lti : lt i k2) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> (X--1 : eq lzero bool (p2 i) true) -> eq lzero B (g i) (match-bool lzero (λ (X-0 : bool) -> B) (f (minus i k2)) (g i) x)) (λ (auto : eq lzero bool (p2 i) true) -> refl lzero B (g i)) (leb k2 i) (lt-to-leb-false k2 i lti))) (op lzero B nil op-v nil (bigop k2 (λ (i : nat) -> p2 i) B nil (op lzero B nil op-v) (λ (i : nat) -> g i))) (nill lzero B nil op-v (bigop k2 (λ (i : nat) -> p2 i) B nil (op lzero B nil op-v) (λ (i : nat) -> g i)))) (λ (i : nat) -> λ (Hind : eq lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0)))) -> eq-ind lzero lzero nat i (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat i x-1) -> eq lzero B (op lzero B nil op-v (match-bool lzero (λ (X-- : bool) -> B) (op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (p1 i)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (match-bool lzero (λ (X-- : bool) -> B) (op lzero B nil op-v (match-bool lzero (λ (X-- : bool) -> B) (f x-1) (g (plus i k2)) (leb k2 (plus i k2))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0)))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0))) (match-bool lzero (λ (X-- : bool) -> bool) (p1 x-1) (p2 (plus i k2)) (leb k2 (plus i k2))))) (match-bool lzero (λ (X-- : bool) -> eq lzero B (op lzero B nil op-v (match-bool lzero (λ (X-0 : bool) -> B) (op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) X--) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (match-bool lzero (λ (X-0 : bool) -> B) (op lzero B nil op-v (match-bool lzero (λ (X-0 : bool) -> B) (f i) (g (plus i k2)) (leb k2 (plus i k2))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0)))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0))) (match-bool lzero (λ (X-0 : bool) -> bool) X-- (p2 (plus i k2)) (leb k2 (plus i k2))))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero B (op lzero B nil op-v (match-bool lzero (λ (X-0 : bool) -> B) (op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) true) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (match-bool lzero (λ (X-0 : bool) -> B) (op lzero B nil op-v (match-bool lzero (λ (X-0 : bool) -> B) (f i) (g (plus i k2)) x) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0)))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0))) (match-bool lzero (λ (X-0 : bool) -> bool) true (p2 (plus i k2)) x))) (eq-ind lzero lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) x-1) -> eq lzero B (op lzero B nil op-v (op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (op lzero B nil op-v (f i) x-1)) (eq-ind lzero lzero B (op lzero B nil op-v (f i) (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0)))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil op-v (f i) (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0)))) x-1) -> eq lzero B x-1 (op lzero B nil op-v (f i) (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))))) (refl lzero B (op lzero B nil op-v (f i) (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))))) (op lzero B nil op-v (op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (assoc lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0)))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0))) Hind) (leb k2 (plus i k2)) (le-to-leb-true k2 (plus i k2) (le-plus-n i k2))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero B (op lzero B nil op-v (match-bool lzero (λ (X-0 : bool) -> B) (op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) false) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (match-bool lzero (λ (X-0 : bool) -> B) (op lzero B nil op-v (match-bool lzero (λ (X-0 : bool) -> B) (f i) (g (plus i k2)) x) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0)))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0))) (match-bool lzero (λ (X-0 : bool) -> bool) false (p2 (plus i k2)) x))) (eq-ind lzero lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) x-1) -> eq lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0))) x-1) (refl lzero B (op lzero B nil op-v (bigop i (λ (i0 : nat) -> p1 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop k2 (λ (i0 : nat) -> p2 i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> g i0)))) (bigop (plus i k2) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p1 (minus i0 k2)) (p2 i0) (leb k2 i0)) B nil (op lzero B nil op-v) (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (minus i0 k2)) (g i0) (leb k2 i0))) Hind) (leb k2 (plus i k2)) (le-to-leb-true k2 (plus i k2) (le-plus-n i k2))) (p1 i)) (minus (plus i k2) k2) (minus-plus-m-m i k2)) k1

plus-minus1 : (a : nat) -> (b : nat) -> (c : nat) -> (X-- : le c b) -> eq lzero nat (plus a (minus b c)) (minus (plus a b) c)
plus-minus1 = λ (a : nat) -> λ (b : nat) -> λ (c : nat) -> λ (lecb : le c b) -> sym-eq lzero nat (minus (plus a b) c) (plus a (minus b c)) (plus-to-minus (plus a b) c (plus a (minus b c)) (eq-ind-r lzero lzero nat (plus (plus a (minus b c)) c) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (plus a (minus b c)) c)) -> eq lzero nat (plus a b) x) (eq-ind-r lzero lzero nat (plus a (plus (minus b c) c)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus a (plus (minus b c) c))) -> eq lzero nat (plus a b) x) (eq-ind lzero lzero nat b (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b x-1) -> eq lzero nat (plus a b) (plus a x-1)) (refl lzero nat (plus a b)) (plus (minus b c) c) (plus-minus-m-m b c lecb)) (plus (plus a (minus b c)) c) (associative-plus a (minus b c) c)) (plus c (plus a (minus b c))) (commutative-plus c (plus a (minus b c)))))

bigop-I : (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> eq lzero B (bigop (minus n O) (λ (i : nat) -> p (plus i O)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i O))) (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))
bigop-I = λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> eq lzero B (bigop x-1 (λ (i : nat) -> p (plus i O)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i O))) (bigop n (λ (i : nat) -> p i) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (same-bigop n (λ (X-- : nat) -> p (plus X-- O)) p B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (plus X-- O)) f (λ (i : nat) -> λ (auto : lt i n) -> rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero bool (p X--) (p i)) (refl lzero bool (p i)) (plus i O) (plus-n-O i)) (λ (i : nat) -> λ (auto : lt i n) -> λ (auto' : eq lzero bool (p (plus i O)) true) -> rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero B (f X--) (f i)) (refl lzero B (f i)) (plus i O) (plus-n-O i))) (minus n O) (minus-n-O n)

bigop-I-gen : (a : nat) -> (b : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (X-- : le a b) -> eq lzero B (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop b (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))
bigop-I-gen = λ (a : nat) -> λ (b : nat) -> nat-ind (lsuc lzero) (λ (X-x-365 : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (X-- : le a X-x-365) -> eq lzero B (bigop (minus X-x-365 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop X-x-365 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (auto : le a O) -> refl lzero B (bigop (minus O a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a)))) (λ (b0 : nat) -> λ (Hind : (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (X-- : le a b0) -> eq lzero B (bigop (minus b0 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (lea : le a (S b0)) -> match-Or lzero lzero (lt a (S b0)) (eq lzero nat a (S b0)) lzero (λ (X-- : Or lzero lzero (lt a (S b0)) (eq lzero nat a (S b0))) -> eq lzero B (bigop (minus (S b0) a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop (S b0) (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (Ha : lt a (S b0)) -> match-Or lzero lzero (eq lzero bool (p b0) true) (eq lzero bool (p b0) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p b0) true) (eq lzero bool (p b0) false)) -> eq lzero B (bigop (minus (S b0) a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop (S b0) (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (Hcase : eq lzero bool (p b0) true) -> eq-ind-r lzero lzero B (op lzero B nil op-v (f b0) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil op-v (f b0) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)))) -> eq lzero B (bigop (minus (S b0) a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) x) (eq-ind-r lzero lzero nat (S (minus b0 a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (minus b0 a))) -> eq lzero B (bigop x (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (f b0) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)))) (eq-ind-r lzero lzero B (op lzero B nil op-v (f (plus (minus b0 a) a)) (bigop (minus b0 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a)))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil op-v (f (plus (minus b0 a) a)) (bigop (minus b0 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))) -> eq lzero B x (op lzero B nil op-v (f b0) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)))) (eq-f2 lzero lzero lzero B B B (op lzero B nil op-v) (f (plus (minus b0 a) a)) (f b0) (bigop (minus b0 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (eq-f lzero lzero nat B f (plus (minus b0 a) a) b0 (eq-ind lzero lzero nat b0 (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b0 x-1) -> eq lzero nat x-1 b0) (refl lzero nat b0) (plus (minus b0 a) a) (plus-minus-m-m b0 a (le-S-S-to-le a b0 Ha)))) (Hind p B nil op-v f (le-S-S-to-le a b0 Ha))) (bigop (S (minus b0 a)) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop-Strue (minus b0 a) (λ (X-- : nat) -> p (plus X-- a)) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (plus X-- a)) (eq-ind lzero lzero nat b0 (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b0 x-1) -> eq lzero bool (p x-1) true) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p b0) Hcase) (plus (minus b0 a) a) (plus-minus-m-m b0 a (le-S-S-to-le a b0 Ha))))) (minus (S b0) a) (match-nat lzero (λ (X-- : nat) -> (X--1 : le X-- b0) -> eq lzero nat (minus (S b0) X--) (S (minus b0 X--))) (λ (auto : le O b0) -> rewrite-l lzero lzero nat (S b0) (λ (X-- : nat) -> eq lzero nat X-- (S (minus b0 O))) (rewrite-l lzero lzero nat b0 (λ (X-- : nat) -> eq lzero nat (S b0) (S X--)) (refl lzero nat (S b0)) (minus b0 O) (minus-n-O b0)) (minus (S b0) O) (minus-n-O (S b0))) (λ (a1 : nat) -> λ (lta1 : le (S a1) b0) -> eq-ind-r lzero lzero nat (pred (minus b0 a1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (pred (minus b0 a1))) -> eq lzero nat (minus b0 a1) (S x)) (eq-ind-r lzero lzero nat (minus b0 a1) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus b0 a1)) -> eq lzero nat (minus b0 a1) x) (refl lzero nat (minus b0 a1)) (S (pred (minus b0 a1))) (S-pred (minus b0 a1) (lt-plus-to-minus-r O a1 b0 lta1))) (minus b0 (S a1)) (eq-minus-S-pred b0 a1)) a (le-S-S-to-le a b0 Ha))) (bigop (S b0) (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-Strue b0 (λ (X-- : nat) -> andb (leb a X--) (p X--)) B nil (op lzero B nil op-v) f (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero bool (andb (leb a b0) x) true) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero bool (andb x true) true) (refl lzero bool (andb true true)) (leb a b0) (le-to-leb-true a b0 (le-S-S-to-le a b0 Ha))) (p b0) Hcase))) (λ (Hcase : eq lzero bool (p b0) false) -> eq-ind-r lzero lzero B (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) -> eq lzero B (bigop (minus (S b0) a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) x) (eq-ind-r lzero lzero nat (S (minus b0 a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (minus b0 a))) -> eq lzero B (bigop x (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (eq-ind-r lzero lzero B (bigop (minus b0 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (minus b0 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a)))) -> eq lzero B x (bigop b0 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (Hind p B nil op-v f (le-S-S-to-le a b0 Ha)) (bigop (S (minus b0 a)) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop-Sfalse (minus b0 a) (λ (X-- : nat) -> p (plus X-- a)) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (plus X-- a)) (eq-ind lzero lzero nat b0 (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b0 x-1) -> eq lzero bool (p x-1) false) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p b0) Hcase) (plus (minus b0 a) a) (plus-minus-m-m b0 a (le-S-S-to-le a b0 Ha))))) (minus (S b0) a) (match-nat lzero (λ (X-- : nat) -> (X--1 : le X-- b0) -> eq lzero nat (minus (S b0) X--) (S (minus b0 X--))) (λ (auto : le O b0) -> rewrite-l lzero lzero nat (S b0) (λ (X-- : nat) -> eq lzero nat X-- (S (minus b0 O))) (rewrite-l lzero lzero nat b0 (λ (X-- : nat) -> eq lzero nat (S b0) (S X--)) (refl lzero nat (S b0)) (minus b0 O) (minus-n-O b0)) (minus (S b0) O) (minus-n-O (S b0))) (λ (a1 : nat) -> λ (lta1 : le (S a1) b0) -> eq-ind-r lzero lzero nat (pred (minus b0 a1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (pred (minus b0 a1))) -> eq lzero nat (minus b0 a1) (S x)) (eq-ind-r lzero lzero nat (minus b0 a1) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus b0 a1)) -> eq lzero nat (minus b0 a1) x) (refl lzero nat (minus b0 a1)) (S (pred (minus b0 a1))) (S-pred (minus b0 a1) (lt-plus-to-minus-r O a1 b0 lta1))) (minus b0 (S a1)) (eq-minus-S-pred b0 a1)) a (le-S-S-to-le a b0 Ha))) (bigop (S b0) (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-Sfalse b0 (λ (X-- : nat) -> andb (leb a X--) (p X--)) B nil (op lzero B nil op-v) f (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (andb (leb a b0) x) false) (match-bool lzero (λ (X-- : bool) -> eq lzero bool (andb X-- false) false) (refl lzero bool (andb true false)) (refl lzero bool (andb false false)) (leb a b0)) (p b0) Hcase))) (true-or-false (p b0))) (λ (Ha : eq lzero nat a (S b0)) -> eq-ind lzero lzero nat a (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat a x-1) -> eq lzero B (bigop (minus x-1 a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop x-1 (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> eq lzero B (bigop x-1 (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop a (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (eq-ind lzero lzero B (bigop a (λ (i : nat) -> false) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (bigop a (λ (i : nat) -> false) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) x-1) -> eq lzero B x-1 (bigop a (λ (i : nat) -> andb (leb a i) (p i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f i))) (same-bigop a (λ (X-- : nat) -> false) (λ (X-- : nat) -> andb (leb a X--) (p X--)) B nil (op lzero B nil op-v) f f (λ (i : nat) -> λ (ltia : lt i a) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool false (andb x (p i))) (refl lzero bool false) (leb a i) (not-le-to-leb-false a i (lt-to-not-le i a ltia))) (λ (i : nat) -> λ (auto : lt i a) -> λ (auto' : eq lzero bool false true) -> refl lzero B (f i))) nil (bigop-false a B nil (op lzero B nil op-v) f)) (minus a a) (minus-n-n a)) (S b0) Ha) (le-to-or-lt-eq a (S b0) lea)) b

bigop-sumI : (a : nat) -> (b : nat) -> (c : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (X-- : le a b) -> (X--1 : le b c) -> eq lzero B (bigop (minus c a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (bigop (minus c b) (λ (i : nat) -> p (plus i b)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i b))) (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))
bigop-sumI = λ (a : nat) -> λ (b : nat) -> λ (c : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (leab : le a b) -> λ (lebc : le b c) -> eq-ind-r lzero lzero nat (plus (minus (minus c a) (minus b a)) (minus b a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (minus (minus c a) (minus b a)) (minus b a))) -> eq lzero B (bigop x (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (bigop (minus c b) (λ (i : nat) -> p (plus i b)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i b))) (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))) (eq-ind-r lzero lzero nat (minus c (plus a (minus b a))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus c (plus a (minus b a)))) -> eq lzero B (bigop (plus x (minus b a)) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (bigop (minus c b) (λ (i : nat) -> p (plus i b)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i b))) (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))) (eq-ind-r lzero lzero nat (plus (minus b a) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (minus b a) a)) -> eq lzero B (bigop (plus (minus c x) (minus b a)) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (bigop (minus c b) (λ (i : nat) -> p (plus i b)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i b))) (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))) (eq-ind lzero lzero nat b (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b x-1) -> eq lzero B (bigop (plus (minus c x-1) (minus b a)) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (bigop (minus c b) (λ (i : nat) -> p (plus i b)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i b))) (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))) (eq-ind-r lzero lzero B (bigop (plus (minus c b) (minus b a)) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p (plus (minus i (minus b a)) b)) (p (plus i a)) (leb (minus b a) i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (plus (minus i (minus b a)) b)) (f (plus i a)) (leb (minus b a) i))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (plus (minus c b) (minus b a)) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p (plus (minus i (minus b a)) b)) (p (plus i a)) (leb (minus b a) i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f (plus (minus i (minus b a)) b)) (f (plus i a)) (leb (minus b a) i)))) -> eq lzero B (bigop (plus (minus c b) (minus b a)) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) x) (same-bigop (plus (minus c b) (minus b a)) (λ (X-- : nat) -> p (plus X-- a)) (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p (plus (minus X-- (minus b a)) b)) (p (plus X-- a)) (leb (minus b a) X--)) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (plus X-- a)) (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f (plus (minus X-- (minus b a)) b)) (f (plus X-- a)) (leb (minus b a) X--)) (λ (i : nat) -> λ (ltic : lt i (plus (minus c b) (minus b a))) -> leb-elim lzero (minus b a) i (λ (X-- : bool) -> eq lzero bool (p (plus i a)) (match-bool lzero (λ (X-0 : bool) -> bool) (p (plus (minus i (minus b a)) b)) (p (plus i a)) X--)) (λ (lei : le (minus b a) i) -> eq-ind lzero lzero nat (plus i a) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus i a) x-1) -> eq lzero bool (p (plus i a)) (p x-1)) (rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero bool (p X--) (p (plus i a))) (rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero bool (p (plus a i)) (p X--)) (refl lzero bool (p (plus a i))) (plus i a) (commutative-plus i a)) (plus i a) (commutative-plus i a)) (plus (minus i (minus b a)) b) (eq-ind-r lzero lzero nat (minus (plus i b) (minus b a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (plus i b) (minus b a))) -> eq lzero nat (plus i a) x) (eq-ind lzero lzero nat (plus i (minus b (minus b a))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus i (minus b (minus b a))) x-1) -> eq lzero nat (plus i a) x-1) (eq-f lzero lzero nat nat (plus i) a (minus b (minus b a)) (sym-eq lzero nat (minus b (minus b a)) a (plus-to-minus b (minus b a) a (sym-eq lzero nat (plus (minus b a) a) b (eq-coerc lzero (eq lzero nat (plus a (minus b a)) (minus (plus a b) a)) (eq lzero nat (plus (minus b a) a) b) (plus-minus1 a b a leab) (rewrite-r lzero (lsuc lzero) nat (plus a (minus b a)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) (minus (plus a b) a)) (eq lzero nat X-- b)) (rewrite-r lzero (lsuc lzero) nat (plus b a) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) (minus X-- a)) (eq lzero nat (plus a (minus b a)) b)) (rewrite-l lzero (lsuc lzero) nat b (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) X--) (eq lzero nat (plus a (minus b a)) b)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) b)) (minus (plus b a) a) (minus-plus-m-m b a)) (plus a b) (commutative-plus a b)) (plus (minus b a) a) (commutative-plus (minus b a) a))))))) (minus (plus i b) (minus b a)) (plus-minus1 i b (minus b a) (minus-le b a))) (plus (minus i (minus b a)) b) (plus-minus (minus b a) i b lei))) (λ (auto : Not lzero (le (minus b a) i)) -> rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero bool (p X--) (p (plus i a))) (rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero bool (p (plus a i)) (p X--)) (refl lzero bool (p (plus a i))) (plus i a) (commutative-plus i a)) (plus i a) (commutative-plus i a))) (λ (i : nat) -> λ (ltic : lt i (plus (minus c b) (minus b a))) -> leb-elim lzero (minus b a) i (λ (X-- : bool) -> (X--1 : eq lzero bool (p (plus i a)) true) -> eq lzero B (f (plus i a)) (match-bool lzero (λ (X-0 : bool) -> B) (f (plus (minus i (minus b a)) b)) (f (plus i a)) X--)) (λ (lei : le (minus b a) i) -> eq-ind lzero lzero nat (plus i a) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus i a) x-1) -> (X-- : eq lzero bool (p (plus i a)) true) -> eq lzero B (f (plus i a)) (f x-1)) (λ (auto : eq lzero bool (p (plus i a)) true) -> rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero B (f X--) (f (plus i a))) (rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero B (f (plus a i)) (f X--)) (refl lzero B (f (plus a i))) (plus i a) (commutative-plus i a)) (plus i a) (commutative-plus i a)) (plus (minus i (minus b a)) b) (eq-ind-r lzero lzero nat (minus (plus i b) (minus b a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (plus i b) (minus b a))) -> eq lzero nat (plus i a) x) (eq-ind lzero lzero nat (plus i (minus b (minus b a))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus i (minus b (minus b a))) x-1) -> eq lzero nat (plus i a) x-1) (eq-f lzero lzero nat nat (plus i) a (minus b (minus b a)) (sym-eq lzero nat (minus b (minus b a)) a (plus-to-minus b (minus b a) a (sym-eq lzero nat (plus (minus b a) a) b (eq-coerc lzero (eq lzero nat (plus a (minus b a)) (minus (plus a b) a)) (eq lzero nat (plus (minus b a) a) b) (plus-minus1 a b a leab) (rewrite-r lzero (lsuc lzero) nat (plus a (minus b a)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) (minus (plus a b) a)) (eq lzero nat X-- b)) (rewrite-r lzero (lsuc lzero) nat (plus b a) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) (minus X-- a)) (eq lzero nat (plus a (minus b a)) b)) (rewrite-l lzero (lsuc lzero) nat b (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) X--) (eq lzero nat (plus a (minus b a)) b)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus a (minus b a)) b)) (minus (plus b a) a) (minus-plus-m-m b a)) (plus a b) (commutative-plus a b)) (plus (minus b a) a) (commutative-plus (minus b a) a))))))) (minus (plus i b) (minus b a)) (plus-minus1 i b (minus b a) (minus-le b a))) (plus (minus i (minus b a)) b) (plus-minus (minus b a) i b lei))) (λ (auto : Not lzero (le (minus b a) i)) -> λ (auto' : eq lzero bool (p (plus i a)) true) -> rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero B (f X--) (f (plus i a))) (rewrite-r lzero lzero nat (plus a i) (λ (X-- : nat) -> eq lzero B (f (plus a i)) (f X--)) (refl lzero B (f (plus a i))) (plus i a) (commutative-plus i a)) (plus i a) (commutative-plus i a)))) (op lzero B nil op-v (bigop (minus c b) (λ (i : nat) -> p (plus i b)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i b))) (bigop (minus b a) (λ (i : nat) -> p (plus i a)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a)))) (bigop-sum (minus c b) (minus b a) (λ (X-- : nat) -> p (plus X-- b)) (λ (X-- : nat) -> p (plus X-- a)) B nil op-v (λ (X-- : nat) -> f (plus X-- b)) (λ (X-- : nat) -> f (plus X-- a)))) (plus (minus b a) a) (plus-minus-m-m b a leab)) (plus a (minus b a)) (commutative-plus a (minus b a))) (minus (minus c a) (minus b a)) (minus-plus c a (minus b a))) (minus c a) (plus-minus-m-m (minus c a) (minus b a) (monotonic-le-minus-l c b a lebc))

bigop-a : (a : nat) -> (b : nat) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> (X-- : le a b) -> eq lzero B (bigop (minus (S b) a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (op lzero B nil op-v (bigop (minus b a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i a)))) (f a))
bigop-a = λ (a : nat) -> λ (b : nat) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (leab : le a b) -> eq-ind-r lzero lzero B (op lzero B nil op-v (bigop (minus (S b) (S a)) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i (S a)))) (bigop (minus (S a) a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a)))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil op-v (bigop (minus (S b) (S a)) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i (S a)))) (bigop (minus (S a) a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))))) -> eq lzero B x (op lzero B nil op-v (bigop (minus b a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i a)))) (f a))) (eq-f2 lzero lzero lzero B B B (op lzero B nil op-v) (bigop (minus (S b) (S a)) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i (S a)))) (bigop (minus b a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i a)))) (bigop (minus (S a) a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (f a) (same-bigop (minus (S b) (S a)) (λ (X-- : nat) -> true) (λ (X-- : nat) -> true) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (plus X-- (S a))) (λ (X-- : nat) -> f (S (plus X-- a))) (λ (i : nat) -> λ (auto : lt i (minus (S b) (S a))) -> refl lzero bool true) (λ (i : nat) -> λ (auto : lt i (minus (S b) (S a))) -> λ (auto' : eq lzero bool true true) -> rewrite-l lzero lzero nat (S (plus i a)) (λ (X-- : nat) -> eq lzero B (f X--) (f (S (plus i a)))) (refl lzero B (f (S (plus i a)))) (plus i (S a)) (plus-n-Sm i a))) (eq-ind lzero lzero nat (S O) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S O) x-1) -> eq lzero B (bigop x-1 (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (f a)) (nilr lzero B nil op-v (f a)) (minus (S a) a) (minus-Sn-n a))) (bigop (minus (S b) a) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i a))) (bigop-sumI a (S a) (S b) (λ (X-- : nat) -> true) B nil op-v f (le-n-Sn a) (le-S-S a b leab))

bigop-0 : (n : nat) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> B) -> eq lzero B (bigop (S n) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (op lzero B nil op-v (bigop n (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S i))) (f O))
bigop-0 = λ (n : nat) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> B) -> eq-ind lzero lzero B (bigop (minus (S n) O) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i O))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (bigop (minus (S n) O) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i O))) x-1) -> eq lzero B x-1 (op lzero B nil op-v (bigop n (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S i))) (f O))) (eq-ind-r lzero lzero B (op lzero B nil op-v (bigop (minus n O) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i O)))) (f O)) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil op-v (bigop (minus n O) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i O)))) (f O))) -> eq lzero B x (op lzero B nil op-v (bigop n (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S i))) (f O))) (eq-f2 lzero lzero lzero B B B (op lzero B nil op-v) (bigop (minus n O) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i O)))) (bigop n (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S i))) (f O) (f O) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> eq lzero B (bigop x-1 (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S (plus i O)))) (bigop n (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (S i)))) (same-bigop n (λ (X-- : nat) -> true) (λ (X-- : nat) -> true) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (S (plus X-- O))) (λ (X-- : nat) -> f (S X--)) (λ (i : nat) -> λ (auto : lt i n) -> refl lzero bool true) (λ (i : nat) -> λ (auto : lt i n) -> λ (auto' : eq lzero bool true true) -> rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero B (f (S X--)) (f (S i))) (refl lzero B (f (S i))) (plus i O) (plus-n-O i))) (minus n O) (minus-n-O n)) (refl lzero B (f O))) (bigop (minus (S n) O) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f (plus i O))) (bigop-a O n B nil op-v f (le-O-n n))) (bigop (S n) (λ (i : nat) -> true) B nil (op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-I (S n) (λ (X-- : nat) -> true) B nil op-v f)

bigop-prod : (k1 : nat) -> (k2 : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> (X--1 : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : Aop lzero B nil) -> (f : (X-- : nat) -> (X--1 : nat) -> B) -> eq lzero B (bigop k1 (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i))) (bigop (times k1 k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))
bigop-prod = λ (k1 : nat) -> λ (k2 : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> (X--1 : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : Aop lzero B nil) -> λ (f : (X-- : nat) -> (X--1 : nat) -> B) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero B (bigop X-x-365 (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i))) (bigop (times X-x-365 k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (refl lzero B (bigop O (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i)))) (λ (n : nat) -> λ (Hind : eq lzero B (bigop n (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i))) (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) -> match-Or lzero lzero (eq lzero bool (p1 n) true) (eq lzero bool (p1 n) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p1 n) true) (eq lzero bool (p1 n) false)) -> eq lzero B (bigop (S n) (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i))) (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (λ (Hp1 : eq lzero bool (p1 n) true) -> eq-ind-r lzero lzero B (op lzero B nil op-v (bigop k2 (λ (i : nat) -> p2 n i) B nil (op lzero B nil op-v) (λ (i : nat) -> f n i)) (bigop n (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> bigop k2 (λ (i0 : nat) -> p2 i i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i i0)))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil op-v (bigop k2 (λ (i : nat) -> p2 n i) B nil (op lzero B nil op-v) (λ (i : nat) -> f n i)) (bigop n (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> bigop k2 (λ (i0 : nat) -> p2 i i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i i0))))) -> eq lzero B x (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (eq-ind-r lzero lzero B (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) -> eq lzero B (op lzero B nil op-v (bigop k2 (λ (i : nat) -> p2 n i) B nil (op lzero B nil op-v) (λ (i : nat) -> f n i)) x) (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (eq-ind-r lzero lzero B (bigop (plus k2 (times n k2)) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) (leb (times n k2) i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f n (minus i (times n k2))) (f (div i k2) (mod i k2)) (leb (times n k2) i))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (plus k2 (times n k2)) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) (leb (times n k2) i)) B nil (op lzero B nil op-v) (λ (i : nat) -> match-bool lzero (λ (X-- : bool) -> B) (f n (minus i (times n k2))) (f (div i k2) (mod i k2)) (leb (times n k2) i)))) -> eq lzero B x (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (same-bigop (plus k2 (times n k2)) (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus X-- (times n k2))) (andb (p1 (div X-- k2)) (p2 (div X-- k2) (mod X-- k2))) (leb (times n k2) X--)) (λ (X-- : nat) -> andb (p1 (div X-- k2)) (p2 (div X-- k2) (mod X-- k2))) B nil (op lzero B nil op-v) (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> B) (f n (minus X-- (times n k2))) (f (div X-- k2) (mod X-- k2)) (leb (times n k2) X--)) (λ (X-- : nat) -> f (div X-- k2) (mod X-- k2)) (λ (i : nat) -> λ (lti : lt i (plus k2 (times n k2))) -> leb-elim lzero (times n k2) i (λ (X-- : bool) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) X--) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2)))) (λ (lei : le (times n k2) i) -> eq-ind-r lzero lzero nat (plus (times n k2) (minus i (times n k2))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times n k2) (minus i (times n k2)))) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb (p1 (div x k2)) (p2 (div x k2) (mod x k2)))) (eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb (p1 x) (p2 x (mod (plus (times n k2) (minus i (times n k2))) k2)))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb x (p2 n (mod (plus (times n k2) (minus i (times n k2))) k2)))) (eq-ind-r lzero lzero nat (minus i (times n k2)) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus i (times n k2))) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb true (p2 n x))) (refl lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true)) (mod (plus (times n k2) (minus i (times n k2))) k2) (mod-plus-times k2 n (minus i (times n k2)) (eq-coerc lzero (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i (times n k2)) k2) (monotonic-lt-minus-l (plus k2 (times k2 n)) i (times k2 n) (eq-coerc lzero (le (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i) (minus-le (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (rewrite-r lzero (lsuc lzero) nat (minus (times k2 n) O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times k2 n) X--) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (minus (times k2 n) O) (minus-n-O (times k2 n))) (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (minus-plus-plus-l (times k2 n) O (minus i (times k2 n))))) (eq-coerc lzero (lt i (plus k2 (times n k2))) (lt i (plus k2 (times k2 n))) lti (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus k2 X--)) (lt i (plus k2 (times k2 n)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus k2 (times k2 n)))) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i X--) k2)) (rewrite-l lzero (lsuc lzero) nat k2 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) X--) (lt (minus i (times k2 n)) k2)) (refl (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) k2)) (minus (plus k2 (times k2 n)) (times k2 n)) (minus-plus-m-m k2 (times k2 n))) (times n k2) (commutative-times n k2))))) (p1 n) Hp1) (div (plus (times n k2) (minus i (times n k2))) k2) (div-plus-times k2 n (minus i (times n k2)) (eq-coerc lzero (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i (times n k2)) k2) (monotonic-lt-minus-l (plus k2 (times k2 n)) i (times k2 n) (eq-coerc lzero (le (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i) (minus-le (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (rewrite-r lzero (lsuc lzero) nat (minus (times k2 n) O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times k2 n) X--) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (minus (times k2 n) O) (minus-n-O (times k2 n))) (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (minus-plus-plus-l (times k2 n) O (minus i (times k2 n))))) (eq-coerc lzero (lt i (plus k2 (times n k2))) (lt i (plus k2 (times k2 n))) lti (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus k2 X--)) (lt i (plus k2 (times k2 n)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus k2 (times k2 n)))) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i X--) k2)) (rewrite-l lzero (lsuc lzero) nat k2 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) X--) (lt (minus i (times k2 n)) k2)) (refl (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) k2)) (minus (plus k2 (times k2 n)) (times k2 n)) (minus-plus-m-m k2 (times k2 n))) (times n k2) (commutative-times n k2))))) i (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2))))) (λ (auto : Not lzero (le (times n k2) i)) -> refl lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) false))) (λ (i : nat) -> λ (lti : lt i (plus k2 (times n k2))) -> leb-elim lzero (times n k2) i (λ (X-- : bool) -> (X--1 : eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) X--) true) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (f n (minus i (times n k2))) (f (div i k2) (mod i k2)) X--) (f (div i k2) (mod i k2))) (λ (lei : le (times n k2) i) -> λ (H : eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) true) -> eq-ind-r lzero lzero nat (plus (times n k2) (minus i (times n k2))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times n k2) (minus i (times n k2)))) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (f n (minus x (times n k2))) (f (div x k2) (mod x k2)) true) (f (div x k2) (mod x k2))) (eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (f n (minus (plus (times n k2) (minus i (times n k2))) (times n k2))) (f x (mod (plus (times n k2) (minus i (times n k2))) k2)) true) (f x (mod (plus (times n k2) (minus i (times n k2))) k2))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (f n (minus (plus (times n k2) (minus i (times n k2))) (times n k2))) (f n (mod (plus (times n k2) (minus i (times n k2))) k2)) true) (f n (mod (plus (times n k2) (minus i (times n k2))) k2))) (eq-ind-r lzero lzero nat (minus i (times n k2)) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus i (times n k2))) -> eq lzero B (match-bool lzero (λ (X-0 : bool) -> B) (f n (minus (plus (times n k2) (minus i (times n k2))) (times n k2))) (f n x) true) (f n x)) (eq-f lzero lzero nat B (f n) (minus (plus (times n k2) (minus i (times n k2))) (times n k2)) (minus i (times n k2)) (rewrite-r lzero lzero nat (times k2 n) (λ (X-- : nat) -> eq lzero nat (minus (plus X-- (minus i (times n k2))) (times n k2)) (minus i (times n k2))) (rewrite-r lzero lzero nat (times k2 n) (λ (X-- : nat) -> eq lzero nat (minus (plus (times k2 n) (minus i X--)) (times n k2)) (minus i (times n k2))) (rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero nat (minus X-- (times n k2)) (minus i (times n k2))) (rewrite-r lzero lzero nat (times k2 n) (λ (X-- : nat) -> eq lzero nat (minus i X--) (minus i (times n k2))) (rewrite-r lzero lzero nat (times k2 n) (λ (X-- : nat) -> eq lzero nat (minus i (times k2 n)) (minus i X--)) (refl lzero nat (minus i (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2))) (mod (plus (times n k2) (minus i (times n k2))) k2) (mod-plus-times k2 n (minus i (times n k2)) (eq-coerc lzero (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i (times n k2)) k2) (monotonic-lt-minus-l (plus k2 (times k2 n)) i (times k2 n) (eq-coerc lzero (le (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i) (minus-le (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (rewrite-r lzero (lsuc lzero) nat (minus (times k2 n) O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times k2 n) X--) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (minus (times k2 n) O) (minus-n-O (times k2 n))) (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (minus-plus-plus-l (times k2 n) O (minus i (times k2 n))))) (eq-coerc lzero (lt i (plus k2 (times n k2))) (lt i (plus k2 (times k2 n))) lti (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus k2 X--)) (lt i (plus k2 (times k2 n)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus k2 (times k2 n)))) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i X--) k2)) (rewrite-l lzero (lsuc lzero) nat k2 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) X--) (lt (minus i (times k2 n)) k2)) (refl (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) k2)) (minus (plus k2 (times k2 n)) (times k2 n)) (minus-plus-m-m k2 (times k2 n))) (times n k2) (commutative-times n k2))))) (p1 n) Hp1) (div (plus (times n k2) (minus i (times n k2))) k2) (div-plus-times k2 n (minus i (times n k2)) (eq-coerc lzero (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i (times n k2)) k2) (monotonic-lt-minus-l (plus k2 (times k2 n)) i (times k2 n) (eq-coerc lzero (le (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i) (minus-le (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (rewrite-r lzero (lsuc lzero) nat (minus (times k2 n) O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times k2 n) X--) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (minus (times k2 n) O) (minus-n-O (times k2 n))) (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (minus-plus-plus-l (times k2 n) O (minus i (times k2 n))))) (eq-coerc lzero (lt i (plus k2 (times n k2))) (lt i (plus k2 (times k2 n))) lti (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus k2 X--)) (lt i (plus k2 (times k2 n)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus k2 (times k2 n)))) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i X--) k2)) (rewrite-l lzero (lsuc lzero) nat k2 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) X--) (lt (minus i (times k2 n)) k2)) (refl (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) k2)) (minus (plus k2 (times k2 n)) (times k2 n)) (minus-plus-m-m k2 (times k2 n))) (times n k2) (commutative-times n k2))))) i (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2))))) (λ (auto : Not lzero (le (times n k2) i)) -> λ (auto' : eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) (p2 n (minus i (times n k2))) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) false) true) -> refl lzero B (match-bool lzero (λ (X-0 : bool) -> B) (f n (minus i (times n k2))) (f (div i k2) (mod i k2)) false)))) (op lzero B nil op-v (bigop k2 (λ (i : nat) -> p2 n i) B nil (op lzero B nil op-v) (λ (i : nat) -> f n i)) (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (bigop-sum k2 (times n k2) (p2 n) (λ (X-- : nat) -> andb (p1 (div X-- k2)) (p2 (div X-- k2) (mod X-- k2))) B nil op-v (f n) (λ (X-- : nat) -> f (div X-- k2) (mod X-- k2)))) (bigop n (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i))) Hind) (bigop (S n) (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> bigop k2 (λ (i0 : nat) -> p2 i i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i i0))) (bigop-Strue n p1 B nil (op lzero B nil op-v) (λ (X-- : nat) -> bigop k2 (λ (i : nat) -> p2 X-- i) B nil (op lzero B nil op-v) (λ (i : nat) -> f X-- i)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p1 n) Hp1))) (λ (Hp1 : eq lzero bool (p1 n) false) -> eq-ind-r lzero lzero B (bigop n (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> bigop k2 (λ (i0 : nat) -> p2 i i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i i0))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> bigop k2 (λ (i0 : nat) -> p2 i i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i i0)))) -> eq lzero B x (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (eq-ind-r lzero lzero B (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) -> eq lzero B x (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (eq-ind-r lzero lzero B (bigop (times (S n) k2) (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) (leb (times n k2) i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (times (S n) k2) (λ (i : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) (leb (times n k2) i)) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) -> eq lzero B x (bigop (times (S n) k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2)))) (same-bigop (times (S n) k2) (λ (X-- : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div X-- k2)) (p2 (div X-- k2) (mod X-- k2))) (leb (times n k2) X--)) (λ (X-- : nat) -> andb (p1 (div X-- k2)) (p2 (div X-- k2) (mod X-- k2))) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (div X-- k2) (mod X-- k2)) (λ (X-- : nat) -> f (div X-- k2) (mod X-- k2)) (λ (i : nat) -> λ (lti : lt i (times (S n) k2)) -> leb-elim lzero (times n k2) i (λ (X-- : bool) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) X--) (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2)))) (λ (lei : le (times n k2) i) -> eq-ind-r lzero lzero nat (plus (times n k2) (minus i (times n k2))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times n k2) (minus i (times n k2)))) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb (p1 (div x k2)) (p2 (div x k2) (mod x k2)))) (eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb (p1 x) (p2 x (mod (plus (times n k2) (minus i (times n k2))) k2)))) (trans-eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) (andb false (p2 n (mod i k2))) (andb (p1 n) (p2 n (mod (plus (times n k2) (minus i (times n k2))) k2))) (refl lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true)) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool (andb false (p2 n (mod i k2))) (andb X-- (p2 n (mod (plus (times n k2) (minus i (times n k2))) k2)))) (rewrite-r lzero lzero nat (times k2 n) (λ (X-- : nat) -> eq lzero bool (andb false (p2 n (mod i k2))) (andb false (p2 n (mod (plus X-- (minus i (times n k2))) k2)))) (rewrite-r lzero lzero nat (times k2 n) (λ (X-- : nat) -> eq lzero bool (andb false (p2 n (mod i k2))) (andb false (p2 n (mod (plus (times k2 n) (minus i X--)) k2)))) (rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero bool (andb false (p2 n (mod i k2))) (andb false (p2 n (mod X-- k2)))) (refl lzero bool (andb false (p2 n (mod i k2)))) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)) (p1 n) Hp1)) (div (plus (times n k2) (minus i (times n k2))) k2) (div-plus-times k2 n (minus i (times n k2)) (eq-coerc lzero (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i (times n k2)) k2) (monotonic-lt-minus-l (plus k2 (times k2 n)) i (times k2 n) (eq-coerc lzero (le (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i) (minus-le (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (rewrite-r lzero (lsuc lzero) nat (minus (times k2 n) O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) (minus i (times k2 n)))) (le (times k2 n) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times k2 n) X--) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (plus (times k2 n) (minus i (times k2 n))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus (times k2 n) (minus i X--))) (rewrite-l lzero lzero nat (times n k2) (λ (X-- : nat) -> eq lzero nat i (plus X-- (minus i (times n k2)))) (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2)))) (times k2 n) (commutative-times n k2)) (times k2 n) (commutative-times n k2))) (minus (times k2 n) O) (minus-n-O (times k2 n))) (minus (plus (times k2 n) (minus i (times k2 n))) (plus O (minus i (times k2 n)))) (minus-plus-plus-l (times k2 n) O (minus i (times k2 n))))) (eq-coerc lzero (lt i (times (S n) k2)) (lt i (plus k2 (times k2 n))) lti (rewrite-r lzero (lsuc lzero) nat (times k2 (S n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (plus k2 (times k2 n)))) (rewrite-l lzero (lsuc lzero) nat (plus k2 (times k2 n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (plus k2 (times k2 n)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus k2 (times k2 n)))) (times k2 (S n)) (times-n-Sm k2 n)) (times (S n) k2) (commutative-times (S n) k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) (minus (plus k2 (times k2 n)) (times k2 n))) (lt (minus i X--) k2)) (rewrite-l lzero (lsuc lzero) nat k2 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) X--) (lt (minus i (times k2 n)) k2)) (refl (lsuc lzero) (Set (lzero)) (lt (minus i (times k2 n)) k2)) (minus (plus k2 (times k2 n)) (times k2 n)) (minus-plus-m-m k2 (times k2 n))) (times n k2) (commutative-times n k2))))) i (sym-eq lzero nat (plus (times n k2) (minus i (times n k2))) i (eq-coerc lzero (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times n k2) (minus i (times n k2))) i) (plus-minus (times k2 n) i (times k2 n) (eq-coerc lzero (le (times n k2) i) (le (times k2 n) i) lei (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- i) (le (times k2 n) i)) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) i)) (times n k2) (commutative-times n k2)))) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus X-- (minus i (times n k2))) i)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (minus i (times k2 n)) (times k2 n)) (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i X--)) i)) (rewrite-r lzero (lsuc lzero) nat (plus (times k2 n) (minus i (times k2 n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat X-- (minus (plus i (times k2 n)) (times k2 n))) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) X--) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat (plus (times k2 n) (minus i (times k2 n))) i)) (minus (plus i (times k2 n)) (times k2 n)) (minus-plus-m-m i (times k2 n))) (plus (minus i (times k2 n)) (times k2 n)) (commutative-plus (minus i (times k2 n)) (times k2 n))) (times n k2) (commutative-times n k2)) (times n k2) (commutative-times n k2))))) (λ (auto : Not lzero (le (times n k2) i)) -> refl lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) false))) (λ (i : nat) -> λ (lti : lt i (times (S n) k2)) -> leb-elim lzero (times n k2) i (λ (X-- : bool) -> (X--1 : eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) X--) true) -> eq lzero B (f (div i k2) (mod i k2)) (f (div i k2) (mod i k2))) (λ (auto : le (times n k2) i) -> λ (auto' : eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) true) true) -> refl lzero B (f (div i k2) (mod i k2))) (λ (auto : Not lzero (le (times n k2) i)) -> λ (auto' : eq lzero bool (match-bool lzero (λ (X-0 : bool) -> bool) false (andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) false) true) -> refl lzero B (f (div i k2) (mod i k2))))) (bigop (times n k2) (λ (i : nat) -> andb (p1 (div i k2)) (p2 (div i k2) (mod i k2))) B nil (op lzero B nil op-v) (λ (i : nat) -> f (div i k2) (mod i k2))) (pad-bigop (times (S n) k2) (times n k2) (λ (X-- : nat) -> andb (p1 (div X-- k2)) (p2 (div X-- k2) (mod X-- k2))) B nil (op lzero B nil op-v) (λ (X-- : nat) -> f (div X-- k2) (mod X-- k2)) (eq-coerc lzero (le (minus (plus (times n k2) k2) (plus O k2)) (plus (times n k2) k2)) (le (times n k2) (times (S n) k2)) (minus-le (plus (times n k2) k2) (plus O k2)) (rewrite-r lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (plus X-- k2) (plus O k2)) (plus X-- k2)) (le X-- (times (S n) k2))) (rewrite-r lzero (lsuc lzero) nat (times k2 (S n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (plus (times k2 n) k2) (plus O k2)) (plus (times k2 n) k2)) (le (times k2 n) X--)) (rewrite-l lzero (lsuc lzero) nat (plus k2 (times k2 n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (plus (times k2 n) k2) (plus O k2)) (plus (times k2 n) k2)) (le (times k2 n) X--)) (rewrite-r lzero (lsuc lzero) nat (minus (times k2 n) O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) k2)) (le (times k2 n) (plus k2 (times k2 n)))) (rewrite-l lzero (lsuc lzero) nat (times k2 n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus (times k2 n) k2)) (le (times k2 n) (plus k2 (times k2 n)))) (rewrite-r lzero (lsuc lzero) nat (plus k2 (times k2 n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times k2 n) X--) (le (times k2 n) (plus k2 (times k2 n)))) (refl (lsuc lzero) (Set (lzero)) (le (times k2 n) (plus k2 (times k2 n)))) (plus (times k2 n) k2) (commutative-plus (times k2 n) k2)) (minus (times k2 n) O) (minus-n-O (times k2 n))) (minus (plus (times k2 n) k2) (plus O k2)) (minus-plus-plus-l (times k2 n) O k2)) (times k2 (S n)) (times-n-Sm k2 n)) (times (S n) k2) (commutative-times (S n) k2)) (times n k2) (commutative-times n k2))))) (bigop n (λ (x : nat) -> p1 x) B nil (op lzero B nil op-v) (λ (x : nat) -> bigop k2 (λ (i : nat) -> p2 x i) B nil (op lzero B nil op-v) (λ (i : nat) -> f x i))) Hind) (bigop (S n) (λ (i : nat) -> p1 i) B nil (op lzero B nil op-v) (λ (i : nat) -> bigop k2 (λ (i0 : nat) -> p2 i i0) B nil (op lzero B nil op-v) (λ (i0 : nat) -> f i i0))) (bigop-Sfalse n p1 B nil (op lzero B nil op-v) (λ (X-- : nat) -> bigop k2 (λ (i : nat) -> p2 X-- i) B nil (op lzero B nil op-v) (λ (i : nat) -> f X-- i)) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p1 n) Hp1))) (true-or-false (p1 n))) k1


data ACop (l0-v : Level) (A-v : Set l0-v) (nil-v : A-v) : Set l0-v where
  mk-ACop' : (aop-v : Aop l0-v A-v nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l0-v A-v (op l0-v A-v nil-v aop-v a-v b-v) (op l0-v A-v nil-v aop-v b-v a-v)) -> ACop l0-v A-v nil-v

mk-ACop : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (aop-v : Aop l5-v A-v nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l5-v A-v (op l5-v A-v nil-v aop-v a-v b-v) (op l5-v A-v nil-v aop-v b-v a-v)) -> ACop l5-v A-v nil-v
mk-ACop _ _ _ = mk-ACop'

match-ACop : (l12-v : Level) -> (A-v : Set l12-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : ACop l12-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-ACop-v : (aop-v : Aop l12-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l12-v A-v (op l12-v A-v X-nil-v aop-v a-v b-v) (op l12-v A-v X-nil-v aop-v b-v a-v)) -> return-type-v (mk-ACop l12-v A-v X-nil-v aop-v X-comm-v)) -> (z-v : ACop l12-v A-v X-nil-v) -> return-type-v z-v
match-ACop _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2


ACop-ind : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-889-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-889-v : ACop l15-v A-v X-nil-v) -> Q--v x-889-v
ACop-ind  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type5 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type5  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type4 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type4  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type3 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type3  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type2 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type2  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type1 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type1  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

ACop-rect-Type0 : (l15-v l4-v : Level) -> (A-v : Set l15-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-891-v : ACop l15-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-ACop-v : (aop-v : Aop l15-v A-v X-nil-v) -> (X-comm-v : (a-v : A-v) -> (b-v : A-v) -> eq l15-v A-v (op l15-v A-v X-nil-v aop-v a-v b-v) (op l15-v A-v X-nil-v aop-v b-v a-v)) -> Q--v (mk-ACop l15-v A-v X-nil-v aop-v X-comm-v)) -> (x-891-v : ACop l15-v A-v X-nil-v) -> Q--v x-891-v
ACop-rect-Type0  _ _ _ _ _ casenm (mk-ACop' x1 x2) = casenm x1 x2

aop : (l3-v : Level) -> (A-v : Set l3-v) -> (nil-v : A-v) -> (X-xxx-v : ACop l3-v A-v nil-v) -> Aop l3-v A-v nil-v
aop l4-v A-v nil-v X-xxx-v = match-ACop l4-v A-v nil-v l4-v (λ (xxx0-v : ACop l4-v A-v nil-v) -> Aop l4-v A-v nil-v) (λ (yyy-v : Aop l4-v A-v nil-v) -> λ (X---v : (a-v : A-v) -> (b-v : A-v) -> eq l4-v A-v (op l4-v A-v nil-v yyy-v a-v b-v) (op l4-v A-v nil-v yyy-v b-v a-v)) -> yyy-v) X-xxx-v

comm : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : ACop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> eq l5-v A-v (op l5-v A-v nil-v (aop l5-v A-v nil-v xxx-v) a-v b-v) (op l5-v A-v nil-v (aop l5-v A-v nil-v xxx-v) b-v a-v)
comm l14-v A-v nil-v xxx-v = match-ACop l14-v A-v nil-v l14-v (λ (xxx0-v : ACop l14-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> eq l14-v A-v (op l14-v A-v nil-v (aop l14-v A-v nil-v xxx0-v) a-v b-v) (op l14-v A-v nil-v (aop l14-v A-v nil-v xxx0-v) b-v a-v)) (λ (X---v : Aop l14-v A-v nil-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> eq l14-v A-v (op l14-v A-v nil-v X---v a-v b-v) (op l14-v A-v nil-v X---v b-v a-v)) -> yyy-v) xxx-v


ACop-inv-ind : (l33 l27 : Level) -> (x1 : Set l33) -> (x2 : x1) -> (Hterm : ACop l33 x1 x2) -> (P : (X-z1566 : ACop l33 x1 x2) -> Set l27) -> (X-H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1567 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> P Hterm
ACop-inv-ind = λ (l33 l27 : Level) -> λ (x1 : Set l33) -> λ (x2 : x1) -> λ (Hterm : ACop l33 x1 x2) -> λ (P : (X-z1566 : ACop l33 x1 x2) -> Set l27) -> λ (H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1567 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> ACop-ind l33 (l33 ⊔ l27) x1 x2 (λ (X-x-889 : ACop l33 x1 x2) -> (X-z1567 : eq l33 (ACop l33 x1 x2) Hterm X-x-889) -> P X-x-889) H1 Hterm (refl l33 (ACop l33 x1 x2) Hterm)

ACop-inv-rect-Type4 : (l33 l27 : Level) -> (x1 : Set l33) -> (x2 : x1) -> (Hterm : ACop l33 x1 x2) -> (P : (X-z1572 : ACop l33 x1 x2) -> Set l27) -> (X-H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1573 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> P Hterm
ACop-inv-rect-Type4 = λ (l33 l27 : Level) -> λ (x1 : Set l33) -> λ (x2 : x1) -> λ (Hterm : ACop l33 x1 x2) -> λ (P : (X-z1572 : ACop l33 x1 x2) -> Set l27) -> λ (H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1573 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> ACop-rect-Type4 l33 (l33 ⊔ l27) x1 x2 (λ (X-x-891 : ACop l33 x1 x2) -> (X-z1573 : eq l33 (ACop l33 x1 x2) Hterm X-x-891) -> P X-x-891) H1 Hterm (refl l33 (ACop l33 x1 x2) Hterm)

ACop-inv-rect-Type3 : (l33 l27 : Level) -> (x1 : Set l33) -> (x2 : x1) -> (Hterm : ACop l33 x1 x2) -> (P : (X-z1578 : ACop l33 x1 x2) -> Set l27) -> (X-H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1579 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> P Hterm
ACop-inv-rect-Type3 = λ (l33 l27 : Level) -> λ (x1 : Set l33) -> λ (x2 : x1) -> λ (Hterm : ACop l33 x1 x2) -> λ (P : (X-z1578 : ACop l33 x1 x2) -> Set l27) -> λ (H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1579 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> ACop-rect-Type3 l33 (l33 ⊔ l27) x1 x2 (λ (X-x-895 : ACop l33 x1 x2) -> (X-z1579 : eq l33 (ACop l33 x1 x2) Hterm X-x-895) -> P X-x-895) H1 Hterm (refl l33 (ACop l33 x1 x2) Hterm)

ACop-inv-rect-Type2 : (l33 l27 : Level) -> (x1 : Set l33) -> (x2 : x1) -> (Hterm : ACop l33 x1 x2) -> (P : (X-z1584 : ACop l33 x1 x2) -> Set l27) -> (X-H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1585 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> P Hterm
ACop-inv-rect-Type2 = λ (l33 l27 : Level) -> λ (x1 : Set l33) -> λ (x2 : x1) -> λ (Hterm : ACop l33 x1 x2) -> λ (P : (X-z1584 : ACop l33 x1 x2) -> Set l27) -> λ (H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1585 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> ACop-rect-Type2 l33 (l33 ⊔ l27) x1 x2 (λ (X-x-897 : ACop l33 x1 x2) -> (X-z1585 : eq l33 (ACop l33 x1 x2) Hterm X-x-897) -> P X-x-897) H1 Hterm (refl l33 (ACop l33 x1 x2) Hterm)

ACop-inv-rect-Type1 : (l33 l27 : Level) -> (x1 : Set l33) -> (x2 : x1) -> (Hterm : ACop l33 x1 x2) -> (P : (X-z1590 : ACop l33 x1 x2) -> Set l27) -> (X-H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1591 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> P Hterm
ACop-inv-rect-Type1 = λ (l33 l27 : Level) -> λ (x1 : Set l33) -> λ (x2 : x1) -> λ (Hterm : ACop l33 x1 x2) -> λ (P : (X-z1590 : ACop l33 x1 x2) -> Set l27) -> λ (H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1591 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> ACop-rect-Type1 l33 (l33 ⊔ l27) x1 x2 (λ (X-x-899 : ACop l33 x1 x2) -> (X-z1591 : eq l33 (ACop l33 x1 x2) Hterm X-x-899) -> P X-x-899) H1 Hterm (refl l33 (ACop l33 x1 x2) Hterm)

ACop-inv-rect-Type0 : (l33 l27 : Level) -> (x1 : Set l33) -> (x2 : x1) -> (Hterm : ACop l33 x1 x2) -> (P : (X-z1596 : ACop l33 x1 x2) -> Set l27) -> (X-H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1597 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> P Hterm
ACop-inv-rect-Type0 = λ (l33 l27 : Level) -> λ (x1 : Set l33) -> λ (x2 : x1) -> λ (Hterm : ACop l33 x1 x2) -> λ (P : (X-z1596 : ACop l33 x1 x2) -> Set l27) -> λ (H1 : (aop-v : Aop l33 x1 x2) -> (X-comm : (a : x1) -> (b : x1) -> eq l33 x1 (op l33 x1 x2 aop-v a b) (op l33 x1 x2 aop-v b a)) -> (X-z1597 : eq l33 (ACop l33 x1 x2) Hterm (mk-ACop l33 x1 x2 aop-v X-comm)) -> P (mk-ACop l33 x1 x2 aop-v X-comm)) -> ACop-rect-Type0 l33 (l33 ⊔ l27) x1 x2 (λ (X-x-901 : ACop l33 x1 x2) -> (X-z1597 : eq l33 (ACop l33 x1 x2) Hterm X-x-901) -> P X-x-901) H1 Hterm (refl l33 (ACop l33 x1 x2) Hterm)

ACop-discr : (l370 l481 : Level) -> (a1 : Set l370) -> (a2 : a1) -> (x : ACop l370 a1 a2) -> (y : ACop l370 a1 a2) -> (X-e : eq l370 (ACop l370 a1 a2) x y) -> match-ACop l370 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481)) ⊔ (lsuc l370))) (λ (X-- : ACop l370 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370))) (λ (t0 : Aop l370 a1 a2) -> λ (t1 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 t0 a b) (op l370 a1 a2 t0 b a)) -> match-ACop l370 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481)) ⊔ (lsuc l370))) (λ (X-- : ACop l370 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370))) (λ (u0 : Aop l370 a1 a2) -> λ (u1 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 u0 a b) (op l370 a1 a2 u0 b a)) -> (P : Set l481) -> (X-z57 : (e0 : eq l370 (Aop l370 a1 a2) (R0 l370 (Aop l370 a1 a2) t0) u0) -> (X-e1 : eq l370 ((a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 u0 a b) (op l370 a1 a2 u0 b a)) (R1 l370 l370 (Aop l370 a1 a2) t0 (λ (x-19 : Aop l370 a1 a2) -> λ (X-x-20 : eq l370 (Aop l370 a1 a2) t0 x-19) -> (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 x-19 a b) (op l370 a1 a2 x-19 b a)) t1 u0 e0) u1) -> P) -> P) y) x
ACop-discr = λ (l370 l481 : Level) -> λ (a1 : Set l370) -> λ (a2 : a1) -> λ (x : ACop l370 a1 a2) -> λ (y : ACop l370 a1 a2) -> λ (Deq : eq l370 (ACop l370 a1 a2) x y) -> eq-rect-Type2 l370 ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370)) (ACop l370 a1 a2) x (λ (x-13 : ACop l370 a1 a2) -> λ (X-x-14 : eq l370 (ACop l370 a1 a2) x x-13) -> match-ACop l370 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481)) ⊔ (lsuc l370))) (λ (X-- : ACop l370 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370))) (λ (t0 : Aop l370 a1 a2) -> λ (t1 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 t0 a b) (op l370 a1 a2 t0 b a)) -> match-ACop l370 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481)) ⊔ (lsuc l370))) (λ (X-- : ACop l370 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370))) (λ (u0 : Aop l370 a1 a2) -> λ (u1 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 u0 a b) (op l370 a1 a2 u0 b a)) -> (P : Set l481) -> (X-z57 : (e0 : eq l370 (Aop l370 a1 a2) (R0 l370 (Aop l370 a1 a2) t0) u0) -> (X-e1 : eq l370 ((a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 u0 a b) (op l370 a1 a2 u0 b a)) (R1 l370 l370 (Aop l370 a1 a2) t0 (λ (x-19 : Aop l370 a1 a2) -> λ (X-x-20 : eq l370 (Aop l370 a1 a2) t0 x-19) -> (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 x-19 a b) (op l370 a1 a2 x-19 b a)) t1 u0 e0) u1) -> P) -> P) x-13) x) (match-ACop l370 a1 a2 ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370)) (λ (X-- : ACop l370 a1 a2) -> match-ACop l370 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481)) ⊔ (lsuc l370))) (λ (X-0 : ACop l370 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370))) (λ (t0 : Aop l370 a1 a2) -> λ (t1 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 t0 a b) (op l370 a1 a2 t0 b a)) -> match-ACop l370 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l481)) ⊔ (lsuc l370))) (λ (X-0 : ACop l370 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l481) ⊔ l370))) (λ (u0 : Aop l370 a1 a2) -> λ (u1 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 u0 a b) (op l370 a1 a2 u0 b a)) -> (P : Set l481) -> (X-z57 : (e0 : eq l370 (Aop l370 a1 a2) (R0 l370 (Aop l370 a1 a2) t0) u0) -> (X-e1 : eq l370 ((a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 u0 a b) (op l370 a1 a2 u0 b a)) (R1 l370 l370 (Aop l370 a1 a2) t0 (λ (x-19 : Aop l370 a1 a2) -> λ (X-x-20 : eq l370 (Aop l370 a1 a2) t0 x-19) -> (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 x-19 a b) (op l370 a1 a2 x-19 b a)) t1 u0 e0) u1) -> P) -> P) X--) X--) (λ (a0 : Aop l370 a1 a2) -> λ (a10 : (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 a0 a b) (op l370 a1 a2 a0 b a)) -> λ (P : Set l481) -> λ (DH : (e0 : eq l370 (Aop l370 a1 a2) (R0 l370 (Aop l370 a1 a2) a0) a0) -> (X-e1 : eq l370 ((a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 a0 a b) (op l370 a1 a2 a0 b a)) (R1 l370 l370 (Aop l370 a1 a2) a0 (λ (x-19 : Aop l370 a1 a2) -> λ (X-x-20 : eq l370 (Aop l370 a1 a2) a0 x-19) -> (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 x-19 a b) (op l370 a1 a2 x-19 b a)) a10 a0 e0) a10) -> P) -> DH (refl l370 (Aop l370 a1 a2) (R0 l370 (Aop l370 a1 a2) a0)) (refl l370 ((a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 a0 a b) (op l370 a1 a2 a0 b a)) (R1 l370 l370 (Aop l370 a1 a2) a0 (λ (x-19 : Aop l370 a1 a2) -> λ (X-x-20 : eq l370 (Aop l370 a1 a2) a0 x-19) -> (a : a1) -> (b : a1) -> eq l370 a1 (op l370 a1 a2 x-19 a b) (op l370 a1 a2 x-19 b a)) a10 a0 (refl l370 (Aop l370 a1 a2) (R0 l370 (Aop l370 a1 a2) a0))))) x) y Deq

dpi1--o--aop : (l12 l8 : Level) -> (x0 : Set l12) -> (x1 : x0) -> (x2 : (X-- : ACop l12 x0 x1) -> Set l8) -> (x3 : DPair l12 l8 (ACop l12 x0 x1) x2) -> Aop l12 x0 x1
dpi1--o--aop = λ (l12 l8 : Level) -> λ (x0 : Set l12) -> λ (x1 : x0) -> λ (x2 : (X-- : ACop l12 x0 x1) -> Set l8) -> λ (x3 : DPair l12 l8 (ACop l12 x0 x1) x2) -> aop l12 x0 x1 (dpi1 l12 l8 (ACop l12 x0 x1) x2 x3)

aop--o--op : (l5 : Level) -> (x0 : Set l5) -> (x1 : x0) -> (x2 : ACop l5 x0 x1) -> (X-x-887 : x0) -> (X-x-888 : x0) -> x0
aop--o--op = λ (l5 : Level) -> λ (x0 : Set l5) -> λ (x1 : x0) -> λ (x2 : ACop l5 x0 x1) -> op l5 x0 x1 (aop l5 x0 x1 x2)

dpi1--o--aop--o--op : (l13 l9 : Level) -> (x0 : Set l13) -> (x1 : x0) -> (x2 : (X-- : ACop l13 x0 x1) -> Set l9) -> (x3 : DPair l13 l9 (ACop l13 x0 x1) x2) -> (X-x-887 : x0) -> (X-x-888 : x0) -> x0
dpi1--o--aop--o--op = λ (l13 l9 : Level) -> λ (x0 : Set l13) -> λ (x1 : x0) -> λ (x2 : (X-- : ACop l13 x0 x1) -> Set l9) -> λ (x3 : DPair l13 l9 (ACop l13 x0 x1) x2) -> op l13 x0 x1 (aop l13 x0 x1 (dpi1 l13 l9 (ACop l13 x0 x1) x2 x3))

bigop-op : (k : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : ACop lzero B nil) -> (f : (X-- : nat) -> B) -> (g : (X-- : nat) -> B) -> eq lzero B (aop--o--op lzero B nil op-v (bigop k (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop k (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))
bigop-op = λ (k : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : ACop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (g : (X-- : nat) -> B) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero B (aop--o--op lzero B nil op-v (bigop X-x-365 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop X-x-365 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop X-x-365 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (nill lzero B nil (aop lzero B nil op-v) nil) (λ (k0 : nat) -> λ (Hind : eq lzero B (aop--o--op lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) -> match-Or lzero lzero (eq lzero bool (p k0) true) (eq lzero bool (p k0) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p k0) true) (eq lzero bool (p k0) false)) -> eq lzero B (aop--o--op lzero B nil op-v (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (λ (H : eq lzero bool (p k0) true) -> eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)))) -> eq lzero B (aop--o--op lzero B nil op-v x (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i)))) -> eq lzero B (aop--o--op lzero B nil op-v (aop--o--op lzero B nil op-v (f k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i))) x) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (aop--o--op lzero B nil op-v (f k0) (g k0)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (aop--o--op lzero B nil op-v (f k0) (g k0)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i))))) -> eq lzero B (aop--o--op lzero B nil op-v (aop--o--op lzero B nil op-v (f k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i))) (aop--o--op lzero B nil op-v (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i)))) x) (eq-ind lzero lzero B (op lzero B nil (aop lzero B nil op-v) (f k0) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil (aop lzero B nil op-v) (f k0) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))))) x-1) -> eq lzero B x-1 (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (f k0) (g k0)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) (eq-ind lzero lzero B (op lzero B nil (aop lzero B nil op-v) (f k0) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil (aop lzero B nil op-v) (f k0) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) x-1) -> eq lzero B (op lzero B nil (aop lzero B nil op-v) (f k0) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))))) x-1) (eq-f lzero lzero B B (op lzero B nil (aop lzero B nil op-v) (f k0)) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i)))) (eq-ind-r lzero lzero B (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (g k0)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (g k0)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) -> eq lzero B x (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) (eq-ind-r lzero lzero B (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)))) -> eq lzero B (op lzero B nil (aop lzero B nil op-v) x (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) (eq-ind lzero lzero B (op lzero B nil (aop lzero B nil op-v) (g k0) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil (aop lzero B nil op-v) (g k0) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) x-1) -> eq lzero B x-1 (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) (eq-f lzero lzero B B (op lzero B nil (aop lzero B nil op-v) (g k0)) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))) Hind) (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i))) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))) (assoc lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (g k0)) (comm lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (g k0))) (op lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) (assoc lzero B nil (aop lzero B nil op-v) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))))) (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (f k0) (g k0)) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i)))) (assoc lzero B nil (aop lzero B nil op-v) (f k0) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> op lzero B nil (aop lzero B nil op-v) (f i) (g i))))) (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (f k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i))) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i)))) (assoc lzero B nil (aop lzero B nil op-v) (f k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i)) (op lzero B nil (aop lzero B nil op-v) (g k0) (bigop k0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> g i))))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i))) (bigop-Strue k0 p B nil (aop--o--op lzero B nil op-v) (λ (X-- : nat) -> aop--o--op lzero B nil op-v (f X--) (g X--)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p k0) H))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i)) (bigop-Strue k0 p B nil (aop--o--op lzero B nil op-v) g (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p k0) H))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-Strue k0 p B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p k0) H))) (λ (H : eq lzero bool (p k0) false) -> eq-ind-r lzero lzero B (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i))) -> eq lzero B (aop--o--op lzero B nil op-v x (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (eq-ind-r lzero lzero B (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) -> eq lzero B (aop--o--op lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) x) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) (eq-ind-r lzero lzero B (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i)))) -> eq lzero B (aop--o--op lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) x) (rewrite-l lzero lzero B (aop--o--op lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) (λ (X-- : B) -> eq lzero B (aop--o--op lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i))) X--) (refl lzero B (aop--o--op lzero B nil op-v (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i)))) (bigop k0 (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i))) Hind) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> aop--o--op lzero B nil op-v (f i) (g i))) (bigop-Sfalse k0 p B nil (aop--o--op lzero B nil op-v) (λ (X-- : nat) -> aop--o--op lzero B nil op-v (f X--) (g X--)) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p k0) H))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> g i)) (bigop-Sfalse k0 p B nil (aop--o--op lzero B nil op-v) g (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p k0) H))) (bigop (S k0) (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i)) (bigop-Sfalse k0 p B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p k0) H))) (true-or-false (p k0))) k

bigop-diff : (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : ACop lzero B nil) -> (f : (X-- : nat) -> B) -> (i : nat) -> (n : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (p i) true) -> eq lzero B (bigop n (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop n (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))
bigop-diff = λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : ACop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (i : nat) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : lt i X-x-365) -> (X--1 : eq lzero bool (p i) true) -> eq lzero B (bigop X-x-365 (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop X-x-365 (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) (λ (ltO : lt i O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> (X-- : eq lzero bool (p i) true) -> eq lzero B (bigop O (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop O (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) (absurd lzero (le (S i) O) ltO (not-le-Sn-O i))) (λ (n0 : nat) -> λ (Hind : (X-- : lt i n0) -> (X--1 : eq lzero bool (p i) true) -> eq lzero B (bigop n0 (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) -> λ (lein : lt i (S n0)) -> λ (pi : eq lzero bool (p i) true) -> match-Or lzero lzero (lt i n0) (eq lzero nat i n0) lzero (λ (X-- : Or lzero lzero (lt i n0) (eq lzero nat i n0)) -> eq lzero B (bigop (S n0) (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop (S n0) (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) (λ (Hi : lt i n0) -> match-Or lzero lzero (eq lzero bool (p n0) true) (eq lzero bool (p n0) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p n0) true) (eq lzero bool (p n0) false)) -> eq lzero B (bigop (S n0) (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop (S n0) (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) (λ (pn : eq lzero bool (p n0) true) -> eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f n0) (bigop n0 (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f n0) (bigop n0 (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)))) -> eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop (S n0) (λ (x0 : nat) -> andb (notb (eqb i x0)) (p x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f x0)))) (eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f n0) (bigop n0 (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f n0) (bigop n0 (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)))) -> eq lzero B (aop--o--op lzero B nil op-v (f n0) (bigop n0 (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (aop--o--op lzero B nil op-v (f i) x)) (eq-ind-r lzero lzero B (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (f i) (f n0)) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (f i) (f n0)) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) -> eq lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (bigop n0 (λ (i0 : nat) -> p i0) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0))) x) (eq-ind-r lzero lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (f i)) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil (aop lzero B nil op-v) (f n0) (f i))) -> eq lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (bigop n0 (λ (i0 : nat) -> p i0) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0))) (op lzero B nil (aop lzero B nil op-v) x (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p i0) false (match-bool lzero (λ (X-0 : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) (eq-ind lzero lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (op lzero B nil (aop lzero B nil op-v) (f i) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) (λ (x-1 : B) -> λ (X-x-2 : eq lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (op lzero B nil (aop lzero B nil op-v) (f i) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) x-1) -> eq lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (bigop n0 (λ (i0 : nat) -> p i0) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0))) x-1) (eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x0 : nat) -> andb (notb (eqb i x0)) (p x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f x0)))) -> eq lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) x) (op lzero B nil (aop lzero B nil op-v) (f n0) (op lzero B nil (aop lzero B nil op-v) (f i) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-0 : bool) -> bool) (p i0) false (match-bool lzero (λ (X-0 : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0))))) (refl lzero B (op lzero B nil (aop lzero B nil op-v) (f n0) (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x))))) (bigop n0 (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (Hind Hi (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p i) pi))) (op lzero B nil (aop lzero B nil op-v) (op lzero B nil (aop lzero B nil op-v) (f n0) (f i)) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0))) (assoc lzero B nil (aop lzero B nil op-v) (f n0) (f i) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) (op lzero B nil (aop lzero B nil op-v) (f i) (f n0)) (comm lzero B nil op-v (f i) (f n0))) (op lzero B nil (aop lzero B nil op-v) (f i) (op lzero B nil (aop lzero B nil op-v) (f n0) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) (assoc lzero B nil (aop lzero B nil op-v) (f i) (f n0) (bigop n0 (λ (i0 : nat) -> match-bool lzero (λ (X-- : bool) -> bool) (p i0) false (match-bool lzero (λ (X-- : bool) -> bool) false true (eqb i i0))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i0 : nat) -> f i0)))) (bigop (S n0) (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop-Strue n0 (λ (X-- : nat) -> andb (notb (eqb i X--)) (p X--)) B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool (andb (notb (eqb i n0)) X--) true) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (andb (notb (eqb i n0)) true) (rewrite-l lzero lzero bool (p n0) (λ (X-- : bool) -> eq lzero bool (andb (notb (eqb i n0)) true) X--) (rewrite-l lzero lzero bool (p n0) (λ (X-- : bool) -> eq lzero bool (andb (notb (eqb i n0)) X--) (p n0)) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (andb (notb x) (p n0)) (p n0)) (refl lzero bool (andb (notb false) (p n0))) (eqb i n0) (not-eq-to-eqb-false i n0 (lt-to-not-eq i n0 Hi))) true pn) true pn)) (p n0) pn))) (bigop (S n0) (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop-Strue n0 p B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n0) pn))) (λ (pn : eq lzero bool (p n0) false) -> eq-ind-r lzero lzero B (bigop n0 (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n0 (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) -> eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop (S n0) (λ (x0 : nat) -> andb (notb (eqb i x0)) (p x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f x0)))) (eq-ind-r lzero lzero B (bigop n0 (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n0 (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) -> eq lzero B (bigop n0 (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (aop--o--op lzero B nil op-v (f i) x)) (eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x0 : nat) -> andb (notb (eqb i x0)) (p x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f x0)))) -> eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)))) (refl lzero B (aop--o--op lzero B nil op-v (f i) (bigop n0 (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) (bigop n0 (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (Hind Hi (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p i) pi))) (bigop (S n0) (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop-Sfalse n0 (λ (X-- : nat) -> andb (notb (eqb i X--)) (p X--)) B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool (andb (notb (eqb i n0)) X--) false) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (andb (notb (eqb i n0)) false) (rewrite-l lzero lzero bool (p n0) (λ (X-- : bool) -> eq lzero bool (andb (notb (eqb i n0)) false) X--) (rewrite-l lzero lzero bool (p n0) (λ (X-- : bool) -> eq lzero bool (andb (notb (eqb i n0)) X--) (p n0)) (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (andb (notb x) (p n0)) (p n0)) (refl lzero bool (andb (notb false) (p n0))) (eqb i n0) (not-eq-to-eqb-false i n0 (lt-to-not-eq i n0 Hi))) false pn) false pn)) (p n0) pn))) (bigop (S n0) (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop-Sfalse n0 p B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n0) pn))) (true-or-false (p n0))) (λ (Hi : eq lzero nat i n0) -> eq-ind lzero lzero nat i (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat i x-1) -> eq lzero B (bigop (S x-1) (λ (x : nat) -> p x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (aop--o--op lzero B nil op-v (f i) (bigop (S x-1) (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)))) (eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop i (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)))) -> eq lzero B x (aop--o--op lzero B nil op-v (f i) (bigop (S i) (λ (x0 : nat) -> andb (notb (eqb i x0)) (p x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f x0)))) (eq-f lzero lzero B B (aop--o--op lzero B nil op-v (f i)) (bigop i (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop (S i) (λ (x : nat) -> andb (notb (eqb i x)) (p x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f x)) (eq-ind-r lzero lzero B (bigop i (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop i (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0))) -> eq lzero B (bigop i (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) x) (same-bigop i p (λ (X-- : nat) -> andb (notb (eqb i X--)) (p X--)) B nil (aop--o--op lzero B nil op-v) f f (λ (k : nat) -> λ (ltki : lt k i) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (p k) (andb (notb x) (p k))) (refl lzero bool (p k)) (eqb i k) (not-eq-to-eqb-false i k (not-to-not lzero (eq lzero nat i k) (le (S i) i) (λ (auto : eq lzero nat i k) -> eq-coerc lzero (le (S k) i) (le (S i) i) ltki (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) i) (le (S i) i)) (refl (lsuc lzero) (Set (lzero)) (le (S i) i)) k auto)) (not-le-Sn-n i)))) (λ (i0 : nat) -> λ (auto : lt i0 i) -> λ (auto' : eq lzero bool (p i0) true) -> refl lzero B (f i0))) (bigop (S i) (λ (i0 : nat) -> andb (notb (eqb i i0)) (p i0)) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop-Sfalse i (λ (X-- : nat) -> andb (notb (eqb i X--)) (p X--)) B nil (aop--o--op lzero B nil op-v) f (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero bool (andb (notb x) (p i)) false) (refl lzero bool (andb (notb true) (p i))) (eqb i i) (eq-to-eqb-true i i (refl lzero nat i)))))) (bigop (S i) (λ (i0 : nat) -> p i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f i0)) (bigop-Strue i p B nil (aop--o--op lzero B nil op-v) f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p i) pi))) n0 Hi) (le-to-or-lt-eq i n0 (le-S-S-to-le i n0 lein))) n


data range (A-v : Set (lzero)) : Set (lzero) where
  mk-range' : (X-enum-v : (X---v : nat) -> A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> range A-v

mk-range : (A-v : Set (lzero)) -> (X-enum-v : (X---v : nat) -> A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> range A-v
mk-range _ = mk-range'

match-range : (X-A-v : Set (lzero)) -> (return-sort-v : Level) -> (return-type-v : (z-v : range X-A-v) -> Set return-sort-v) -> (case-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> return-type-v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (z-v : range X-A-v) -> return-type-v z-v
match-range _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-ind : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-915-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-915-v : range X-A-v) -> Q--v x-915-v
range-ind _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type5 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type5 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type4 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type4 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type3 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type3 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type2 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type2 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type1 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type1 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

range-rect-Type0 : (l2-v : Level) -> (X-A-v : Set (lzero)) -> (Q--v : (X-x-917-v : range X-A-v) -> Set l2-v) -> (X-H-mk-range-v : (X-enum-v : (X---v : nat) -> X-A-v) -> (X-upto-v : nat) -> (X-filter-v : (X---v : nat) -> bool) -> Q--v (mk-range X-A-v X-enum-v X-upto-v X-filter-v)) -> (x-917-v : range X-A-v) -> Q--v x-917-v
range-rect-Type0 _ _ _ casmk (mk-range' x1 x2 x3) = casmk x1 x2 x3

enum : (A-v : Set (lzero)) -> (X-xxx-v : range A-v) -> (X-x-942-v : nat) -> A-v
enum A-v X-xxx-v = match-range A-v lzero (λ (xxx0-v : range A-v) -> (X-x-942-v : nat) -> A-v) (λ (yyy-v : (X---v : nat) -> A-v) -> λ (X---v : nat) -> λ (X-0-v : (X--1-v : nat) -> bool) -> yyy-v) X-xxx-v

upto : (A-v : Set (lzero)) -> (X-xxx-v : range A-v) -> nat
upto A-v X-xxx-v = match-range A-v lzero (λ (xxx0-v : range A-v) -> nat) (λ (X---v : (X---v : nat) -> A-v) -> λ (yyy-v : nat) -> λ (X-0-v : (X--1-v : nat) -> bool) -> yyy-v) X-xxx-v


filter : (A-v : Set (lzero)) -> (X-xxx-v : range A-v) -> (X-x-941-v : nat) -> bool
filter A-v X-xxx-v = match-range A-v lzero (λ (xxx0-v : range A-v) -> (X-x-941-v : nat) -> bool) (λ (X---v : (X---v : nat) -> A-v) -> λ (X-0-v : nat) -> λ (yyy-v : (X--1-v : nat) -> bool) -> yyy-v) X-xxx-v


range-inv-ind : (l16 : Level) -> (x1 : Set (lzero)) -> (Hterm : range x1) -> (P : (X-z1632 : range x1) -> Set l16) -> (X-H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1633 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> P Hterm
range-inv-ind = λ (l16 : Level) -> λ (x1 : Set (lzero)) -> λ (Hterm : range x1) -> λ (P : (X-z1632 : range x1) -> Set l16) -> λ (H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1633 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> range-ind l16 x1 (λ (X-x-915 : range x1) -> (X-z1633 : eq lzero (range x1) Hterm X-x-915) -> P X-x-915) H1 Hterm (refl lzero (range x1) Hterm)

range-inv-rect-Type4 : (l16 : Level) -> (x1 : Set (lzero)) -> (Hterm : range x1) -> (P : (X-z1638 : range x1) -> Set l16) -> (X-H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1639 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> P Hterm
range-inv-rect-Type4 = λ (l16 : Level) -> λ (x1 : Set (lzero)) -> λ (Hterm : range x1) -> λ (P : (X-z1638 : range x1) -> Set l16) -> λ (H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1639 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> range-rect-Type4 l16 x1 (λ (X-x-917 : range x1) -> (X-z1639 : eq lzero (range x1) Hterm X-x-917) -> P X-x-917) H1 Hterm (refl lzero (range x1) Hterm)

range-inv-rect-Type3 : (l16 : Level) -> (x1 : Set (lzero)) -> (Hterm : range x1) -> (P : (X-z1644 : range x1) -> Set l16) -> (X-H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1645 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> P Hterm
range-inv-rect-Type3 = λ (l16 : Level) -> λ (x1 : Set (lzero)) -> λ (Hterm : range x1) -> λ (P : (X-z1644 : range x1) -> Set l16) -> λ (H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1645 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> range-rect-Type3 l16 x1 (λ (X-x-921 : range x1) -> (X-z1645 : eq lzero (range x1) Hterm X-x-921) -> P X-x-921) H1 Hterm (refl lzero (range x1) Hterm)

range-inv-rect-Type2 : (l16 : Level) -> (x1 : Set (lzero)) -> (Hterm : range x1) -> (P : (X-z1650 : range x1) -> Set l16) -> (X-H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1651 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> P Hterm
range-inv-rect-Type2 = λ (l16 : Level) -> λ (x1 : Set (lzero)) -> λ (Hterm : range x1) -> λ (P : (X-z1650 : range x1) -> Set l16) -> λ (H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1651 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> range-rect-Type2 l16 x1 (λ (X-x-923 : range x1) -> (X-z1651 : eq lzero (range x1) Hterm X-x-923) -> P X-x-923) H1 Hterm (refl lzero (range x1) Hterm)

range-inv-rect-Type1 : (l16 : Level) -> (x1 : Set (lzero)) -> (Hterm : range x1) -> (P : (X-z1656 : range x1) -> Set l16) -> (X-H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1657 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> P Hterm
range-inv-rect-Type1 = λ (l16 : Level) -> λ (x1 : Set (lzero)) -> λ (Hterm : range x1) -> λ (P : (X-z1656 : range x1) -> Set l16) -> λ (H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1657 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> range-rect-Type1 l16 x1 (λ (X-x-925 : range x1) -> (X-z1657 : eq lzero (range x1) Hterm X-x-925) -> P X-x-925) H1 Hterm (refl lzero (range x1) Hterm)

range-inv-rect-Type0 : (l16 : Level) -> (x1 : Set (lzero)) -> (Hterm : range x1) -> (P : (X-z1662 : range x1) -> Set l16) -> (X-H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1663 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> P Hterm
range-inv-rect-Type0 = λ (l16 : Level) -> λ (x1 : Set (lzero)) -> λ (Hterm : range x1) -> λ (P : (X-z1662 : range x1) -> Set l16) -> λ (H1 : (X-enum : (X-- : nat) -> x1) -> (X-upto : nat) -> (X-filter : (X-- : nat) -> bool) -> (X-z1663 : eq lzero (range x1) Hterm (mk-range x1 X-enum X-upto X-filter)) -> P (mk-range x1 X-enum X-upto X-filter)) -> range-rect-Type0 l16 x1 (λ (X-x-927 : range x1) -> (X-z1663 : eq lzero (range x1) Hterm X-x-927) -> P X-x-927) H1 Hterm (refl lzero (range x1) Hterm)

range-discr : (l845 : Level) -> (a1 : Set (lzero)) -> (x : range a1) -> (y : range a1) -> (X-e : eq lzero (range a1) x y) -> match-range a1 ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845))) (λ (X-- : range a1) -> Set ((lsuc lzero) ⊔ (lsuc l845))) (λ (t0 : (X-- : nat) -> a1) -> λ (t1 : nat) -> λ (t2 : (X-- : nat) -> bool) -> match-range a1 ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845))) (λ (X-- : range a1) -> Set ((lsuc lzero) ⊔ (lsuc l845))) (λ (u0 : (X-- : nat) -> a1) -> λ (u1 : nat) -> λ (u2 : (X-- : nat) -> bool) -> (P : Set l845) -> (X-z59 : (e0 : eq lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) t0) u0) -> (e1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) t0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) t0 x0) -> nat) t1 u0 e0) u1) -> (X-e2 : eq lzero ((X-- : nat) -> bool) (R2 lzero lzero lzero ((X-- : nat) -> a1) t0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) t0 x0) -> nat) t1 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) t0 x0) -> λ (x1 : nat) -> λ (p1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) t0 (λ (x00 : (X-- : nat) -> a1) -> λ (p00 : eq lzero ((X-- : nat) -> a1) t0 x00) -> nat) t1 x0 p0) x1) -> (X-- : nat) -> bool) t2 u0 e0 u1 e1) u2) -> P) -> P) y) x
range-discr = λ (l845 : Level) -> λ (a1 : Set (lzero)) -> λ (x : range a1) -> λ (y : range a1) -> λ (Deq : eq lzero (range a1) x y) -> eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l845)) (range a1) x (λ (x-13 : range a1) -> λ (X-x-14 : eq lzero (range a1) x x-13) -> match-range a1 ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845))) (λ (X-- : range a1) -> Set ((lsuc lzero) ⊔ (lsuc l845))) (λ (t0 : (X-- : nat) -> a1) -> λ (t1 : nat) -> λ (t2 : (X-- : nat) -> bool) -> match-range a1 ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845))) (λ (X-- : range a1) -> Set ((lsuc lzero) ⊔ (lsuc l845))) (λ (u0 : (X-- : nat) -> a1) -> λ (u1 : nat) -> λ (u2 : (X-- : nat) -> bool) -> (P : Set l845) -> (X-z59 : (e0 : eq lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) t0) u0) -> (e1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) t0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) t0 x0) -> nat) t1 u0 e0) u1) -> (X-e2 : eq lzero ((X-- : nat) -> bool) (R2 lzero lzero lzero ((X-- : nat) -> a1) t0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) t0 x0) -> nat) t1 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) t0 x0) -> λ (x1 : nat) -> λ (p1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) t0 (λ (x00 : (X-- : nat) -> a1) -> λ (p00 : eq lzero ((X-- : nat) -> a1) t0 x00) -> nat) t1 x0 p0) x1) -> (X-- : nat) -> bool) t2 u0 e0 u1 e1) u2) -> P) -> P) x-13) x) (match-range a1 ((lsuc lzero) ⊔ (lsuc l845)) (λ (X-- : range a1) -> match-range a1 ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845))) (λ (X-0 : range a1) -> Set ((lsuc lzero) ⊔ (lsuc l845))) (λ (t0 : (X--1 : nat) -> a1) -> λ (t1 : nat) -> λ (t2 : (X--1 : nat) -> bool) -> match-range a1 ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l845))) (λ (X-0 : range a1) -> Set ((lsuc lzero) ⊔ (lsuc l845))) (λ (u0 : (X--1 : nat) -> a1) -> λ (u1 : nat) -> λ (u2 : (X--1 : nat) -> bool) -> (P : Set l845) -> (X-z59 : (e0 : eq lzero ((X--1 : nat) -> a1) (R0 lzero ((X--1 : nat) -> a1) t0) u0) -> (e1 : eq lzero nat (R1 lzero lzero ((X--1 : nat) -> a1) t0 (λ (x0 : (X--1 : nat) -> a1) -> λ (p0 : eq lzero ((X--1 : nat) -> a1) t0 x0) -> nat) t1 u0 e0) u1) -> (X-e2 : eq lzero ((X--1 : nat) -> bool) (R2 lzero lzero lzero ((X--1 : nat) -> a1) t0 (λ (x0 : (X--1 : nat) -> a1) -> λ (p0 : eq lzero ((X--1 : nat) -> a1) t0 x0) -> nat) t1 (λ (x0 : (X--1 : nat) -> a1) -> λ (p0 : eq lzero ((X--1 : nat) -> a1) t0 x0) -> λ (x1 : nat) -> λ (p1 : eq lzero nat (R1 lzero lzero ((X--1 : nat) -> a1) t0 (λ (x00 : (X--1 : nat) -> a1) -> λ (p00 : eq lzero ((X--1 : nat) -> a1) t0 x00) -> nat) t1 x0 p0) x1) -> (X--1 : nat) -> bool) t2 u0 e0 u1 e1) u2) -> P) -> P) X--) X--) (λ (a0 : (X-- : nat) -> a1) -> λ (a10 : nat) -> λ (a2 : (X-- : nat) -> bool) -> λ (P : Set l845) -> λ (DH : (e0 : eq lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) a0) a0) -> (e1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) a0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> nat) a10 a0 e0) a10) -> (X-e2 : eq lzero ((X-- : nat) -> bool) (R2 lzero lzero lzero ((X-- : nat) -> a1) a0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> nat) a10 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> λ (x1 : nat) -> λ (p1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) a0 (λ (x00 : (X-- : nat) -> a1) -> λ (p00 : eq lzero ((X-- : nat) -> a1) a0 x00) -> nat) a10 x0 p0) x1) -> (X-- : nat) -> bool) a2 a0 e0 a10 e1) a2) -> P) -> DH (refl lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) a0)) (refl lzero nat (R1 lzero lzero ((X-- : nat) -> a1) a0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> nat) a10 a0 (refl lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) a0)))) (refl lzero ((X-- : nat) -> bool) (R2 lzero lzero lzero ((X-- : nat) -> a1) a0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> nat) a10 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> λ (x1 : nat) -> λ (p1 : eq lzero nat (R1 lzero lzero ((X-- : nat) -> a1) a0 (λ (x00 : (X-- : nat) -> a1) -> λ (p00 : eq lzero ((X-- : nat) -> a1) a0 x00) -> nat) a10 x0 p0) x1) -> (X-- : nat) -> bool) a2 a0 (refl lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) a0)) a10 (refl lzero nat (R1 lzero lzero ((X-- : nat) -> a1) a0 (λ (x0 : (X-- : nat) -> a1) -> λ (p0 : eq lzero ((X-- : nat) -> a1) a0 x0) -> nat) a10 a0 (refl lzero ((X-- : nat) -> a1) (R0 lzero ((X-- : nat) -> a1) a0))))))) x) y Deq

sub-hk : (X-- : (X-- : nat) -> nat) -> (X--1 : (X--1 : nat) -> nat) -> (A : Set (lzero)) -> relation lzero lzero (range A)
sub-hk = λ (h : (X-- : nat) -> nat) -> λ (k : (X-- : nat) -> nat) -> λ (A : Set (lzero)) -> λ (I-v : range A) -> λ (J : range A) -> (i : nat) -> (X-- : lt i (upto A I-v)) -> (X--1 : eq lzero bool (filter A I-v i) true) -> And lzero lzero (And lzero lzero (lt (h i) (upto A J)) (eq lzero bool (filter A J (h i)) true)) (eq lzero nat (k (h i)) i)

iso : (A : Set (lzero)) -> relation lzero lzero (range A)
iso = λ (A : Set (lzero)) -> λ (I-v : range A) -> λ (J : range A) -> ex lzero lzero ((X-- : nat) -> nat) (λ (h : (X-- : nat) -> nat) -> ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i (upto A I-v)) -> (X--1 : eq lzero bool (filter A I-v i) true) -> eq lzero A (enum A I-v i) (enum A J (h i))) (sub-hk h k A I-v J)) (sub-hk k h A J I-v)))

sub-hkO : (h : (X-- : nat) -> nat) -> (k : (X-- : nat) -> nat) -> (A : Set (lzero)) -> (I-v : range A) -> (J : range A) -> (X-- : eq lzero nat (upto A I-v) O) -> sub-hk h k A I-v J
sub-hkO = λ (h : (X-- : nat) -> nat) -> λ (k : (X-- : nat) -> nat) -> λ (A : Set (lzero)) -> λ (I-v : range A) -> λ (J : range A) -> λ (up0 : eq lzero nat (upto A I-v) O) -> λ (i : nat) -> λ (lti : lt i (upto A I-v)) -> eq-ind-r lzero lzero nat O (λ (x : nat) -> λ (X-- : eq lzero nat x O) -> (X--1 : eq lzero bool (filter A I-v i) true) -> And lzero lzero (And lzero lzero (lt (h i) (upto A J)) (eq lzero bool (filter A J (h i)) true)) (eq lzero nat (k (h i)) i)) (False-ind lzero lzero (λ (X-x-66 : False lzero) -> (X-- : eq lzero bool (filter A I-v i) true) -> And lzero lzero (And lzero lzero (lt (h i) (upto A J)) (eq lzero bool (filter A J (h i)) true)) (eq lzero nat (k (h i)) i)) (absurd lzero (le (S i) O) (eq-coerc lzero (le (S i) (upto A I-v)) (le (S i) O) lti (rewrite-r lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S i) X--) (le (S i) O)) (refl (lsuc lzero) (Set (lzero)) (le (S i) O)) (upto A I-v) up0)) (not-le-Sn-O i))) (upto A I-v) up0

sub0-to-false : (h : (X-- : nat) -> nat) -> (k : (X-- : nat) -> nat) -> (A : Set (lzero)) -> (I-v : range A) -> (J : range A) -> (X-- : eq lzero nat (upto A I-v) O) -> (X--1 : sub-hk h k A J I-v) -> (i : nat) -> (X--2 : lt i (upto A J)) -> eq lzero bool (filter A J i) false
sub0-to-false = λ (h : (X-- : nat) -> nat) -> λ (k : (X-- : nat) -> nat) -> λ (A : Set (lzero)) -> λ (I-v : range A) -> λ (J : range A) -> λ (up0 : eq lzero nat (upto A I-v) O) -> λ (sub : sub-hk h k A J I-v) -> λ (i : nat) -> λ (lti : lt i (upto A J)) -> match-Or lzero lzero (eq lzero bool (filter A J i) true) (eq lzero bool (filter A J i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (filter A J i) true) (eq lzero bool (filter A J i) false)) -> eq lzero bool (filter A J i) false) (λ (ptrue : eq lzero bool (filter A J i) true) -> match-And lzero lzero (And lzero lzero (lt (h i) (upto A I-v)) (eq lzero bool (filter A I-v (h i)) true)) (eq lzero nat (k (h i)) i) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (h i) (upto A I-v)) (eq lzero bool (filter A I-v (h i)) true)) (eq lzero nat (k (h i)) i)) -> eq lzero bool (filter A J i) false) (λ (X-clearme : And lzero lzero (lt (h i) (upto A I-v)) (eq lzero bool (filter A I-v (h i)) true)) -> match-And lzero lzero (lt (h i) (upto A I-v)) (eq lzero bool (filter A I-v (h i)) true) lzero (λ (X-- : And lzero lzero (lt (h i) (upto A I-v)) (eq lzero bool (filter A I-v (h i)) true)) -> (X--1 : eq lzero nat (k (h i)) i) -> eq lzero bool (filter A J i) false) (λ (hi : lt (h i) (upto A I-v)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> (X-- : eq lzero bool (filter A I-v (h i)) true) -> (X--1 : eq lzero nat (k (h i)) i) -> eq lzero bool (filter A J i) false) (absurd lzero (le (S (h i)) O) (eq-coerc lzero (le (S (h i)) (upto A I-v)) (le (S (h i)) O) hi (rewrite-r lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (h i)) X--) (le (S (h i)) O)) (refl (lsuc lzero) (Set (lzero)) (le (S (h i)) O)) (upto A I-v) up0)) (not-le-Sn-O (h i)))) X-clearme) (sub i lti ptrue)) (λ (auto : eq lzero bool (filter A J i) false) -> rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (filter A J i) auto) (true-or-false (filter A J i))

sub-lt : (A : Set (lzero)) -> (e : (X-- : nat) -> A) -> (p : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : le n m) -> sub-hk (λ (x : nat) -> x) (λ (x : nat) -> x) A (mk-range A e n p) (mk-range A e m p)
sub-lt = λ (A : Set (lzero)) -> λ (e : (X-- : nat) -> A) -> λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (lenm : le n m) -> λ (i : nat) -> λ (lti : lt i n) -> λ (fi : eq lzero bool (f i) true) -> conj lzero lzero (And lzero lzero (lt i m) (eq lzero bool (f i) true)) (eq lzero nat i i) (conj lzero lzero (lt i m) (eq lzero bool (f i) true) (lt-to-le-to-lt i n m lti lenm) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f i) fi)) (refl lzero nat i)

transitive-sub : (h1 : (X-- : nat) -> nat) -> (k1 : (X-- : nat) -> nat) -> (h2 : (X-- : nat) -> nat) -> (k2 : (X-- : nat) -> nat) -> (A : Set (lzero)) -> (I-v : range A) -> (J : range A) -> (K : range A) -> (X-- : sub-hk h1 k1 A I-v J) -> (X--1 : sub-hk h2 k2 A J K) -> sub-hk (λ (x : nat) -> h2 (h1 x)) (λ (x : nat) -> k1 (k2 x)) A I-v K
transitive-sub = λ (h1 : (X-- : nat) -> nat) -> λ (k1 : (X-- : nat) -> nat) -> λ (h2 : (X-- : nat) -> nat) -> λ (k2 : (X-- : nat) -> nat) -> λ (A : Set (lzero)) -> λ (I-v : range A) -> λ (J : range A) -> λ (K : range A) -> λ (sub1 : sub-hk h1 k1 A I-v J) -> λ (sub2 : sub-hk h2 k2 A J K) -> λ (i : nat) -> λ (lti : lt i (upto A I-v)) -> λ (fi : eq lzero bool (filter A I-v i) true) -> match-And lzero lzero (And lzero lzero (lt (h1 i) (upto A J)) (eq lzero bool (filter A J (h1 i)) true)) (eq lzero nat (k1 (h1 i)) i) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (h1 i) (upto A J)) (eq lzero bool (filter A J (h1 i)) true)) (eq lzero nat (k1 (h1 i)) i)) -> And lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k1 (k2 (h2 (h1 i)))) i)) (λ (X-clearme : And lzero lzero (lt (h1 i) (upto A J)) (eq lzero bool (filter A J (h1 i)) true)) -> match-And lzero lzero (lt (h1 i) (upto A J)) (eq lzero bool (filter A J (h1 i)) true) lzero (λ (X-- : And lzero lzero (lt (h1 i) (upto A J)) (eq lzero bool (filter A J (h1 i)) true)) -> (X--1 : eq lzero nat (k1 (h1 i)) i) -> And lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k1 (k2 (h2 (h1 i)))) i)) (λ (lth1i : lt (h1 i) (upto A J)) -> λ (fh1i : eq lzero bool (filter A J (h1 i)) true) -> λ (ei : eq lzero nat (k1 (h1 i)) i) -> match-And lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k2 (h2 (h1 i))) (h1 i)) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k2 (h2 (h1 i))) (h1 i))) -> And lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k1 (k2 (h2 (h1 i)))) i)) (λ (X-clearme0 : And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) -> match-And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true) lzero (λ (X-- : And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) -> (X--1 : eq lzero nat (k2 (h2 (h1 i))) (h1 i)) -> And lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k1 (k2 (h2 (h1 i)))) i)) (λ (H1 : lt (h2 (h1 i)) (upto A K)) -> λ (H2 : eq lzero bool (filter A K (h2 (h1 i))) true) -> λ (H3 : eq lzero nat (k2 (h2 (h1 i))) (h1 i)) -> conj lzero lzero (And lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true)) (eq lzero nat (k1 (k2 (h2 (h1 i)))) i) (conj lzero lzero (lt (h2 (h1 i)) (upto A K)) (eq lzero bool (filter A K (h2 (h1 i))) true) H1 (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (filter A K (h2 (h1 i))) H2)) (rewrite-r lzero lzero nat (h1 i) (λ (X-- : nat) -> eq lzero nat (k1 X--) i) (rewrite-r lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) (k1 (h1 i)) ei) (k2 (h2 (h1 i))) H3)) X-clearme0) (sub2 (h1 i) lth1i fh1i)) X-clearme) (sub1 i lti fi)

let-clause-10471 : (n1 : nat) -> (n2 : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : ACop lzero B nil) -> (f1 : (X-- : nat) -> B) -> (f2 : (X-- : nat) -> B) -> (X-clearme : iso B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2)) -> (h : (X-- : nat) -> nat) -> (X-clearme0 : ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)))) -> (k : (X-- : nat) -> nat) -> (X-clearme1 : And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1))) -> (X-clearme2 : And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) -> (same : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) -> (i : nat) -> (m : nat) -> (Hind : (f : (X-- : nat) -> bool) -> (X-- : le O n1) -> (X--1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 m f)) -> (X--2 : sub-hk k h B (mk-range B f2 m f) (mk-range B f1 O p1)) -> eq lzero B (bigop O (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop m (λ (i0 : nat) -> f i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) -> (p20 : (X-- : nat) -> bool) -> (X-- : le O n1) -> (sub1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 (S m) p20)) -> (sub2 : sub-hk k h B (mk-range B f2 (S m) p20) (mk-range B f1 O p1)) -> (x2571 : nat) -> (x2572 : nat) -> eq lzero nat x2571 (plus (times x2572 (div x2571 x2572)) (mod x2571 x2572))
let-clause-10471 = λ (n1 : nat) -> λ (n2 : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : ACop lzero B nil) -> λ (f1 : (X-- : nat) -> B) -> λ (f2 : (X-- : nat) -> B) -> λ (X-clearme : iso B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2)) -> λ (h : (X-- : nat) -> nat) -> λ (X-clearme0 : ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)))) -> λ (k : (X-- : nat) -> nat) -> λ (X-clearme1 : And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1))) -> λ (X-clearme2 : And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) -> λ (same : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) -> λ (i : nat) -> λ (m : nat) -> λ (Hind : (f : (X-- : nat) -> bool) -> (X-- : le O n1) -> (X--1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 m f)) -> (X--2 : sub-hk k h B (mk-range B f2 m f) (mk-range B f1 O p1)) -> eq lzero B (bigop O (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop m (λ (i0 : nat) -> f i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) -> λ (p20 : (X-- : nat) -> bool) -> λ (X-- : le O n1) -> λ (sub1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 (S m) p20)) -> λ (sub2 : sub-hk k h B (mk-range B f2 (S m) p20) (mk-range B f1 O p1)) -> λ (x2571 : nat) -> λ (x2572 : nat) -> rewrite-l lzero lzero nat (times (div x2571 x2572) x2572) (λ (X--1 : nat) -> eq lzero nat x2571 (plus X--1 (mod x2571 x2572))) (div-mod x2571 x2572) (times x2572 (div x2571 x2572)) (commutative-times (div x2571 x2572) x2572)

bigop-iso : (n1 : nat) -> (n2 : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : ACop lzero B nil) -> (f1 : (X-- : nat) -> B) -> (f2 : (X-- : nat) -> B) -> (X-- : iso B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2)) -> eq lzero B (bigop n1 (λ (i : nat) -> p1 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f1 i)) (bigop n2 (λ (i : nat) -> p2 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f2 i))
bigop-iso = λ (n1 : nat) -> λ (n2 : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : ACop lzero B nil) -> λ (f1 : (X-- : nat) -> B) -> λ (f2 : (X-- : nat) -> B) -> λ (X-clearme : iso B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2)) -> match-ex lzero lzero ((X-- : nat) -> nat) (λ (h : (X-- : nat) -> nat) -> ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i (upto B (mk-range B f1 n1 p1))) -> (X--1 : eq lzero bool (filter B (mk-range B f1 n1 p1) i) true) -> eq lzero B (enum B (mk-range B f1 n1 p1) i) (enum B (mk-range B f2 n2 p2) (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)))) lzero (λ (X-- : ex lzero lzero ((X-- : nat) -> nat) (λ (h : (X-- : nat) -> nat) -> ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i (upto B (mk-range B f1 n1 p1))) -> (X--1 : eq lzero bool (filter B (mk-range B f1 n1 p1) i) true) -> eq lzero B (enum B (mk-range B f1 n1 p1) i) (enum B (mk-range B f2 n2 p2) (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1))))) -> eq lzero B (bigop n1 (λ (i : nat) -> p1 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f1 i)) (bigop n2 (λ (i : nat) -> p2 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f2 i))) (λ (h : (X-- : nat) -> nat) -> λ (X-clearme0 : ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)))) -> match-ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1))) lzero (λ (X-- : ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)))) -> eq lzero B (bigop n1 (λ (i : nat) -> p1 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f1 i)) (bigop n2 (λ (i : nat) -> p2 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f2 i))) (λ (k : (X-- : nat) -> nat) -> λ (X-clearme1 : And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1))) -> match-And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)) lzero (λ (X-- : And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) (sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1))) -> eq lzero B (bigop n1 (λ (i : nat) -> p1 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f1 i)) (bigop n2 (λ (i : nat) -> p2 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f2 i))) (λ (X-clearme2 : And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) -> match-And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2)) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) (sub-hk h k B (mk-range B f1 n1 p1) (mk-range B f2 n2 p2))) -> (X--1 : sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 n1 p1)) -> eq lzero B (bigop n1 (λ (i : nat) -> p1 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f1 i)) (bigop n2 (λ (i : nat) -> p2 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f2 i))) (λ (same : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero B (f1 i) (f2 (h i))) -> le-gen lzero (λ (X-- : nat) -> (X--1 : sub-hk h k B (mk-range B f1 X-- p1) (mk-range B f2 n2 p2)) -> (X--2 : sub-hk k h B (mk-range B f2 n2 p2) (mk-range B f1 X-- p1)) -> eq lzero B (bigop X-- (λ (i : nat) -> p1 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f1 i)) (bigop n2 (λ (i : nat) -> p2 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f2 i))) n1 (λ (i : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (f : (X-- : nat) -> bool) -> (X-- : le X-x-365 n1) -> (X--1 : sub-hk h k B (mk-range B f1 X-x-365 p1) (mk-range B f2 n2 f)) -> (X--2 : sub-hk k h B (mk-range B f2 n2 f) (mk-range B f1 X-x-365 p1)) -> eq lzero B (bigop X-x-365 (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop n2 (λ (i0 : nat) -> f i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (nat-ind lzero (λ (X-x-365 : nat) -> (f : (X-- : nat) -> bool) -> (X-- : le O n1) -> (X--1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 X-x-365 f)) -> (X--2 : sub-hk k h B (mk-range B f2 X-x-365 f) (mk-range B f1 O p1)) -> eq lzero B (bigop O (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop X-x-365 (λ (i0 : nat) -> f i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (λ (f : (X-- : nat) -> bool) -> λ (auto : le O n1) -> λ (auto' : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 O f)) -> λ (auto'' : sub-hk k h B (mk-range B f2 O f) (mk-range B f1 O p1)) -> refl lzero B (bigop O (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) (λ (m : nat) -> λ (Hind : (f : (X-- : nat) -> bool) -> (X-- : le O n1) -> (X--1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 m f)) -> (X--2 : sub-hk k h B (mk-range B f2 m f) (mk-range B f1 O p1)) -> eq lzero B (bigop O (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop m (λ (i0 : nat) -> f i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) -> λ (p20 : (X-- : nat) -> bool) -> λ (X-- : le O n1) -> λ (sub1 : sub-hk h k B (mk-range B f1 O p1) (mk-range B f2 (S m) p20)) -> λ (sub2 : sub-hk k h B (mk-range B f2 (S m) p20) (mk-range B f1 O p1)) -> eq-ind-r lzero lzero B (bigop m (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0)) (λ (x : B) -> λ (X-0 : eq lzero B x (bigop m (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) -> eq lzero B (bigop O (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) x) (Hind p20 (le-O-n n1) (sub-hkO h k B (mk-range B f1 O p1) (mk-range B f2 m p20) (refl lzero nat (upto B (mk-range B f1 O p1)))) (transitive-sub (λ (x : nat) -> x) (λ (x : nat) -> x) k h B (mk-range B f2 m p20) (mk-range B f2 (S m) p20) (mk-range B f1 O p1) (sub-lt B f2 p20 m (S m) (le-n-Sn m)) sub2)) (bigop (S m) (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0)) (bigop-Sfalse m p20 B nil (aop--o--op lzero B nil op-v) f2 (sub0-to-false k h B (mk-range B f1 O p1) (mk-range B f2 (S m) p20) (refl lzero nat O) sub2 m (eq-coerc lzero (lt (mod m O) (plus (plus (mod m O) (times O (div m O))) (S O))) (lt m (S m)) (lt-plus-Sn-r (mod m O) (times O (div m O)) O) (rewrite-l lzero (lsuc lzero) nat m (λ (X--1 : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod m O) (plus X--1 (S O))) (lt m (S m))) (rewrite-l lzero (lsuc lzero) nat m (λ (X--1 : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X--1 (plus m (S O))) (lt m (S m))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X--1 : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--1) (lt m (S m))) (refl (lsuc lzero) (Set (lzero)) (lt m (S m))) (plus m (S O)) (rewrite-r lzero lzero nat (plus m O) (λ (X--1 : nat) -> eq lzero nat (S X--1) (plus m (S O))) (plus-n-Sm m O) m (plus-n-O m))) (mod m O) (rewrite-r lzero lzero nat (plus O (mod m O)) (λ (X--1 : nat) -> eq lzero nat m X--1) (rewrite-l lzero lzero nat (plus (mod m O) O) (λ (X--1 : nat) -> eq lzero nat m X--1) (rewrite-r lzero lzero nat (times O (div m O)) (λ (X--1 : nat) -> eq lzero nat m (plus (mod m O) X--1)) (rewrite-l lzero lzero nat (plus (times O (div m O)) (mod m O)) (λ (X--1 : nat) -> eq lzero nat m X--1) (let-clause-10471 n1 n2 p1 p2 B nil op-v f1 f2 X-clearme h X-clearme0 k X-clearme1 X-clearme2 same i m Hind p20 X-- sub1 sub2 m O) (plus (mod m O) (times O (div m O))) (commutative-plus (times O (div m O)) (mod m O))) O (times-O-n (div m O))) (plus O (mod m O)) (commutative-plus (mod m O) O)) (mod m O) (plus-O-n (mod m O)))) (plus (mod m O) (times O (div m O))) (rewrite-l lzero lzero nat (plus (times O (div m O)) (mod m O)) (λ (X--1 : nat) -> eq lzero nat m X--1) (let-clause-10471 n1 n2 p1 p2 B nil op-v f1 f2 X-clearme h X-clearme0 k X-clearme1 X-clearme2 same i m Hind p20 X-- sub1 sub2 m O) (plus (mod m O) (times O (div m O))) (commutative-plus (times O (div m O)) (mod m O)))))))) n2) (λ (n : nat) -> λ (Hind : (f : (X-- : nat) -> bool) -> (X-- : le n n1) -> (X--1 : sub-hk h k B (mk-range B f1 n p1) (mk-range B f2 n2 f)) -> (X--2 : sub-hk k h B (mk-range B f2 n2 f) (mk-range B f1 n p1)) -> eq lzero B (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop n2 (λ (i0 : nat) -> f i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) -> λ (p20 : (X-- : nat) -> bool) -> λ (ltn : le (S n) n1) -> λ (sub1 : sub-hk h k B (mk-range B f1 (S n) p1) (mk-range B f2 n2 p20)) -> λ (sub2 : sub-hk k h B (mk-range B f2 n2 p20) (mk-range B f1 (S n) p1)) -> match-Or lzero lzero (eq lzero bool (p1 n) true) (eq lzero bool (p1 n) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p1 n) true) (eq lzero bool (p1 n) false)) -> eq lzero B (bigop (S n) (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop n2 (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (λ (p1n : eq lzero bool (p1 n) true) -> eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f1 n) (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f1 n) (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)))) -> eq lzero B x (bigop n2 (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (match-And lzero lzero (And lzero lzero (lt (h n) (upto B (mk-range B f2 n2 p20))) (eq lzero bool (filter B (mk-range B f2 n2 p20) (h n)) true)) (eq lzero nat (k (h n)) n) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (h n) (upto B (mk-range B f2 n2 p20))) (eq lzero bool (filter B (mk-range B f2 n2 p20) (h n)) true)) (eq lzero nat (k (h n)) n)) -> eq lzero B (aop--o--op lzero B nil op-v (f1 n) (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) (bigop n2 (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (λ (X-clearme3 : And lzero lzero (lt (h n) n2) (eq lzero bool (p20 (h n)) true)) -> match-And lzero lzero (lt (h n) n2) (eq lzero bool (p20 (h n)) true) lzero (λ (X-- : And lzero lzero (lt (h n) n2) (eq lzero bool (p20 (h n)) true)) -> (X--1 : eq lzero nat (k (h n)) n) -> eq lzero B (aop--o--op lzero B nil op-v (f1 n) (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) (bigop n2 (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (λ (hn : lt (h n) n2) -> λ (p2hn : eq lzero bool (p20 (h n)) true) -> λ (eqn : eq lzero nat (k (h n)) n) -> eq-ind-r lzero lzero B (aop--o--op lzero B nil op-v (f2 (h n)) (bigop n2 (λ (x : nat) -> andb (notb (eqb (h n) x)) (p20 x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f2 x))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil op-v (f2 (h n)) (bigop n2 (λ (x0 : nat) -> andb (notb (eqb (h n) x0)) (p20 x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f2 x0)))) -> eq lzero B (aop--o--op lzero B nil op-v (f1 n) (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) x) (eq-ind-r lzero lzero B (f2 (h n)) (λ (x : B) -> λ (X-- : eq lzero B x (f2 (h n))) -> eq lzero B (aop--o--op lzero B nil op-v x (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) (aop--o--op lzero B nil op-v (f2 (h n)) (bigop n2 (λ (x0 : nat) -> andb (notb (eqb (h n) x0)) (p20 x0)) B nil (aop--o--op lzero B nil op-v) (λ (x0 : nat) -> f2 x0)))) (eq-f lzero lzero B B (aop--o--op lzero B nil op-v (f2 (h n))) (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop n2 (λ (x : nat) -> andb (notb (eqb (h n) x)) (p20 x)) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f2 x)) (Hind (λ (X-- : nat) -> andb (notb (eqb (h n) X--)) (p20 X--)) (lt-to-le n n1 ltn) (λ (i0 : nat) -> λ (ltin : lt i0 n) -> λ (p1i : eq lzero bool (p1 i0) true) -> match-And lzero lzero (And lzero lzero (lt (h i0) (upto B (mk-range B f2 n2 p20))) (eq lzero bool (filter B (mk-range B f2 n2 p20) (h i0)) true)) (eq lzero nat (k (h i0)) i0) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (h i0) (upto B (mk-range B f2 n2 p20))) (eq lzero bool (filter B (mk-range B f2 n2 p20) (h i0)) true)) (eq lzero nat (k (h i0)) i0)) -> And lzero lzero (And lzero lzero (lt (h i0) n2) (eq lzero bool (andb (notb (eqb (h n) (h i0))) (p20 (h i0))) true)) (eq lzero nat (k (h i0)) i0)) (λ (X-clearme4 : And lzero lzero (lt (h i0) n2) (eq lzero bool (p20 (h i0)) true)) -> match-And lzero lzero (lt (h i0) n2) (eq lzero bool (p20 (h i0)) true) lzero (λ (X-- : And lzero lzero (lt (h i0) n2) (eq lzero bool (p20 (h i0)) true)) -> (X--1 : eq lzero nat (k (h i0)) i0) -> And lzero lzero (And lzero lzero (lt (h i0) n2) (eq lzero bool (andb (notb (eqb (h n) (h i0))) (p20 (h i0))) true)) (eq lzero nat (k (h i0)) i0)) (λ (h1i : lt (h i0) n2) -> λ (p2h1i : eq lzero bool (p20 (h i0)) true) -> λ (eqi : eq lzero nat (k (h i0)) i0) -> conj lzero lzero (And lzero lzero (lt (h i0) n2) (eq lzero bool (andb (notb (eqb (h n) (h i0))) (p20 (h i0))) true)) (eq lzero nat (k (h i0)) i0) (conj lzero lzero (lt (h i0) n2) (eq lzero bool (andb (notb (eqb (h n) (h i0))) (p20 (h i0))) true) h1i (eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (andb (notb x) (p20 (h i0))) true) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p20 (h i0)) p2h1i) (eqb (h n) (h i0)) (not-eq-to-eqb-false (h n) (h i0) (not-to-not lzero (eq lzero nat (h n) (h i0)) (eq lzero nat i0 n) (λ (auto : eq lzero nat (h n) (h i0)) -> rewrite-r lzero lzero nat n (λ (X-- : nat) -> eq lzero nat X-- n) (refl lzero nat n) i0 (rewrite-l lzero lzero nat (k (h n)) (λ (X-- : nat) -> eq lzero nat X-- n) eqn i0 (rewrite-r lzero lzero nat (h i0) (λ (X-- : nat) -> eq lzero nat (k X--) i0) eqi (h n) auto))) (lt-to-not-eq i0 n ltin))))) (rewrite-r lzero lzero nat i0 (λ (X-- : nat) -> eq lzero nat X-- i0) (refl lzero nat i0) (k (h i0)) eqi)) X-clearme4) (sub1 i0 (le-S (S i0) n ltin) p1i)) (λ (j : nat) -> λ (ltj : lt j n2) -> λ (p2j : eq lzero bool (andb (notb (eqb (h n) j)) (p20 j)) true) -> match-And lzero lzero (And lzero lzero (lt (k j) (upto B (mk-range B f1 (S n) p1))) (eq lzero bool (filter B (mk-range B f1 (S n) p1) (k j)) true)) (eq lzero nat (h (k j)) j) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (k j) (upto B (mk-range B f1 (S n) p1))) (eq lzero bool (filter B (mk-range B f1 (S n) p1) (k j)) true)) (eq lzero nat (h (k j)) j)) -> And lzero lzero (And lzero lzero (lt (k j) n) (eq lzero bool (p1 (k j)) true)) (eq lzero nat (h (k j)) j)) (λ (X-clearme4 : And lzero lzero (lt (k j) (S n)) (eq lzero bool (p1 (k j)) true)) -> match-And lzero lzero (lt (k j) (S n)) (eq lzero bool (p1 (k j)) true) lzero (λ (X-- : And lzero lzero (lt (k j) (S n)) (eq lzero bool (p1 (k j)) true)) -> (X--1 : eq lzero nat (h (k j)) j) -> And lzero lzero (And lzero lzero (lt (k j) n) (eq lzero bool (p1 (k j)) true)) (eq lzero nat (h (k j)) j)) (λ (ltkj : lt (k j) (S n)) -> λ (p1kj : eq lzero bool (p1 (k j)) true) -> λ (eqj : eq lzero nat (h (k j)) j) -> conj lzero lzero (And lzero lzero (lt (k j) n) (eq lzero bool (p1 (k j)) true)) (eq lzero nat (h (k j)) j) (conj lzero lzero (lt (k j) n) (eq lzero bool (p1 (k j)) true) (match-Or lzero lzero (lt (k j) n) (eq lzero nat (k j) n) lzero (λ (X-- : Or lzero lzero (lt (k j) n) (eq lzero nat (k j) n)) -> lt (k j) n) (λ (auto : lt (k j) n) -> auto) (λ (eqkj : eq lzero nat (k j) n) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt (k j) n) (eqb-elim lzero (h n) j (λ (X-- : bool) -> (X--1 : eq lzero bool (andb (notb X--) (p20 j)) true) -> False lzero) (λ (auto : eq lzero nat (h n) j) -> λ (auto' : eq lzero bool false true) -> absurd lzero (eq lzero bool true false) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool true X--) (refl lzero bool true) false auto') not-eq-true-false) (λ (auto : Not lzero (eq lzero nat (h n) j)) -> λ (auto' : eq lzero bool (p20 j) true) -> absurd lzero (eq lzero nat (h n) j) (rewrite-r lzero lzero nat j (λ (X-- : nat) -> eq lzero nat X-- j) (refl lzero nat j) (h n) (rewrite-l lzero lzero nat (k j) (λ (X-- : nat) -> eq lzero nat (h X--) j) eqj n eqkj)) auto) p2j)) (le-to-or-lt-eq (k j) n (le-S-S-to-le (k j) n ltkj))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p1 (k j)) p1kj)) (rewrite-r lzero lzero nat j (λ (X-- : nat) -> eq lzero nat X-- j) (refl lzero nat j) (h (k j)) eqj)) X-clearme4) (sub2 j ltj (andb-true-r (notb (eqb (h n) j)) (p20 j) p2j))))) (f1 n) (same n ltn (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p1 n) p1n))) (bigop n2 (λ (x : nat) -> p20 x) B nil (aop--o--op lzero B nil op-v) (λ (x : nat) -> f2 x)) (bigop-diff p20 B nil op-v f2 (h n) n2 hn (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p20 (h n)) p2hn))) X-clearme3) (sub1 n (le-n (S n)) p1n)) (bigop (S n) (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop-Strue n p1 B nil (aop--o--op lzero B nil op-v) f1 (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p1 n) p1n))) (λ (p1n : eq lzero bool (p1 n) false) -> eq-ind-r lzero lzero B (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0))) -> eq lzero B x (bigop n2 (λ (i0 : nat) -> p20 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f2 i0))) (Hind p20 (lt-to-le n n1 ltn) (transitive-sub (λ (x : nat) -> x) (λ (x : nat) -> x) h k B (mk-range B f1 n p1) (mk-range B f1 (S n) p1) (mk-range B f2 n2 p20) (sub-lt B f1 p1 n (S n) (le-n-Sn n)) sub1) (λ (i0 : nat) -> λ (lti : lt i0 n2) -> λ (p2i : eq lzero bool (p20 i0) true) -> match-And lzero lzero (And lzero lzero (lt (k i0) (upto B (mk-range B f1 (S n) p1))) (eq lzero bool (filter B (mk-range B f1 (S n) p1) (k i0)) true)) (eq lzero nat (h (k i0)) i0) lzero (λ (X-- : And lzero lzero (And lzero lzero (lt (k i0) (upto B (mk-range B f1 (S n) p1))) (eq lzero bool (filter B (mk-range B f1 (S n) p1) (k i0)) true)) (eq lzero nat (h (k i0)) i0)) -> And lzero lzero (And lzero lzero (lt (k i0) n) (eq lzero bool (p1 (k i0)) true)) (eq lzero nat (h (k i0)) i0)) (λ (X-clearme3 : And lzero lzero (lt (k i0) (S n)) (eq lzero bool (p1 (k i0)) true)) -> match-And lzero lzero (lt (k i0) (S n)) (eq lzero bool (p1 (k i0)) true) lzero (λ (X-- : And lzero lzero (lt (k i0) (S n)) (eq lzero bool (p1 (k i0)) true)) -> (X--1 : eq lzero nat (h (k i0)) i0) -> And lzero lzero (And lzero lzero (lt (k i0) n) (eq lzero bool (p1 (k i0)) true)) (eq lzero nat (h (k i0)) i0)) (λ (ltki : lt (k i0) (S n)) -> λ (p1ki : eq lzero bool (p1 (k i0)) true) -> λ (eqi : eq lzero nat (h (k i0)) i0) -> conj lzero lzero (And lzero lzero (lt (k i0) n) (eq lzero bool (p1 (k i0)) true)) (eq lzero nat (h (k i0)) i0) (conj lzero lzero (lt (k i0) n) (eq lzero bool (p1 (k i0)) true) (match-Or lzero lzero (lt (k i0) n) (eq lzero nat (k i0) n) lzero (λ (X-- : Or lzero lzero (lt (k i0) n) (eq lzero nat (k i0) n)) -> lt (k i0) n) (λ (auto : lt (k i0) n) -> auto) (λ (eqki : eq lzero nat (k i0) n) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt (k i0) n) (absurd lzero (eq lzero bool true false) (rewrite-l lzero lzero bool true (λ (X-- : bool) -> eq lzero bool true X--) (refl lzero bool true) false (rewrite-l lzero lzero bool (p1 n) (λ (X-- : bool) -> eq lzero bool X-- false) p1n true (rewrite-l lzero lzero nat (k i0) (λ (X-- : nat) -> eq lzero bool (p1 X--) true) p1ki n eqki))) not-eq-true-false)) (le-to-or-lt-eq (k i0) n (le-S-S-to-le (k i0) n ltki))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p1 (k i0)) p1ki)) (rewrite-r lzero lzero nat i0 (λ (X-- : nat) -> eq lzero nat X-- i0) (refl lzero nat i0) (h (k i0)) eqi)) X-clearme3) (sub2 i0 lti p2i))) (bigop (S n) (λ (i0 : nat) -> p1 i0) B nil (aop--o--op lzero B nil op-v) (λ (i0 : nat) -> f1 i0)) (bigop-Sfalse n p1 B nil (aop--o--op lzero B nil op-v) f1 (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p1 n) p1n))) (true-or-false (p1 n))) i p2)) X-clearme2) X-clearme1) X-clearme0) X-clearme

bigop-commute : (n : nat) -> (m : nat) -> (p11 : (X-- : nat) -> bool) -> (p12 : (X-- : nat) -> (X--1 : nat) -> bool) -> (p21 : (X-- : nat) -> bool) -> (p22 : (X-- : nat) -> (X--1 : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (op-v : ACop lzero B nil) -> (f : (X-- : nat) -> (X--1 : nat) -> B) -> (X-- : lt O n) -> (X--1 : lt O m) -> (X--2 : (i : nat) -> (j : nat) -> (X--2 : lt i n) -> (X--3 : lt j m) -> eq lzero bool (andb (p11 i) (p12 i j)) (andb (p21 j) (p22 i j))) -> eq lzero B (bigop n (λ (i : nat) -> p11 i) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> bigop m (λ (j : nat) -> p12 i j) B nil (aop--o--op lzero B nil op-v) (λ (j : nat) -> f i j))) (bigop m (λ (j : nat) -> p21 j) B nil (aop--o--op lzero B nil op-v) (λ (j : nat) -> bigop n (λ (i : nat) -> p22 i j) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i j)))
bigop-commute = λ (n : nat) -> λ (m : nat) -> λ (p11 : (X-- : nat) -> bool) -> λ (p12 : (X-- : nat) -> (X--1 : nat) -> bool) -> λ (p21 : (X-- : nat) -> bool) -> λ (p22 : (X-- : nat) -> (X--1 : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (op-v : ACop lzero B nil) -> λ (f : (X-- : nat) -> (X--1 : nat) -> B) -> λ (posn : lt O n) -> λ (posm : lt O m) -> λ (Heq : (i : nat) -> (j : nat) -> (X-- : lt i n) -> (X--1 : lt j m) -> eq lzero bool (andb (p11 i) (p12 i j)) (andb (p21 j) (p22 i j))) -> eq-ind-r lzero lzero B (bigop (times n m) (λ (i : nat) -> andb (p11 (div i m)) (p12 (div i m) (mod i m))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f (div i m) (mod i m))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (times n m) (λ (i : nat) -> andb (p11 (div i m)) (p12 (div i m) (mod i m))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f (div i m) (mod i m)))) -> eq lzero B x (bigop m (λ (j : nat) -> p21 j) B nil (aop--o--op lzero B nil op-v) (λ (j : nat) -> bigop n (λ (i : nat) -> p22 i j) B nil (aop--o--op lzero B nil op-v) (λ (i : nat) -> f i j)))) (eq-ind-r lzero lzero B (bigop (times m n) (λ (i : nat) -> andb (p21 (div i n)) (p22 (mod i n) (div i n))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f (mod i n) (div i n))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop (times m n) (λ (i : nat) -> andb (p21 (div i n)) (p22 (mod i n) (div i n))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f (mod i n) (div i n)))) -> eq lzero B (bigop (times n m) (λ (i : nat) -> andb (p11 (div i m)) (p12 (div i m) (mod i m))) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f (div i m) (mod i m))) x) (bigop-iso (times n m) (times m n) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m))) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n))) B nil op-v (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (ex-intro lzero lzero ((X-- : nat) -> nat) (λ (h : (X-- : nat) -> nat) -> ex lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i (upto B (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m)))))) -> (X--1 : eq lzero bool (filter B (mk-range B (λ (X-0 : nat) -> f (div X-0 m) (mod X-0 m)) (times n m) (λ (X-0 : nat) -> andb (p11 (div X-0 m)) (p12 (div X-0 m) (mod X-0 m)))) i) true) -> eq lzero B (enum B (mk-range B (λ (X-0 : nat) -> f (div X-0 m) (mod X-0 m)) (times n m) (λ (X-0 : nat) -> andb (p11 (div X-0 m)) (p12 (div X-0 m) (mod X-0 m)))) i) (enum B (mk-range B (λ (X-0 : nat) -> f (mod X-0 n) (div X-0 n)) (times m n) (λ (X-0 : nat) -> andb (p21 (div X-0 n)) (p22 (mod X-0 n) (div X-0 n)))) (h i))) (sub-hk h k B (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m)))) (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n)))))) (sub-hk k h B (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n)))) (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m))))))) (λ (i : nat) -> plus (times (mod i m) n) (div i m)) (ex-intro lzero lzero ((X-- : nat) -> nat) (λ (k : (X-- : nat) -> nat) -> And lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i (times n m)) -> (X--1 : eq lzero bool (andb (p11 (div i m)) (p12 (div i m) (mod i m))) true) -> eq lzero B (f (div i m) (mod i m)) (f (mod (plus (times (mod i m) n) (div i m)) n) (div (plus (times (mod i m) n) (div i m)) n))) (sub-hk (λ (i : nat) -> plus (times (mod i m) n) (div i m)) k B (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m)))) (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n)))))) (sub-hk k (λ (i : nat) -> plus (times (mod i m) n) (div i m)) B (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n)))) (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m)))))) (λ (i : nat) -> plus (times (mod i n) m) (div i n)) (conj lzero lzero (And lzero lzero ((i : nat) -> (X-- : lt i (times n m)) -> (X--1 : eq lzero bool (andb (p11 (div i m)) (p12 (div i m) (mod i m))) true) -> eq lzero B (f (div i m) (mod i m)) (f (mod (plus (times (mod i m) n) (div i m)) n) (div (plus (times (mod i m) n) (div i m)) n))) (sub-hk (λ (i : nat) -> plus (times (mod i m) n) (div i m)) (λ (i : nat) -> plus (times (mod i n) m) (div i n)) B (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m)))) (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n)))))) (sub-hk (λ (i : nat) -> plus (times (mod i n) m) (div i n)) (λ (i : nat) -> plus (times (mod i m) n) (div i m)) B (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n)))) (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m))))) (conj lzero lzero ((i : nat) -> (X-- : lt i (times n m)) -> (X--1 : eq lzero bool (andb (p11 (div i m)) (p12 (div i m) (mod i m))) true) -> eq lzero B (f (div i m) (mod i m)) (f (mod (plus (times (mod i m) n) (div i m)) n) (div (plus (times (mod i m) n) (div i m)) n))) (sub-hk (λ (i : nat) -> plus (times (mod i m) n) (div i m)) (λ (i : nat) -> plus (times (mod i n) m) (div i n)) B (mk-range B (λ (X-- : nat) -> f (div X-- m) (mod X-- m)) (times n m) (λ (X-- : nat) -> andb (p11 (div X-- m)) (p12 (div X-- m) (mod X-- m)))) (mk-range B (λ (X-- : nat) -> f (mod X-- n) (div X-- n)) (times m n) (λ (X-- : nat) -> andb (p21 (div X-- n)) (p22 (mod X-- n) (div X-- n))))) (λ (i : nat) -> λ (lti : lt i (times n m)) -> λ (Heq0 : eq lzero bool (andb (p11 (div i m)) (p12 (div i m) (mod i m))) true) -> eq-f2 lzero lzero lzero nat nat B f (div i m) (mod (plus (times (mod i m) n) (div i m)) n) (mod i m) (div (plus (times (mod i m) n) (div i m)) n) (sym-eq lzero nat (mod (plus (times (mod i m) n) (div i m)) n) (div i m) (mod-plus-times n (mod i m) (div i m) (lt-times-to-lt-div n i m lti))) (sym-eq lzero nat (div (plus (times (mod i m) n) (div i m)) n) (mod i m) (div-plus-times n (mod i m) (div i m) (lt-times-to-lt-div n i m lti)))) (λ (i : nat) -> λ (lti : lt i (times n m)) -> λ (Hi : eq lzero bool (andb (p11 (div i m)) (p12 (div i m) (mod i m))) true) -> conj lzero lzero (And lzero lzero (lt (plus (times (mod i m) n) (div i m)) (times m n)) (eq lzero bool (andb (p21 (div (plus (times (mod i m) n) (div i m)) n)) (p22 (mod (plus (times (mod i m) n) (div i m)) n) (div (plus (times (mod i m) n) (div i m)) n))) true)) (eq lzero nat (plus (times (mod (plus (times (mod i m) n) (div i m)) n) m) (div (plus (times (mod i m) n) (div i m)) n)) i) (conj lzero lzero (lt (plus (times (mod i m) n) (div i m)) (times m n)) (eq lzero bool (andb (p21 (div (plus (times (mod i m) n) (div i m)) n)) (p22 (mod (plus (times (mod i m) n) (div i m)) n) (div (plus (times (mod i m) n) (div i m)) n))) true) (lt-to-le-to-lt (plus (times (mod i m) n) (div i m)) (plus (times (mod i m) n) n) (times m n) (eq-ind-r lzero lzero nat (plus (times (mod i m) n) (S (div i m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (mod i m) n) (S (div i m)))) -> le x (plus (times (mod i m) n) n)) (monotonic-le-plus-r (times (mod i m) n) (S (div i m)) n (lt-times-to-lt-div n i m lti)) (S (plus (times (mod i m) n) (div i m))) (plus-n-Sm (times (mod i m) n) (div i m))) (eq-ind-r lzero lzero nat (plus n (times (mod i m) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus n (times (mod i m) n))) -> le x (times m n)) (le-times (S (mod i m)) m n n (lt-mod-m-m i m posm) (le-n n)) (plus (times (mod i m) n) n) (commutative-plus (times (mod i m) n) n))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero bool x (andb (p21 (mod i m)) (p22 (div i m) (mod i m)))) -> eq lzero bool (andb (p21 (div (plus (times (mod i m) n) (div i m)) n)) (p22 (mod (plus (times (mod i m) n) (div i m)) n) (div (plus (times (mod i m) n) (div i m)) n))) true) (eq-ind-r lzero lzero nat (div i m) (λ (x : nat) -> λ (X-- : eq lzero nat x (div i m)) -> (X--1 : eq lzero bool true (andb (p21 (mod i m)) (p22 (div i m) (mod i m)))) -> eq lzero bool (andb (p21 (div (plus (times (mod i m) n) (div i m)) n)) (p22 x (div (plus (times (mod i m) n) (div i m)) n))) true) (eq-ind-r lzero lzero nat (mod i m) (λ (x : nat) -> λ (X-- : eq lzero nat x (mod i m)) -> (X--1 : eq lzero bool true (andb (p21 (mod i m)) (p22 (div i m) (mod i m)))) -> eq lzero bool (andb (p21 x) (p22 (div i m) x)) true) (λ (auto : eq lzero bool true (andb (p21 (mod i m)) (p22 (div i m) (mod i m)))) -> rewrite-l lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (andb (p21 (mod i m)) (p22 (div i m) (mod i m))) auto) (div (plus (times (mod i m) n) (div i m)) n) (div-plus-times n (mod i m) (div i m) (lt-times-to-lt-div n i m lti))) (mod (plus (times (mod i m) n) (div i m)) n) (mod-plus-times n (mod i m) (div i m) (lt-times-to-lt-div n i m lti))) (andb (p11 (div i m)) (p12 (div i m) (mod i m))) Hi (Heq (div i m) (mod i m) (lt-times-to-lt-div n i m lti) (lt-mod-m-m i m posm)))) (eq-ind-r lzero lzero nat (div i m) (λ (x : nat) -> λ (X-- : eq lzero nat x (div i m)) -> eq lzero nat (plus (times x m) (div (plus (times (mod i m) n) (div i m)) n)) i) (eq-ind-r lzero lzero nat (mod i m) (λ (x : nat) -> λ (X-- : eq lzero nat x (mod i m)) -> eq lzero nat (plus (times (div i m) m) x) i) (rewrite-r lzero lzero nat (times m (div i m)) (λ (X-- : nat) -> eq lzero nat (plus X-- (mod i m)) i) (rewrite-r lzero lzero nat (plus (mod i m) (times m (div i m))) (λ (X-- : nat) -> eq lzero nat X-- i) (rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) (plus (mod i m) (times m (div i m))) (rewrite-l lzero lzero nat (plus (times m (div i m)) (mod i m)) (λ (X-- : nat) -> eq lzero nat i X--) (rewrite-l lzero lzero nat (times (div i m) m) (λ (X-- : nat) -> eq lzero nat i (plus X-- (mod i m))) (div-mod i m) (times m (div i m)) (commutative-times (div i m) m)) (plus (mod i m) (times m (div i m))) (commutative-plus (times m (div i m)) (mod i m)))) (plus (times m (div i m)) (mod i m)) (commutative-plus (times m (div i m)) (mod i m))) (times (div i m) m) (commutative-times (div i m) m)) (div (plus (times (mod i m) n) (div i m)) n) (div-plus-times n (mod i m) (div i m) (lt-times-to-lt-div n i m lti))) (mod (plus (times (mod i m) n) (div i m)) n) (mod-plus-times n (mod i m) (div i m) (lt-times-to-lt-div n i m lti))))) (λ (i : nat) -> λ (lti : lt i (times m n)) -> λ (Hi : eq lzero bool (andb (p21 (div i n)) (p22 (mod i n) (div i n))) true) -> conj lzero lzero (And lzero lzero (lt (plus (times (mod i n) m) (div i n)) (times n m)) (eq lzero bool (andb (p11 (div (plus (times (mod i n) m) (div i n)) m)) (p12 (div (plus (times (mod i n) m) (div i n)) m) (mod (plus (times (mod i n) m) (div i n)) m))) true)) (eq lzero nat (plus (times (mod (plus (times (mod i n) m) (div i n)) m) n) (div (plus (times (mod i n) m) (div i n)) m)) i) (conj lzero lzero (lt (plus (times (mod i n) m) (div i n)) (times n m)) (eq lzero bool (andb (p11 (div (plus (times (mod i n) m) (div i n)) m)) (p12 (div (plus (times (mod i n) m) (div i n)) m) (mod (plus (times (mod i n) m) (div i n)) m))) true) (lt-to-le-to-lt (plus (times (mod i n) m) (div i n)) (plus (times (mod i n) m) m) (times n m) (eq-ind-r lzero lzero nat (plus (times (mod i n) m) (S (div i n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (mod i n) m) (S (div i n)))) -> le x (plus (times (mod i n) m) m)) (monotonic-le-plus-r (times (mod i n) m) (S (div i n)) m (lt-times-to-lt-div m i n lti)) (S (plus (times (mod i n) m) (div i n))) (plus-n-Sm (times (mod i n) m) (div i n))) (eq-ind-r lzero lzero nat (plus m (times (mod i n) m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus m (times (mod i n) m))) -> le x (times n m)) (le-times (S (mod i n)) n m m (lt-mod-m-m i n posn) (le-n m)) (plus (times (mod i n) m) m) (commutative-plus (times (mod i n) m) m))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero bool (andb (p11 (mod i n)) (p12 (mod i n) (div i n))) x) -> eq lzero bool (andb (p11 (div (plus (times (mod i n) m) (div i n)) m)) (p12 (div (plus (times (mod i n) m) (div i n)) m) (mod (plus (times (mod i n) m) (div i n)) m))) true) (eq-ind-r lzero lzero nat (div i n) (λ (x : nat) -> λ (X-- : eq lzero nat x (div i n)) -> (X--1 : eq lzero bool (andb (p11 (mod i n)) (p12 (mod i n) (div i n))) true) -> eq lzero bool (andb (p11 (div (plus (times (mod i n) m) (div i n)) m)) (p12 (div (plus (times (mod i n) m) (div i n)) m) x)) true) (eq-ind-r lzero lzero nat (mod i n) (λ (x : nat) -> λ (X-- : eq lzero nat x (mod i n)) -> (X--1 : eq lzero bool (andb (p11 (mod i n)) (p12 (mod i n) (div i n))) true) -> eq lzero bool (andb (p11 x) (p12 x (div i n))) true) (λ (auto : eq lzero bool (andb (p11 (mod i n)) (p12 (mod i n) (div i n))) true) -> rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (andb (p11 (mod i n)) (p12 (mod i n) (div i n))) auto) (div (plus (times (mod i n) m) (div i n)) m) (div-plus-times m (mod i n) (div i n) (lt-times-to-lt-div m i n lti))) (mod (plus (times (mod i n) m) (div i n)) m) (mod-plus-times m (mod i n) (div i n) (lt-times-to-lt-div m i n lti))) (andb (p21 (div i n)) (p22 (mod i n) (div i n))) Hi (Heq (mod i n) (div i n) (lt-mod-m-m i n posn) (lt-times-to-lt-div m i n lti)))) (eq-ind-r lzero lzero nat (div i n) (λ (x : nat) -> λ (X-- : eq lzero nat x (div i n)) -> eq lzero nat (plus (times x n) (div (plus (times (mod i n) m) (div i n)) m)) i) (eq-ind-r lzero lzero nat (mod i n) (λ (x : nat) -> λ (X-- : eq lzero nat x (mod i n)) -> eq lzero nat (plus (times (div i n) n) x) i) (rewrite-r lzero lzero nat (times n (div i n)) (λ (X-- : nat) -> eq lzero nat (plus X-- (mod i n)) i) (rewrite-r lzero lzero nat (plus (mod i n) (times n (div i n))) (λ (X-- : nat) -> eq lzero nat X-- i) (rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero nat X-- i) (refl lzero nat i) (plus (mod i n) (times n (div i n))) (rewrite-l lzero lzero nat (plus (times n (div i n)) (mod i n)) (λ (X-- : nat) -> eq lzero nat i X--) (rewrite-l lzero lzero nat (times (div i n) n) (λ (X-- : nat) -> eq lzero nat i (plus X-- (mod i n))) (div-mod i n) (times n (div i n)) (commutative-times (div i n) n)) (plus (mod i n) (times n (div i n))) (commutative-plus (times n (div i n)) (mod i n)))) (plus (times n (div i n)) (mod i n)) (commutative-plus (times n (div i n)) (mod i n))) (times (div i n) n) (commutative-times (div i n) n)) (div (plus (times (mod i n) m) (div i n)) m) (div-plus-times m (mod i n) (div i n) (lt-times-to-lt-div m i n lti))) (mod (plus (times (mod i n) m) (div i n)) m) (mod-plus-times m (mod i n) (div i n) (lt-times-to-lt-div m i n lti)))))))) (bigop m (λ (x : nat) -> p21 x) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (x : nat) -> bigop n (λ (i : nat) -> p22 i x) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f i x))) (bigop-prod m n p21 (λ (X-- : nat) -> λ (X-0 : nat) -> p22 X-0 X--) B nil (aop lzero B nil op-v) (λ (X-- : nat) -> λ (X-0 : nat) -> f X-0 X--))) (bigop n (λ (x : nat) -> p11 x) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (x : nat) -> bigop m (λ (i : nat) -> p12 x i) B nil (op lzero B nil (aop lzero B nil op-v)) (λ (i : nat) -> f x i))) (bigop-prod n m p11 p12 B nil (aop lzero B nil op-v) f)


data Dop (l10-v : Level) (A-v : Set l10-v) (nil-v : A-v) : Set l10-v where
  mk-Dop' : (sum-v : ACop l10-v A-v nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l10-v A-v (prod-v a-v nil-v) nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l10-v A-v (prod-v a-v (aop--o--op l10-v A-v nil-v sum-v b-v c-v)) (aop--o--op l10-v A-v nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Dop l10-v A-v nil-v

mk-Dop : (l10-v : Level) -> (A-v : Set l10-v) -> (nil-v : A-v) -> (sum-v : ACop l10-v A-v nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l10-v A-v (prod-v a-v nil-v) nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l10-v A-v (prod-v a-v (aop--o--op l10-v A-v nil-v sum-v b-v c-v)) (aop--o--op l10-v A-v nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Dop l10-v A-v nil-v
mk-Dop _ _ _ = mk-Dop'

match-Dop : (l19-v : Level) -> (A-v : Set l19-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Dop l19-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-Dop-v : (sum-v : ACop l19-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l19-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l19-v A-v (prod-v a-v (aop--o--op l19-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l19-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> return-type-v (mk-Dop l19-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (z-v : Dop l19-v A-v X-nil-v) -> return-type-v z-v
match-Dop _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-ind : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-943-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-943-v : Dop l22-v A-v X-nil-v) -> Q--v x-943-v
Dop-ind _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type5 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type5 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type4 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type4 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type3 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type3 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type2 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type2 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type1 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type1 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Dop-rect-Type0 : (l22-v l4-v : Level) -> (A-v : Set l22-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-945-v : Dop l22-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Dop-v : (sum-v : ACop l22-v A-v X-nil-v) -> (prod-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-null-v : (a-v : A-v) -> eq l22-v A-v (prod-v a-v X-nil-v) X-nil-v) -> (X-distr-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l22-v A-v (prod-v a-v (aop--o--op l22-v A-v X-nil-v sum-v b-v c-v)) (aop--o--op l22-v A-v X-nil-v sum-v (prod-v a-v b-v) (prod-v a-v c-v))) -> Q--v (mk-Dop l22-v A-v X-nil-v sum-v prod-v X-null-v X-distr-v)) -> (x-945-v : Dop l22-v A-v X-nil-v) -> Q--v x-945-v
Dop-rect-Type0 _ _ _ _ _ casemk (mk-Dop' x1 x2 x3 x4) = casemk x1 x2 x3 x4


sum : (l3-v : Level) -> (A-v : Set l3-v) -> (nil-v : A-v) -> (X-xxx-v : Dop l3-v A-v nil-v) -> ACop l3-v A-v nil-v
sum l4-v A-v nil-v X-xxx-v = match-Dop l4-v A-v nil-v l4-v (λ (xxx0-v : Dop l4-v A-v nil-v) -> ACop l4-v A-v nil-v) (λ (yyy-v : ACop l4-v A-v nil-v) -> λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> eq l4-v A-v (X---v a-v nil-v) nil-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l4-v A-v (X---v a-v (aop--o--op l4-v A-v nil-v yyy-v b-v c-v)) (aop--o--op l4-v A-v nil-v yyy-v (X---v a-v b-v) (X---v a-v c-v))) -> yyy-v) X-xxx-v

prod : (l4-v : Level) -> (A-v : Set l4-v) -> (nil-v : A-v) -> (X-xxx-v : Dop l4-v A-v nil-v) -> (X-x-969-v : A-v) -> (X-x-970-v : A-v) -> A-v
prod l9-v A-v nil-v X-xxx-v = match-Dop l9-v A-v nil-v l9-v (λ (xxx0-v : Dop l9-v A-v nil-v) -> (X-x-969-v : A-v) -> (X-x-970-v : A-v) -> A-v) (λ (X---v : ACop l9-v A-v nil-v) -> λ (yyy-v : (X--1-v : A-v) -> (X--2-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> eq l9-v A-v (yyy-v a-v nil-v) nil-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l9-v A-v (yyy-v a-v (aop--o--op l9-v A-v nil-v X---v b-v c-v)) (aop--o--op l9-v A-v nil-v X---v (yyy-v a-v b-v) (yyy-v a-v c-v))) -> yyy-v) X-xxx-v

null : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Dop l2-v A-v nil-v) -> (a-v : A-v) -> eq l2-v A-v (prod l2-v A-v nil-v xxx-v a-v nil-v) nil-v
null l8-v A-v nil-v xxx-v = match-Dop l8-v A-v nil-v l8-v (λ (xxx0-v : Dop l8-v A-v nil-v) -> (a-v : A-v) -> eq l8-v A-v (prod l8-v A-v nil-v xxx0-v a-v nil-v) nil-v) (λ (X---v : ACop l8-v A-v nil-v) -> λ (X-0-v : (X--1-v : A-v) -> (X--2-v : A-v) -> A-v) -> λ (yyy-v : (a-v : A-v) -> eq l8-v A-v (X-0-v a-v nil-v) nil-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l8-v A-v (X-0-v a-v (aop--o--op l8-v A-v nil-v X---v b-v c-v)) (aop--o--op l8-v A-v nil-v X---v (X-0-v a-v b-v) (X-0-v a-v c-v))) -> yyy-v) xxx-v

distr : (l8-v : Level) -> (A-v : Set l8-v) -> (nil-v : A-v) -> (xxx-v : Dop l8-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l8-v A-v (prod l8-v A-v nil-v xxx-v a-v (aop--o--op l8-v A-v nil-v (sum l8-v A-v nil-v xxx-v) b-v c-v)) (aop--o--op l8-v A-v nil-v (sum l8-v A-v nil-v xxx-v) (prod l8-v A-v nil-v xxx-v a-v b-v) (prod l8-v A-v nil-v xxx-v a-v c-v))
distr l20-v A-v nil-v xxx-v = match-Dop l20-v A-v nil-v l20-v (λ (xxx0-v : Dop l20-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l20-v A-v (prod l20-v A-v nil-v xxx0-v a-v (aop--o--op l20-v A-v nil-v (sum l20-v A-v nil-v xxx0-v) b-v c-v)) (aop--o--op l20-v A-v nil-v (sum l20-v A-v nil-v xxx0-v) (prod l20-v A-v nil-v xxx0-v a-v b-v) (prod l20-v A-v nil-v xxx0-v a-v c-v))) (λ (X---v : ACop l20-v A-v nil-v) -> λ (X-0-v : (X--1-v : A-v) -> (X--2-v : A-v) -> A-v) -> λ (X-1-v : (a-v : A-v) -> eq l20-v A-v (X-0-v a-v nil-v) nil-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> eq l20-v A-v (X-0-v a-v (aop--o--op l20-v A-v nil-v X---v b-v c-v)) (aop--o--op l20-v A-v nil-v X---v (X-0-v a-v b-v) (X-0-v a-v c-v))) -> yyy-v) xxx-v




Dop-inv-ind : (l40 l34 : Level) -> (x1 : Set l40) -> (x2 : x1) -> (Hterm : Dop l40 x1 x2) -> (P : (X-z1698 : Dop l40 x1 x2) -> Set l34) -> (X-H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1699 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P Hterm
Dop-inv-ind = λ (l40 l34 : Level) -> λ (x1 : Set l40) -> λ (x2 : x1) -> λ (Hterm : Dop l40 x1 x2) -> λ (P : (X-z1698 : Dop l40 x1 x2) -> Set l34) -> λ (H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1699 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> Dop-ind l40 (l40 ⊔ l34) x1 x2 (λ (X-x-943 : Dop l40 x1 x2) -> (X-z1699 : eq l40 (Dop l40 x1 x2) Hterm X-x-943) -> P X-x-943) H1 Hterm (refl l40 (Dop l40 x1 x2) Hterm)

Dop-inv-rect-Type4 : (l40 l34 : Level) -> (x1 : Set l40) -> (x2 : x1) -> (Hterm : Dop l40 x1 x2) -> (P : (X-z1704 : Dop l40 x1 x2) -> Set l34) -> (X-H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1705 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P Hterm
Dop-inv-rect-Type4 = λ (l40 l34 : Level) -> λ (x1 : Set l40) -> λ (x2 : x1) -> λ (Hterm : Dop l40 x1 x2) -> λ (P : (X-z1704 : Dop l40 x1 x2) -> Set l34) -> λ (H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1705 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> Dop-rect-Type4 l40 (l40 ⊔ l34) x1 x2 (λ (X-x-945 : Dop l40 x1 x2) -> (X-z1705 : eq l40 (Dop l40 x1 x2) Hterm X-x-945) -> P X-x-945) H1 Hterm (refl l40 (Dop l40 x1 x2) Hterm)

Dop-inv-rect-Type3 : (l40 l34 : Level) -> (x1 : Set l40) -> (x2 : x1) -> (Hterm : Dop l40 x1 x2) -> (P : (X-z1710 : Dop l40 x1 x2) -> Set l34) -> (X-H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1711 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P Hterm
Dop-inv-rect-Type3 = λ (l40 l34 : Level) -> λ (x1 : Set l40) -> λ (x2 : x1) -> λ (Hterm : Dop l40 x1 x2) -> λ (P : (X-z1710 : Dop l40 x1 x2) -> Set l34) -> λ (H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1711 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> Dop-rect-Type3 l40 (l40 ⊔ l34) x1 x2 (λ (X-x-949 : Dop l40 x1 x2) -> (X-z1711 : eq l40 (Dop l40 x1 x2) Hterm X-x-949) -> P X-x-949) H1 Hterm (refl l40 (Dop l40 x1 x2) Hterm)

Dop-inv-rect-Type2 : (l40 l34 : Level) -> (x1 : Set l40) -> (x2 : x1) -> (Hterm : Dop l40 x1 x2) -> (P : (X-z1716 : Dop l40 x1 x2) -> Set l34) -> (X-H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1717 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P Hterm
Dop-inv-rect-Type2 = λ (l40 l34 : Level) -> λ (x1 : Set l40) -> λ (x2 : x1) -> λ (Hterm : Dop l40 x1 x2) -> λ (P : (X-z1716 : Dop l40 x1 x2) -> Set l34) -> λ (H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1717 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> Dop-rect-Type2 l40 (l40 ⊔ l34) x1 x2 (λ (X-x-951 : Dop l40 x1 x2) -> (X-z1717 : eq l40 (Dop l40 x1 x2) Hterm X-x-951) -> P X-x-951) H1 Hterm (refl l40 (Dop l40 x1 x2) Hterm)

Dop-inv-rect-Type1 : (l40 l34 : Level) -> (x1 : Set l40) -> (x2 : x1) -> (Hterm : Dop l40 x1 x2) -> (P : (X-z1722 : Dop l40 x1 x2) -> Set l34) -> (X-H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1723 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P Hterm
Dop-inv-rect-Type1 = λ (l40 l34 : Level) -> λ (x1 : Set l40) -> λ (x2 : x1) -> λ (Hterm : Dop l40 x1 x2) -> λ (P : (X-z1722 : Dop l40 x1 x2) -> Set l34) -> λ (H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1723 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> Dop-rect-Type1 l40 (l40 ⊔ l34) x1 x2 (λ (X-x-953 : Dop l40 x1 x2) -> (X-z1723 : eq l40 (Dop l40 x1 x2) Hterm X-x-953) -> P X-x-953) H1 Hterm (refl l40 (Dop l40 x1 x2) Hterm)

Dop-inv-rect-Type0 : (l40 l34 : Level) -> (x1 : Set l40) -> (x2 : x1) -> (Hterm : Dop l40 x1 x2) -> (P : (X-z1728 : Dop l40 x1 x2) -> Set l34) -> (X-H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1729 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P Hterm
Dop-inv-rect-Type0 = λ (l40 l34 : Level) -> λ (x1 : Set l40) -> λ (x2 : x1) -> λ (Hterm : Dop l40 x1 x2) -> λ (P : (X-z1728 : Dop l40 x1 x2) -> Set l34) -> λ (H1 : (sum-v : ACop l40 x1 x2) -> (prod-v : (X-- : x1) -> (X--1 : x1) -> x1) -> (X-null : (a : x1) -> eq l40 x1 (prod-v a x2) x2) -> (X-distr : (a : x1) -> (b : x1) -> (c : x1) -> eq l40 x1 (prod-v a (aop--o--op l40 x1 x2 sum-v b c)) (aop--o--op l40 x1 x2 sum-v (prod-v a b) (prod-v a c))) -> (X-z1729 : eq l40 (Dop l40 x1 x2) Hterm (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> P (mk-Dop l40 x1 x2 sum-v prod-v X-null X-distr)) -> Dop-rect-Type0 l40 (l40 ⊔ l34) x1 x2 (λ (X-x-955 : Dop l40 x1 x2) -> (X-z1729 : eq l40 (Dop l40 x1 x2) Hterm X-x-955) -> P X-x-955) H1 Hterm (refl l40 (Dop l40 x1 x2) Hterm)

Dop-discr : (l2400 l3206 : Level) -> (a1 : Set l2400) -> (a2 : a1) -> (x : Dop l2400 a1 a2) -> (y : Dop l2400 a1 a2) -> (X-e : eq l2400 (Dop l2400 a1 a2) x y) -> match-Dop l2400 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206)) ⊔ (lsuc l2400))) (λ (X-- : Dop l2400 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400))) (λ (t0 : ACop l2400 a1 a2) -> λ (t1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (t2 : (a : a1) -> eq l2400 a1 (t1 a a2) a2) -> λ (t3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (t1 a (aop--o--op l2400 a1 a2 t0 b c)) (aop--o--op l2400 a1 a2 t0 (t1 a b) (t1 a c))) -> match-Dop l2400 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206)) ⊔ (lsuc l2400))) (λ (X-- : Dop l2400 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400))) (λ (u0 : ACop l2400 a1 a2) -> λ (u1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (u2 : (a : a1) -> eq l2400 a1 (u1 a a2) a2) -> λ (u3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (u1 a (aop--o--op l2400 a1 a2 u0 b c)) (aop--o--op l2400 a1 a2 u0 (u1 a b) (u1 a c))) -> (P : Set l3206) -> (X-z61 : (e0 : eq l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) t0) u0) -> (e1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 u0 e0) u1) -> (e2 : eq l2400 ((a : a1) -> eq l2400 a1 (u1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) t2 u0 e0 u1 e1) u2) -> (X-e3 : eq l2400 ((a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (u1 a (aop--o--op l2400 a1 a2 u0 b c)) (aop--o--op l2400 a1 a2 u0 (u1 a b) (u1 a c))) (R3 l2400 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) t2 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l2400 a1 (x1 a a2) a2) -> λ (X-- : eq l2400 ((a : a1) -> eq l2400 a1 (x1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> λ (x11 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x02 : ACop l2400 a1 a2) -> λ (p02 : eq l2400 (ACop l2400 a1 a2) t0 x02) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x01 p01) x11) -> (a : a1) -> eq l2400 a1 (x11 a a2) a2) t2 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (x1 a (aop--o--op l2400 a1 a2 x0 b c)) (aop--o--op l2400 a1 a2 x0 (x1 a b) (x1 a c))) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P) y) x
Dop-discr = λ (l2400 l3206 : Level) -> λ (a1 : Set l2400) -> λ (a2 : a1) -> λ (x : Dop l2400 a1 a2) -> λ (y : Dop l2400 a1 a2) -> λ (Deq : eq l2400 (Dop l2400 a1 a2) x y) -> eq-rect-Type2 l2400 ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400)) (Dop l2400 a1 a2) x (λ (x-13 : Dop l2400 a1 a2) -> λ (X-x-14 : eq l2400 (Dop l2400 a1 a2) x x-13) -> match-Dop l2400 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206)) ⊔ (lsuc l2400))) (λ (X-- : Dop l2400 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400))) (λ (t0 : ACop l2400 a1 a2) -> λ (t1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (t2 : (a : a1) -> eq l2400 a1 (t1 a a2) a2) -> λ (t3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (t1 a (aop--o--op l2400 a1 a2 t0 b c)) (aop--o--op l2400 a1 a2 t0 (t1 a b) (t1 a c))) -> match-Dop l2400 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206)) ⊔ (lsuc l2400))) (λ (X-- : Dop l2400 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400))) (λ (u0 : ACop l2400 a1 a2) -> λ (u1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (u2 : (a : a1) -> eq l2400 a1 (u1 a a2) a2) -> λ (u3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (u1 a (aop--o--op l2400 a1 a2 u0 b c)) (aop--o--op l2400 a1 a2 u0 (u1 a b) (u1 a c))) -> (P : Set l3206) -> (X-z61 : (e0 : eq l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) t0) u0) -> (e1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 u0 e0) u1) -> (e2 : eq l2400 ((a : a1) -> eq l2400 a1 (u1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) t2 u0 e0 u1 e1) u2) -> (X-e3 : eq l2400 ((a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (u1 a (aop--o--op l2400 a1 a2 u0 b c)) (aop--o--op l2400 a1 a2 u0 (u1 a b) (u1 a c))) (R3 l2400 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) t2 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l2400 a1 (x1 a a2) a2) -> λ (X-- : eq l2400 ((a : a1) -> eq l2400 a1 (x1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> λ (x11 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x02 : ACop l2400 a1 a2) -> λ (p02 : eq l2400 (ACop l2400 a1 a2) t0 x02) -> (X-- : a1) -> (X--1 : a1) -> a1) t1 x01 p01) x11) -> (a : a1) -> eq l2400 a1 (x11 a a2) a2) t2 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (x1 a (aop--o--op l2400 a1 a2 x0 b c)) (aop--o--op l2400 a1 a2 x0 (x1 a b) (x1 a c))) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P) x-13) x) (match-Dop l2400 a1 a2 ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400)) (λ (X-- : Dop l2400 a1 a2) -> match-Dop l2400 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206)) ⊔ (lsuc l2400))) (λ (X-0 : Dop l2400 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400))) (λ (t0 : ACop l2400 a1 a2) -> λ (t1 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (t2 : (a : a1) -> eq l2400 a1 (t1 a a2) a2) -> λ (t3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (t1 a (aop--o--op l2400 a1 a2 t0 b c)) (aop--o--op l2400 a1 a2 t0 (t1 a b) (t1 a c))) -> match-Dop l2400 a1 a2 ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l3206)) ⊔ (lsuc l2400))) (λ (X-0 : Dop l2400 a1 a2) -> Set ((lsuc lzero) ⊔ ((lsuc l3206) ⊔ l2400))) (λ (u0 : ACop l2400 a1 a2) -> λ (u1 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (u2 : (a : a1) -> eq l2400 a1 (u1 a a2) a2) -> λ (u3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (u1 a (aop--o--op l2400 a1 a2 u0 b c)) (aop--o--op l2400 a1 a2 u0 (u1 a b) (u1 a c))) -> (P : Set l3206) -> (X-z61 : (e0 : eq l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) t0) u0) -> (e1 : eq l2400 ((X--1 : a1) -> (X--2 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 u0 e0) u1) -> (e2 : eq l2400 ((a : a1) -> eq l2400 a1 (u1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X--1 : eq l2400 ((X--1 : a1) -> (X--2 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) t2 u0 e0 u1 e1) u2) -> (X-e3 : eq l2400 ((a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (u1 a (aop--o--op l2400 a1 a2 u0 b c)) (aop--o--op l2400 a1 a2 u0 (u1 a b) (u1 a c))) (R3 l2400 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X--1 : eq l2400 ((X--1 : a1) -> (X--2 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) t2 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) t0 x0) -> λ (x1 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (p1 : eq l2400 ((X--1 : a1) -> (X--2 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l2400 a1 (x1 a a2) a2) -> λ (X--1 : eq l2400 ((a : a1) -> eq l2400 a1 (x1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) t0 x01) -> λ (x11 : (X--1 : a1) -> (X--2 : a1) -> a1) -> λ (X--1 : eq l2400 ((X--1 : a1) -> (X--2 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) t0 (λ (x02 : ACop l2400 a1 a2) -> λ (p02 : eq l2400 (ACop l2400 a1 a2) t0 x02) -> (X--1 : a1) -> (X--2 : a1) -> a1) t1 x01 p01) x11) -> (a : a1) -> eq l2400 a1 (x11 a a2) a2) t2 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (x1 a (aop--o--op l2400 a1 a2 x0 b c)) (aop--o--op l2400 a1 a2 x0 (x1 a b) (x1 a c))) t3 u0 e0 u1 e1 u2 e2) u3) -> P) -> P) X--) X--) (λ (a0 : ACop l2400 a1 a2) -> λ (a10 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (a20 : (a : a1) -> eq l2400 a1 (a10 a a2) a2) -> λ (a3 : (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (a10 a (aop--o--op l2400 a1 a2 a0 b c)) (aop--o--op l2400 a1 a2 a0 (a10 a b) (a10 a c))) -> λ (P : Set l3206) -> λ (DH : (e0 : eq l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0) a0) -> (e1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 a0 e0) a10) -> (e2 : eq l2400 ((a : a1) -> eq l2400 a1 (a10 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) a20 a0 e0 a10 e1) a20) -> (X-e3 : eq l2400 ((a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (a10 a (aop--o--op l2400 a1 a2 a0 b c)) (aop--o--op l2400 a1 a2 a0 (a10 a b) (a10 a c))) (R3 l2400 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) a20 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l2400 a1 (x1 a a2) a2) -> λ (X-- : eq l2400 ((a : a1) -> eq l2400 a1 (x1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> λ (x11 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x02 : ACop l2400 a1 a2) -> λ (p02 : eq l2400 (ACop l2400 a1 a2) a0 x02) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x01 p01) x11) -> (a : a1) -> eq l2400 a1 (x11 a a2) a2) a20 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (x1 a (aop--o--op l2400 a1 a2 x0 b c)) (aop--o--op l2400 a1 a2 x0 (x1 a b) (x1 a c))) a3 a0 e0 a10 e1 a20 e2) a3) -> P) -> DH (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)) (refl l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)))) (refl l2400 ((a : a1) -> eq l2400 a1 (a10 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) a20 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)) a10 (refl l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)))))) (refl l2400 ((a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (a10 a (aop--o--op l2400 a1 a2 a0 b c)) (aop--o--op l2400 a1 a2 a0 (a10 a b) (a10 a c))) (R3 l2400 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) a20 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (p1 : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> λ (x2 : (a : a1) -> eq l2400 a1 (x1 a a2) a2) -> λ (X-- : eq l2400 ((a : a1) -> eq l2400 a1 (x1 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> λ (x11 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x02 : ACop l2400 a1 a2) -> λ (p02 : eq l2400 (ACop l2400 a1 a2) a0 x02) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x01 p01) x11) -> (a : a1) -> eq l2400 a1 (x11 a a2) a2) a20 x0 p0 x1 p1) x2) -> (a : a1) -> (b : a1) -> (c : a1) -> eq l2400 a1 (x1 a (aop--o--op l2400 a1 a2 x0 b c)) (aop--o--op l2400 a1 a2 x0 (x1 a b) (x1 a c))) a3 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)) a10 (refl l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)))) a20 (refl l2400 ((a : a1) -> eq l2400 a1 (a10 a a2) a2) (R2 l2400 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> λ (x1 : (X-- : a1) -> (X--1 : a1) -> a1) -> λ (X-- : eq l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x01 : ACop l2400 a1 a2) -> λ (p01 : eq l2400 (ACop l2400 a1 a2) a0 x01) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 x0 p0) x1) -> (a : a1) -> eq l2400 a1 (x1 a a2) a2) a20 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0)) a10 (refl l2400 ((X-- : a1) -> (X--1 : a1) -> a1) (R1 l2400 l2400 (ACop l2400 a1 a2) a0 (λ (x0 : ACop l2400 a1 a2) -> λ (p0 : eq l2400 (ACop l2400 a1 a2) a0 x0) -> (X-- : a1) -> (X--1 : a1) -> a1) a10 a0 (refl l2400 (ACop l2400 a1 a2) (R0 l2400 (ACop l2400 a1 a2) a0))))))))) x) y Deq

let-aop : (l7 : Level) -> (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set l7) -> (nil : B) -> (R : Dop l7 B nil) -> (f : (X-- : nat) -> B) -> (a : B) -> ACop l7 B nil
let-aop = λ (l7 : Level) -> λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set l7) -> λ (nil : B) -> λ (R : Dop l7 B nil) -> λ (f : (X-- : nat) -> B) -> λ (a : B) -> sum l7 B nil R

let-mop : (l7 : Level) -> (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set l7) -> (nil : B) -> (R : Dop l7 B nil) -> (f : (X-- : nat) -> B) -> (a : B) -> (X-x-969 : B) -> (X-x-970 : B) -> B
let-mop = λ (l7 : Level) -> λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set l7) -> λ (nil : B) -> λ (R : Dop l7 B nil) -> λ (f : (X-- : nat) -> B) -> λ (a : B) -> prod l7 B nil R

bigop-distr : (n : nat) -> (p : (X-- : nat) -> bool) -> (B : Set (lzero)) -> (nil : B) -> (R : Dop lzero B nil) -> (f : (X-- : nat) -> B) -> (a : B) -> eq lzero B (let-mop lzero n p B nil R f a a (bigop n (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil (let-aop lzero n p B nil R f a)) (λ (i : nat) -> f i))) (bigop n (λ (i : nat) -> p i) B nil (aop--o--op lzero B nil (let-aop lzero n p B nil R f a)) (λ (i : nat) -> let-mop lzero n p B nil R f a a (f i)))
bigop-distr = λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (B : Set (lzero)) -> λ (nil : B) -> λ (R : Dop lzero B nil) -> λ (f : (X-- : nat) -> B) -> λ (a : B) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero B (prod lzero B nil R a (bigop X-x-365 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) (bigop X-x-365 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) (null lzero B nil R a) (λ (n0 : nat) -> λ (Hind : eq lzero B (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) -> match-Or lzero lzero (eq lzero bool (p n0) true) (eq lzero bool (p n0) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p n0) true) (eq lzero bool (p n0) false)) -> eq lzero B (prod lzero B nil R a (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) (λ (H : eq lzero bool (p n0) true) -> eq-ind-r lzero lzero B (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (f n0) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (f n0) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)))) -> eq lzero B (prod lzero B nil R a x) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) (eq-ind-r lzero lzero B (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (prod lzero B nil R a (f n0)) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) (λ (x : B) -> λ (X-- : eq lzero B x (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (prod lzero B nil R a (f n0)) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))))) -> eq lzero B (prod lzero B nil R a (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (f n0) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)))) x) (eq-ind-r lzero lzero B (aop--o--op lzero B nil (sum lzero B nil R) (prod lzero B nil R a (f n0)) (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)))) (λ (x : B) -> λ (X-- : eq lzero B x (aop--o--op lzero B nil (sum lzero B nil R) (prod lzero B nil R a (f n0)) (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))))) -> eq lzero B x (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (prod lzero B nil R a (f n0)) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))))) (eq-ind-r lzero lzero B (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) -> eq lzero B (aop--o--op lzero B nil (sum lzero B nil R) (prod lzero B nil R a (f n0)) x) (op lzero B nil (aop lzero B nil (sum lzero B nil R)) (prod lzero B nil R a (f n0)) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))))) (refl lzero B (aop--o--op lzero B nil (sum lzero B nil R) (prod lzero B nil R a (f n0)) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))))) (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) Hind) (prod lzero B nil R a (aop--o--op lzero B nil (sum lzero B nil R) (f n0) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)))) (distr lzero B nil R a (f n0) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)))) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))) (bigop-Strue n0 p B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (X-- : nat) -> prod lzero B nil R a (f X--)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n0) H))) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)) (bigop-Strue n0 p B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n0) H))) (λ (H : eq lzero bool (p n0) false) -> eq-ind-r lzero lzero B (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) -> eq lzero B (prod lzero B nil R a x) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) (eq-ind-r lzero lzero B (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))) (λ (x : B) -> λ (X-- : eq lzero B x (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i)))) -> eq lzero B (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) x) (rewrite-l lzero lzero B (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) (λ (X-- : B) -> eq lzero B (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i))) X--) (refl lzero B (prod lzero B nil R a (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)))) (bigop n0 (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))) Hind) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> prod lzero B nil R a (f i))) (bigop-Sfalse n0 p B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (X-- : nat) -> prod lzero B nil R a (f X--)) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n0) H))) (bigop (S n0) (λ (i : nat) -> p i) B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) (λ (i : nat) -> f i)) (bigop-Sfalse n0 p B nil (op lzero B nil (aop lzero B nil (sum lzero B nil R))) f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n0) H))) (true-or-false (p n0))) n

