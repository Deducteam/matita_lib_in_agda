open import Agda.Primitive
import matita-basics-relations
import matita-basics-logic

data bool : Set where
  true : bool
  false : bool

match-bool : (return-sort-v : Level) -> (return-type-v : (z-v : bool) -> Set return-sort-v) -> (case-true-v : return-type-v true) -> (case-false-v : return-type-v false) -> (z-v : bool) -> return-type-v z-v
match-bool _ _ casetrue casefalse true = casetrue
match-bool _ _ casetrue casefalse false = casefalse


bool-ind : (l3-v : Level) -> (Q--v : (X-x-326-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-326-v : bool) -> Q--v x-326-v
bool-ind _ _ casetrue casefalse true = casetrue
bool-ind _ _ casetrue casefalse false = casefalse

bool-rect-Type4 : (l3-v : Level) -> (Q--v : (X-x-329-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-329-v : bool) -> Q--v x-329-v
bool-rect-Type4 _ _ casetrue casefalse true = casetrue
bool-rect-Type4 _ _ casetrue casefalse false = casefalse

bool-rect-Type5 : (l3-v : Level) -> (Q--v : (X-x-329-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-329-v : bool) -> Q--v x-329-v
bool-rect-Type5 _ _ casetrue casefalse true = casetrue
bool-rect-Type5 _ _ casetrue casefalse false = casefalse

bool-rect-Type3 : (l3-v : Level) -> (Q--v : (X-x-329-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-329-v : bool) -> Q--v x-329-v
bool-rect-Type3 _ _ casetrue casefalse true = casetrue
bool-rect-Type3 _ _ casetrue casefalse false = casefalse

bool-rect-Type2 : (l3-v : Level) -> (Q--v : (X-x-329-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-329-v : bool) -> Q--v x-329-v
bool-rect-Type2 _ _ casetrue casefalse true = casetrue
bool-rect-Type2 _ _ casetrue casefalse false = casefalse

bool-rect-Type1 : (l3-v : Level) -> (Q--v : (X-x-329-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-329-v : bool) -> Q--v x-329-v
bool-rect-Type1 _ _ casetrue casefalse true = casetrue
bool-rect-Type1 _ _ casetrue casefalse false = casefalse

bool-rect-Type0 : (l3-v : Level) -> (Q--v : (X-x-329-v : bool) -> Set l3-v) -> (X-H-true-v : Q--v true) -> (X-H-false-v : Q--v false) -> (x-329-v : bool) -> Q--v x-329-v
bool-rect-Type0 _ _ casetrue casefalse true = casetrue
bool-rect-Type0 _ _ casetrue casefalse false = casefalse


bool-inv-ind : (l14-v : Level) -> (Hterm-v : bool) -> (P-v : (X-z587-v : bool) -> Set l14-v) -> (X-H1-v : (X-z588-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> (X-H2-v : (X-z588-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> P-v Hterm-v
bool-inv-ind = λ (l14-v : Level) -> λ (Hterm-v : bool) -> λ (P-v : (X-z587-v : bool) -> Set l14-v) -> λ (H1-v : (X-z588-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> λ (H2-v : (X-z588-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> bool-ind l14-v (λ (X-x-326-v : bool) -> (X-z588-v : matita-basics-logic.eq lzero bool Hterm-v X-x-326-v) -> P-v X-x-326-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero bool Hterm-v)

bool-inv-rect-Type4 : (l14-v : Level) -> (Hterm-v : bool) -> (P-v : (X-z593-v : bool) -> Set l14-v) -> (X-H1-v : (X-z594-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> (X-H2-v : (X-z594-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> P-v Hterm-v
bool-inv-rect-Type4 = λ (l14-v : Level) -> λ (Hterm-v : bool) -> λ (P-v : (X-z593-v : bool) -> Set l14-v) -> λ (H1-v : (X-z594-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> λ (H2-v : (X-z594-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> bool-rect-Type4 l14-v (λ (X-x-329-v : bool) -> (X-z594-v : matita-basics-logic.eq lzero bool Hterm-v X-x-329-v) -> P-v X-x-329-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero bool Hterm-v)

bool-inv-rect-Type3 : (l14-v : Level) -> (Hterm-v : bool) -> (P-v : (X-z599-v : bool) -> Set l14-v) -> (X-H1-v : (X-z600-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> (X-H2-v : (X-z600-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> P-v Hterm-v
bool-inv-rect-Type3 = λ (l14-v : Level) -> λ (Hterm-v : bool) -> λ (P-v : (X-z599-v : bool) -> Set l14-v) -> λ (H1-v : (X-z600-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> λ (H2-v : (X-z600-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> bool-rect-Type3 l14-v (λ (X-x-335-v : bool) -> (X-z600-v : matita-basics-logic.eq lzero bool Hterm-v X-x-335-v) -> P-v X-x-335-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero bool Hterm-v)

bool-inv-rect-Type2 : (l14-v : Level) -> (Hterm-v : bool) -> (P-v : (X-z605-v : bool) -> Set l14-v) -> (X-H1-v : (X-z606-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> (X-H2-v : (X-z606-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> P-v Hterm-v
bool-inv-rect-Type2 = λ (l14-v : Level) -> λ (Hterm-v : bool) -> λ (P-v : (X-z605-v : bool) -> Set l14-v) -> λ (H1-v : (X-z606-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> λ (H2-v : (X-z606-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> bool-rect-Type2 l14-v (λ (X-x-338-v : bool) -> (X-z606-v : matita-basics-logic.eq lzero bool Hterm-v X-x-338-v) -> P-v X-x-338-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero bool Hterm-v)

bool-inv-rect-Type1 : (l14-v : Level) -> (Hterm-v : bool) -> (P-v : (X-z611-v : bool) -> Set l14-v) -> (X-H1-v : (X-z612-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> (X-H2-v : (X-z612-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> P-v Hterm-v
bool-inv-rect-Type1 = λ (l14-v : Level) -> λ (Hterm-v : bool) -> λ (P-v : (X-z611-v : bool) -> Set l14-v) -> λ (H1-v : (X-z612-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> λ (H2-v : (X-z612-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> bool-rect-Type1 l14-v (λ (X-x-341-v : bool) -> (X-z612-v : matita-basics-logic.eq lzero bool Hterm-v X-x-341-v) -> P-v X-x-341-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero bool Hterm-v)

bool-inv-rect-Type0 : (l14-v : Level) -> (Hterm-v : bool) -> (P-v : (X-z617-v : bool) -> Set l14-v) -> (X-H1-v : (X-z618-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> (X-H2-v : (X-z618-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> P-v Hterm-v
bool-inv-rect-Type0 = λ (l14-v : Level) -> λ (Hterm-v : bool) -> λ (P-v : (X-z617-v : bool) -> Set l14-v) -> λ (H1-v : (X-z618-v : matita-basics-logic.eq lzero bool Hterm-v true) -> P-v true) -> λ (H2-v : (X-z618-v : matita-basics-logic.eq lzero bool Hterm-v false) -> P-v false) -> bool-rect-Type0 l14-v (λ (X-x-344-v : bool) -> (X-z618-v : matita-basics-logic.eq lzero bool Hterm-v X-x-344-v) -> P-v X-x-344-v) H1-v H2-v Hterm-v (matita-basics-logic.refl lzero bool Hterm-v)

bool-discr : (l86-v : Level) -> (x-v : bool) -> (y-v : bool) -> (X-e-v : matita-basics-logic.eq lzero bool x-v y-v) -> match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X---v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) (match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X---v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) ((P-v : Set l86-v) -> (X-z19-v : P-v) -> P-v) ((P-v : Set l86-v) -> P-v) y-v) (match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X---v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) ((P-v : Set l86-v) -> P-v) ((P-v : Set l86-v) -> (X-z20-v : P-v) -> P-v) y-v) x-v
bool-discr = λ (l86-v : Level) -> λ (x-v : bool) -> λ (y-v : bool) -> λ (Deq-v : matita-basics-logic.eq lzero bool x-v y-v) -> matita-basics-logic.eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l86-v)) bool x-v (λ (x-13-v : bool) -> λ (X-x-14-v : matita-basics-logic.eq lzero bool x-v x-13-v) -> match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X---v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) (match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X---v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) ((P-v : Set l86-v) -> (X-z19-v : P-v) -> P-v) ((P-v : Set l86-v) -> P-v) x-13-v) (match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X---v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) ((P-v : Set l86-v) -> P-v) ((P-v : Set l86-v) -> (X-z20-v : P-v) -> P-v) x-13-v) x-v) (match-bool ((lsuc lzero) ⊔ (lsuc l86-v)) (λ (X---v : bool) -> match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X-0-v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) (match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X-0-v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) ((P-v : Set l86-v) -> (X-z19-v : P-v) -> P-v) ((P-v : Set l86-v) -> P-v) X---v) (match-bool ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l86-v))) (λ (X-0-v : bool) -> Set ((lsuc lzero) ⊔ (lsuc l86-v))) ((P-v : Set l86-v) -> P-v) ((P-v : Set l86-v) -> (X-z20-v : P-v) -> P-v) X---v) X---v) (λ (P-v : Set l86-v) -> λ (DH-v : P-v) -> DH-v) (λ (P-v : Set l86-v) -> λ (DH-v : P-v) -> DH-v) x-v) y-v Deq-v

not-eq-true-false : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true false)
not-eq-true-false = matita-basics-logic.nmk lzero (matita-basics-logic.eq lzero bool true false) (λ (Heq-v : matita-basics-logic.eq lzero bool true false) -> bool-discr lzero true false Heq-v (matita-basics-logic.False lzero))

notb : (X---v : bool) -> bool
notb = λ (b-v : bool) -> match-bool lzero (λ (X---v : bool) -> bool) false true b-v

notb-elim : (l13-v : Level) -> (b-v : bool) -> (P-v : (X---v : bool) -> Set l13-v) -> (X---v : match-bool ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : bool) -> Set l13-v) (P-v false) (P-v true) b-v) -> P-v (notb b-v)
notb-elim = λ (l13-v : Level) -> λ (b-v : bool) -> λ (P-v : (X---v : bool) -> Set l13-v) -> bool-ind l13-v (λ (X-x-326-v : bool) -> (X---v : match-bool ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : bool) -> Set l13-v) (P-v false) (P-v true) X-x-326-v) -> P-v (notb X-x-326-v)) (λ (auto-v : P-v false) -> auto-v) (λ (auto-v : P-v true) -> auto-v) b-v

notb-notb : (b-v : bool) -> matita-basics-logic.eq lzero bool (notb (notb b-v)) b-v
notb-notb = λ (b-v : bool) -> bool-ind lzero (λ (X-x-326-v : bool) -> matita-basics-logic.eq lzero bool (notb (notb X-x-326-v)) X-x-326-v) (matita-basics-logic.refl lzero bool (notb (notb true))) (matita-basics-logic.refl lzero bool (notb (notb false))) b-v

injective-notb : matita-basics-relations.||injective|| lzero lzero bool bool notb
injective-notb = λ (b1-v : bool) -> λ (b2-v : bool) -> λ (H-v : matita-basics-logic.eq lzero bool (notb b1-v) (notb b2-v)) -> matita-basics-logic.rewrite-r lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v b2-v) (matita-basics-logic.refl lzero bool b2-v) b1-v (matita-basics-logic.rewrite-l lzero lzero bool (notb (notb b1-v)) (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v b2-v) (matita-basics-logic.rewrite-r lzero lzero bool (notb b2-v) (λ (X---v : bool) -> matita-basics-logic.eq lzero bool (notb X---v) b2-v) (notb-notb b2-v) (notb b1-v) H-v) b1-v (notb-notb b1-v))

noteq-to-eqnot : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool b1-v b2-v)) -> matita-basics-logic.eq lzero bool b1-v (notb b2-v)
noteq-to-eqnot = λ (X-clearme-v : bool) -> match-bool lzero (λ (X---v : bool) -> (b2-v : bool) -> (X--1-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool X---v b2-v)) -> matita-basics-logic.eq lzero bool X---v (notb b2-v)) (λ (X-clearme0-v : bool) -> match-bool lzero (λ (X---v : bool) -> (X--1-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true X---v)) -> matita-basics-logic.eq lzero bool true (notb X---v)) (λ (H-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero bool true (notb true)) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero bool true true) (matita-basics-logic.refl lzero bool true) H-v)) (λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true false)) -> matita-basics-logic.refl lzero bool true) X-clearme0-v) (λ (X-clearme0-v : bool) -> match-bool lzero (λ (X---v : bool) -> (X--1-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false X---v)) -> matita-basics-logic.eq lzero bool false (notb X---v)) (λ (auto-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false true)) -> matita-basics-logic.refl lzero bool false) (λ (H-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false false)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero bool false (notb false)) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero bool false false) (matita-basics-logic.refl lzero bool false) H-v)) X-clearme0-v) X-clearme-v

eqnot-to-noteq : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool b1-v (notb b2-v)) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool b1-v b2-v)
eqnot-to-noteq = λ (X-clearme-v : bool) -> match-bool lzero (λ (X---v : bool) -> (b2-v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool X---v (notb b2-v)) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool X---v b2-v)) (λ (X-clearme0-v : bool) -> match-bool lzero (λ (X---v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool true (notb X---v)) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true X---v)) (λ (auto-v : matita-basics-logic.eq lzero bool true false) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true false)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true)) not-eq-true-false (matita-basics-logic.rewrite-l lzero (lsuc lzero) bool true (λ (X---v : bool) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true X---v)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true))) false auto-v)) (λ (auto-v : matita-basics-logic.eq lzero bool true true) -> not-eq-true-false) X-clearme0-v) (λ (X-clearme0-v : bool) -> match-bool lzero (λ (X---v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool false (notb X---v)) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false X---v)) (λ (X---v : matita-basics-logic.eq lzero bool false false) -> matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero bool false true) (matita-basics-logic.eq lzero bool true false) (λ (auto-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.rewrite-r lzero lzero bool true (λ (X--1-v : bool) -> matita-basics-logic.eq lzero bool true X--1-v) (matita-basics-logic.refl lzero bool true) false auto-v) not-eq-true-false) (λ (auto-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true false)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false false)) not-eq-true-false (matita-basics-logic.rewrite-r lzero (lsuc lzero) bool true (λ (X---v : bool) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true X---v)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false false))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) bool true (λ (X---v : bool) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool X---v false))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) bool true (λ (X---v : bool) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true X---v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true))) false auto-v) false auto-v) false auto-v)) X-clearme0-v) X-clearme-v

andb : (X---v : bool) -> (X--1-v : bool) -> bool
andb = λ (b1-v : bool) -> λ (b2-v : bool) -> match-bool lzero (λ (X---v : bool) -> bool) b2-v false b1-v

andb-elim : (l13-v : Level) -> (b1-v : bool) -> (b2-v : bool) -> (P-v : (X---v : bool) -> Set l13-v) -> (X---v : match-bool ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : bool) -> Set l13-v) (P-v b2-v) (P-v false) b1-v) -> P-v (andb b1-v b2-v)
andb-elim = λ (l13-v : Level) -> λ (b1-v : bool) -> λ (b2-v : bool) -> λ (P-v : (X---v : bool) -> Set l13-v) -> bool-ind l13-v (λ (X-x-326-v : bool) -> (X---v : match-bool ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : bool) -> Set l13-v) (P-v b2-v) (P-v false) X-x-326-v) -> P-v (andb X-x-326-v b2-v)) (λ (auto-v : P-v b2-v) -> auto-v) (λ (auto-v : P-v false) -> auto-v) b1-v

true-to-andb-true : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool b1-v true) -> (X--1-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.eq lzero bool (andb b1-v b2-v) true
true-to-andb-true = λ (b1-v : bool) -> match-bool lzero (λ (X---v : bool) -> (b2-v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool X---v true) -> (X--2-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.eq lzero bool (andb X---v b2-v) true) (λ (b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool true true) -> λ (auto'-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.rewrite-l lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool b2-v X---v) (matita-basics-logic.refl lzero bool b2-v) true auto'-v) (λ (b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool false true) -> λ (auto'-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.rewrite-r lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.rewrite-l lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool b2-v X---v) (matita-basics-logic.refl lzero bool b2-v) true auto'-v) false (matita-basics-logic.rewrite-r lzero lzero bool true (λ (X---v : bool) -> matita-basics-logic.eq lzero bool false X---v) auto-v b2-v auto'-v)) b1-v

andb-true-l : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool (andb b1-v b2-v) true) -> matita-basics-logic.eq lzero bool b1-v true
andb-true-l = λ (b1-v : bool) -> match-bool lzero (λ (X---v : bool) -> (b2-v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool (andb X---v b2-v) true) -> matita-basics-logic.eq lzero bool X---v true) (λ (b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.rewrite-l lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.rewrite-l lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool b2-v X---v) (matita-basics-logic.refl lzero bool b2-v) true auto-v) true auto-v) (λ (X-b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.rewrite-r lzero lzero bool true (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.refl lzero bool true) false auto-v) b1-v

andb-true-r : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool (andb b1-v b2-v) true) -> matita-basics-logic.eq lzero bool b2-v true
andb-true-r = λ (b1-v : bool) -> λ (b2-v : bool) -> match-bool lzero (λ (X---v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool (andb X---v b2-v) true) -> matita-basics-logic.eq lzero bool b2-v true) (λ (auto-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.rewrite-l lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool b2-v X---v) (matita-basics-logic.refl lzero bool b2-v) true auto-v) (match-bool lzero (λ (X---v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.eq lzero bool X---v true) (λ (auto-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.refl lzero bool true) (λ (auto-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.rewrite-r lzero lzero bool true (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.refl lzero bool true) false auto-v) b2-v) b1-v

andb-true : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool (andb b1-v b2-v) true) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero bool b1-v true) (matita-basics-logic.eq lzero bool b2-v true)
andb-true = λ (b1-v : bool) -> λ (b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool (andb b1-v b2-v) true) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.eq lzero bool b1-v true) (matita-basics-logic.eq lzero bool b2-v true) (andb-true-l b1-v b2-v (matita-basics-logic.rewrite-r lzero lzero bool true (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.refl lzero bool true) (andb b1-v b2-v) auto-v)) (andb-true-r b1-v b2-v (matita-basics-logic.rewrite-r lzero lzero bool true (λ (X---v : bool) -> matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.refl lzero bool true) (andb b1-v b2-v) auto-v))

orb : (X---v : bool) -> (X--1-v : bool) -> bool
orb = λ (b1-v : bool) -> λ (b2-v : bool) -> match-bool lzero (λ (X---v : bool) -> bool) true b2-v b1-v

orb-elim : (l13-v : Level) -> (b1-v : bool) -> (b2-v : bool) -> (P-v : (X---v : bool) -> Set l13-v) -> (X---v : match-bool ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : bool) -> Set l13-v) (P-v true) (P-v b2-v) b1-v) -> P-v (orb b1-v b2-v)
orb-elim = λ (l13-v : Level) -> λ (b1-v : bool) -> λ (b2-v : bool) -> λ (P-v : (X---v : bool) -> Set l13-v) -> bool-ind l13-v (λ (X-x-326-v : bool) -> (X---v : match-bool ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : bool) -> Set l13-v) (P-v true) (P-v b2-v) X-x-326-v) -> P-v (orb X-x-326-v b2-v)) (λ (auto-v : P-v true) -> auto-v) (λ (auto-v : P-v b2-v) -> auto-v) b1-v

orb-true-r1 : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool b1-v true) -> matita-basics-logic.eq lzero bool (orb b1-v b2-v) true
orb-true-r1 = λ (b1-v : bool) -> λ (b2-v : bool) -> λ (H-v : matita-basics-logic.eq lzero bool b1-v true) -> matita-basics-logic.eq-ind-r lzero lzero bool true (λ (x-v : bool) -> λ (X---v : matita-basics-logic.eq lzero bool x-v true) -> matita-basics-logic.eq lzero bool (orb x-v b2-v) true) (matita-basics-logic.refl lzero bool (orb true b2-v)) b1-v H-v

orb-true-r2 : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.eq lzero bool (orb b1-v b2-v) true
orb-true-r2 = λ (b1-v : bool) -> λ (b2-v : bool) -> λ (H-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.eq-ind-r lzero lzero bool true (λ (x-v : bool) -> λ (X---v : matita-basics-logic.eq lzero bool x-v true) -> matita-basics-logic.eq lzero bool (orb b1-v x-v) true) (match-bool lzero (λ (X---v : bool) -> matita-basics-logic.eq lzero bool (orb X---v true) true) (matita-basics-logic.refl lzero bool (orb true true)) (matita-basics-logic.refl lzero bool (orb false true)) b1-v) b2-v H-v

orb-true-l : (b1-v : bool) -> (b2-v : bool) -> (X---v : matita-basics-logic.eq lzero bool (orb b1-v b2-v) true) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero bool b1-v true) (matita-basics-logic.eq lzero bool b2-v true)
orb-true-l = λ (X-clearme-v : bool) -> match-bool lzero (λ (X---v : bool) -> (b2-v : bool) -> (X--1-v : matita-basics-logic.eq lzero bool (orb X---v b2-v) true) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.eq lzero bool b2-v true)) (λ (b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool true true) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero bool true true) (matita-basics-logic.eq lzero bool b2-v true) (matita-basics-logic.refl lzero bool true)) (λ (b2-v : bool) -> λ (auto-v : matita-basics-logic.eq lzero bool b2-v true) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero bool false true) (matita-basics-logic.eq lzero bool b2-v true) (matita-basics-logic.rewrite-l lzero lzero bool b2-v (λ (X---v : bool) -> matita-basics-logic.eq lzero bool b2-v X---v) (matita-basics-logic.refl lzero bool b2-v) true auto-v)) X-clearme-v

xorb : (X---v : bool) -> (X--1-v : bool) -> bool
xorb = λ (b1-v : bool) -> λ (b2-v : bool) -> match-bool lzero (λ (X---v : bool) -> bool) (match-bool lzero (λ (X---v : bool) -> bool) false true b2-v) (match-bool lzero (λ (X---v : bool) -> bool) true false b2-v) b1-v

bool-to-decidable-eq : (b1-v : bool) -> (b2-v : bool) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero bool b1-v b2-v)
bool-to-decidable-eq = λ (b1-v : bool) -> λ (b2-v : bool) -> match-bool lzero (λ (X---v : bool) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero bool X---v b2-v)) (match-bool lzero (λ (X---v : bool) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero bool true X---v)) (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero bool true true) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true true)) (matita-basics-logic.refl lzero bool true)) (matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero bool true false) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool true false)) not-eq-true-false) b2-v) (match-bool lzero (λ (X---v : bool) -> matita-basics-logic.decidable lzero (matita-basics-logic.eq lzero bool false X---v)) (matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero bool false true) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false true)) (matita-basics-logic.nmk lzero (matita-basics-logic.eq lzero bool false true) (λ (auto-v : matita-basics-logic.eq lzero bool false true) -> matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero bool true false) (matita-basics-logic.rewrite-r lzero lzero bool true (λ (X---v : bool) -> matita-basics-logic.eq lzero bool true X---v) (matita-basics-logic.refl lzero bool true) false auto-v) not-eq-true-false))) (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero bool false false) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero bool false false)) (matita-basics-logic.refl lzero bool false)) b2-v) b1-v

true-or-false : (b-v : bool) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero bool b-v true) (matita-basics-logic.eq lzero bool b-v false)
true-or-false = λ (b-v : bool) -> match-bool lzero (λ (X---v : bool) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero bool X---v true) (matita-basics-logic.eq lzero bool X---v false)) (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero bool true true) (matita-basics-logic.eq lzero bool true false) (matita-basics-logic.refl lzero bool true)) (matita-basics-relations.RC-reflexive lzero lzero bool (λ (X---v : bool) -> λ (X-0-v : bool) -> matita-basics-logic.eq lzero bool false true) false) b-v
