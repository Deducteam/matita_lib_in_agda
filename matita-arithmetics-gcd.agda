open import Agda.Primitive
import matita-arithmetics-exp
import matita-basics-logic
import matita-basics-bool
import matita-arithmetics-div-and-mod
import matita-arithmetics-primes
import matita-arithmetics-nat

gcd-aux : (X-p-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
gcd-aux matita-arithmetics-nat.O m n = m
gcd-aux (matita-arithmetics-nat.S q) m n = matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n (gcd-aux q n (matita-arithmetics-div-and-mod.mod m n)) (matita-arithmetics-primes.dividesb n m)


gcd : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
gcd = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) (matita-arithmetics-nat.leb n-v m-v)

commutative-gcd : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) (gcd m-v n-v)
commutative-gcd = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) X---v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v n-v m-v) (gcd-aux n-v m-v n-v) (matita-arithmetics-nat.leb m-v n-v))) (λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt n-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt n-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) matita-basics-bool.true) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v n-v m-v) (gcd-aux n-v m-v n-v) (matita-arithmetics-nat.leb m-v n-v))) (λ (ltnm-v : matita-arithmetics-nat.lt n-v m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) matita-basics-bool.true) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v n-v m-v) (gcd-aux n-v m-v n-v) x-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) matita-basics-bool.true)) (matita-arithmetics-nat.leb m-v n-v) (matita-arithmetics-nat.not-le-to-leb-false m-v n-v (matita-arithmetics-nat.lt-to-not-le n-v m-v ltnm-v))) (λ (eqnm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat m-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux x-v m-v x-v) (gcd-aux m-v x-v m-v) matita-basics-bool.true) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v x-v m-v) (gcd-aux x-v m-v x-v) (matita-arithmetics-nat.leb m-v x-v))) (matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v m-v m-v) (gcd-aux m-v m-v m-v) matita-basics-bool.true) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v m-v m-v) (gcd-aux m-v m-v m-v) X---v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v m-v m-v) (gcd-aux m-v m-v m-v) matita-basics-bool.true)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v m-v m-v) (gcd-aux m-v m-v m-v) matita-basics-bool.true)) (matita-arithmetics-nat.leb m-v m-v)) n-v eqnm-v) (matita-arithmetics-nat.le-to-or-lt-eq n-v m-v lenm-v)) (λ (notlenm-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) matita-basics-bool.false) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux m-v n-v m-v) (gcd-aux n-v m-v n-v) x-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) matita-basics-bool.false)) (matita-arithmetics-nat.leb m-v n-v) (matita-arithmetics-nat.le-to-leb-true m-v n-v (matita-arithmetics-nat.transitive-le m-v (matita-arithmetics-nat.S m-v) n-v (matita-arithmetics-nat.le-n-Sn m-v) (matita-arithmetics-nat.not-le-to-lt n-v m-v notlenm-v))))

gcd-O-l : (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd matita-arithmetics-nat.O m-v) m-v
gcd-O-l = λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat (gcd matita-arithmetics-nat.O m-v)

divides-mod : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-primes.divides p-v m-v) -> (X--2-v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v)
divides-mod = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v m-v) -> matita-arithmetics-primes.match-divides p-v m-v lzero (λ (X---v : matita-arithmetics-primes.divides p-v m-v) -> (X--1-v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (qm-v : matita-arithmetics-nat.nat) -> λ (eqm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times p-v qm-v)) -> λ (X-clearme0-v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.match-divides p-v n-v lzero (λ (X---v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (qn-v : matita-arithmetics-nat.nat) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times p-v qn-v)) -> matita-arithmetics-primes.quotient p-v (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.minus qm-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v qm-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v)))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v qm-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v))))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat m-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v))))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v qn-v) (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v qn-v) (matita-arithmetics-div-and-mod.div m-v n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.minus m-v x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat n-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.minus m-v (matita-arithmetics-nat.times x-1-v (matita-arithmetics-div-and-mod.div m-v n-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus m-v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.plus-to-minus m-v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-div-and-mod.div-mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v))))) (matita-arithmetics-nat.times p-v qn-v) eqn-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.associative-times p-v qn-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times p-v qm-v) eqm-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.minus qm-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v)))) (matita-arithmetics-nat.distributive-times-minus p-v qm-v (matita-arithmetics-nat.times qn-v (matita-arithmetics-div-and-mod.div m-v n-v))))) X-clearme0-v) X-clearme-v

divides-mod-to-divides : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v)) -> (X--2-v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.divides p-v m-v
divides-mod-to-divides = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v)) -> matita-arithmetics-primes.match-divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v) lzero (λ (X---v : matita-arithmetics-primes.divides p-v (matita-arithmetics-div-and-mod.mod m-v n-v)) -> (X--1-v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.divides p-v m-v) (λ (q1-v : matita-arithmetics-nat.nat) -> λ (eq1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times p-v q1-v)) -> λ (X-clearme0-v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.match-divides p-v n-v lzero (λ (X---v : matita-arithmetics-primes.divides p-v n-v) -> matita-arithmetics-primes.divides p-v m-v) (λ (q2-v : matita-arithmetics-nat.nat) -> λ (eq2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times p-v q2-v)) -> matita-arithmetics-primes.quotient p-v m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v)) q1-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times p-v q1-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times p-v q1-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod m-v n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v))) x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q2-v) (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q2-v) (matita-arithmetics-div-and-mod.div m-v n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus x-1-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat n-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x-1-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-div-and-mod.div-mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times p-v q2-v) eq2-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.associative-times p-v q2-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times p-v q1-v) eq1-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v)) q1-v)) (matita-arithmetics-nat.distributive-times-plus p-v (matita-arithmetics-nat.times q2-v (matita-arithmetics-div-and-mod.div m-v n-v)) q1-v))) X-clearme0-v) X-clearme-v

divides-to-gcd-aux : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--2-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux p-v m-v n-v) n-v
divides-to-gcd-aux = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posp-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> matita-arithmetics-nat.lt-O-n-elim lzero p-v posp-v (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--2-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux X---v m-v n-v) n-v) (λ (l-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divnm-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (gcd-aux l-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) x-v) n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-primes.dividesb n-v m-v) (matita-arithmetics-primes.divides-to-dividesb-true n-v m-v posn-v divnm-v))

divides-to-gcd : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) n-v
divides-to-gcd = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-primes.divides n-v X---v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v X---v) n-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (gcd matita-arithmetics-nat.O n-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (gcd matita-arithmetics-nat.O n-v)) -> (X--1-v : matita-arithmetics-primes.divides n-v matita-arithmetics-nat.O) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) (λ (auto-v : matita-arithmetics-primes.divides n-v matita-arithmetics-nat.O) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (gcd matita-arithmetics-nat.O n-v) (gcd-O-l n-v)) (gcd n-v matita-arithmetics-nat.O) (commutative-gcd n-v matita-arithmetics-nat.O)) (λ (l-v : matita-arithmetics-nat.nat) -> λ (divn-v : matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.S l-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v (matita-arithmetics-nat.S l-v) n-v) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (matita-arithmetics-nat.S l-v) (gcd-aux l-v (matita-arithmetics-nat.S l-v) (matita-arithmetics-div-and-mod.mod-aux n-v n-v l-v)) (matita-arithmetics-nat.eqb (matita-arithmetics-div-and-mod.mod-aux n-v n-v l-v) matita-arithmetics-nat.O)) x-v) n-v) (divides-to-gcd-aux n-v (matita-arithmetics-nat.S l-v) n-v posn-v posn-v divn-v) (matita-arithmetics-nat.leb n-v (matita-arithmetics-nat.S l-v)) (matita-arithmetics-nat.le-to-leb-true n-v (matita-arithmetics-nat.S l-v) (matita-arithmetics-primes.divides-to-le n-v (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.lt-O-S l-v) divn-v))) m-v

not-divides-to-gcd-aux : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux (matita-arithmetics-nat.S p-v) m-v n-v) (gcd-aux p-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))
not-divides-to-gcd-aux = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (lenm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (divnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (gcd-aux p-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) x-v) (gcd-aux p-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (gcd-aux p-v n-v (matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) m-v (λ (p0-v : matita-arithmetics-nat.nat) -> matita-arithmetics-div-and-mod.mod-aux m-v m-v p0-v) n-v))) (matita-arithmetics-primes.dividesb n-v m-v) (matita-arithmetics-primes.not-divides-to-dividesb-false n-v m-v lenm-v divnm-v)

divides-gcd-aux-mn : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v p-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux p-v m-v n-v) m-v) (matita-arithmetics-primes.divides (gcd-aux p-v m-v n-v) n-v)
divides-gcd-aux-mn = λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v X-x-365-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux X-x-365-v m-v n-v) m-v) (matita-arithmetics-primes.divides (gcd-aux X-x-365-v m-v n-v) n-v)) (λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenO-v : matita-arithmetics-nat.le n-v matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux matita-arithmetics-nat.O m-v n-v) m-v) (matita-arithmetics-primes.divides (gcd-aux matita-arithmetics-nat.O m-v n-v) n-v)) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) posn-v (matita-arithmetics-nat.le-to-not-lt n-v matita-arithmetics-nat.O lenO-v))) (λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v q-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux q-v m-v n-v) m-v) (matita-arithmetics-primes.divides (gcd-aux q-v m-v n-v) n-v)) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v))) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) m-v) (matita-arithmetics-primes.divides (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) n-v)) (λ (divnm-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides x-v m-v) (matita-arithmetics-primes.divides x-v n-v)) (matita-basics-logic.conj lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-arithmetics-primes.divides n-v n-v) divnm-v (matita-arithmetics-primes.divides-n-n n-v)) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) (divides-to-gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v (matita-arithmetics-nat.lt-O-S q-v) posn-v divnm-v)) (λ (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides x-v m-v) (matita-arithmetics-primes.divides x-v n-v)) (matita-basics-logic.match-And lzero lzero (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v) (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v) (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) m-v) (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v)) (λ (H-v : matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v) -> λ (H1-v : matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-div-and-mod.mod m-v n-v)) -> matita-basics-logic.conj lzero lzero (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) m-v) (matita-arithmetics-primes.divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v) (divides-mod-to-divides (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) m-v n-v posn-v H1-v H-v) H-v) (Hind-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) -> auto-v) (λ (modO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.absurd lzero (matita-arithmetics-primes.divides n-v m-v) (matita-arithmetics-primes.mod-O-to-divides n-v m-v posn-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O) (matita-arithmetics-div-and-mod.mod m-v n-v) modO-v)) ndivnm-v)) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.le-O-n (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.lt-to-le (matita-arithmetics-div-and-mod.mod m-v n-v) n-v (matita-arithmetics-div-and-mod.lt-mod-m-m m-v n-v posn-v)) (matita-arithmetics-nat.le-S-S-to-le (matita-arithmetics-div-and-mod.mod m-v n-v) q-v (matita-arithmetics-nat.transitive-le (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v (matita-arithmetics-nat.S q-v) (matita-arithmetics-div-and-mod.lt-mod-m-m m-v n-v posn-v) lenS-v)))) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) (not-divides-to-gcd-aux q-v m-v n-v posn-v ndivnm-v)) (matita-arithmetics-primes.decidable-divides n-v m-v)) p-v

divides-gcd-nm : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd n-v m-v) n-v)
divides-gcd-nm = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd n-v m-v) n-v)) (λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v)) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd n-v m-v) n-v)) (λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) X---v) m-v) (matita-arithmetics-primes.divides (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) X---v) n-v)) (λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> divides-gcd-aux-mn n-v m-v n-v posn-v lenm-v (matita-arithmetics-nat.le-n n-v)) (λ (notlt-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) n-v) (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) m-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) n-v) (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) m-v)) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) n-v)) (λ (auto-v : matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) n-v) -> λ (auto'-v : matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) m-v) -> matita-basics-logic.conj lzero lzero (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd-aux m-v n-v m-v) n-v) auto'-v auto-v) (divides-gcd-aux-mn m-v n-v m-v posm-v (matita-arithmetics-nat.transitive-le m-v (matita-arithmetics-nat.S m-v) n-v (matita-arithmetics-nat.le-n-Sn m-v) (matita-arithmetics-nat.not-le-to-lt n-v m-v notlt-v)) (matita-arithmetics-nat.le-n m-v)))) (λ (eqmO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd n-v x-1-v) x-1-v) (matita-arithmetics-primes.divides (gcd n-v x-1-v) n-v)) (matita-basics-logic.conj lzero lzero (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) matita-arithmetics-nat.O) (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) n-v) (matita-arithmetics-primes.divides-n-O (gcd n-v matita-arithmetics-nat.O)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) (gcd n-v matita-arithmetics-nat.O)) (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) n-v) (matita-arithmetics-primes.divides-n-n (gcd n-v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) X---v) (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd n-v matita-arithmetics-nat.O) n-v)) (gcd n-v matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (gcd matita-arithmetics-nat.O n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v matita-arithmetics-nat.O) X---v) (commutative-gcd n-v matita-arithmetics-nat.O) n-v (gcd-O-l n-v))))) m-v eqmO-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O m-v (matita-arithmetics-nat.le-O-n m-v))) (λ (eqnO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides (gcd x-1-v m-v) m-v) (matita-arithmetics-primes.divides (gcd x-1-v m-v) x-1-v)) (matita-basics-logic.conj lzero lzero (matita-arithmetics-primes.divides (gcd matita-arithmetics-nat.O m-v) m-v) (matita-arithmetics-primes.divides (gcd matita-arithmetics-nat.O m-v) matita-arithmetics-nat.O) (matita-arithmetics-primes.divides-n-n (gcd matita-arithmetics-nat.O m-v)) (matita-arithmetics-primes.divides-n-O (gcd matita-arithmetics-nat.O m-v))) n-v eqnO-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

divides-gcd-l : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-primes.divides (gcd n-v m-v) n-v
divides-gcd-l = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.proj2 lzero lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd n-v m-v) n-v) (divides-gcd-nm n-v m-v)

divides-gcd-r : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-primes.divides (gcd n-v m-v) m-v
divides-gcd-r = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.proj1 lzero lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd n-v m-v) n-v) (divides-gcd-nm n-v m-v)

divides-times-gcd-aux : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--2-v : matita-arithmetics-nat.le n-v m-v) -> (X--3-v : matita-arithmetics-nat.le n-v p-v) -> (X--4-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> (X--5-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd-aux p-v m-v n-v))
divides-times-gcd-aux = λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--2-v : matita-arithmetics-nat.le n-v m-v) -> (X--3-v : matita-arithmetics-nat.le n-v X-x-365-v) -> (X--4-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> (X--5-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd-aux X-x-365-v m-v n-v))) (λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (X-0-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenO-v : matita-arithmetics-nat.le n-v matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> (X--1-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> (X--2-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd-aux matita-arithmetics-nat.O m-v n-v))) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le n-v matita-arithmetics-nat.O) lenO-v (matita-arithmetics-nat.lt-to-not-le matita-arithmetics-nat.O n-v posn-v))) (λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--2-v : matita-arithmetics-nat.le n-v m-v) -> (X--3-v : matita-arithmetics-nat.le n-v q-v) -> (X--4-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> (X--5-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd-aux q-v m-v n-v))) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (posc-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> λ (dcm-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> λ (dcn-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v))) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v))) (λ (divnm-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v x-v)) dcn-v (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) (divides-to-gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v (matita-arithmetics-nat.lt-O-S q-v) posn-v divnm-v)) (λ (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v x-v)) (Hind-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v) d-v c-v posc-v (matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) -> auto-v) (λ (modO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.absurd lzero (matita-arithmetics-primes.divides n-v m-v) (matita-arithmetics-primes.mod-O-to-divides n-v m-v posn-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O) (matita-arithmetics-div-and-mod.mod m-v n-v) modO-v)) ndivnm-v)) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.le-O-n (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.lt-to-le (matita-arithmetics-div-and-mod.mod m-v n-v) n-v (matita-arithmetics-div-and-mod.lt-mod-m-m m-v n-v posn-v)) (matita-arithmetics-nat.le-S-S-to-le (matita-arithmetics-div-and-mod.mod m-v n-v) q-v (matita-arithmetics-nat.transitive-le (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v (matita-arithmetics-nat.S q-v) (matita-arithmetics-div-and-mod.lt-mod-m-m m-v n-v posn-v) lenS-v)) dcn-v (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.times m-v c-v) (matita-arithmetics-nat.times n-v c-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.times m-v c-v) (matita-arithmetics-nat.times n-v c-v)) x-1-v) -> matita-arithmetics-primes.divides d-v x-1-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v m-v) x-1-v) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-div-and-mod.mod x-1-v (matita-arithmetics-nat.times n-v c-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v n-v) x-1-v) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-div-and-mod.mod (matita-arithmetics-nat.times c-v m-v) x-1-v)) (divides-mod d-v (matita-arithmetics-nat.times c-v m-v) (matita-arithmetics-nat.times c-v n-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times c-v n-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O c-v matita-arithmetics-nat.O n-v posc-v posn-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O matita-arithmetics-nat.O)) dcm-v dcn-v) (matita-arithmetics-nat.times n-v c-v) (matita-arithmetics-nat.commutative-times c-v n-v)) (matita-arithmetics-nat.times m-v c-v) (matita-arithmetics-nat.commutative-times c-v m-v)) (matita-arithmetics-nat.times c-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-div-and-mod.times-mod m-v n-v c-v posc-v posn-v))) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) (not-divides-to-gcd-aux q-v m-v n-v posn-v ndivnm-v)) (matita-arithmetics-primes.decidable-divides n-v m-v)) p-v

divides-gcd-aux : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v p-v) -> (X--3-v : matita-arithmetics-primes.divides d-v m-v) -> (X--4-v : matita-arithmetics-primes.divides d-v n-v) -> matita-arithmetics-primes.divides d-v (gcd-aux p-v m-v n-v)
divides-gcd-aux = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (auto'-v : matita-arithmetics-nat.le n-v m-v) -> λ (auto''-v : matita-arithmetics-nat.le n-v p-v) -> λ (auto'''-v : matita-arithmetics-primes.divides d-v m-v) -> λ (auto''''-v : matita-arithmetics-primes.divides d-v n-v) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd-aux p-v m-v n-v))) (matita-arithmetics-primes.divides d-v (gcd-aux p-v m-v n-v)) (divides-times-gcd-aux p-v m-v n-v d-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O) auto-v auto'-v auto''-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v)) auto'''-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.plus m-v X---v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v)) (matita-arithmetics-nat.plus m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O m-v)) (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O m-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm m-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) auto''''-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.plus n-v X---v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v)) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O n-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm n-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times (gcd-aux p-v m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v X---v) (matita-arithmetics-primes.divides d-v (gcd-aux p-v m-v n-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd-aux p-v m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v X---v) (matita-arithmetics-primes.divides d-v (gcd-aux p-v m-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v (gcd-aux p-v m-v n-v))) (matita-arithmetics-nat.times (gcd-aux p-v m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 (gcd-aux p-v m-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd-aux p-v m-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd-aux p-v m-v n-v)))

divides-d-times-gcd : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> (X--1-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> (X--2-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd n-v m-v))
divides-d-times-gcd = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (posc-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> λ (dcm-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v m-v)) -> λ (dcn-v : matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v n-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd n-v m-v))) (λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v)) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd n-v m-v))) (λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) X---v))) (λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> divides-times-gcd-aux n-v m-v n-v d-v c-v posc-v posn-v lenm-v (matita-arithmetics-nat.le-n n-v) dcm-v dcn-v) (λ (nlenm-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> divides-times-gcd-aux m-v n-v m-v d-v c-v posc-v posm-v (matita-arithmetics-nat.transitive-le m-v (matita-arithmetics-nat.S m-v) n-v (matita-arithmetics-nat.le-n-Sn m-v) (matita-arithmetics-nat.not-le-to-lt n-v m-v nlenm-v)) (matita-arithmetics-nat.le-n m-v) dcn-v dcm-v)) (λ (eqmO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd n-v x-1-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (gcd matita-arithmetics-nat.O n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd matita-arithmetics-nat.O n-v) x-1-v) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v x-1-v)) dcn-v (gcd n-v matita-arithmetics-nat.O) (commutative-gcd matita-arithmetics-nat.O n-v)) m-v eqmO-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O m-v (matita-arithmetics-nat.le-O-n m-v))) (λ (eqnO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times c-v (gcd x-1-v m-v))) dcm-v n-v eqnO-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

divides-d-gcd : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (d-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides d-v m-v) -> (X--1-v : matita-arithmetics-primes.divides d-v n-v) -> matita-arithmetics-primes.divides d-v (gcd n-v m-v)
divides-d-gcd = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (d-v : matita-arithmetics-nat.nat) -> λ (divdn-v : matita-arithmetics-primes.divides d-v m-v) -> λ (divdn0-v : matita-arithmetics-primes.divides d-v n-v) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd n-v m-v))) (matita-arithmetics-primes.divides d-v (gcd n-v m-v)) (divides-d-times-gcd m-v n-v d-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v)) divdn-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.plus m-v X---v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v m-v)) (matita-arithmetics-nat.plus m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O m-v)) (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O m-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm m-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) divdn0-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.plus n-v X---v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v n-v)) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O n-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm n-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) X---v)) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times (gcd m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v X---v) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (gcd m-v n-v) (matita-arithmetics-nat.times (gcd m-v n-v) matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v X---v) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O (gcd m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.plus (gcd m-v n-v) X---v)) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v (matita-arithmetics-nat.plus (gcd m-v n-v) X---v)) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus matita-arithmetics-nat.O (gcd m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v X---v) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v X---v) (matita-arithmetics-primes.divides d-v (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v (gcd m-v n-v)) (matita-arithmetics-primes.divides d-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides d-v (gcd m-v n-v))) (gcd n-v m-v) (commutative-gcd n-v m-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (gcd m-v n-v)) (matita-arithmetics-nat.plus-O-n (gcd m-v n-v))) (matita-arithmetics-nat.plus (gcd m-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-plus (gcd m-v n-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.times matita-arithmetics-nat.O (gcd m-v n-v)) (matita-arithmetics-nat.times-O-n (gcd m-v n-v))) (matita-arithmetics-nat.times (gcd m-v n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-times (gcd m-v n-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (gcd m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm (gcd m-v n-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd m-v n-v)) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd m-v n-v))) (gcd n-v m-v) (commutative-gcd n-v m-v))

let-clause-1544 : (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v q-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux q-v m-v n-v))))) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (lenm-v : matita-arithmetics-nat.le n-v m-v) -> (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> (a-v : matita-arithmetics-nat.nat) -> (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) -> (b-v : matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times n-v b-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))
let-clause-1544 = λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v q-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux q-v m-v n-v))))) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> λ (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) X---v) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) H-v (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.commutative-times b-v n-v)

let-clause-15441 : (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v q-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux q-v m-v n-v))))) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (lenm-v : matita-arithmetics-nat.le n-v m-v) -> (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> (a-v : matita-arithmetics-nat.nat) -> (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) -> (b-v : matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))
let-clause-15441 = λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v q-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux q-v m-v n-v))))) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> λ (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) H-v (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.commutative-times b-v n-v)

eq-minus-gcd-aux : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v p-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux p-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux p-v m-v n-v))))
eq-minus-gcd-aux = λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v X-x-365-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux X-x-365-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux X-x-365-v m-v n-v))))) (λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenO-v : matita-arithmetics-nat.le n-v matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux matita-arithmetics-nat.O m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux matita-arithmetics-nat.O m-v n-v))))) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) posn-v (matita-arithmetics-nat.le-to-not-lt n-v matita-arithmetics-nat.O lenO-v))) (λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.le n-v m-v) -> (X--2-v : matita-arithmetics-nat.le n-v q-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux q-v m-v n-v))))) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> λ (lenS-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v))))) (λ (divnm-v : matita-arithmetics-primes.divides n-v m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) x-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) x-v)))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) n-v))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times b-v m-v)) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) n-v)) matita-arithmetics-nat.O (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus n-v X---v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v X---v) n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v X---v) n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O n-v)) (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O m-v)) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O m-v)) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O n-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm n-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v))))) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) (divides-to-gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v (matita-arithmetics-nat.lt-O-S q-v) posn-v divnm-v)) (λ (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) x-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) x-v)))) (matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))))) (λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))))) (λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)))))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)) x-1-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) x-1-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) x-1-v)))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))))) (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v) (matita-arithmetics-nat.times b0-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v)))) a-v (matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v) (matita-arithmetics-nat.times a-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) b-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) b-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times x-1-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v) (matita-arithmetics-nat.times b-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v) (matita-arithmetics-nat.times b-v n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) x-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v x-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v) (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.plus x-v (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v x-1-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v X---v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times a-v X---v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) X---v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) X---v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times n-v b-v)) (let-clause-1544 p-v q-v Hind-v m-v n-v posn-v lenm-v lenS-v ndivnm-v a-v X-clearme-v b-v X-clearme0-v H-v)) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times n-v b-v)) (let-clause-1544 p-v q-v Hind-v m-v n-v posn-v lenm-v lenS-v ndivnm-v a-v X-clearme-v b-v X-clearme0-v H-v)) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.plus-O-n (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)))) (matita-arithmetics-nat.minus-n-n (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times-times a-v n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times-times a-v n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.le-n (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.minus-plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.distributive-times-plus a-v (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v) (matita-arithmetics-nat.associative-times a-v (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) m-v (matita-arithmetics-div-and-mod.div-mod m-v n-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) b-v) n-v) (matita-arithmetics-nat.distributive-times-plus-r n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) b-v)) (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) b-v))))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) H-v) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) x-1-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) x-1-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) x-1-v)))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))))) (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v) (matita-arithmetics-nat.times b0-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))))) a-v (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v) (matita-arithmetics-nat.times a-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times a-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v)) (matita-arithmetics-nat.times a-v x-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v)) x-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) x-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v X---v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times a-v X---v)) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) X---v) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus matita-arithmetics-nat.O X---v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (let-clause-15441 p-v q-v Hind-v m-v n-v posn-v lenm-v lenS-v ndivnm-v a-v X-clearme-v b-v X-clearme0-v H-v)) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v))) (let-clause-15441 p-v q-v Hind-v m-v n-v posn-v lenm-v lenS-v ndivnm-v a-v X-clearme-v b-v X-clearme0-v H-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v b-v)) (matita-arithmetics-nat.plus-O-n (matita-arithmetics-nat.times n-v b-v))) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)))) (matita-arithmetics-nat.minus-n-n (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times-times a-v n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times-times a-v n-v (matita-arithmetics-div-and-mod.div m-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.le-n (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times b-v n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.minus-plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v)) n-v) (matita-arithmetics-nat.associative-times a-v (matita-arithmetics-div-and-mod.div m-v n-v) n-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v))) (matita-arithmetics-nat.distributive-times-plus a-v (matita-arithmetics-nat.times (matita-arithmetics-div-and-mod.div m-v n-v) n-v) (matita-arithmetics-div-and-mod.mod m-v n-v))) m-v (matita-arithmetics-div-and-mod.div-mod m-v n-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))) n-v) (matita-arithmetics-nat.distributive-times-plus-r n-v b-v (matita-arithmetics-nat.times a-v (matita-arithmetics-div-and-mod.div m-v n-v))))))) (gcd-aux q-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) H-v) X-clearme0-v) X-clearme-v) (Hind-v n-v (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v))) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) -> auto-v) (λ (modO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.absurd lzero (matita-arithmetics-primes.divides n-v m-v) (matita-arithmetics-primes.mod-O-to-divides n-v m-v posn-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O) (matita-arithmetics-div-and-mod.mod m-v n-v) modO-v)) ndivnm-v)) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O (matita-arithmetics-div-and-mod.mod m-v n-v) (matita-arithmetics-nat.le-O-n (matita-arithmetics-div-and-mod.mod m-v n-v)))) (matita-arithmetics-nat.lt-to-le (matita-arithmetics-div-and-mod.mod m-v n-v) n-v (matita-arithmetics-div-and-mod.lt-mod-m-m m-v n-v posn-v)) (matita-arithmetics-nat.le-S-S-to-le (matita-arithmetics-div-and-mod.mod m-v n-v) q-v (matita-arithmetics-nat.transitive-le (matita-arithmetics-nat.S (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v (matita-arithmetics-nat.S q-v) (matita-arithmetics-div-and-mod.lt-mod-m-m m-v n-v posn-v) lenS-v)))) (gcd-aux (matita-arithmetics-nat.S q-v) m-v n-v) (not-divides-to-gcd-aux q-v m-v n-v posn-v ndivnm-v)) (matita-arithmetics-primes.decidable-divides n-v m-v)) p-v

let-clause-1549 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (eqm0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> (x1106-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1106-v (matita-arithmetics-nat.minus x1106-v m-v)
let-clause-1549 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (eqm0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> λ (x1106-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1106-v (matita-arithmetics-nat.minus x1106-v X---v)) (matita-arithmetics-nat.minus-n-O x1106-v) m-v eqm0-v

let-clause-15491 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (x1106-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1106-v (matita-arithmetics-nat.minus x1106-v n-v)
let-clause-15491 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (x1106-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1106-v (matita-arithmetics-nat.minus x1106-v X---v)) (matita-arithmetics-nat.minus-n-O x1106-v) n-v eqn0-v

let-clause-1551 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> (x347-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times x347-v n-v)
let-clause-1551 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> λ (x347-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times x347-v X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times x347-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-O x347-v) n-v eqn0-v) n-v eqn0-v

eq-minus-gcd : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v))))
eq-minus-gcd = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v)) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v))))) (λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v)) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v))))) (λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) X---v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) (gcd-aux n-v m-v n-v) (gcd-aux m-v n-v m-v) X---v))))) (λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> eq-minus-gcd-aux n-v m-v n-v posn-v lenm-v (matita-arithmetics-nat.le-n n-v)) (λ (nlenm-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v))))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd-aux m-v n-v m-v))))) (λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)))) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (gcd-aux m-v n-v m-v))))) (λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v))) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (gcd-aux m-v n-v m-v))))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) -> matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (gcd-aux m-v n-v m-v)))) b-v (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v))) a-v (matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v a-v) X---v) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd-aux m-v n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (gcd-aux m-v n-v m-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (gcd-aux m-v n-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v a-v) (matita-arithmetics-nat.times n-v b-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v a-v) X---v) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) H-v (matita-arithmetics-nat.times m-v a-v) (matita-arithmetics-nat.commutative-times a-v m-v)) (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.commutative-times b-v n-v))) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.commutative-times a-v m-v))))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)) -> matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a0-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times a0-v n-v)) (gcd-aux m-v n-v m-v)))) b-v (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times b0-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b0-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v))) a-v (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.times b-v n-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v b-v) X---v) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd-aux m-v n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (gcd-aux m-v n-v m-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (gcd-aux m-v n-v m-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.times m-v a-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v b-v) X---v) (gcd-aux m-v n-v m-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v m-v)) (gcd-aux m-v n-v m-v)) H-v (matita-arithmetics-nat.times n-v b-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.times m-v a-v) (matita-arithmetics-nat.commutative-times a-v m-v))) (matita-arithmetics-nat.times a-v m-v) (matita-arithmetics-nat.commutative-times a-v m-v)) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v))))) X-clearme0-v) X-clearme-v) (eq-minus-gcd-aux m-v n-v m-v posm-v (matita-arithmetics-nat.transitive-le m-v (matita-arithmetics-nat.S m-v) n-v (matita-arithmetics-nat.le-n-Sn m-v) (matita-arithmetics-nat.not-le-to-lt n-v m-v nlenm-v)) (matita-arithmetics-nat.le-n m-v)))) (λ (eqm0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat m-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v m-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v))))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v)))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) (gcd n-v m-v))) matita-arithmetics-nat.O (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)) (gcd n-v m-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v)) (matita-arithmetics-nat.minus-n-O n-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus n-v X---v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S X---v) n-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus n-v X---v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus n-v X---v) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.times X---v m-v)) (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v X---v) (gcd n-v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (gcd n-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v n-v)) (gcd m-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd X---v n-v) n-v) (gcd-O-l n-v) m-v eqm0-v)) (gcd n-v m-v) (commutative-gcd n-v m-v)) (matita-arithmetics-nat.minus n-v m-v) (let-clause-1549 m-v n-v posn-v eqm0-v n-v)) (matita-arithmetics-nat.times m-v m-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times m-v X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-O m-v) m-v eqm0-v) m-v eqm0-v)) matita-arithmetics-nat.O eqm0-v) (matita-arithmetics-nat.plus m-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v n-v)) (matita-arithmetics-nat.plus-O-n n-v) m-v eqm0-v)) (matita-arithmetics-nat.plus n-v m-v) (matita-arithmetics-nat.commutative-plus n-v m-v)) (matita-arithmetics-nat.times m-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times X---v n-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) (matita-arithmetics-nat.times-O-n n-v) m-v eqm0-v) m-v eqm0-v)) (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.commutative-times n-v m-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.times-n-Sm n-v m-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S m-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S m-v) n-v)) matita-arithmetics-nat.O eqm0-v) (matita-arithmetics-nat.minus n-v m-v) (let-clause-1549 m-v n-v posn-v eqm0-v n-v)) matita-arithmetics-nat.O eqm0-v))))) matita-arithmetics-nat.O eqm0-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O m-v (matita-arithmetics-nat.le-O-n m-v))) (λ (eqn0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v))))) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v n-v)) (gcd n-v m-v)))) matita-arithmetics-nat.O (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times b-v m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) (gcd n-v m-v))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v)) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) (gcd n-v m-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus m-v matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) (gcd n-v m-v)) (matita-arithmetics-nat.minus-n-O m-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus m-v matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus m-v X---v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.S X---v) m-v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.S n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus m-v X---v) (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O n-v)) m-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus m-v (matita-arithmetics-nat.times X---v n-v)) m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus m-v X---v) m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v)) (matita-arithmetics-nat.minus m-v n-v) (let-clause-15491 m-v n-v eqn0-v m-v)) (matita-arithmetics-nat.times n-v n-v) (let-clause-1551 m-v n-v eqn0-v n-v)) matita-arithmetics-nat.O eqn0-v) (matita-arithmetics-nat.plus m-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.plus m-v X---v)) (matita-arithmetics-nat.plus-n-O m-v) n-v eqn0-v)) (matita-arithmetics-nat.times m-v n-v) (let-clause-1551 m-v n-v eqn0-v m-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.S n-v)) (matita-arithmetics-nat.times-n-Sm m-v n-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S n-v) m-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S n-v) m-v)) matita-arithmetics-nat.O eqn0-v) (matita-arithmetics-nat.minus m-v n-v) (let-clause-15491 m-v n-v eqn0-v m-v)) matita-arithmetics-nat.O eqn0-v) (gcd n-v m-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd X---v m-v) m-v) (gcd-O-l m-v) n-v eqn0-v)))))) matita-arithmetics-nat.O eqn0-v) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O n-v (matita-arithmetics-nat.le-O-n n-v))

let-clause-1545 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> (X-clearme-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O n-v) -> (q1-v : matita-arithmetics-nat.nat) -> (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q1-v)) -> (X-clearme0-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v) -> (q2-v : matita-arithmetics-nat.nat) -> (H2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q2-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O
let-clause-1545 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> λ (X-clearme-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O n-v) -> λ (q1-v : matita-arithmetics-nat.nat) -> λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q1-v)) -> λ (X-clearme0-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v) -> λ (q2-v : matita-arithmetics-nat.nat) -> λ (H2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q2-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q2-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O q2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) H2-v (matita-arithmetics-nat.times q2-v matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O q2-v)) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O q2-v)

gcd-O-to-eq-O : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O)
gcd-O-to-eq-O = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-primes.divides matita-arithmetics-nat.O n-v) (matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides matita-arithmetics-nat.O n-v) (matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v)) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O)) (λ (X-clearme-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O n-v) -> matita-arithmetics-primes.match-divides matita-arithmetics-nat.O n-v lzero (λ (X---v : matita-arithmetics-primes.divides matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O)) (λ (q1-v : matita-arithmetics-nat.nat) -> λ (H1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q1-v)) -> λ (X-clearme0-v : matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v) -> matita-arithmetics-primes.match-divides matita-arithmetics-nat.O m-v lzero (λ (X---v : matita-arithmetics-primes.divides matita-arithmetics-nat.O m-v) -> matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O)) (λ (q2-v : matita-arithmetics-nat.nat) -> λ (H2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times matita-arithmetics-nat.O q2-v)) -> matita-basics-logic.conj lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) matita-arithmetics-nat.O (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q2-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O q2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) H2-v (matita-arithmetics-nat.times q2-v matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O q2-v)) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O q2-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) matita-arithmetics-nat.O (let-clause-1545 m-v n-v H-v X-clearme-v q1-v H1-v X-clearme0-v q2-v H2-v)) n-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times X---v q1-v)) H1-v m-v (let-clause-1545 m-v n-v H-v X-clearme-v q1-v H1-v X-clearme0-v q2-v H2-v)) m-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times X---v q1-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O q1-v)) (matita-arithmetics-nat.times-O-n q1-v) m-v (let-clause-1545 m-v n-v H-v X-clearme-v q1-v H1-v X-clearme0-v q2-v H2-v)) m-v (let-clause-1545 m-v n-v H-v X-clearme-v q1-v H1-v X-clearme0-v q2-v H2-v))))) X-clearme0-v) X-clearme-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (gcd m-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) x-1-v) -> matita-basics-logic.And lzero lzero (matita-arithmetics-primes.divides x-1-v n-v) (matita-arithmetics-primes.divides x-1-v m-v)) (divides-gcd-nm m-v n-v) matita-arithmetics-nat.O H-v)

let-clause-1571 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v n-v
let-clause-1571 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) auto-v n-v auto'-v

let-clause-1572 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O
let-clause-1572 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) auto'-v m-v (let-clause-1571 m-v n-v posn-v H-v auto-v auto'-v)

lt-O-gcd : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd m-v n-v)
lt-O-gcd = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-nat.nat-case lzero (gcd m-v n-v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) matita-arithmetics-nat.O) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O matita-arithmetics-nat.O) posn-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v n-v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt m-v X---v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt m-v m-v) (matita-arithmetics-nat.lt X---v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt m-v m-v) (matita-arithmetics-nat.lt m-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt m-v m-v)) matita-arithmetics-nat.O (let-clause-1572 m-v n-v posn-v H-v auto-v auto'-v)) matita-arithmetics-nat.O (let-clause-1572 m-v n-v posn-v H-v auto-v auto'-v)) n-v (let-clause-1571 m-v n-v posn-v H-v auto-v auto'-v)) matita-arithmetics-nat.O (let-clause-1572 m-v n-v posn-v H-v auto-v auto'-v))) (gcd-O-to-eq-O m-v n-v H-v)) (λ (m0-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) (matita-arithmetics-nat.S m0-v)) -> matita-arithmetics-nat.lt-O-S m0-v)

gcd-n-n : (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v n-v) n-v
gcd-n-n = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd X---v X---v) X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O) (gcd matita-arithmetics-nat.O matita-arithmetics-nat.O) (gcd-O-l matita-arithmetics-nat.O)) (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.le-to-le-to-eq (gcd (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.S m-v) (matita-arithmetics-primes.divides-to-le (gcd (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.lt-O-S m-v) (divides-gcd-r (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v))) (matita-arithmetics-primes.divides-to-le (matita-arithmetics-nat.S m-v) (gcd (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v)) (lt-O-gcd (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.lt-O-S m-v)) (divides-d-gcd (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.S m-v) (matita-arithmetics-primes.divides-n-n (matita-arithmetics-nat.S m-v)) (matita-arithmetics-primes.divides-n-n (matita-arithmetics-nat.S m-v))))) n-v

gcd-1-to-lt-O : (i-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd i-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v
gcd-1-to-lt-O = λ (i-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd i-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O i-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O i-v)) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) (λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) -> auto-v) (λ (iO-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O i-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd i-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) gcd1-v (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd x-1-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-basics-logic.sym-not-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v (matita-arithmetics-nat.lt-to-not-eq (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v lt1n-v)) i-v iO-v))) (matita-arithmetics-nat.le-to-or-lt-eq matita-arithmetics-nat.O i-v (matita-arithmetics-nat.le-O-n i-v))

gcd-1-to-lt-n : (i-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> (X--1-v : matita-arithmetics-nat.le i-v n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd i-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt i-v n-v
gcd-1-to-lt-n = λ (i-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (lein-v : matita-arithmetics-nat.le i-v n-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd i-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-nat.lt i-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt i-v n-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v n-v)) -> matita-arithmetics-nat.lt i-v n-v) (λ (auto-v : matita-arithmetics-nat.lt i-v n-v) -> auto-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat i-v n-v) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.lt i-v n-v) lt1n-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v n-v) (matita-arithmetics-nat.lt i-v n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v X---v) (matita-arithmetics-nat.lt i-v n-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat i-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v i-v) (matita-arithmetics-nat.lt i-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt i-v i-v)) n-v auto-v) n-v auto-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (gcd i-v i-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd i-v X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) gcd1-v i-v auto-v) i-v (gcd-n-n i-v)))) (matita-arithmetics-nat.le-to-or-lt-eq i-v n-v lein-v)

gcd-n-times-nm : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-nat.times n-v m-v)) n-v
gcd-n-times-nm = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.nat-case lzero n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd X---v (matita-arithmetics-nat.times X---v m-v)) X---v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-nat.times X---v m-v)) matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v X---v) matita-arithmetics-nat.O) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) matita-arithmetics-nat.O auto-v) (gcd n-v n-v) (gcd-n-n n-v)) (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times X---v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v)) (matita-arithmetics-nat.times-O-n m-v) n-v auto-v) n-v auto-v)) matita-arithmetics-nat.O auto-v) matita-arithmetics-nat.O auto-v) (λ (l-v : matita-arithmetics-nat.nat) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S l-v)) -> matita-arithmetics-nat.le-to-le-to-eq (gcd (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (matita-arithmetics-nat.S l-v) (matita-arithmetics-primes.divides-to-le (gcd (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.lt-O-S l-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v) (matita-arithmetics-nat.S l-v)) (matita-arithmetics-nat.S l-v)) (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (matita-arithmetics-nat.S l-v)) (divides-gcd-r (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v) (matita-arithmetics-nat.S l-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v) (matita-arithmetics-nat.S l-v)) (matita-arithmetics-nat.S l-v)) (matita-arithmetics-primes.divides (gcd X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (matita-arithmetics-nat.S l-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v) (matita-arithmetics-nat.S l-v)) (matita-arithmetics-nat.S l-v)) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.times X---v m-v)) (matita-arithmetics-nat.S l-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.times X---v m-v) X---v) X---v) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.times n-v m-v)) X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-nat.times n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v n-v) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.times n-v m-v)) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.times n-v m-v)) n-v)) (gcd (matita-arithmetics-nat.times n-v m-v) n-v) (commutative-gcd (matita-arithmetics-nat.times n-v m-v) n-v)) (matita-arithmetics-nat.S l-v) eqn-v) (matita-arithmetics-nat.S l-v) eqn-v) (matita-arithmetics-nat.S l-v) eqn-v))) (matita-arithmetics-primes.divides-to-le (matita-arithmetics-nat.S l-v) (gcd (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (lt-O-gcd (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O (matita-arithmetics-nat.S l-v) matita-arithmetics-nat.O m-v (matita-arithmetics-nat.lt-O-S l-v) posm-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O matita-arithmetics-nat.O))) (divides-d-gcd (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v) (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.S l-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-primes.divides (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v)) (matita-arithmetics-primes.divides-times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v m-v (matita-arithmetics-primes.divides-n-n n-v) (matita-arithmetics-primes.divides-SO-n m-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-primes.divides X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.times X---v m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.times n-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.times n-v m-v))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 n-v)) (matita-arithmetics-nat.S l-v) eqn-v) (matita-arithmetics-nat.S l-v) eqn-v)) (matita-arithmetics-primes.divides-n-n (matita-arithmetics-nat.S l-v)))))

le-gcd-times : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> matita-arithmetics-nat.le (gcd m-v n-v) (gcd m-v (matita-arithmetics-nat.times n-v p-v))
le-gcd-times = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> λ (posp-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> matita-arithmetics-nat.nat-case lzero n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.le (gcd m-v X---v) (gcd m-v (matita-arithmetics-nat.times X---v p-v))) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v matita-arithmetics-nat.O) -> matita-arithmetics-nat.le-n (gcd m-v matita-arithmetics-nat.O)) (λ (l-v : matita-arithmetics-nat.nat) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S l-v)) -> matita-arithmetics-primes.divides-to-le (gcd m-v (matita-arithmetics-nat.S l-v)) (gcd m-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v)) (lt-O-gcd m-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O (matita-arithmetics-nat.S l-v) matita-arithmetics-nat.O p-v (matita-arithmetics-nat.lt-O-S l-v) posp-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O matita-arithmetics-nat.O))) (divides-d-gcd (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v) m-v (gcd m-v (matita-arithmetics-nat.S l-v)) (matita-arithmetics-primes.transitive-divides (gcd m-v (matita-arithmetics-nat.S l-v)) (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v) (divides-gcd-r m-v (matita-arithmetics-nat.S l-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-primes.divides (matita-arithmetics-nat.S l-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v)) (matita-arithmetics-primes.divides-times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v p-v (matita-arithmetics-primes.divides-n-n n-v) (matita-arithmetics-primes.divides-SO-n p-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-primes.divides X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S l-v) p-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.times X---v p-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.times n-v p-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides n-v (matita-arithmetics-nat.times n-v p-v))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 n-v)) (matita-arithmetics-nat.S l-v) eqn-v) (matita-arithmetics-nat.S l-v) eqn-v))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.S l-v) m-v) m-v) (matita-arithmetics-primes.divides (gcd m-v (matita-arithmetics-nat.S l-v)) m-v) (divides-gcd-r (matita-arithmetics-nat.S l-v) m-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd X---v m-v) m-v) (matita-arithmetics-primes.divides (gcd m-v X---v) m-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v m-v) (matita-arithmetics-primes.divides (gcd m-v n-v) m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd m-v n-v) m-v)) (gcd n-v m-v) (commutative-gcd n-v m-v)) (matita-arithmetics-nat.S l-v) eqn-v))))

gcd-times-SO-to-gcd-SO : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (p-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
gcd-times-SO-to-gcd-SO = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (p-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posp-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v (matita-arithmetics-nat.times n-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-nat.le-to-le-to-eq (gcd m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (gcd m-v (matita-arithmetics-nat.times n-v p-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd m-v (matita-arithmetics-nat.times n-v p-v)) x-1-v) -> matita-arithmetics-nat.le (gcd m-v n-v) x-1-v) (le-gcd-times m-v n-v p-v posp-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) gcd1-v) (lt-O-gcd m-v n-v posn-v)

eq-gcd-SO-to-not-divides : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)
eq-gcd-SO-to-not-divides = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.not-to-not lzero (matita-arithmetics-primes.divides n-v m-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) n-v) (λ (divnm-v : matita-arithmetics-primes.divides n-v m-v) -> divides-to-gcd m-v n-v (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O n-v lt1n-v) divnm-v) (matita-arithmetics-nat.lt-to-not-eq (gcd n-v m-v) n-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.lt (gcd n-v m-v) n-v) lt1n-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v n-v) (matita-arithmetics-nat.lt (gcd n-v m-v) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (gcd n-v m-v) n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O) gcd1-v)))

gcd-SO-n : (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
gcd-SO-n = λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.le-to-le-to-eq (gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-primes.divides-to-le (gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (divides-gcd-r n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-primes.divides X---v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (commutative-gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O))) -> matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) x-v) (lt-O-gcd n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O)) (gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (commutative-gcd (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v))

divides-gcd-mod : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-primes.divides (gcd m-v n-v) (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v))
divides-gcd-mod = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> divides-d-gcd (matita-arithmetics-div-and-mod.mod m-v n-v) n-v (gcd m-v n-v) (divides-mod (gcd m-v n-v) m-v n-v posn-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides (gcd m-v n-v) m-v) (divides-gcd-r n-v m-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v m-v) (matita-arithmetics-primes.divides (gcd m-v n-v) m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd m-v n-v) m-v)) (gcd n-v m-v) (commutative-gcd n-v m-v))) (divides-gcd-r m-v n-v)) (divides-gcd-r m-v n-v)

divides-mod-gcd : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (gcd m-v n-v)
divides-mod-gcd = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> divides-d-gcd n-v m-v (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (divides-gcd-l n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (divides-mod-to-divides (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) m-v n-v posn-v (divides-gcd-r n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd (matita-arithmetics-div-and-mod.mod m-v n-v) n-v) n-v) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v) (divides-gcd-r (matita-arithmetics-div-and-mod.mod m-v n-v) n-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v n-v) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) n-v)) (gcd (matita-arithmetics-div-and-mod.mod m-v n-v) n-v) (commutative-gcd (matita-arithmetics-div-and-mod.mod m-v n-v) n-v))))

gcd-mod : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (gcd m-v n-v)
gcd-mod = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-primes.antisymmetric-divides (gcd n-v (matita-arithmetics-div-and-mod.mod m-v n-v)) (gcd m-v n-v) (divides-mod-gcd m-v n-v posn-v) (divides-gcd-mod m-v n-v posn-v)

prime-to-gcd-1 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.prime n-v) -> (X--1-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
prime-to-gcd-1 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : matita-arithmetics-primes.prime n-v) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m1-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides m1-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m1-v n-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) ((m0-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides m0-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m0-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m0-v n-v)) -> (X--1-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (lt1n-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (primen-v : (m0-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides m0-v n-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m0-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m0-v n-v) -> λ (ndivnm-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides n-v m-v)) -> matita-arithmetics-nat.le-to-le-to-eq (gcd n-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.not-lt-to-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd n-v m-v) (matita-basics-logic.not-to-not lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd n-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) n-v) (primen-v (gcd n-v m-v) (divides-gcd-l n-v m-v)) (matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) n-v) (matita-arithmetics-primes.divides n-v m-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd n-v m-v) n-v) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd n-v m-v) m-v) (matita-arithmetics-primes.divides n-v m-v) (divides-gcd-r n-v m-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v m-v) (matita-arithmetics-primes.divides n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides n-v m-v)) (gcd n-v m-v) auto-v)) ndivnm-v))) (lt-O-gcd n-v m-v (matita-arithmetics-nat.not-eq-to-le-to-lt matita-arithmetics-nat.O m-v (matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) (matita-arithmetics-primes.divides n-v m-v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides n-v matita-arithmetics-nat.O) (matita-arithmetics-primes.divides n-v m-v) (matita-arithmetics-primes.divides-n-O n-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides n-v X---v) (matita-arithmetics-primes.divides n-v m-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides n-v m-v)) matita-arithmetics-nat.O auto-v)) ndivnm-v) (matita-arithmetics-nat.le-O-n m-v)))) X-clearme-v

divides-times-to-divides : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.prime p-v) -> (X--1-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times n-v m-v)) -> matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-arithmetics-primes.divides p-v m-v)
divides-times-to-divides = λ (p-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (primp-v : matita-arithmetics-primes.prime p-v) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times n-v m-v)) -> matita-arithmetics-primes.match-divides p-v (matita-arithmetics-nat.times n-v m-v) lzero (λ (X---v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times n-v m-v)) -> matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-arithmetics-primes.divides p-v m-v)) (λ (c-v : matita-arithmetics-nat.nat) -> λ (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-nat.times p-v c-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides p-v n-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-basics-logic.Not lzero (matita-arithmetics-primes.divides p-v n-v))) -> matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-arithmetics-primes.divides p-v m-v)) (λ (auto-v : matita-arithmetics-primes.divides p-v n-v) -> matita-basics-logic.or-introl lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-arithmetics-primes.divides p-v m-v) auto-v) (λ (ndivpn-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides p-v n-v)) -> matita-basics-logic.or-intror lzero lzero (matita-arithmetics-primes.divides p-v n-v) (matita-arithmetics-primes.divides p-v m-v) (matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O))))) -> matita-arithmetics-primes.divides p-v m-v) (λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)))) -> matita-arithmetics-primes.divides p-v m-v) (λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) -> matita-arithmetics-primes.divides p-v m-v) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-primes.quotient p-v m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v m-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) c-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) c-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v p-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v p-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times x-v c-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times p-v c-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times p-v c-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v x-1-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v)) x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times p-v b-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times p-v b-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-1-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times p-v b-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v a-v) (matita-arithmetics-nat.times p-v b-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times m-v X---v)) (matita-arithmetics-nat.times-n-1 m-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v a-v) (matita-arithmetics-nat.times p-v b-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v p-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v a-v) X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times b-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) H-v (matita-arithmetics-nat.times n-v a-v) (matita-arithmetics-nat.commutative-times a-v n-v)) (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.commutative-times b-v p-v)))) (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.commutative-times a-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v))) (matita-arithmetics-nat.distributive-times-minus m-v (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times p-v b-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.times p-v b-v) m-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) (matita-arithmetics-nat.commutative-times m-v (matita-arithmetics-nat.times a-v n-v))) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.associative-times p-v b-v m-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.associative-times a-v n-v m-v)) (matita-arithmetics-nat.times p-v c-v) nm-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v p-v) c-v) (matita-arithmetics-nat.associative-times a-v p-v c-v)) (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.commutative-times p-v a-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v)) (matita-arithmetics-nat.associative-times p-v a-v c-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v m-v))) (matita-arithmetics-nat.distributive-times-minus p-v (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v m-v)))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-primes.quotient p-v m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v c-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) c-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) c-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v p-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v p-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) (matita-arithmetics-nat.times x-1-v c-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times p-v c-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times p-v c-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) (matita-arithmetics-nat.times a-v x-1-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v)) x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.times a-v n-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.times a-v n-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-1-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v b-v) X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.times n-v a-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times m-v X---v)) (matita-arithmetics-nat.times-n-1 m-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.times n-v a-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v b-v) X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v p-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) H-v (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.commutative-times b-v p-v)) (matita-arithmetics-nat.times n-v a-v) (matita-arithmetics-nat.commutative-times a-v n-v)))) (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.commutative-times a-v n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times p-v b-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v n-v))) (matita-arithmetics-nat.distributive-times-minus m-v (matita-arithmetics-nat.times p-v b-v) (matita-arithmetics-nat.times a-v n-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v n-v) m-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.times a-v n-v) m-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v b-v) m-v) (matita-arithmetics-nat.commutative-times m-v (matita-arithmetics-nat.times p-v b-v))) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.associative-times a-v n-v m-v)) (matita-arithmetics-nat.times p-v c-v) nm-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times a-v p-v) c-v) (matita-arithmetics-nat.associative-times a-v p-v c-v)) (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.commutative-times a-v p-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v c-v)) (matita-arithmetics-nat.associative-times p-v a-v c-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.associative-times p-v b-v m-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v c-v))) (matita-arithmetics-nat.distributive-times-minus p-v (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v c-v)))) X-clearme1-v) X-clearme0-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (gcd p-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) x-1-v) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) x-1-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) x-1-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (gcd n-v p-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (gcd n-v p-v)) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times b-v p-v)) x-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v p-v) (matita-arithmetics-nat.times a-v n-v)) x-v)))) (eq-minus-gcd p-v n-v) (gcd p-v n-v) (commutative-gcd p-v n-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (prime-to-gcd-1 p-v n-v primp-v ndivpn-v)))) (matita-arithmetics-primes.decidable-divides p-v n-v)) X-clearme-v

divides-exp-to-divides : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.prime p-v) -> (X--1-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp n-v m-v)) -> matita-arithmetics-primes.divides p-v n-v
divides-exp-to-divides = λ (p-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (primep-v : matita-arithmetics-primes.prime p-v) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp n-v X-x-365-v)) -> matita-arithmetics-primes.divides p-v n-v) (λ (auto-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-primes.transitive-divides p-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v auto-v (matita-arithmetics-primes.divides-SO-n n-v)) (λ (l-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (X---v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp n-v l-v)) -> matita-arithmetics-primes.divides p-v n-v) -> λ (H-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times (matita-arithmetics-exp.exp n-v l-v) n-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp n-v l-v)) (matita-arithmetics-primes.divides p-v n-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp n-v l-v)) (matita-arithmetics-primes.divides p-v n-v)) -> matita-arithmetics-primes.divides p-v n-v) (λ (auto-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp n-v l-v)) -> Hind-v auto-v) (λ (auto-v : matita-arithmetics-primes.divides p-v n-v) -> auto-v) (divides-times-to-divides p-v (matita-arithmetics-exp.exp n-v l-v) n-v primep-v H-v)) m-v

divides-exp-to-eq : (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.prime p-v) -> (X--1-v : matita-arithmetics-primes.prime q-v) -> (X--2-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp q-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat p-v q-v
divides-exp-to-eq = λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (H-v : matita-arithmetics-primes.prime p-v) -> λ (X-clearme-v : matita-arithmetics-primes.prime q-v) -> matita-basics-logic.match-And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) q-v) ((m1-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides m1-v q-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m1-v q-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) q-v) ((m0-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides m0-v q-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m0-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m0-v q-v)) -> (X--1-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp q-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat p-v q-v) (λ (lt1q-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) q-v) -> λ (primeq-v : (m0-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.divides m0-v q-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) m0-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m0-v q-v) -> λ (H0-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-exp.exp q-v m-v)) -> primeq-v p-v (divides-exp-to-divides p-v q-v m-v H-v H0-v) (matita-arithmetics-primes.prime-to-lt-SO p-v H-v)) X-clearme-v

let-clause-1595 : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (primepn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (primepm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (lt1gcd-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd p-v (matita-arithmetics-nat.times n-v m-v))) -> (H-v : matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) (gcd p-v m-v)
let-clause-1595 = λ (p-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (primepn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (primepm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (lt1gcd-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd p-v (matita-arithmetics-nat.times n-v m-v))) -> λ (H-v : matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) m-v) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) X---v) primepn-v (gcd p-v m-v) primepm-v

eq-gcd-times-1 : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--3-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
eq-gcd-times-1 = λ (p-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (primepn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (primepm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-nat.le-to-le-to-eq (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.not-lt-to-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (matita-basics-logic.nmk lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (λ (lt1gcd-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S matita-arithmetics-nat.O) (gcd p-v (matita-arithmetics-nat.times n-v m-v))) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) n-v) (matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) m-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) n-v) (matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) m-v)) -> matita-basics-logic.False lzero) (λ (H-v : matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) n-v) -> matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (gcd p-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) x-1-v) -> matita-arithmetics-nat.le (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) x-1-v) (matita-arithmetics-primes.divides-to-le (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (gcd p-v n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd p-v n-v)) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd p-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O X---v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd p-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd p-v n-v))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd p-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) primepm-v (gcd p-v n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) X---v) primepn-v (gcd p-v m-v) primepm-v)))) (divides-d-gcd n-v p-v (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) H-v (matita-arithmetics-primes.transitive-divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v (matita-arithmetics-primes.divides-smallest-factor-n (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (lt-O-gcd p-v (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O n-v matita-arithmetics-nat.O m-v posn-v posm-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O matita-arithmetics-nat.O)))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.times n-v m-v) p-v) p-v) (matita-arithmetics-primes.divides (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v) (divides-gcd-r (matita-arithmetics-nat.times n-v m-v) p-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v p-v) (matita-arithmetics-primes.divides (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v)) (gcd (matita-arithmetics-nat.times n-v m-v) p-v) (commutative-gcd (matita-arithmetics-nat.times n-v m-v) p-v)))))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) primepn-v) (matita-arithmetics-nat.lt-to-not-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (matita-arithmetics-primes.lt-SO-smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v)) lt1gcd-v))) (λ (H-v : matita-arithmetics-primes.divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) m-v) -> matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (gcd p-v m-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) x-1-v) -> matita-arithmetics-nat.le (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) x-1-v) (matita-arithmetics-primes.divides-to-le (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (gcd p-v m-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd p-v m-v)) (matita-arithmetics-nat.lt-O-S matita-arithmetics-nat.O) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd p-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd p-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O X---v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd p-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (gcd p-v n-v))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (gcd p-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) primepm-v (gcd p-v n-v) (let-clause-1595 p-v n-v m-v posn-v posm-v primepn-v primepm-v lt1gcd-v H-v))) (gcd p-v m-v) (let-clause-1595 p-v n-v m-v posn-v posm-v primepn-v primepm-v lt1gcd-v H-v))) (divides-d-gcd m-v p-v (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) H-v (matita-arithmetics-primes.transitive-divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v (matita-arithmetics-primes.divides-smallest-factor-n (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (lt-O-gcd p-v (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O n-v matita-arithmetics-nat.O m-v posn-v posm-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O matita-arithmetics-nat.O)))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-primes.divides (gcd (matita-arithmetics-nat.times n-v m-v) p-v) p-v) (matita-arithmetics-primes.divides (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v) (divides-gcd-r (matita-arithmetics-nat.times n-v m-v) p-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides X---v p-v) (matita-arithmetics-primes.divides (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-primes.divides (gcd p-v (matita-arithmetics-nat.times n-v m-v)) p-v)) (gcd (matita-arithmetics-nat.times n-v m-v) p-v) (commutative-gcd (matita-arithmetics-nat.times n-v m-v) p-v)))))) (matita-arithmetics-nat.S matita-arithmetics-nat.O) primepm-v) (matita-arithmetics-nat.lt-to-not-le (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (matita-arithmetics-primes.lt-SO-smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v)) lt1gcd-v))) (divides-times-to-divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) n-v m-v (matita-arithmetics-primes.prime-smallest-factor-n (gcd p-v (matita-arithmetics-nat.times n-v m-v)) lt1gcd-v) (matita-arithmetics-primes.transitive-divides (matita-arithmetics-primes.smallest-factor (gcd p-v (matita-arithmetics-nat.times n-v m-v))) (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.times n-v m-v) (matita-arithmetics-primes.divides-smallest-factor-n (gcd p-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt-S-to-lt matita-arithmetics-nat.O (gcd p-v (matita-arithmetics-nat.times n-v m-v)) lt1gcd-v)) (divides-gcd-r p-v (matita-arithmetics-nat.times n-v m-v))))))) (lt-O-gcd p-v (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O n-v matita-arithmetics-nat.O m-v posn-v posm-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times-n-O matita-arithmetics-nat.O)))

let-clause-1561 : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> (c-v : matita-arithmetics-nat.nat) -> (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> (a-v : matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> (b-v : matita-arithmetics-nat.nat) -> (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) -> (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
let-clause-1561 = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) -> λ (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v p-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) H0-v (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.commutative-times a-v p-v)) (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.commutative-times b-v m-v)

let-clause-1617 : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> (c-v : matita-arithmetics-nat.nat) -> (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> (a-v : matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> (b-v : matita-arithmetics-nat.nat) -> (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) -> (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v))
let-clause-1617 = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) -> λ (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) X---v) gcd1-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v)) (let-clause-1561 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v)

let-clause-15611 : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> (c-v : matita-arithmetics-nat.nat) -> (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> (a-v : matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> (b-v : matita-arithmetics-nat.nat) -> (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)) -> (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
let-clause-15611 = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)) -> λ (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v p-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus X---v (matita-arithmetics-nat.times a-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) H0-v (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.commutative-times b-v m-v)) (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.commutative-times a-v p-v)

let-clause-16171 : (p-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> (c-v : matita-arithmetics-nat.nat) -> (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> (a-v : matita-arithmetics-nat.nat) -> (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> (b-v : matita-arithmetics-nat.nat) -> (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)) -> (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v))
let-clause-16171 = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)) -> λ (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) X---v) gcd1-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v)) (let-clause-15611 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v)

gcd-1-to-divides-times-to-divides : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--2-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times n-v m-v)) -> matita-arithmetics-primes.divides p-v m-v
gcd-1-to-divides-times-to-divides = λ (p-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O p-v) -> λ (gcd1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (gcd p-v m-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> λ (X-clearme-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> matita-arithmetics-primes.match-divides p-v (matita-arithmetics-nat.times m-v n-v) lzero (λ (X---v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times m-v n-v)) -> matita-arithmetics-primes.divides p-v n-v) (λ (c-v : matita-arithmetics-nat.nat) -> λ (nm-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.times p-v c-v)) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (a-v : matita-arithmetics-nat.nat) -> matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))))) -> matita-arithmetics-primes.divides p-v n-v) (λ (a-v : matita-arithmetics-nat.nat) -> λ (X-clearme0-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) lzero (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)))) -> matita-arithmetics-primes.divides p-v n-v) (λ (b-v : matita-arithmetics-nat.nat) -> λ (X-clearme1-v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v))) -> matita-arithmetics-primes.divides p-v n-v) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (gcd p-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) x-v) -> matita-arithmetics-primes.divides p-v n-v) (λ (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v p-v) (matita-arithmetics-nat.times b-v m-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-primes.quotient p-v n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times c-v b-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v c-v) b-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v c-v) b-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) (matita-arithmetics-nat.times x-1-v b-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) (matita-arithmetics-nat.times x-v b-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) b-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v b-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v b-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v)) x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (gcd p-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times n-v X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.times n-v (gcd p-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times n-v X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times n-v X---v)) (matita-arithmetics-nat.times-n-1 n-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v)) (let-clause-1561 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v)) (gcd p-v m-v) (let-clause-1617 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v)) (let-clause-1617 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v b-v))) (matita-arithmetics-nat.distributive-times-minus n-v (matita-arithmetics-nat.times p-v a-v) (matita-arithmetics-nat.times m-v b-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) b-v) (matita-arithmetics-nat.associative-times n-v m-v b-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.times p-v a-v) n-v)) (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.commutative-times m-v n-v)) (matita-arithmetics-nat.times p-v c-v) nm-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.associative-times p-v c-v b-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.associative-times p-v a-v n-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times c-v b-v))) (matita-arithmetics-nat.distributive-times-minus p-v (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.times c-v b-v)))) (gcd p-v m-v) gcd1-v H-v) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (gcd p-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) x-v) -> matita-arithmetics-primes.divides p-v n-v) (λ (H0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times b-v m-v) (matita-arithmetics-nat.times a-v p-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) -> matita-arithmetics-primes.quotient p-v n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.times a-v n-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v c-v) b-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v c-v) b-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus x-1-v (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v c-v) b-v) x-1-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times x-1-v b-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v m-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times x-v b-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) b-v) x-1-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v b-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v b-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.minus x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v)))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v x-1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (gcd p-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times n-v X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.times n-v (gcd p-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times n-v X---v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times n-v X---v)) (matita-arithmetics-nat.times-n-1 n-v) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v)) (let-clause-15611 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v)) (gcd p-v m-v) (let-clause-16171 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v)) (let-clause-16171 p-v m-v n-v posn-v gcd1-v X-clearme-v c-v nm-v a-v X-clearme0-v b-v X-clearme1-v H-v H0-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v b-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times p-v a-v))) (matita-arithmetics-nat.distributive-times-minus n-v (matita-arithmetics-nat.times m-v b-v) (matita-arithmetics-nat.times p-v a-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.times n-v m-v) b-v) (matita-arithmetics-nat.associative-times n-v m-v b-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v a-v) n-v) (matita-arithmetics-nat.commutative-times n-v (matita-arithmetics-nat.times p-v a-v))) (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.commutative-times m-v n-v)) (matita-arithmetics-nat.times p-v c-v) nm-v) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.associative-times p-v a-v n-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.associative-times p-v c-v b-v)) (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.minus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.times a-v n-v))) (matita-arithmetics-nat.distributive-times-minus p-v (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.times a-v n-v)))) (gcd p-v m-v) gcd1-v H-v) X-clearme1-v) X-clearme0-v) (eq-minus-gcd m-v p-v)) X-clearme-v

divides-to-divides-times : (p-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-primes.prime p-v) -> (X--1-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides p-v q-v)) -> (X--2-v : matita-arithmetics-primes.divides p-v n-v) -> (X--3-v : matita-arithmetics-primes.divides q-v n-v) -> matita-arithmetics-primes.divides (matita-arithmetics-nat.times p-v q-v) n-v
divides-to-divides-times = λ (p-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (primep-v : matita-arithmetics-primes.prime p-v) -> λ (notdivpq-v : matita-basics-logic.Not lzero (matita-arithmetics-primes.divides p-v q-v)) -> λ (divpn-v : matita-arithmetics-primes.divides p-v n-v) -> λ (X-clearme-v : matita-arithmetics-primes.divides q-v n-v) -> matita-arithmetics-primes.match-divides q-v n-v lzero (λ (X---v : matita-arithmetics-primes.divides q-v n-v) -> matita-arithmetics-primes.divides (matita-arithmetics-nat.times p-v q-v) n-v) (λ (b-v : matita-arithmetics-nat.nat) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.times q-v b-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v b-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times q-v b-v)) -> (X--1-v : matita-arithmetics-primes.divides p-v x-v) -> matita-arithmetics-primes.divides (matita-arithmetics-nat.times p-v q-v) x-v) (λ (divpn0-v : matita-arithmetics-primes.divides p-v (matita-arithmetics-nat.times q-v b-v)) -> matita-basics-logic.match-Or lzero lzero (matita-arithmetics-primes.divides p-v q-v) (matita-arithmetics-primes.divides p-v b-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-arithmetics-primes.divides p-v q-v) (matita-arithmetics-primes.divides p-v b-v)) -> matita-arithmetics-primes.divides (matita-arithmetics-nat.times p-v q-v) (matita-arithmetics-nat.times q-v b-v)) (λ (H-v : matita-arithmetics-primes.divides p-v q-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-primes.divides (matita-arithmetics-nat.times p-v q-v) (matita-arithmetics-nat.times q-v b-v)) (matita-basics-logic.absurd lzero (matita-arithmetics-primes.divides p-v q-v) H-v notdivpq-v)) (λ (H-v : matita-arithmetics-primes.divides p-v b-v) -> matita-arithmetics-primes.match-divides p-v b-v lzero (λ (X---v : matita-arithmetics-primes.divides p-v b-v) -> matita-arithmetics-primes.divides (matita-arithmetics-nat.times p-v q-v) (matita-arithmetics-nat.times q-v b-v)) (λ (c-v : matita-arithmetics-nat.nat) -> λ (eqb-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat b-v (matita-arithmetics-nat.times p-v c-v)) -> matita-arithmetics-primes.quotient (matita-arithmetics-nat.times p-v q-v) (matita-arithmetics-nat.times q-v b-v) c-v (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v c-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times p-v c-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v x-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times q-v p-v) c-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.times q-v p-v) c-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times X---v c-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.times p-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v c-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v X---v) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.times p-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q-v c-v)) X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times c-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q-v c-v)) X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v c-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q-v c-v)) (matita-arithmetics-nat.times p-v X---v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times p-v (matita-arithmetics-nat.times q-v c-v))) (matita-arithmetics-nat.times c-v q-v) (matita-arithmetics-nat.commutative-times c-v q-v)) (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.times p-v q-v)) (matita-arithmetics-nat.times-times c-v p-v q-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-arithmetics-nat.times c-v q-v) (matita-arithmetics-nat.commutative-times c-v q-v)) (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.times p-v q-v)) (matita-arithmetics-nat.times-times c-v p-v q-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.times p-v q-v) c-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.times p-v q-v) c-v)) (matita-arithmetics-nat.times q-v p-v) (matita-arithmetics-nat.commutative-times q-v p-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.times p-v c-v)) (matita-arithmetics-nat.associative-times q-v p-v c-v)) b-v eqb-v)) H-v) (divides-times-to-divides p-v q-v b-v primep-v divpn0-v)) n-v eqn-v divpn-v) X-clearme-v

