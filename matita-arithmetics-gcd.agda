open import Agda.Primitive
open import matita-basics-bool
open import matita-arithmetics-div-and-mod
open import matita-arithmetics-exp
open import matita-basics-logic
open import matita-arithmetics-primes
open import matita-arithmetics-nat


gcd-aux : (X-p-v : nat) -> (X-m-v : nat) -> (X-n-v : nat) -> nat
gcd-aux O m n = m
gcd-aux (S q) m n = match-bool lzero (λ (X---v : bool) -> nat) n (gcd-aux q n (mod m n)) (dividesb n m)


gcd : (X-- : nat) -> (X--1 : nat) -> nat
gcd = λ (n : nat) -> λ (m : nat) -> match-bool lzero (λ (X-- : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) (leb n m)

commutative-gcd : (n : nat) -> (m : nat) -> eq lzero nat (gcd n m) (gcd m n)
commutative-gcd = λ (n : nat) -> λ (m : nat) -> leb-elim lzero n m (λ (X-- : bool) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) X--) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m n m) (gcd-aux n m n) (leb m n))) (λ (lenm : le n m) -> match-Or lzero lzero (lt n m) (eq lzero nat n m) lzero (λ (X-- : Or lzero lzero (lt n m) (eq lzero nat n m)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) true) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m n m) (gcd-aux n m n) (leb m n))) (λ (ltnm : lt n m) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) true) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m n m) (gcd-aux n m n) x)) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) true)) (leb m n) (not-le-to-leb-false m n (lt-to-not-le n m ltnm))) (λ (eqnm : eq lzero nat n m) -> eq-ind-r lzero lzero nat m (λ (x : nat) -> λ (X-- : eq lzero nat x m) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux x m x) (gcd-aux m x m) true) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m x m) (gcd-aux x m x) (leb m x))) (match-bool lzero (λ (X-- : bool) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m m m) (gcd-aux m m m) true) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m m m) (gcd-aux m m m) X--)) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m m m) (gcd-aux m m m) true)) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m m m) (gcd-aux m m m) true)) (leb m m)) n eqnm) (le-to-or-lt-eq n m lenm)) (λ (notlenm : Not lzero (le n m)) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) false) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux m n m) (gcd-aux n m n) x)) (refl lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) false)) (leb m n) (le-to-leb-true m n (transitive-le m (S m) n (le-n-Sn m) (not-le-to-lt n m notlenm))))

gcd-O-l : (m : nat) -> eq lzero nat (gcd O m) m
gcd-O-l = λ (m : nat) -> refl lzero nat (gcd O m)

divides-mod : (p : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : divides p m) -> (X--2 : divides p n) -> divides p (mod m n)
divides-mod = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (X-clearme : divides p m) -> match-divides p m lzero (λ (X-- : divides p m) -> (X--1 : divides p n) -> divides p (mod m n)) (λ (qm : nat) -> λ (eqm : eq lzero nat m (times p qm)) -> λ (X-clearme0 : divides p n) -> match-divides p n lzero (λ (X-- : divides p n) -> divides p (mod m n)) (λ (qn : nat) -> λ (eqn : eq lzero nat n (times p qn)) -> quotient p (mod m n) (minus qm (times qn (div m n))) (eq-ind-r lzero lzero nat (minus (times p qm) (times p (times qn (div m n)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times p qm) (times p (times qn (div m n))))) -> eq lzero nat (mod m n) x) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> eq lzero nat (mod m n) (minus x-1 (times p (times qn (div m n))))) (eq-ind lzero lzero nat (times (times p qn) (div m n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p qn) (div m n)) x-1) -> eq lzero nat (mod m n) (minus m x-1)) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> eq lzero nat (mod m n) (minus m (times x-1 (div m n)))) (sym-eq lzero nat (minus m (times n (div m n))) (mod m n) (plus-to-minus m (times n (div m n)) (mod m n) (rewrite-r lzero lzero nat (plus (mod m n) (times n (div m n))) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) (plus (mod m n) (times n (div m n))) (rewrite-l lzero lzero nat (plus (times n (div m n)) (mod m n)) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-l lzero lzero nat (times (div m n) n) (λ (X-- : nat) -> eq lzero nat m (plus X-- (mod m n))) (div-mod m n) (times n (div m n)) (commutative-times (div m n) n)) (plus (mod m n) (times n (div m n))) (commutative-plus (times n (div m n)) (mod m n)))) (plus (times n (div m n)) (mod m n)) (commutative-plus (times n (div m n)) (mod m n))))) (times p qn) eqn) (times p (times qn (div m n))) (associative-times p qn (div m n))) (times p qm) eqm) (times p (minus qm (times qn (div m n)))) (distributive-times-minus p qm (times qn (div m n))))) X-clearme0) X-clearme

divides-mod-to-divides : (p : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : divides p (mod m n)) -> (X--2 : divides p n) -> divides p m
divides-mod-to-divides = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (X-clearme : divides p (mod m n)) -> match-divides p (mod m n) lzero (λ (X-- : divides p (mod m n)) -> (X--1 : divides p n) -> divides p m) (λ (q1 : nat) -> λ (eq1 : eq lzero nat (mod m n) (times p q1)) -> λ (X-clearme0 : divides p n) -> match-divides p n lzero (λ (X-- : divides p n) -> divides p m) (λ (q2 : nat) -> λ (eq2 : eq lzero nat n (times p q2)) -> quotient p m (plus (times q2 (div m n)) q1) (eq-ind-r lzero lzero nat (plus (times p (times q2 (div m n))) (times p q1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times p (times q2 (div m n))) (times p q1))) -> eq lzero nat m x) (eq-ind lzero lzero nat (mod m n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (mod m n) x-1) -> eq lzero nat m (plus (times p (times q2 (div m n))) x-1)) (eq-ind lzero lzero nat (times (times p q2) (div m n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p q2) (div m n)) x-1) -> eq lzero nat m (plus x-1 (mod m n))) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> eq lzero nat m (plus (times x-1 (div m n)) (mod m n))) (rewrite-r lzero lzero nat (plus (mod m n) (times n (div m n))) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) (plus (mod m n) (times n (div m n))) (rewrite-l lzero lzero nat (plus (times n (div m n)) (mod m n)) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-l lzero lzero nat (times (div m n) n) (λ (X-- : nat) -> eq lzero nat m (plus X-- (mod m n))) (div-mod m n) (times n (div m n)) (commutative-times (div m n) n)) (plus (mod m n) (times n (div m n))) (commutative-plus (times n (div m n)) (mod m n)))) (plus (times n (div m n)) (mod m n)) (commutative-plus (times n (div m n)) (mod m n))) (times p q2) eq2) (times p (times q2 (div m n))) (associative-times p q2 (div m n))) (times p q1) eq1) (times p (plus (times q2 (div m n)) q1)) (distributive-times-plus p (times q2 (div m n)) q1))) X-clearme0) X-clearme

divides-to-gcd-aux : (p : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O p) -> (X--1 : lt O n) -> (X--2 : divides n m) -> eq lzero nat (gcd-aux p m n) n
divides-to-gcd-aux = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posp : lt O p) -> lt-O-n-elim lzero p posp (λ (X-- : nat) -> (X--1 : lt O n) -> (X--2 : divides n m) -> eq lzero nat (gcd-aux X-- m n) n) (λ (l : nat) -> λ (posn : lt O n) -> λ (divnm : divides n m) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) n (gcd-aux l n (mod m n)) x) n) (refl lzero nat n) (dividesb n m) (divides-to-dividesb-true n m posn divnm))

divides-to-gcd : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : divides n m) -> eq lzero nat (gcd n m) n
divides-to-gcd = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> match-nat lzero (λ (X-- : nat) -> (X--1 : divides n X--) -> eq lzero nat (gcd n X--) n) (eq-ind-r lzero lzero nat (gcd O n) (λ (x : nat) -> λ (X-- : eq lzero nat x (gcd O n)) -> (X--1 : divides n O) -> eq lzero nat x n) (λ (auto : divides n O) -> rewrite-r lzero lzero nat n (λ (X-- : nat) -> eq lzero nat X-- n) (refl lzero nat n) (gcd O n) (gcd-O-l n)) (gcd n O) (commutative-gcd n O)) (λ (l : nat) -> λ (divn : divides n (S l)) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n (S l) n) (match-bool lzero (λ (X-0 : bool) -> nat) (S l) (gcd-aux l (S l) (mod-aux n n l)) (eqb (mod-aux n n l) O)) x) n) (divides-to-gcd-aux n (S l) n posn posn divn) (leb n (S l)) (le-to-leb-true n (S l) (divides-to-le n (S l) (lt-O-S l) divn))) m

not-divides-to-gcd-aux : (p : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : Not lzero (divides n m)) -> eq lzero nat (gcd-aux (S p) m n) (gcd-aux p n (mod m n))
not-divides-to-gcd-aux = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (lenm : lt O n) -> λ (divnm : Not lzero (divides n m)) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) n (gcd-aux p n (mod m n)) x) (gcd-aux p n (mod m n))) (refl lzero nat (gcd-aux p n (match-nat lzero (λ (X-- : nat) -> nat) m (λ (p0 : nat) -> mod-aux m m p0) n))) (dividesb n m) (not-divides-to-dividesb-false n m lenm divnm)

divides-gcd-aux-mn : (p : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n p) -> And lzero lzero (divides (gcd-aux p m n) m) (divides (gcd-aux p m n) n)
divides-gcd-aux-mn = λ (p : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n X-x-365) -> And lzero lzero (divides (gcd-aux X-x-365 m n) m) (divides (gcd-aux X-x-365 m n) n)) (λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenO : le n O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> And lzero lzero (divides (gcd-aux O m n) m) (divides (gcd-aux O m n) n)) (absurd lzero (lt O n) posn (le-to-not-lt n O lenO))) (λ (q : nat) -> λ (Hind : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n q) -> And lzero lzero (divides (gcd-aux q m n) m) (divides (gcd-aux q m n) n)) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenS : le n (S q)) -> match-Or lzero lzero (divides n m) (Not lzero (divides n m)) lzero (λ (X-- : Or lzero lzero (divides n m) (Not lzero (divides n m))) -> And lzero lzero (divides (gcd-aux (S q) m n) m) (divides (gcd-aux (S q) m n) n)) (λ (divnm : divides n m) -> eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> And lzero lzero (divides x m) (divides x n)) (conj lzero lzero (divides n m) (divides n n) divnm (divides-n-n n)) (gcd-aux (S q) m n) (divides-to-gcd-aux (S q) m n (lt-O-S q) posn divnm)) (λ (ndivnm : Not lzero (divides n m)) -> eq-ind-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (gcd-aux q n (mod m n))) -> And lzero lzero (divides x m) (divides x n)) (match-And lzero lzero (divides (gcd-aux q n (mod m n)) n) (divides (gcd-aux q n (mod m n)) (mod m n)) lzero (λ (X-- : And lzero lzero (divides (gcd-aux q n (mod m n)) n) (divides (gcd-aux q n (mod m n)) (mod m n))) -> And lzero lzero (divides (gcd-aux q n (mod m n)) m) (divides (gcd-aux q n (mod m n)) n)) (λ (H : divides (gcd-aux q n (mod m n)) n) -> λ (H1 : divides (gcd-aux q n (mod m n)) (mod m n)) -> conj lzero lzero (divides (gcd-aux q n (mod m n)) m) (divides (gcd-aux q n (mod m n)) n) (divides-mod-to-divides (gcd-aux q n (mod m n)) m n posn H1 H) H) (Hind n (mod m n) (match-Or lzero lzero (lt O (mod m n)) (eq lzero nat O (mod m n)) lzero (λ (X-- : Or lzero lzero (lt O (mod m n)) (eq lzero nat O (mod m n))) -> lt O (mod m n)) (λ (auto : lt O (mod m n)) -> auto) (λ (modO : eq lzero nat O (mod m n)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O (mod m n)) (absurd lzero (divides n m) (mod-O-to-divides n m posn (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- O) (refl lzero nat O) (mod m n) modO)) ndivnm)) (le-to-or-lt-eq O (mod m n) (le-O-n (mod m n)))) (lt-to-le (mod m n) n (lt-mod-m-m m n posn)) (le-S-S-to-le (mod m n) q (transitive-le (S (mod m n)) n (S q) (lt-mod-m-m m n posn) lenS)))) (gcd-aux (S q) m n) (not-divides-to-gcd-aux q m n posn ndivnm)) (decidable-divides n m)) p

divides-gcd-nm : (n : nat) -> (m : nat) -> And lzero lzero (divides (gcd n m) m) (divides (gcd n m) n)
divides-gcd-nm = λ (n : nat) -> λ (m : nat) -> match-Or lzero lzero (lt O n) (eq lzero nat O n) lzero (λ (X-- : Or lzero lzero (lt O n) (eq lzero nat O n)) -> And lzero lzero (divides (gcd n m) m) (divides (gcd n m) n)) (λ (posn : lt O n) -> match-Or lzero lzero (lt O m) (eq lzero nat O m) lzero (λ (X-- : Or lzero lzero (lt O m) (eq lzero nat O m)) -> And lzero lzero (divides (gcd n m) m) (divides (gcd n m) n)) (λ (posm : lt O m) -> leb-elim lzero n m (λ (X-- : bool) -> And lzero lzero (divides (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) X--) m) (divides (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) X--) n)) (λ (lenm : le n m) -> divides-gcd-aux-mn n m n posn lenm (le-n n)) (λ (notlt : Not lzero (le n m)) -> match-And lzero lzero (divides (gcd-aux m n m) n) (divides (gcd-aux m n m) m) lzero (λ (X-- : And lzero lzero (divides (gcd-aux m n m) n) (divides (gcd-aux m n m) m)) -> And lzero lzero (divides (gcd-aux m n m) m) (divides (gcd-aux m n m) n)) (λ (auto : divides (gcd-aux m n m) n) -> λ (auto' : divides (gcd-aux m n m) m) -> conj lzero lzero (divides (gcd-aux m n m) m) (divides (gcd-aux m n m) n) auto' auto) (divides-gcd-aux-mn m n m posm (transitive-le m (S m) n (le-n-Sn m) (not-le-to-lt n m notlt)) (le-n m)))) (λ (eqmO : eq lzero nat O m) -> eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> And lzero lzero (divides (gcd n x-1) x-1) (divides (gcd n x-1) n)) (conj lzero lzero (divides (gcd n O) O) (divides (gcd n O) n) (divides-n-O (gcd n O)) (eq-coerc lzero (divides (gcd n O) (gcd n O)) (divides (gcd n O) n) (divides-n-n (gcd n O)) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (gcd n O) X--) (divides (gcd n O) n)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd n O) n)) (gcd n O) (rewrite-l lzero lzero nat (gcd O n) (λ (X-- : nat) -> eq lzero nat (gcd n O) X--) (commutative-gcd n O) n (gcd-O-l n))))) m eqmO) (le-to-or-lt-eq O m (le-O-n m))) (λ (eqnO : eq lzero nat O n) -> eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> And lzero lzero (divides (gcd x-1 m) m) (divides (gcd x-1 m) x-1)) (conj lzero lzero (divides (gcd O m) m) (divides (gcd O m) O) (divides-n-n (gcd O m)) (divides-n-O (gcd O m))) n eqnO) (le-to-or-lt-eq O n (le-O-n n))

divides-gcd-l : (n : nat) -> (m : nat) -> divides (gcd n m) n
divides-gcd-l = λ (n : nat) -> λ (m : nat) -> proj2 lzero lzero (divides (gcd n m) m) (divides (gcd n m) n) (divides-gcd-nm n m)

divides-gcd-r : (n : nat) -> (m : nat) -> divides (gcd n m) m
divides-gcd-r = λ (n : nat) -> λ (m : nat) -> proj1 lzero lzero (divides (gcd n m) m) (divides (gcd n m) n) (divides-gcd-nm n m)

divides-times-gcd-aux : (p : nat) -> (m : nat) -> (n : nat) -> (d : nat) -> (c : nat) -> (X-- : lt O c) -> (X--1 : lt O n) -> (X--2 : le n m) -> (X--3 : le n p) -> (X--4 : divides d (times c m)) -> (X--5 : divides d (times c n)) -> divides d (times c (gcd-aux p m n))
divides-times-gcd-aux = λ (p : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (n : nat) -> (d : nat) -> (c : nat) -> (X-- : lt O c) -> (X--1 : lt O n) -> (X--2 : le n m) -> (X--3 : le n X-x-365) -> (X--4 : divides d (times c m)) -> (X--5 : divides d (times c n)) -> divides d (times c (gcd-aux X-x-365 m n))) (λ (m : nat) -> λ (n : nat) -> λ (d : nat) -> λ (c : nat) -> λ (X-- : lt O c) -> λ (posn : lt O n) -> λ (X-0 : le n m) -> λ (lenO : le n O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> (X--1 : divides d (times c m)) -> (X--2 : divides d (times c n)) -> divides d (times c (gcd-aux O m n))) (absurd lzero (le n O) lenO (lt-to-not-le O n posn))) (λ (q : nat) -> λ (Hind : (m : nat) -> (n : nat) -> (d : nat) -> (c : nat) -> (X-- : lt O c) -> (X--1 : lt O n) -> (X--2 : le n m) -> (X--3 : le n q) -> (X--4 : divides d (times c m)) -> (X--5 : divides d (times c n)) -> divides d (times c (gcd-aux q m n))) -> λ (m : nat) -> λ (n : nat) -> λ (d : nat) -> λ (c : nat) -> λ (posc : lt O c) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenS : le n (S q)) -> λ (dcm : divides d (times c m)) -> λ (dcn : divides d (times c n)) -> match-Or lzero lzero (divides n m) (Not lzero (divides n m)) lzero (λ (X-- : Or lzero lzero (divides n m) (Not lzero (divides n m))) -> divides d (times c (gcd-aux (S q) m n))) (λ (divnm : divides n m) -> eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> divides d (times c x)) dcn (gcd-aux (S q) m n) (divides-to-gcd-aux (S q) m n (lt-O-S q) posn divnm)) (λ (ndivnm : Not lzero (divides n m)) -> eq-ind-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (gcd-aux q n (mod m n))) -> divides d (times c x)) (Hind n (mod m n) d c posc (match-Or lzero lzero (lt O (mod m n)) (eq lzero nat O (mod m n)) lzero (λ (X-- : Or lzero lzero (lt O (mod m n)) (eq lzero nat O (mod m n))) -> lt O (mod m n)) (λ (auto : lt O (mod m n)) -> auto) (λ (modO : eq lzero nat O (mod m n)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O (mod m n)) (absurd lzero (divides n m) (mod-O-to-divides n m posn (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- O) (refl lzero nat O) (mod m n) modO)) ndivnm)) (le-to-or-lt-eq O (mod m n) (le-O-n (mod m n)))) (lt-to-le (mod m n) n (lt-mod-m-m m n posn)) (le-S-S-to-le (mod m n) q (transitive-le (S (mod m n)) n (S q) (lt-mod-m-m m n posn) lenS)) dcn (eq-ind lzero lzero nat (mod (times m c) (times n c)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (mod (times m c) (times n c)) x-1) -> divides d x-1) (eq-ind lzero lzero nat (times c m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times c m) x-1) -> divides d (mod x-1 (times n c))) (eq-ind lzero lzero nat (times c n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times c n) x-1) -> divides d (mod (times c m) x-1)) (divides-mod d (times c m) (times c n) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times c n)) (lt-times O c O n posc posn) O (times-n-O O)) dcm dcn) (times n c) (commutative-times c n)) (times m c) (commutative-times c m)) (times c (mod m n)) (times-mod m n c posc posn))) (gcd-aux (S q) m n) (not-divides-to-gcd-aux q m n posn ndivnm)) (decidable-divides n m)) p

divides-gcd-aux : (p : nat) -> (m : nat) -> (n : nat) -> (d : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n p) -> (X--3 : divides d m) -> (X--4 : divides d n) -> divides d (gcd-aux p m n)
divides-gcd-aux = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (d : nat) -> λ (auto : lt O n) -> λ (auto' : le n m) -> λ (auto'' : le n p) -> λ (auto''' : divides d m) -> λ (auto'''' : divides d n) -> eq-coerc lzero (divides d (times (S O) (gcd-aux p m n))) (divides d (gcd-aux p m n)) (divides-times-gcd-aux p m n d (S O) (lt-O-S O) auto auto' auto'' (eq-coerc lzero (divides d m) (divides d (times (S O) m)) auto''' (rewrite-r lzero (lsuc lzero) nat (times m (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d (plus m X--))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d X--)) (refl (lsuc lzero) (Set (lzero)) (divides d m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times (S O) m) (commutative-times (S O) m))) (eq-coerc lzero (divides d n) (divides d (times (S O) n)) auto'''' (rewrite-r lzero (lsuc lzero) nat (times n (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat (plus n (times n O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d (plus n X--))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d X--)) (refl (lsuc lzero) (Set (lzero)) (divides d n)) (plus n O) (plus-n-O n)) (times n O) (times-n-O n)) (times n (S O)) (times-n-Sm n O)) (times (S O) n) (commutative-times (S O) n)))) (rewrite-r lzero (lsuc lzero) nat (times (gcd-aux p m n) (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d X--) (divides d (gcd-aux p m n))) (rewrite-l lzero (lsuc lzero) nat (gcd-aux p m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d X--) (divides d (gcd-aux p m n))) (refl (lsuc lzero) (Set (lzero)) (divides d (gcd-aux p m n))) (times (gcd-aux p m n) (S O)) (times-n-1 (gcd-aux p m n))) (times (S O) (gcd-aux p m n)) (commutative-times (S O) (gcd-aux p m n)))

divides-d-times-gcd : (m : nat) -> (n : nat) -> (d : nat) -> (c : nat) -> (X-- : lt O c) -> (X--1 : divides d (times c m)) -> (X--2 : divides d (times c n)) -> divides d (times c (gcd n m))
divides-d-times-gcd = λ (m : nat) -> λ (n : nat) -> λ (d : nat) -> λ (c : nat) -> λ (posc : lt O c) -> λ (dcm : divides d (times c m)) -> λ (dcn : divides d (times c n)) -> match-Or lzero lzero (lt O n) (eq lzero nat O n) lzero (λ (X-- : Or lzero lzero (lt O n) (eq lzero nat O n)) -> divides d (times c (gcd n m))) (λ (posn : lt O n) -> match-Or lzero lzero (lt O m) (eq lzero nat O m) lzero (λ (X-- : Or lzero lzero (lt O m) (eq lzero nat O m)) -> divides d (times c (gcd n m))) (λ (posm : lt O m) -> leb-elim lzero n m (λ (X-- : bool) -> divides d (times c (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) X--))) (λ (lenm : le n m) -> divides-times-gcd-aux n m n d c posc posn lenm (le-n n) dcm dcn) (λ (nlenm : Not lzero (le n m)) -> divides-times-gcd-aux m n m d c posc posm (transitive-le m (S m) n (le-n-Sn m) (not-le-to-lt n m nlenm)) (le-n m) dcn dcm)) (λ (eqmO : eq lzero nat O m) -> eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> divides d (times c (gcd n x-1))) (eq-ind lzero lzero nat (gcd O n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (gcd O n) x-1) -> divides d (times c x-1)) dcn (gcd n O) (commutative-gcd O n)) m eqmO) (le-to-or-lt-eq O m (le-O-n m))) (λ (eqnO : eq lzero nat O n) -> eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> divides d (times c (gcd x-1 m))) dcm n eqnO) (le-to-or-lt-eq O n (le-O-n n))

divides-d-gcd : (m : nat) -> (n : nat) -> (d : nat) -> (X-- : divides d m) -> (X--1 : divides d n) -> divides d (gcd n m)
divides-d-gcd = λ (m : nat) -> λ (n : nat) -> λ (d : nat) -> λ (divdn : divides d m) -> λ (divdn0 : divides d n) -> eq-coerc lzero (divides d (times (S O) (gcd n m))) (divides d (gcd n m)) (divides-d-times-gcd m n d (S O) (lt-O-S O) (eq-coerc lzero (divides d m) (divides d (times (S O) m)) divdn (rewrite-r lzero (lsuc lzero) nat (times m (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat (plus m (times m O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d (plus m X--))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d m) (divides d X--)) (refl (lsuc lzero) (Set (lzero)) (divides d m)) (plus m O) (plus-n-O m)) (times m O) (times-n-O m)) (times m (S O)) (times-n-Sm m O)) (times (S O) m) (commutative-times (S O) m))) (eq-coerc lzero (divides d n) (divides d (times (S O) n)) divdn0 (rewrite-r lzero (lsuc lzero) nat (times n (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat (plus n (times n O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d X--)) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d (plus n X--))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d n) (divides d X--)) (refl (lsuc lzero) (Set (lzero)) (divides d n)) (plus n O) (plus-n-O n)) (times n O) (times-n-O n)) (times n (S O)) (times-n-Sm n O)) (times (S O) n) (commutative-times (S O) n)))) (rewrite-r lzero (lsuc lzero) nat (gcd m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d (times (S O) X--)) (divides d (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (times (gcd m n) (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d X--) (divides d (gcd n m))) (rewrite-l lzero (lsuc lzero) nat (plus (gcd m n) (times (gcd m n) O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d X--) (divides d (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (times O (gcd m n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d (plus (gcd m n) X--)) (divides d (gcd n m))) (rewrite-l lzero (lsuc lzero) nat O (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d (plus (gcd m n) X--)) (divides d (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (plus O (gcd m n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d X--) (divides d (gcd n m))) (rewrite-l lzero (lsuc lzero) nat (gcd m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d X--) (divides d (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (gcd m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides d (gcd m n)) (divides d X--)) (refl (lsuc lzero) (Set (lzero)) (divides d (gcd m n))) (gcd n m) (commutative-gcd n m)) (plus O (gcd m n)) (plus-O-n (gcd m n))) (plus (gcd m n) O) (commutative-plus (gcd m n) O)) (times O (gcd m n)) (times-O-n (gcd m n))) (times (gcd m n) O) (commutative-times (gcd m n) O)) (times (gcd m n) (S O)) (times-n-Sm (gcd m n) O)) (times (S O) (gcd m n)) (commutative-times (S O) (gcd m n))) (gcd n m) (commutative-gcd n m))

let-clause-1544 : (p : nat) -> (q : nat) -> (Hind : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n q) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux q m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux q m n))))) -> (m : nat) -> (n : nat) -> (posn : lt O n) -> (lenm : le n m) -> (lenS : le n (S q)) -> (ndivnm : Not lzero (divides n m)) -> (a : nat) -> (X-clearme : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) -> (b : nat) -> (X-clearme0 : Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) -> (H : eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) -> eq lzero nat (minus (times a (mod m n)) (times n b)) (gcd-aux q n (mod m n))
let-clause-1544 = λ (p : nat) -> λ (q : nat) -> λ (Hind : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n q) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux q m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux q m n))))) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenS : le n (S q)) -> λ (ndivnm : Not lzero (divides n m)) -> λ (a : nat) -> λ (X-clearme : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) -> λ (b : nat) -> λ (X-clearme0 : Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) -> λ (H : eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) -> rewrite-l lzero lzero nat (times b n) (λ (X-- : nat) -> eq lzero nat (minus (times a (mod m n)) X--) (gcd-aux q n (mod m n))) H (times n b) (commutative-times b n)

let-clause-15441 : (p : nat) -> (q : nat) -> (Hind : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n q) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux q m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux q m n))))) -> (m : nat) -> (n : nat) -> (posn : lt O n) -> (lenm : le n m) -> (lenS : le n (S q)) -> (ndivnm : Not lzero (divides n m)) -> (a : nat) -> (X-clearme : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) -> (b : nat) -> (X-clearme0 : Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) -> (H : eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))) -> eq lzero nat (minus (times n b) (times a (mod m n))) (gcd-aux q n (mod m n))
let-clause-15441 = λ (p : nat) -> λ (q : nat) -> λ (Hind : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n q) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux q m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux q m n))))) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenS : le n (S q)) -> λ (ndivnm : Not lzero (divides n m)) -> λ (a : nat) -> λ (X-clearme : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) -> λ (b : nat) -> λ (X-clearme0 : Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) -> λ (H : eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))) -> rewrite-l lzero lzero nat (times b n) (λ (X-- : nat) -> eq lzero nat (minus X-- (times a (mod m n))) (gcd-aux q n (mod m n))) H (times n b) (commutative-times b n)

eq-minus-gcd-aux : (p : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n p) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux p m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux p m n))))
eq-minus-gcd-aux = λ (p : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n X-x-365) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux X-x-365 m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux X-x-365 m n))))) (λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenO : le n O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux O m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux O m n))))) (absurd lzero (lt O n) posn (le-to-not-lt n O lenO))) (λ (q : nat) -> λ (Hind : (m : nat) -> (n : nat) -> (X-- : lt O n) -> (X--1 : le n m) -> (X--2 : le n q) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux q m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux q m n))))) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (lenm : le n m) -> λ (lenS : le n (S q)) -> match-Or lzero lzero (divides n m) (Not lzero (divides n m)) lzero (λ (X-- : Or lzero lzero (divides n m) (Not lzero (divides n m))) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux (S q) m n)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux (S q) m n))))) (λ (divnm : divides n m) -> eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) x) (eq lzero nat (minus (times b m) (times a n)) x)))) (ex-intro lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) n) (eq lzero nat (minus (times b m) (times a n)) n))) (S O) (ex-intro lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times (S O) n) (times b m)) n) (eq lzero nat (minus (times b m) (times (S O) n)) n)) O (or-introl lzero lzero (eq lzero nat (minus (times (S O) n) (times O m)) n) (eq lzero nat (minus (times O m) (times (S O) n)) n) (rewrite-r lzero lzero nat (times n (S O)) (λ (X-- : nat) -> eq lzero nat (minus X-- (times O m)) n) (rewrite-l lzero lzero nat (plus n (times n O)) (λ (X-- : nat) -> eq lzero nat (minus X-- (times O m)) n) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (minus (plus n X--) (times O m)) n) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (minus X-- (times O m)) n) (rewrite-r lzero lzero nat (times m O) (λ (X-- : nat) -> eq lzero nat (minus n X--) n) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (minus n X--) n) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat X-- n) (refl lzero nat n) (minus n O) (minus-n-O n)) (times m O) (times-n-O m)) (times O m) (commutative-times O m)) (plus n O) (plus-n-O n)) (times n O) (times-n-O n)) (times n (S O)) (times-n-Sm n O)) (times (S O) n) (commutative-times (S O) n))))) (gcd-aux (S q) m n) (divides-to-gcd-aux (S q) m n (lt-O-S q) posn divnm)) (λ (ndivnm : Not lzero (divides n m)) -> eq-ind-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (gcd-aux q n (mod m n))) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) x) (eq lzero nat (minus (times b m) (times a n)) x)))) (match-ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) lzero (λ (X-- : ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))))) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux q n (mod m n)))))) (λ (a : nat) -> λ (X-clearme : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) -> match-ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) lzero (λ (X-- : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))))) -> ex lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b m)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b m) (times a0 n)) (gcd-aux q n (mod m n)))))) (λ (b : nat) -> λ (X-clearme0 : Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) -> match-Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))) lzero (λ (X-- : Or lzero lzero (eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n)))) -> ex lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) (gcd-aux q n (mod m n))) (eq lzero nat (minus (times b0 m) (times a0 n)) (gcd-aux q n (mod m n)))))) (λ (H : eq lzero nat (minus (times a (mod m n)) (times b n)) (gcd-aux q n (mod m n))) -> eq-ind lzero lzero nat (minus (times a (mod m n)) (times b n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (minus (times a (mod m n)) (times b n)) x-1) -> ex lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) x-1) (eq lzero nat (minus (times b0 m) (times a0 n)) x-1)))) (ex-intro lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) (minus (times a (mod m n)) (times b n))) (eq lzero nat (minus (times b0 m) (times a0 n)) (minus (times a (mod m n)) (times b n))))) (plus b (times a (div m n))) (ex-intro lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times (plus b (times a (div m n))) n) (times b0 m)) (minus (times a (mod m n)) (times b n))) (eq lzero nat (minus (times b0 m) (times (plus b (times a (div m n))) n)) (minus (times a (mod m n)) (times b n)))) a (or-intror lzero lzero (eq lzero nat (minus (times (plus b (times a (div m n))) n) (times a m)) (minus (times a (mod m n)) (times b n))) (eq lzero nat (minus (times a m) (times (plus b (times a (div m n))) n)) (minus (times a (mod m n)) (times b n))) (eq-ind lzero lzero nat (plus (times a (div m n)) b) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (times a (div m n)) b) x-1) -> eq lzero nat (minus (times a m) (times x-1 n)) (minus (times a (mod m n)) (times b n))) (eq-ind-r lzero lzero nat (plus (times (times a (div m n)) n) (times b n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (times a (div m n)) n) (times b n))) -> eq lzero nat (minus (times a m) x) (minus (times a (mod m n)) (times b n))) (eq-ind-r lzero lzero nat (plus (times (div m n) n) (mod m n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (div m n) n) (mod m n))) -> eq lzero nat (minus (times a x) (plus (times (times a (div m n)) n) (times b n))) (minus (times a (mod m n)) (times b n))) (eq-ind-r lzero lzero nat (times a (times (div m n) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (times (div m n) n))) -> eq lzero nat (minus (times a (plus (times (div m n) n) (mod m n))) (plus x (times b n))) (minus (times a (mod m n)) (times b n))) (eq-ind lzero lzero nat (plus (mod m n) (times (div m n) n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (mod m n) (times (div m n) n)) x-1) -> eq lzero nat (minus (times a x-1) (plus (times a (times (div m n) n)) (times b n))) (minus (times a (mod m n)) (times b n))) (eq-ind-r lzero lzero nat (plus (times a (mod m n)) (times a (times (div m n) n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times a (mod m n)) (times a (times (div m n) n)))) -> eq lzero nat (minus x (plus (times a (times (div m n) n)) (times b n))) (minus (times a (mod m n)) (times b n))) (eq-ind lzero lzero nat (minus (minus (plus (times a (mod m n)) (times a (times (div m n) n))) (times a (times (div m n) n))) (times b n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (minus (minus (plus (times a (mod m n)) (times a (times (div m n) n))) (times a (times (div m n) n))) (times b n)) x-1) -> eq lzero nat x-1 (minus (times a (mod m n)) (times b n))) (eq-ind lzero lzero nat (plus (times a (times (div m n) n)) (times a (mod m n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (times a (times (div m n) n)) (times a (mod m n))) x-1) -> eq lzero nat (minus (minus x-1 (times a (times (div m n) n))) (times b n)) (minus (times a (mod m n)) (times b n))) (eq-ind lzero lzero nat (plus (minus (times a (times (div m n) n)) (times a (times (div m n) n))) (times a (mod m n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (minus (times a (times (div m n) n)) (times a (times (div m n) n))) (times a (mod m n))) x-1) -> eq lzero nat (minus x-1 (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (times n (div m n)) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus (times a X--) (times a (times (div m n) n))) (times a (mod m n))) (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (times n (times a (div m n))) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus X-- (times a (times (div m n) n))) (times a (mod m n))) (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (times n (div m n)) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus (times n (times a (div m n))) (times a X--)) (times a (mod m n))) (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (times n (times a (div m n))) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus (times n (times a (div m n))) X--) (times a (mod m n))) (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (minus (plus X-- (times a (mod m n))) (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-l lzero lzero nat (times a (mod m n)) (λ (X-- : nat) -> eq lzero nat (minus X-- (times b n)) (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (minus (times a (mod m n)) X--) (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (X-- : nat) -> eq lzero nat X-- (minus (times a (mod m n)) (times b n))) (rewrite-r lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (gcd-aux q n (mod m n)) (minus (times a (mod m n)) X--)) (rewrite-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (X-- : nat) -> eq lzero nat (gcd-aux q n (mod m n)) X--) (refl lzero nat (gcd-aux q n (mod m n))) (minus (times a (mod m n)) (times n b)) (let-clause-1544 p q Hind m n posn lenm lenS ndivnm a X-clearme b X-clearme0 H)) (times b n) (commutative-times b n)) (minus (times a (mod m n)) (times n b)) (let-clause-1544 p q Hind m n posn lenm lenS ndivnm a X-clearme b X-clearme0 H)) (times b n) (commutative-times b n)) (plus O (times a (mod m n))) (plus-O-n (times a (mod m n)))) (minus (times n (times a (div m n))) (times n (times a (div m n)))) (minus-n-n (times n (times a (div m n))))) (times a (times n (div m n))) (times-times a n (div m n))) (times (div m n) n) (commutative-times (div m n) n)) (times a (times n (div m n))) (times-times a n (div m n))) (times (div m n) n) (commutative-times (div m n) n)) (minus (plus (times a (times (div m n) n)) (times a (mod m n))) (times a (times (div m n) n))) (plus-minus (times a (times (div m n) n)) (times a (times (div m n) n)) (times a (mod m n)) (le-n (times a (times (div m n) n))))) (plus (times a (mod m n)) (times a (times (div m n) n))) (commutative-plus (times a (times (div m n) n)) (times a (mod m n)))) (minus (plus (times a (mod m n)) (times a (times (div m n) n))) (plus (times a (times (div m n) n)) (times b n))) (minus-plus (plus (times a (mod m n)) (times a (times (div m n) n))) (times a (times (div m n) n)) (times b n))) (times a (plus (mod m n) (times (div m n) n))) (distributive-times-plus a (mod m n) (times (div m n) n))) (plus (times (div m n) n) (mod m n)) (commutative-plus (mod m n) (times (div m n) n))) (times (times a (div m n)) n) (associative-times a (div m n) n)) m (div-mod m n)) (times (plus (times a (div m n)) b) n) (distributive-times-plus-r n (times a (div m n)) b)) (plus b (times a (div m n))) (commutative-plus (times a (div m n)) b))))) (gcd-aux q n (mod m n)) H) (λ (H : eq lzero nat (minus (times b n) (times a (mod m n))) (gcd-aux q n (mod m n))) -> eq-ind lzero lzero nat (minus (times b n) (times a (mod m n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (minus (times b n) (times a (mod m n))) x-1) -> ex lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) x-1) (eq lzero nat (minus (times b0 m) (times a0 n)) x-1)))) (ex-intro lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) (minus (times b n) (times a (mod m n)))) (eq lzero nat (minus (times b0 m) (times a0 n)) (minus (times b n) (times a (mod m n)))))) (plus b (times a (div m n))) (ex-intro lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times (plus b (times a (div m n))) n) (times b0 m)) (minus (times b n) (times a (mod m n)))) (eq lzero nat (minus (times b0 m) (times (plus b (times a (div m n))) n)) (minus (times b n) (times a (mod m n))))) a (or-introl lzero lzero (eq lzero nat (minus (times (plus b (times a (div m n))) n) (times a m)) (minus (times b n) (times a (mod m n)))) (eq lzero nat (minus (times a m) (times (plus b (times a (div m n))) n)) (minus (times b n) (times a (mod m n)))) (eq-ind-r lzero lzero nat (plus (times b n) (times (times a (div m n)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times b n) (times (times a (div m n)) n))) -> eq lzero nat (minus x (times a m)) (minus (times b n) (times a (mod m n)))) (eq-ind-r lzero lzero nat (plus (times (div m n) n) (mod m n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (div m n) n) (mod m n))) -> eq lzero nat (minus (plus (times b n) (times (times a (div m n)) n)) (times a x)) (minus (times b n) (times a (mod m n)))) (eq-ind-r lzero lzero nat (plus (times a (times (div m n) n)) (times a (mod m n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times a (times (div m n) n)) (times a (mod m n)))) -> eq lzero nat (minus (plus (times b n) (times (times a (div m n)) n)) x) (minus (times b n) (times a (mod m n)))) (eq-ind-r lzero lzero nat (times a (times (div m n) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (times (div m n) n))) -> eq lzero nat (minus (plus (times b n) x) (plus (times a (times (div m n) n)) (times a (mod m n)))) (minus (times b n) (times a (mod m n)))) (eq-ind lzero lzero nat (minus (minus (plus (times b n) (times a (times (div m n) n))) (times a (times (div m n) n))) (times a (mod m n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (minus (minus (plus (times b n) (times a (times (div m n) n))) (times a (times (div m n) n))) (times a (mod m n))) x-1) -> eq lzero nat x-1 (minus (times b n) (times a (mod m n)))) (eq-ind lzero lzero nat (plus (times a (times (div m n) n)) (times b n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (times a (times (div m n) n)) (times b n)) x-1) -> eq lzero nat (minus (minus x-1 (times a (times (div m n) n))) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (eq-ind lzero lzero nat (plus (minus (times a (times (div m n) n)) (times a (times (div m n) n))) (times b n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (minus (times a (times (div m n) n)) (times a (times (div m n) n))) (times b n)) x-1) -> eq lzero nat (minus x-1 (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (times n (div m n)) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus (times a X--) (times a (times (div m n) n))) (times b n)) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (times n (times a (div m n))) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus X-- (times a (times (div m n) n))) (times b n)) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (times n (div m n)) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus (times n (times a (div m n))) (times a X--)) (times b n)) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (times n (times a (div m n))) (λ (X-- : nat) -> eq lzero nat (minus (plus (minus (times n (times a (div m n))) X--) (times b n)) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (minus (plus X-- (times b n)) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (minus (plus O X--) (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-l lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (minus X-- (times a (mod m n))) (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (X-- : nat) -> eq lzero nat X-- (minus (times b n) (times a (mod m n)))) (rewrite-r lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (gcd-aux q n (mod m n)) (minus X-- (times a (mod m n)))) (rewrite-r lzero lzero nat (gcd-aux q n (mod m n)) (λ (X-- : nat) -> eq lzero nat (gcd-aux q n (mod m n)) X--) (refl lzero nat (gcd-aux q n (mod m n))) (minus (times n b) (times a (mod m n))) (let-clause-15441 p q Hind m n posn lenm lenS ndivnm a X-clearme b X-clearme0 H)) (times b n) (commutative-times b n)) (minus (times n b) (times a (mod m n))) (let-clause-15441 p q Hind m n posn lenm lenS ndivnm a X-clearme b X-clearme0 H)) (plus O (times n b)) (plus-O-n (times n b))) (times b n) (commutative-times b n)) (minus (times n (times a (div m n))) (times n (times a (div m n)))) (minus-n-n (times n (times a (div m n))))) (times a (times n (div m n))) (times-times a n (div m n))) (times (div m n) n) (commutative-times (div m n) n)) (times a (times n (div m n))) (times-times a n (div m n))) (times (div m n) n) (commutative-times (div m n) n)) (minus (plus (times a (times (div m n) n)) (times b n)) (times a (times (div m n) n))) (plus-minus (times a (times (div m n) n)) (times a (times (div m n) n)) (times b n) (le-n (times a (times (div m n) n))))) (plus (times b n) (times a (times (div m n) n))) (commutative-plus (times a (times (div m n) n)) (times b n))) (minus (plus (times b n) (times a (times (div m n) n))) (plus (times a (times (div m n) n)) (times a (mod m n)))) (minus-plus (plus (times b n) (times a (times (div m n) n))) (times a (times (div m n) n)) (times a (mod m n)))) (times (times a (div m n)) n) (associative-times a (div m n) n)) (times a (plus (times (div m n) n) (mod m n))) (distributive-times-plus a (times (div m n) n) (mod m n))) m (div-mod m n)) (times (plus b (times a (div m n))) n) (distributive-times-plus-r n b (times a (div m n))))))) (gcd-aux q n (mod m n)) H) X-clearme0) X-clearme) (Hind n (mod m n) (match-Or lzero lzero (lt O (mod m n)) (eq lzero nat O (mod m n)) lzero (λ (X-- : Or lzero lzero (lt O (mod m n)) (eq lzero nat O (mod m n))) -> lt O (mod m n)) (λ (auto : lt O (mod m n)) -> auto) (λ (modO : eq lzero nat O (mod m n)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O (mod m n)) (absurd lzero (divides n m) (mod-O-to-divides n m posn (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- O) (refl lzero nat O) (mod m n) modO)) ndivnm)) (le-to-or-lt-eq O (mod m n) (le-O-n (mod m n)))) (lt-to-le (mod m n) n (lt-mod-m-m m n posn)) (le-S-S-to-le (mod m n) q (transitive-le (S (mod m n)) n (S q) (lt-mod-m-m m n posn) lenS)))) (gcd-aux (S q) m n) (not-divides-to-gcd-aux q m n posn ndivnm)) (decidable-divides n m)) p

let-clause-1549 : (m : nat) -> (n : nat) -> (posn : lt O n) -> (eqm0 : eq lzero nat O m) -> (x1106 : nat) -> eq lzero nat x1106 (minus x1106 m)
let-clause-1549 = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (eqm0 : eq lzero nat O m) -> λ (x1106 : nat) -> rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat x1106 (minus x1106 X--)) (minus-n-O x1106) m eqm0

let-clause-15491 : (m : nat) -> (n : nat) -> (eqn0 : eq lzero nat O n) -> (x1106 : nat) -> eq lzero nat x1106 (minus x1106 n)
let-clause-15491 = λ (m : nat) -> λ (n : nat) -> λ (eqn0 : eq lzero nat O n) -> λ (x1106 : nat) -> rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat x1106 (minus x1106 X--)) (minus-n-O x1106) n eqn0

let-clause-1551 : (m : nat) -> (n : nat) -> (eqn0 : eq lzero nat O n) -> (x347 : nat) -> eq lzero nat n (times x347 n)
let-clause-1551 = λ (m : nat) -> λ (n : nat) -> λ (eqn0 : eq lzero nat O n) -> λ (x347 : nat) -> rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat n (times x347 X--)) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- (times x347 O)) (times-n-O x347) n eqn0) n eqn0

eq-minus-gcd : (m : nat) -> (n : nat) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m))))
eq-minus-gcd = λ (m : nat) -> λ (n : nat) -> match-Or lzero lzero (lt O n) (eq lzero nat O n) lzero (λ (X-- : Or lzero lzero (lt O n) (eq lzero nat O n)) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m))))) (λ (posn : lt O n) -> match-Or lzero lzero (lt O m) (eq lzero nat O m) lzero (λ (X-- : Or lzero lzero (lt O m) (eq lzero nat O m)) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m))))) (λ (posm : lt O m) -> leb-elim lzero n m (λ (X-- : bool) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) X--)) (eq lzero nat (minus (times b m) (times a n)) (match-bool lzero (λ (X-0 : bool) -> nat) (gcd-aux n m n) (gcd-aux m n m) X--))))) (λ (lenm : le n m) -> eq-minus-gcd-aux n m n posn lenm (le-n n)) (λ (nlenm : Not lzero (le n m)) -> match-ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)))) lzero (λ (X-- : ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m))))) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd-aux m n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd-aux m n m))))) (λ (a : nat) -> λ (X-clearme : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)))) -> match-ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m))) lzero (λ (X-- : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)))) -> ex lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b m)) (gcd-aux m n m)) (eq lzero nat (minus (times b m) (times a0 n)) (gcd-aux m n m))))) (λ (b : nat) -> λ (X-clearme0 : Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m))) -> match-Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)) lzero (λ (X-- : Or lzero lzero (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m))) -> ex lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) (gcd-aux m n m)) (eq lzero nat (minus (times b0 m) (times a0 n)) (gcd-aux m n m))))) (λ (H : eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) -> ex-intro lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) (gcd-aux m n m)) (eq lzero nat (minus (times b0 m) (times a0 n)) (gcd-aux m n m)))) b (ex-intro lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times b n) (times b0 m)) (gcd-aux m n m)) (eq lzero nat (minus (times b0 m) (times b n)) (gcd-aux m n m))) a (or-intror lzero lzero (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)) (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (rewrite-r lzero lzero nat (times m a) (λ (X-- : nat) -> eq lzero nat (minus X-- (times b n)) (gcd-aux m n m)) (rewrite-r lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (minus (times m a) X--) (gcd-aux m n m)) (rewrite-r lzero lzero nat (gcd-aux m n m) (λ (X-- : nat) -> eq lzero nat X-- (gcd-aux m n m)) (refl lzero nat (gcd-aux m n m)) (minus (times m a) (times n b)) (rewrite-l lzero lzero nat (times b n) (λ (X-- : nat) -> eq lzero nat (minus (times m a) X--) (gcd-aux m n m)) (rewrite-l lzero lzero nat (times a m) (λ (X-- : nat) -> eq lzero nat (minus X-- (times b n)) (gcd-aux m n m)) H (times m a) (commutative-times a m)) (times n b) (commutative-times b n))) (times b n) (commutative-times b n)) (times a m) (commutative-times a m))))) (λ (H : eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)) -> ex-intro lzero lzero nat (λ (a0 : nat) -> ex lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times a0 n) (times b0 m)) (gcd-aux m n m)) (eq lzero nat (minus (times b0 m) (times a0 n)) (gcd-aux m n m)))) b (ex-intro lzero lzero nat (λ (b0 : nat) -> Or lzero lzero (eq lzero nat (minus (times b n) (times b0 m)) (gcd-aux m n m)) (eq lzero nat (minus (times b0 m) (times b n)) (gcd-aux m n m))) a (or-introl lzero lzero (eq lzero nat (minus (times b n) (times a m)) (gcd-aux m n m)) (eq lzero nat (minus (times a m) (times b n)) (gcd-aux m n m)) (rewrite-r lzero lzero nat (times n b) (λ (X-- : nat) -> eq lzero nat (minus X-- (times a m)) (gcd-aux m n m)) (rewrite-r lzero lzero nat (times m a) (λ (X-- : nat) -> eq lzero nat (minus (times n b) X--) (gcd-aux m n m)) (rewrite-r lzero lzero nat (gcd-aux m n m) (λ (X-- : nat) -> eq lzero nat X-- (gcd-aux m n m)) (refl lzero nat (gcd-aux m n m)) (minus (times n b) (times m a)) (rewrite-l lzero lzero nat (times a m) (λ (X-- : nat) -> eq lzero nat (minus (times n b) X--) (gcd-aux m n m)) (rewrite-l lzero lzero nat (times b n) (λ (X-- : nat) -> eq lzero nat (minus X-- (times a m)) (gcd-aux m n m)) H (times n b) (commutative-times b n)) (times m a) (commutative-times a m))) (times a m) (commutative-times a m)) (times b n) (commutative-times b n))))) X-clearme0) X-clearme) (eq-minus-gcd-aux m n m posm (transitive-le m (S m) n (le-n-Sn m) (not-le-to-lt n m nlenm)) (le-n m)))) (λ (eqm0 : eq lzero nat O m) -> eq-ind-r lzero lzero nat m (λ (x : nat) -> λ (X-- : eq lzero nat x m) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m))))) (ex-intro lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m)))) (S O) (ex-intro lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times (S O) n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times (S O) n)) (gcd n m))) O (or-introl lzero lzero (eq lzero nat (minus (times (S O) n) (times O m)) (gcd n m)) (eq lzero nat (minus (times O m) (times (S O) n)) (gcd n m)) (eq-coerc lzero (eq lzero nat n (minus n O)) (eq lzero nat (minus (times (S O) n) (times O m)) (gcd n m)) (minus-n-O n) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n (minus n X--)) (eq lzero nat (minus (times (S O) n) (times O m)) (gcd n m))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n X--) (eq lzero nat (minus (times (S O) n) (times O m)) (gcd n m))) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus (times (S X--) n) (times O m)) (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (times n (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus X-- (times O m)) (gcd n m))) (rewrite-l lzero (lsuc lzero) nat (plus n (times n m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus X-- (times O m)) (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (times m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus (plus n X--) (times O m)) (gcd n m))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus (plus n X--) (times O m)) (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (plus m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus X-- (times O m)) (gcd n m))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus X-- (times O m)) (gcd n m))) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus n (times X-- m)) (gcd n m))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat (minus n X--) (gcd n m))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat X-- (gcd n m))) (rewrite-r lzero (lsuc lzero) nat (gcd m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat n X--)) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat n n) (eq lzero nat n X--)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat n n)) (gcd m n) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (gcd X-- n) n) (gcd-O-l n) m eqm0)) (gcd n m) (commutative-gcd n m)) (minus n m) (let-clause-1549 m n posn eqm0 n)) (times m m) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat m (times m X--)) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- (times m O)) (times-n-O m) m eqm0) m eqm0)) O eqm0) (plus m n) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat n (plus X-- n)) (plus-O-n n) m eqm0)) (plus n m) (commutative-plus n m)) (times m n) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat m (times X-- n)) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- (times O n)) (times-O-n n) m eqm0) m eqm0)) (times n m) (commutative-times n m)) (times n (S m)) (times-n-Sm n m)) (times (S m) n) (commutative-times (S m) n)) O eqm0) (minus n m) (let-clause-1549 m n posn eqm0 n)) O eqm0))))) O eqm0) (le-to-or-lt-eq O m (le-O-n m))) (λ (eqn0 : eq lzero nat O n) -> eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m))))) (ex-intro lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times a n)) (gcd n m)))) O (ex-intro lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times O n) (times b m)) (gcd n m)) (eq lzero nat (minus (times b m) (times O n)) (gcd n m))) (S O) (or-intror lzero lzero (eq lzero nat (minus (times O n) (times (S O) m)) (gcd n m)) (eq lzero nat (minus (times (S O) m) (times O n)) (gcd n m)) (eq-coerc lzero (eq lzero nat m (minus m O)) (eq lzero nat (minus (times (S O) m) (times O n)) (gcd n m)) (minus-n-O m) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m (minus m O)) (eq lzero nat (minus (times (S O) m) (times O n)) X--)) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m (minus m X--)) (eq lzero nat (minus (times (S O) m) (times O n)) m)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m X--) (eq lzero nat (minus (times (S O) m) (times O n)) m)) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus (times (S X--) m) (times O n)) m)) (rewrite-r lzero (lsuc lzero) nat (times m (S n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus X-- (times O n)) m)) (rewrite-l lzero (lsuc lzero) nat (plus m (times m n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus X-- (times O n)) m)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus (plus m X--) (times O n)) m)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus X-- (times O n)) m)) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus m (times X-- n)) m)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat (minus m X--) m)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (eq lzero nat m m) (eq lzero nat X-- m)) (refl (lsuc lzero) (Set (lzero)) (eq lzero nat m m)) (minus m n) (let-clause-15491 m n eqn0 m)) (times n n) (let-clause-1551 m n eqn0 n)) O eqn0) (plus m n) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat m (plus m X--)) (plus-n-O m) n eqn0)) (times m n) (let-clause-1551 m n eqn0 m)) (times m (S n)) (times-n-Sm m n)) (times (S n) m) (commutative-times (S n) m)) O eqn0) (minus m n) (let-clause-15491 m n eqn0 m)) O eqn0) (gcd n m) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (gcd X-- m) m) (gcd-O-l m) n eqn0)))))) O eqn0) (le-to-or-lt-eq O n (le-O-n n))

let-clause-1545 : (m : nat) -> (n : nat) -> (H : eq lzero nat (gcd m n) O) -> (X-clearme : divides O n) -> (q1 : nat) -> (H1 : eq lzero nat n (times O q1)) -> (X-clearme0 : divides O m) -> (q2 : nat) -> (H2 : eq lzero nat m (times O q2)) -> eq lzero nat m O
let-clause-1545 = λ (m : nat) -> λ (n : nat) -> λ (H : eq lzero nat (gcd m n) O) -> λ (X-clearme : divides O n) -> λ (q1 : nat) -> λ (H1 : eq lzero nat n (times O q1)) -> λ (X-clearme0 : divides O m) -> λ (q2 : nat) -> λ (H2 : eq lzero nat m (times O q2)) -> rewrite-r lzero lzero nat (times q2 O) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-l lzero lzero nat (times O q2) (λ (X-- : nat) -> eq lzero nat m X--) H2 (times q2 O) (commutative-times O q2)) O (times-n-O q2)

gcd-O-to-eq-O : (m : nat) -> (n : nat) -> (X-- : eq lzero nat (gcd m n) O) -> And lzero lzero (eq lzero nat m O) (eq lzero nat n O)
gcd-O-to-eq-O = λ (m : nat) -> λ (n : nat) -> λ (H : eq lzero nat (gcd m n) O) -> match-And lzero lzero (divides O n) (divides O m) lzero (λ (X-- : And lzero lzero (divides O n) (divides O m)) -> And lzero lzero (eq lzero nat m O) (eq lzero nat n O)) (λ (X-clearme : divides O n) -> match-divides O n lzero (λ (X-- : divides O n) -> (X--1 : divides O m) -> And lzero lzero (eq lzero nat m O) (eq lzero nat n O)) (λ (q1 : nat) -> λ (H1 : eq lzero nat n (times O q1)) -> λ (X-clearme0 : divides O m) -> match-divides O m lzero (λ (X-- : divides O m) -> And lzero lzero (eq lzero nat m O) (eq lzero nat n O)) (λ (q2 : nat) -> λ (H2 : eq lzero nat m (times O q2)) -> conj lzero lzero (eq lzero nat m O) (eq lzero nat n O) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) O (rewrite-r lzero lzero nat (times q2 O) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-l lzero lzero nat (times O q2) (λ (X-- : nat) -> eq lzero nat m X--) H2 (times q2 O) (commutative-times O q2)) O (times-n-O q2))) (rewrite-r lzero lzero nat m (λ (X-- : nat) -> eq lzero nat X-- O) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) O (let-clause-1545 m n H X-clearme q1 H1 X-clearme0 q2 H2)) n (rewrite-r lzero lzero nat (times m q1) (λ (X-- : nat) -> eq lzero nat n X--) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat n (times X-- q1)) H1 m (let-clause-1545 m n H X-clearme q1 H1 X-clearme0 q2 H2)) m (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat m (times X-- q1)) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- (times O q1)) (times-O-n q1) m (let-clause-1545 m n H X-clearme q1 H1 X-clearme0 q2 H2)) m (let-clause-1545 m n H X-clearme q1 H1 X-clearme0 q2 H2))))) X-clearme0) X-clearme) (eq-ind lzero lzero nat (gcd m n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (gcd m n) x-1) -> And lzero lzero (divides x-1 n) (divides x-1 m)) (divides-gcd-nm m n) O H)

let-clause-1571 : (m : nat) -> (n : nat) -> (posn : lt O n) -> (H : eq lzero nat (gcd m n) O) -> (auto : eq lzero nat m O) -> (auto' : eq lzero nat n O) -> eq lzero nat m n
let-clause-1571 = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (H : eq lzero nat (gcd m n) O) -> λ (auto : eq lzero nat m O) -> λ (auto' : eq lzero nat n O) -> rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat m X--) auto n auto'

let-clause-1572 : (m : nat) -> (n : nat) -> (posn : lt O n) -> (H : eq lzero nat (gcd m n) O) -> (auto : eq lzero nat m O) -> (auto' : eq lzero nat n O) -> eq lzero nat m O
let-clause-1572 = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> λ (H : eq lzero nat (gcd m n) O) -> λ (auto : eq lzero nat m O) -> λ (auto' : eq lzero nat n O) -> rewrite-r lzero lzero nat n (λ (X-- : nat) -> eq lzero nat X-- O) auto' m (let-clause-1571 m n posn H auto auto')

lt-O-gcd : (m : nat) -> (n : nat) -> (X-- : lt O n) -> lt O (gcd m n)
lt-O-gcd = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> nat-case lzero (gcd m n) (lt O) (λ (H : eq lzero nat (gcd m n) O) -> match-And lzero lzero (eq lzero nat m O) (eq lzero nat n O) lzero (λ (X-- : And lzero lzero (eq lzero nat m O) (eq lzero nat n O)) -> lt O O) (λ (auto : eq lzero nat m O) -> λ (auto' : eq lzero nat n O) -> eq-coerc lzero (lt O n) (lt O O) posn (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- n) (lt O O)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt O O)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m m) (lt X-- O)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m m) (lt m X--)) (refl (lsuc lzero) (Set (lzero)) (lt m m)) O (let-clause-1572 m n posn H auto auto')) O (let-clause-1572 m n posn H auto auto')) n (let-clause-1571 m n posn H auto auto')) O (let-clause-1572 m n posn H auto auto'))) (gcd-O-to-eq-O m n H)) (λ (m0 : nat) -> λ (auto : eq lzero nat (gcd m n) (S m0)) -> lt-O-S m0)

gcd-n-n : (n : nat) -> eq lzero nat (gcd n n) n
gcd-n-n = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> eq lzero nat (gcd X-- X--) X--) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- O) (refl lzero nat O) (gcd O O) (gcd-O-l O)) (λ (m : nat) -> le-to-le-to-eq (gcd (S m) (S m)) (S m) (divides-to-le (gcd (S m) (S m)) (S m) (lt-O-S m) (divides-gcd-r (S m) (S m))) (divides-to-le (S m) (gcd (S m) (S m)) (lt-O-gcd (S m) (S m) (lt-O-S m)) (divides-d-gcd (S m) (S m) (S m) (divides-n-n (S m)) (divides-n-n (S m))))) n

gcd-1-to-lt-O : (i : nat) -> (n : nat) -> (X-- : lt (S O) n) -> (X--1 : eq lzero nat (gcd i n) (S O)) -> lt O i
gcd-1-to-lt-O = λ (i : nat) -> λ (n : nat) -> λ (lt1n : lt (S O) n) -> λ (gcd1 : eq lzero nat (gcd i n) (S O)) -> match-Or lzero lzero (lt O i) (eq lzero nat O i) lzero (λ (X-- : Or lzero lzero (lt O i) (eq lzero nat O i)) -> lt O i) (λ (auto : lt O i) -> auto) (λ (iO : eq lzero nat O i) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O i) (absurd lzero (eq lzero nat (gcd i n) (S O)) gcd1 (eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> Not lzero (eq lzero nat (gcd x-1 n) (S O))) (sym-not-eq lzero nat (S O) n (lt-to-not-eq (S O) n lt1n)) i iO))) (le-to-or-lt-eq O i (le-O-n i))

gcd-1-to-lt-n : (i : nat) -> (n : nat) -> (X-- : lt (S O) n) -> (X--1 : le i n) -> (X--2 : eq lzero nat (gcd i n) (S O)) -> lt i n
gcd-1-to-lt-n = λ (i : nat) -> λ (n : nat) -> λ (lt1n : lt (S O) n) -> λ (lein : le i n) -> λ (gcd1 : eq lzero nat (gcd i n) (S O)) -> match-Or lzero lzero (lt i n) (eq lzero nat i n) lzero (λ (X-- : Or lzero lzero (lt i n) (eq lzero nat i n)) -> lt i n) (λ (auto : lt i n) -> auto) (λ (auto : eq lzero nat i n) -> eq-coerc lzero (lt (S O) n) (lt i n) lt1n (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- n) (lt i n)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i n)) (rewrite-l lzero (lsuc lzero) nat i (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i i) (lt i X--)) (refl (lsuc lzero) (Set (lzero)) (lt i i)) n auto) n auto) (S O) (rewrite-l lzero lzero nat (gcd i i) (λ (X-- : nat) -> eq lzero nat X-- (S O)) (rewrite-r lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (gcd i X--) (S O)) gcd1 i auto) i (gcd-n-n i)))) (le-to-or-lt-eq i n lein)

gcd-n-times-nm : (n : nat) -> (m : nat) -> (X-- : lt O m) -> eq lzero nat (gcd n (times n m)) n
gcd-n-times-nm = λ (n : nat) -> λ (m : nat) -> λ (posm : lt O m) -> nat-case lzero n (λ (X-- : nat) -> eq lzero nat (gcd X-- (times X-- m)) X--) (λ (auto : eq lzero nat n O) -> rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (gcd X-- (times O m)) O) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (gcd n (times X-- m)) O) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (gcd n X--) O) (rewrite-r lzero lzero nat n (λ (X-- : nat) -> eq lzero nat X-- O) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat n X--) (refl lzero nat n) O auto) (gcd n n) (gcd-n-n n)) (times n m) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat n (times X-- m)) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- (times O m)) (times-O-n m) n auto) n auto)) O auto) O auto) (λ (l : nat) -> λ (eqn : eq lzero nat n (S l)) -> le-to-le-to-eq (gcd (S l) (times (S l) m)) (S l) (divides-to-le (gcd (S l) (times (S l) m)) (S l) (lt-O-S l) (eq-coerc lzero (divides (gcd (times (S l) m) (S l)) (S l)) (divides (gcd (S l) (times (S l) m)) (S l)) (divides-gcd-r (times (S l) m) (S l)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (gcd (times (S l) m) (S l)) (S l)) (divides (gcd X-- (times (S l) m)) (S l))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (gcd (times (S l) m) (S l)) (S l)) (divides (gcd n (times X-- m)) (S l))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (gcd (times X-- m) X--) X--) (divides (gcd n (times n m)) X--)) (rewrite-r lzero (lsuc lzero) nat (gcd n (times n m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- n) (divides (gcd n (times n m)) n)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd n (times n m)) n)) (gcd (times n m) n) (commutative-gcd (times n m) n)) (S l) eqn) (S l) eqn) (S l) eqn))) (divides-to-le (S l) (gcd (S l) (times (S l) m)) (lt-O-gcd (S l) (times (S l) m) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times (S l) m)) (lt-times O (S l) O m (lt-O-S l) posm) O (times-n-O O))) (divides-d-gcd (times (S l) m) (S l) (S l) (eq-coerc lzero (divides (times n (S O)) (times n m)) (divides (S l) (times (S l) m)) (divides-times n (S O) n m (divides-n-n n) (divides-SO-n m)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (times n (S O)) (times n m)) (divides X-- (times (S l) m))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (times n (S O)) (times n m)) (divides n (times X-- m))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- (times n m)) (divides n (times n m))) (refl (lsuc lzero) (Set (lzero)) (divides n (times n m))) (times n (S O)) (times-n-1 n)) (S l) eqn) (S l) eqn)) (divides-n-n (S l)))))

le-gcd-times : (m : nat) -> (n : nat) -> (p : nat) -> (X-- : lt O p) -> le (gcd m n) (gcd m (times n p))
le-gcd-times = λ (m : nat) -> λ (n : nat) -> λ (p : nat) -> λ (posp : lt O p) -> nat-case lzero n (λ (X-- : nat) -> le (gcd m X--) (gcd m (times X-- p))) (λ (auto : eq lzero nat n O) -> le-n (gcd m O)) (λ (l : nat) -> λ (eqn : eq lzero nat n (S l)) -> divides-to-le (gcd m (S l)) (gcd m (times (S l) p)) (lt-O-gcd m (times (S l) p) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times (S l) p)) (lt-times O (S l) O p (lt-O-S l) posp) O (times-n-O O))) (divides-d-gcd (times (S l) p) m (gcd m (S l)) (transitive-divides (gcd m (S l)) (S l) (times (S l) p) (divides-gcd-r m (S l)) (eq-coerc lzero (divides (times n (S O)) (times n p)) (divides (S l) (times (S l) p)) (divides-times n (S O) n p (divides-n-n n) (divides-SO-n p)) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (times n (S O)) (times n p)) (divides X-- (times (S l) p))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (times n (S O)) (times n p)) (divides n (times X-- p))) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- (times n p)) (divides n (times n p))) (refl (lsuc lzero) (Set (lzero)) (divides n (times n p))) (times n (S O)) (times-n-1 n)) (S l) eqn) (S l) eqn))) (eq-coerc lzero (divides (gcd (S l) m) m) (divides (gcd m (S l)) m) (divides-gcd-r (S l) m) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (gcd X-- m) m) (divides (gcd m X--) m)) (rewrite-r lzero (lsuc lzero) nat (gcd m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- m) (divides (gcd m n) m)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd m n) m)) (gcd n m) (commutative-gcd n m)) (S l) eqn))))

gcd-times-SO-to-gcd-SO : (m : nat) -> (n : nat) -> (p : nat) -> (X-- : lt O n) -> (X--1 : lt O p) -> (X--2 : eq lzero nat (gcd m (times n p)) (S O)) -> eq lzero nat (gcd m n) (S O)
gcd-times-SO-to-gcd-SO = λ (m : nat) -> λ (n : nat) -> λ (p : nat) -> λ (posn : lt O n) -> λ (posp : lt O p) -> λ (gcd1 : eq lzero nat (gcd m (times n p)) (S O)) -> le-to-le-to-eq (gcd m n) (S O) (eq-ind lzero lzero nat (gcd m (times n p)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (gcd m (times n p)) x-1) -> le (gcd m n) x-1) (le-gcd-times m n p posp) (S O) gcd1) (lt-O-gcd m n posn)

eq-gcd-SO-to-not-divides : (n : nat) -> (m : nat) -> (X-- : lt (S O) n) -> (X--1 : eq lzero nat (gcd n m) (S O)) -> Not lzero (divides n m)
eq-gcd-SO-to-not-divides = λ (n : nat) -> λ (m : nat) -> λ (lt1n : lt (S O) n) -> λ (gcd1 : eq lzero nat (gcd n m) (S O)) -> not-to-not lzero (divides n m) (eq lzero nat (gcd n m) n) (λ (divnm : divides n m) -> divides-to-gcd m n (lt-S-to-lt O n lt1n) divnm) (lt-to-not-eq (gcd n m) n (eq-coerc lzero (lt (S O) n) (lt (gcd n m) n) lt1n (rewrite-l lzero (lsuc lzero) nat (gcd n m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- n) (lt (gcd n m) n)) (refl (lsuc lzero) (Set (lzero)) (lt (gcd n m) n)) (S O) gcd1)))

gcd-SO-n : (n : nat) -> eq lzero nat (gcd (S O) n) (S O)
gcd-SO-n = λ (n : nat) -> le-to-le-to-eq (gcd (S O) n) (S O) (divides-to-le (gcd (S O) n) (S O) (lt-O-S O) (eq-coerc lzero (divides (gcd n (S O)) (S O)) (divides (gcd (S O) n) (S O)) (divides-gcd-r n (S O)) (rewrite-r lzero (lsuc lzero) nat (gcd n (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides (gcd n (S O)) (S O)) (divides X-- (S O))) (refl (lsuc lzero) (Set (lzero)) (divides (gcd n (S O)) (S O))) (gcd (S O) n) (commutative-gcd (S O) n)))) (eq-ind-r lzero lzero nat (gcd n (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (gcd n (S O))) -> le (S O) x) (lt-O-gcd n (S O) (lt-O-S O)) (gcd (S O) n) (commutative-gcd (S O) n))

divides-gcd-mod : (m : nat) -> (n : nat) -> (X-- : lt O n) -> divides (gcd m n) (gcd n (mod m n))
divides-gcd-mod = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> divides-d-gcd (mod m n) n (gcd m n) (divides-mod (gcd m n) m n posn (eq-coerc lzero (divides (gcd n m) m) (divides (gcd m n) m) (divides-gcd-r n m) (rewrite-r lzero (lsuc lzero) nat (gcd m n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- m) (divides (gcd m n) m)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd m n) m)) (gcd n m) (commutative-gcd n m))) (divides-gcd-r m n)) (divides-gcd-r m n)

divides-mod-gcd : (m : nat) -> (n : nat) -> (X-- : lt O n) -> divides (gcd n (mod m n)) (gcd m n)
divides-mod-gcd = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> divides-d-gcd n m (gcd n (mod m n)) (divides-gcd-l n (mod m n)) (divides-mod-to-divides (gcd n (mod m n)) m n posn (divides-gcd-r n (mod m n)) (eq-coerc lzero (divides (gcd (mod m n) n) n) (divides (gcd n (mod m n)) n) (divides-gcd-r (mod m n) n) (rewrite-r lzero (lsuc lzero) nat (gcd n (mod m n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- n) (divides (gcd n (mod m n)) n)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd n (mod m n)) n)) (gcd (mod m n) n) (commutative-gcd (mod m n) n))))

gcd-mod : (m : nat) -> (n : nat) -> (X-- : lt O n) -> eq lzero nat (gcd n (mod m n)) (gcd m n)
gcd-mod = λ (m : nat) -> λ (n : nat) -> λ (posn : lt O n) -> antisymmetric-divides (gcd n (mod m n)) (gcd m n) (divides-mod-gcd m n posn) (divides-gcd-mod m n posn)

prime-to-gcd-1 : (n : nat) -> (m : nat) -> (X-- : prime n) -> (X--1 : Not lzero (divides n m)) -> eq lzero nat (gcd n m) (S O)
prime-to-gcd-1 = λ (n : nat) -> λ (m : nat) -> λ (X-clearme : prime n) -> match-And lzero lzero (lt (S O) n) ((m1 : nat) -> (X-- : divides m1 n) -> (X--1 : lt (S O) m1) -> eq lzero nat m1 n) lzero (λ (X-- : And lzero lzero (lt (S O) n) ((m0 : nat) -> (X-- : divides m0 n) -> (X--1 : lt (S O) m0) -> eq lzero nat m0 n)) -> (X--1 : Not lzero (divides n m)) -> eq lzero nat (gcd n m) (S O)) (λ (lt1n : lt (S O) n) -> λ (primen : (m0 : nat) -> (X-- : divides m0 n) -> (X--1 : lt (S O) m0) -> eq lzero nat m0 n) -> λ (ndivnm : Not lzero (divides n m)) -> le-to-le-to-eq (gcd n m) (S O) (not-lt-to-le (S O) (gcd n m) (not-to-not lzero (lt (S O) (gcd n m)) (eq lzero nat (gcd n m) n) (primen (gcd n m) (divides-gcd-l n m)) (not-to-not lzero (eq lzero nat (gcd n m) n) (divides n m) (λ (auto : eq lzero nat (gcd n m) n) -> eq-coerc lzero (divides (gcd n m) m) (divides n m) (divides-gcd-r n m) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- m) (divides n m)) (refl (lsuc lzero) (Set (lzero)) (divides n m)) (gcd n m) auto)) ndivnm))) (lt-O-gcd n m (not-eq-to-le-to-lt O m (not-to-not lzero (eq lzero nat O m) (divides n m) (λ (auto : eq lzero nat O m) -> eq-coerc lzero (divides n O) (divides n m) (divides-n-O n) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides n X--) (divides n m)) (refl (lsuc lzero) (Set (lzero)) (divides n m)) O auto)) ndivnm) (le-O-n m)))) X-clearme

divides-times-to-divides : (p : nat) -> (n : nat) -> (m : nat) -> (X-- : prime p) -> (X--1 : divides p (times n m)) -> Or lzero lzero (divides p n) (divides p m)
divides-times-to-divides = λ (p : nat) -> λ (n : nat) -> λ (m : nat) -> λ (primp : prime p) -> λ (X-clearme : divides p (times n m)) -> match-divides p (times n m) lzero (λ (X-- : divides p (times n m)) -> Or lzero lzero (divides p n) (divides p m)) (λ (c : nat) -> λ (nm : eq lzero nat (times n m) (times p c)) -> match-Or lzero lzero (divides p n) (Not lzero (divides p n)) lzero (λ (X-- : Or lzero lzero (divides p n) (Not lzero (divides p n))) -> Or lzero lzero (divides p n) (divides p m)) (λ (auto : divides p n) -> or-introl lzero lzero (divides p n) (divides p m) auto) (λ (ndivpn : Not lzero (divides p n)) -> or-intror lzero lzero (divides p n) (divides p m) (match-ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O)))) lzero (λ (X-- : ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O))))) -> divides p m) (λ (a : nat) -> λ (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O)))) -> match-ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O))) lzero (λ (X-- : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O)))) -> divides p m) (λ (b : nat) -> λ (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O))) -> match-Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O)) lzero (λ (X-- : Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) (S O)) (eq lzero nat (minus (times b p) (times a n)) (S O))) -> divides p m) (λ (H : eq lzero nat (minus (times a n) (times b p)) (S O)) -> quotient p m (minus (times a c) (times b m)) (eq-ind-r lzero lzero nat (minus (times p (times a c)) (times p (times b m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times p (times a c)) (times p (times b m)))) -> eq lzero nat m x) (eq-ind lzero lzero nat (times (times p a) c) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p a) c) x-1) -> eq lzero nat m (minus x-1 (times p (times b m)))) (eq-ind-r lzero lzero nat (times a p) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a p)) -> eq lzero nat m (minus (times x c) (times p (times b m)))) (eq-ind-r lzero lzero nat (times a (times p c)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (times p c))) -> eq lzero nat m (minus x (times p (times b m)))) (eq-ind lzero lzero nat (times n m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times n m) x-1) -> eq lzero nat m (minus (times a x-1) (times p (times b m)))) (eq-ind lzero lzero nat (times (times a n) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times a n) m) x-1) -> eq lzero nat m (minus x-1 (times p (times b m)))) (eq-ind lzero lzero nat (times (times p b) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p b) m) x-1) -> eq lzero nat m (minus (times (times a n) m) x-1)) (eq-ind lzero lzero nat (times m (times a n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times m (times a n)) x-1) -> eq lzero nat m (minus x-1 (times (times p b) m))) (eq-ind-r lzero lzero nat (times m (times p b)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times m (times p b))) -> eq lzero nat m (minus (times m (times a n)) x)) (eq-ind lzero lzero nat (times m (minus (times a n) (times p b))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times m (minus (times a n) (times p b))) x-1) -> eq lzero nat m x-1) (rewrite-r lzero lzero nat (times n a) (λ (X-- : nat) -> eq lzero nat m (times m (minus X-- (times p b)))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) (times m (minus (times n a) (times p b))) (rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat m (times m X--)) (times-n-1 m) (minus (times n a) (times p b)) (rewrite-l lzero lzero nat (times b p) (λ (X-- : nat) -> eq lzero nat (minus (times n a) X--) (S O)) (rewrite-l lzero lzero nat (times a n) (λ (X-- : nat) -> eq lzero nat (minus X-- (times b p)) (S O)) H (times n a) (commutative-times a n)) (times p b) (commutative-times b p)))) (times a n) (commutative-times a n)) (minus (times m (times a n)) (times m (times p b))) (distributive-times-minus m (times a n) (times p b))) (times (times p b) m) (commutative-times (times p b) m)) (times (times a n) m) (commutative-times m (times a n))) (times p (times b m)) (associative-times p b m)) (times a (times n m)) (associative-times a n m)) (times p c) nm) (times (times a p) c) (associative-times a p c)) (times p a) (commutative-times p a)) (times p (times a c)) (associative-times p a c)) (times p (minus (times a c) (times b m))) (distributive-times-minus p (times a c) (times b m)))) (λ (H : eq lzero nat (minus (times b p) (times a n)) (S O)) -> quotient p m (minus (times b m) (times a c)) (eq-ind-r lzero lzero nat (minus (times p (times b m)) (times p (times a c))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times p (times b m)) (times p (times a c)))) -> eq lzero nat m x) (eq-ind lzero lzero nat (times (times p b) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p b) m) x-1) -> eq lzero nat m (minus x-1 (times p (times a c)))) (eq-ind lzero lzero nat (times (times p a) c) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p a) c) x-1) -> eq lzero nat m (minus (times (times p b) m) x-1)) (eq-ind lzero lzero nat (times a p) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times a p) x-1) -> eq lzero nat m (minus (times (times p b) m) (times x-1 c))) (eq-ind-r lzero lzero nat (times a (times p c)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (times p c))) -> eq lzero nat m (minus (times (times p b) m) x)) (eq-ind lzero lzero nat (times n m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times n m) x-1) -> eq lzero nat m (minus (times (times p b) m) (times a x-1))) (eq-ind lzero lzero nat (times (times a n) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times a n) m) x-1) -> eq lzero nat m (minus (times (times p b) m) x-1)) (eq-ind lzero lzero nat (times m (times p b)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times m (times p b)) x-1) -> eq lzero nat m (minus x-1 (times (times a n) m))) (eq-ind-r lzero lzero nat (times m (times a n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times m (times a n))) -> eq lzero nat m (minus (times m (times p b)) x)) (eq-ind lzero lzero nat (times m (minus (times p b) (times a n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times m (minus (times p b) (times a n))) x-1) -> eq lzero nat m x-1) (rewrite-r lzero lzero nat (times n a) (λ (X-- : nat) -> eq lzero nat m (times m (minus (times p b) X--))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) (times m (minus (times p b) (times n a))) (rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat m (times m X--)) (times-n-1 m) (minus (times p b) (times n a)) (rewrite-l lzero lzero nat (times a n) (λ (X-- : nat) -> eq lzero nat (minus (times p b) X--) (S O)) (rewrite-l lzero lzero nat (times b p) (λ (X-- : nat) -> eq lzero nat (minus X-- (times a n)) (S O)) H (times p b) (commutative-times b p)) (times n a) (commutative-times a n)))) (times a n) (commutative-times a n)) (minus (times m (times p b)) (times m (times a n))) (distributive-times-minus m (times p b) (times a n))) (times (times a n) m) (commutative-times (times a n) m)) (times (times p b) m) (commutative-times m (times p b))) (times a (times n m)) (associative-times a n m)) (times p c) nm) (times (times a p) c) (associative-times a p c)) (times p a) (commutative-times a p)) (times p (times a c)) (associative-times p a c)) (times p (times b m)) (associative-times p b m)) (times p (minus (times b m) (times a c))) (distributive-times-minus p (times b m) (times a c)))) X-clearme1) X-clearme0) (eq-ind lzero lzero nat (gcd p n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (gcd p n) x-1) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) x-1) (eq lzero nat (minus (times b p) (times a n)) x-1)))) (eq-ind-r lzero lzero nat (gcd n p) (λ (x : nat) -> λ (X-- : eq lzero nat x (gcd n p)) -> ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a n) (times b p)) x) (eq lzero nat (minus (times b p) (times a n)) x)))) (eq-minus-gcd p n) (gcd p n) (commutative-gcd p n)) (S O) (prime-to-gcd-1 p n primp ndivpn)))) (decidable-divides p n)) X-clearme

divides-exp-to-divides : (p : nat) -> (n : nat) -> (m : nat) -> (X-- : prime p) -> (X--1 : divides p (exp n m)) -> divides p n
divides-exp-to-divides = λ (p : nat) -> λ (n : nat) -> λ (m : nat) -> λ (primep : prime p) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : divides p (exp n X-x-365)) -> divides p n) (λ (auto : divides p (S O)) -> transitive-divides p (S O) n auto (divides-SO-n n)) (λ (l : nat) -> λ (Hind : (X-- : divides p (exp n l)) -> divides p n) -> λ (H : divides p (times (exp n l) n)) -> match-Or lzero lzero (divides p (exp n l)) (divides p n) lzero (λ (X-- : Or lzero lzero (divides p (exp n l)) (divides p n)) -> divides p n) (λ (auto : divides p (exp n l)) -> Hind auto) (λ (auto : divides p n) -> auto) (divides-times-to-divides p (exp n l) n primep H)) m

divides-exp-to-eq : (p : nat) -> (q : nat) -> (m : nat) -> (X-- : prime p) -> (X--1 : prime q) -> (X--2 : divides p (exp q m)) -> eq lzero nat p q
divides-exp-to-eq = λ (p : nat) -> λ (q : nat) -> λ (m : nat) -> λ (H : prime p) -> λ (X-clearme : prime q) -> match-And lzero lzero (lt (S O) q) ((m1 : nat) -> (X-- : divides m1 q) -> (X--1 : lt (S O) m1) -> eq lzero nat m1 q) lzero (λ (X-- : And lzero lzero (lt (S O) q) ((m0 : nat) -> (X-- : divides m0 q) -> (X--1 : lt (S O) m0) -> eq lzero nat m0 q)) -> (X--1 : divides p (exp q m)) -> eq lzero nat p q) (λ (lt1q : lt (S O) q) -> λ (primeq : (m0 : nat) -> (X-- : divides m0 q) -> (X--1 : lt (S O) m0) -> eq lzero nat m0 q) -> λ (H0 : divides p (exp q m)) -> primeq p (divides-exp-to-divides p q m H H0) (prime-to-lt-SO p H)) X-clearme

let-clause-1595 : (p : nat) -> (n : nat) -> (m : nat) -> (posn : lt O n) -> (posm : lt O m) -> (primepn : eq lzero nat (gcd p n) (S O)) -> (primepm : eq lzero nat (gcd p m) (S O)) -> (lt1gcd : lt (S O) (gcd p (times n m))) -> (H : divides (smallest-factor (gcd p (times n m))) m) -> eq lzero nat (gcd p n) (gcd p m)
let-clause-1595 = λ (p : nat) -> λ (n : nat) -> λ (m : nat) -> λ (posn : lt O n) -> λ (posm : lt O m) -> λ (primepn : eq lzero nat (gcd p n) (S O)) -> λ (primepm : eq lzero nat (gcd p m) (S O)) -> λ (lt1gcd : lt (S O) (gcd p (times n m))) -> λ (H : divides (smallest-factor (gcd p (times n m))) m) -> rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat (gcd p n) X--) primepn (gcd p m) primepm

eq-gcd-times-1 : (p : nat) -> (n : nat) -> (m : nat) -> (X-- : lt O n) -> (X--1 : lt O m) -> (X--2 : eq lzero nat (gcd p n) (S O)) -> (X--3 : eq lzero nat (gcd p m) (S O)) -> eq lzero nat (gcd p (times n m)) (S O)
eq-gcd-times-1 = λ (p : nat) -> λ (n : nat) -> λ (m : nat) -> λ (posn : lt O n) -> λ (posm : lt O m) -> λ (primepn : eq lzero nat (gcd p n) (S O)) -> λ (primepm : eq lzero nat (gcd p m) (S O)) -> le-to-le-to-eq (gcd p (times n m)) (S O) (not-lt-to-le (S O) (gcd p (times n m)) (nmk lzero (lt (S O) (gcd p (times n m))) (λ (lt1gcd : lt (S O) (gcd p (times n m))) -> match-Or lzero lzero (divides (smallest-factor (gcd p (times n m))) n) (divides (smallest-factor (gcd p (times n m))) m) lzero (λ (X-- : Or lzero lzero (divides (smallest-factor (gcd p (times n m))) n) (divides (smallest-factor (gcd p (times n m))) m)) -> False lzero) (λ (H : divides (smallest-factor (gcd p (times n m))) n) -> absurd lzero (le (smallest-factor (gcd p (times n m))) (S O)) (eq-ind lzero lzero nat (gcd p n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (gcd p n) x-1) -> le (smallest-factor (gcd p (times n m))) x-1) (divides-to-le (smallest-factor (gcd p (times n m))) (gcd p n) (eq-coerc lzero (lt O (S O)) (lt O (gcd p n)) (lt-O-S O) (rewrite-l lzero (lsuc lzero) nat (gcd p n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O X--) (lt O (gcd p n))) (refl (lsuc lzero) (Set (lzero)) (lt O (gcd p n))) (S O) (rewrite-r lzero lzero nat (gcd p m) (λ (X-- : nat) -> eq lzero nat X-- (S O)) primepm (gcd p n) (rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat (gcd p n) X--) primepn (gcd p m) primepm)))) (divides-d-gcd n p (smallest-factor (gcd p (times n m))) H (transitive-divides (smallest-factor (gcd p (times n m))) (gcd p (times n m)) p (divides-smallest-factor-n (gcd p (times n m)) (lt-O-gcd p (times n m) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times n m)) (lt-times O n O m posn posm) O (times-n-O O)))) (eq-coerc lzero (divides (gcd (times n m) p) p) (divides (gcd p (times n m)) p) (divides-gcd-r (times n m) p) (rewrite-r lzero (lsuc lzero) nat (gcd p (times n m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- p) (divides (gcd p (times n m)) p)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd p (times n m)) p)) (gcd (times n m) p) (commutative-gcd (times n m) p)))))) (S O) primepn) (lt-to-not-le (S O) (smallest-factor (gcd p (times n m))) (lt-SO-smallest-factor (gcd p (times n m)) lt1gcd))) (λ (H : divides (smallest-factor (gcd p (times n m))) m) -> absurd lzero (le (smallest-factor (gcd p (times n m))) (S O)) (eq-ind lzero lzero nat (gcd p m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (gcd p m) x-1) -> le (smallest-factor (gcd p (times n m))) x-1) (divides-to-le (smallest-factor (gcd p (times n m))) (gcd p m) (eq-coerc lzero (lt O (S O)) (lt O (gcd p m)) (lt-O-S O) (rewrite-l lzero (lsuc lzero) nat (gcd p n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O (S O)) (lt O X--)) (rewrite-l lzero (lsuc lzero) nat (gcd p n) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt O X--) (lt O (gcd p n))) (refl (lsuc lzero) (Set (lzero)) (lt O (gcd p n))) (S O) (rewrite-r lzero lzero nat (gcd p m) (λ (X-- : nat) -> eq lzero nat X-- (S O)) primepm (gcd p n) (let-clause-1595 p n m posn posm primepn primepm lt1gcd H))) (gcd p m) (let-clause-1595 p n m posn posm primepn primepm lt1gcd H))) (divides-d-gcd m p (smallest-factor (gcd p (times n m))) H (transitive-divides (smallest-factor (gcd p (times n m))) (gcd p (times n m)) p (divides-smallest-factor-n (gcd p (times n m)) (lt-O-gcd p (times n m) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times n m)) (lt-times O n O m posn posm) O (times-n-O O)))) (eq-coerc lzero (divides (gcd (times n m) p) p) (divides (gcd p (times n m)) p) (divides-gcd-r (times n m) p) (rewrite-r lzero (lsuc lzero) nat (gcd p (times n m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (divides X-- p) (divides (gcd p (times n m)) p)) (refl (lsuc lzero) (Set (lzero)) (divides (gcd p (times n m)) p)) (gcd (times n m) p) (commutative-gcd (times n m) p)))))) (S O) primepm) (lt-to-not-le (S O) (smallest-factor (gcd p (times n m))) (lt-SO-smallest-factor (gcd p (times n m)) lt1gcd))) (divides-times-to-divides (smallest-factor (gcd p (times n m))) n m (prime-smallest-factor-n (gcd p (times n m)) lt1gcd) (transitive-divides (smallest-factor (gcd p (times n m))) (gcd p (times n m)) (times n m) (divides-smallest-factor-n (gcd p (times n m)) (lt-S-to-lt O (gcd p (times n m)) lt1gcd)) (divides-gcd-r p (times n m))))))) (lt-O-gcd p (times n m) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times n m)) (lt-times O n O m posn posm) O (times-n-O O)))

let-clause-1561 : (p : nat) -> (m : nat) -> (n : nat) -> (posn : lt O p) -> (gcd1 : eq lzero nat (gcd p m) (S O)) -> (X-clearme : divides p (times m n)) -> (c : nat) -> (nm : eq lzero nat (times m n) (times p c)) -> (a : nat) -> (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> (b : nat) -> (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> (H : eq lzero nat (minus (times a p) (times b m)) (gcd p m)) -> (H0 : eq lzero nat (minus (times a p) (times b m)) (S O)) -> eq lzero nat (minus (times p a) (times m b)) (S O)
let-clause-1561 = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O p) -> λ (gcd1 : eq lzero nat (gcd p m) (S O)) -> λ (X-clearme : divides p (times m n)) -> λ (c : nat) -> λ (nm : eq lzero nat (times m n) (times p c)) -> λ (a : nat) -> λ (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> λ (b : nat) -> λ (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> λ (H : eq lzero nat (minus (times a p) (times b m)) (gcd p m)) -> λ (H0 : eq lzero nat (minus (times a p) (times b m)) (S O)) -> rewrite-l lzero lzero nat (times b m) (λ (X-- : nat) -> eq lzero nat (minus (times p a) X--) (S O)) (rewrite-l lzero lzero nat (times a p) (λ (X-- : nat) -> eq lzero nat (minus X-- (times b m)) (S O)) H0 (times p a) (commutative-times a p)) (times m b) (commutative-times b m)

let-clause-1617 : (p : nat) -> (m : nat) -> (n : nat) -> (posn : lt O p) -> (gcd1 : eq lzero nat (gcd p m) (S O)) -> (X-clearme : divides p (times m n)) -> (c : nat) -> (nm : eq lzero nat (times m n) (times p c)) -> (a : nat) -> (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> (b : nat) -> (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> (H : eq lzero nat (minus (times a p) (times b m)) (gcd p m)) -> (H0 : eq lzero nat (minus (times a p) (times b m)) (S O)) -> eq lzero nat (gcd p m) (minus (times p a) (times m b))
let-clause-1617 = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O p) -> λ (gcd1 : eq lzero nat (gcd p m) (S O)) -> λ (X-clearme : divides p (times m n)) -> λ (c : nat) -> λ (nm : eq lzero nat (times m n) (times p c)) -> λ (a : nat) -> λ (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> λ (b : nat) -> λ (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> λ (H : eq lzero nat (minus (times a p) (times b m)) (gcd p m)) -> λ (H0 : eq lzero nat (minus (times a p) (times b m)) (S O)) -> rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat (gcd p m) X--) gcd1 (minus (times p a) (times m b)) (let-clause-1561 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0)

let-clause-15611 : (p : nat) -> (m : nat) -> (n : nat) -> (posn : lt O p) -> (gcd1 : eq lzero nat (gcd p m) (S O)) -> (X-clearme : divides p (times m n)) -> (c : nat) -> (nm : eq lzero nat (times m n) (times p c)) -> (a : nat) -> (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> (b : nat) -> (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> (H : eq lzero nat (minus (times b m) (times a p)) (gcd p m)) -> (H0 : eq lzero nat (minus (times b m) (times a p)) (S O)) -> eq lzero nat (minus (times m b) (times p a)) (S O)
let-clause-15611 = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O p) -> λ (gcd1 : eq lzero nat (gcd p m) (S O)) -> λ (X-clearme : divides p (times m n)) -> λ (c : nat) -> λ (nm : eq lzero nat (times m n) (times p c)) -> λ (a : nat) -> λ (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> λ (b : nat) -> λ (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> λ (H : eq lzero nat (minus (times b m) (times a p)) (gcd p m)) -> λ (H0 : eq lzero nat (minus (times b m) (times a p)) (S O)) -> rewrite-l lzero lzero nat (times a p) (λ (X-- : nat) -> eq lzero nat (minus (times m b) X--) (S O)) (rewrite-l lzero lzero nat (times b m) (λ (X-- : nat) -> eq lzero nat (minus X-- (times a p)) (S O)) H0 (times m b) (commutative-times b m)) (times p a) (commutative-times a p)

let-clause-16171 : (p : nat) -> (m : nat) -> (n : nat) -> (posn : lt O p) -> (gcd1 : eq lzero nat (gcd p m) (S O)) -> (X-clearme : divides p (times m n)) -> (c : nat) -> (nm : eq lzero nat (times m n) (times p c)) -> (a : nat) -> (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> (b : nat) -> (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> (H : eq lzero nat (minus (times b m) (times a p)) (gcd p m)) -> (H0 : eq lzero nat (minus (times b m) (times a p)) (S O)) -> eq lzero nat (gcd p m) (minus (times m b) (times p a))
let-clause-16171 = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O p) -> λ (gcd1 : eq lzero nat (gcd p m) (S O)) -> λ (X-clearme : divides p (times m n)) -> λ (c : nat) -> λ (nm : eq lzero nat (times m n) (times p c)) -> λ (a : nat) -> λ (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> λ (b : nat) -> λ (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> λ (H : eq lzero nat (minus (times b m) (times a p)) (gcd p m)) -> λ (H0 : eq lzero nat (minus (times b m) (times a p)) (S O)) -> rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat (gcd p m) X--) gcd1 (minus (times m b) (times p a)) (let-clause-15611 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0)

gcd-1-to-divides-times-to-divides : (p : nat) -> (n : nat) -> (m : nat) -> (X-- : lt O p) -> (X--1 : eq lzero nat (gcd p n) (S O)) -> (X--2 : divides p (times n m)) -> divides p m
gcd-1-to-divides-times-to-divides = λ (p : nat) -> λ (m : nat) -> λ (n : nat) -> λ (posn : lt O p) -> λ (gcd1 : eq lzero nat (gcd p m) (S O)) -> λ (X-clearme : divides p (times m n)) -> match-divides p (times m n) lzero (λ (X-- : divides p (times m n)) -> divides p n) (λ (c : nat) -> λ (nm : eq lzero nat (times m n) (times p c)) -> match-ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) lzero (λ (X-- : ex lzero lzero nat (λ (a : nat) -> ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))))) -> divides p n) (λ (a : nat) -> λ (X-clearme0 : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> match-ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) lzero (λ (X-- : ex lzero lzero nat (λ (b : nat) -> Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)))) -> divides p n) (λ (b : nat) -> λ (X-clearme1 : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> match-Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m)) lzero (λ (X-- : Or lzero lzero (eq lzero nat (minus (times a p) (times b m)) (gcd p m)) (eq lzero nat (minus (times b m) (times a p)) (gcd p m))) -> divides p n) (λ (H : eq lzero nat (minus (times a p) (times b m)) (gcd p m)) -> eq-ind-r lzero lzero nat (S O) (λ (x : nat) -> λ (X-- : eq lzero nat x (S O)) -> (X--1 : eq lzero nat (minus (times a p) (times b m)) x) -> divides p n) (λ (H0 : eq lzero nat (minus (times a p) (times b m)) (S O)) -> quotient p n (minus (times a n) (times c b)) (eq-ind-r lzero lzero nat (minus (times p (times a n)) (times p (times c b))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times p (times a n)) (times p (times c b)))) -> eq lzero nat n x) (eq-ind lzero lzero nat (times (times p a) n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p a) n) x-1) -> eq lzero nat n (minus x-1 (times p (times c b)))) (eq-ind lzero lzero nat (times (times p c) b) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p c) b) x-1) -> eq lzero nat n (minus (times (times p a) n) x-1)) (eq-ind lzero lzero nat (times m n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times m n) x-1) -> eq lzero nat n (minus (times (times p a) n) (times x-1 b))) (eq-ind-r lzero lzero nat (times n m) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n m)) -> eq lzero nat n (minus (times (times p a) n) (times x b))) (eq-ind-r lzero lzero nat (times n (times p a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n (times p a))) -> eq lzero nat n (minus x (times (times n m) b))) (eq-ind-r lzero lzero nat (times n (times m b)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n (times m b))) -> eq lzero nat n (minus (times n (times p a)) x)) (eq-ind lzero lzero nat (times n (minus (times p a) (times m b))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times n (minus (times p a) (times m b))) x-1) -> eq lzero nat n x-1) (rewrite-l lzero lzero nat (gcd p m) (λ (X-- : nat) -> eq lzero nat n (times n X--)) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat n X--) (refl lzero nat n) (times n (gcd p m)) (rewrite-r lzero lzero nat (minus (times p a) (times m b)) (λ (X-- : nat) -> eq lzero nat n (times n X--)) (rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat n (times n X--)) (times-n-1 n) (minus (times p a) (times m b)) (let-clause-1561 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0)) (gcd p m) (let-clause-1617 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0))) (minus (times p a) (times m b)) (let-clause-1617 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0)) (minus (times n (times p a)) (times n (times m b))) (distributive-times-minus n (times p a) (times m b))) (times (times n m) b) (associative-times n m b)) (times (times p a) n) (commutative-times (times p a) n)) (times m n) (commutative-times m n)) (times p c) nm) (times p (times c b)) (associative-times p c b)) (times p (times a n)) (associative-times p a n)) (times p (minus (times a n) (times c b))) (distributive-times-minus p (times a n) (times c b)))) (gcd p m) gcd1 H) (λ (H : eq lzero nat (minus (times b m) (times a p)) (gcd p m)) -> eq-ind-r lzero lzero nat (S O) (λ (x : nat) -> λ (X-- : eq lzero nat x (S O)) -> (X--1 : eq lzero nat (minus (times b m) (times a p)) x) -> divides p n) (λ (H0 : eq lzero nat (minus (times b m) (times a p)) (S O)) -> quotient p n (minus (times c b) (times a n)) (eq-ind-r lzero lzero nat (minus (times p (times c b)) (times p (times a n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times p (times c b)) (times p (times a n)))) -> eq lzero nat n x) (eq-ind lzero lzero nat (times (times p c) b) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p c) b) x-1) -> eq lzero nat n (minus x-1 (times p (times a n)))) (eq-ind lzero lzero nat (times (times p a) n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times p a) n) x-1) -> eq lzero nat n (minus (times (times p c) b) x-1)) (eq-ind lzero lzero nat (times m n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times m n) x-1) -> eq lzero nat n (minus (times x-1 b) (times (times p a) n))) (eq-ind-r lzero lzero nat (times n m) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n m)) -> eq lzero nat n (minus (times x b) (times (times p a) n))) (eq-ind lzero lzero nat (times n (times p a)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times n (times p a)) x-1) -> eq lzero nat n (minus (times (times n m) b) x-1)) (eq-ind-r lzero lzero nat (times n (times m b)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n (times m b))) -> eq lzero nat n (minus x (times n (times p a)))) (eq-ind lzero lzero nat (times n (minus (times m b) (times p a))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times n (minus (times m b) (times p a))) x-1) -> eq lzero nat n x-1) (rewrite-l lzero lzero nat (gcd p m) (λ (X-- : nat) -> eq lzero nat n (times n X--)) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat n X--) (refl lzero nat n) (times n (gcd p m)) (rewrite-r lzero lzero nat (minus (times m b) (times p a)) (λ (X-- : nat) -> eq lzero nat n (times n X--)) (rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat n (times n X--)) (times-n-1 n) (minus (times m b) (times p a)) (let-clause-15611 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0)) (gcd p m) (let-clause-16171 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0))) (minus (times m b) (times p a)) (let-clause-16171 p m n posn gcd1 X-clearme c nm a X-clearme0 b X-clearme1 H H0)) (minus (times n (times m b)) (times n (times p a))) (distributive-times-minus n (times m b) (times p a))) (times (times n m) b) (associative-times n m b)) (times (times p a) n) (commutative-times n (times p a))) (times m n) (commutative-times m n)) (times p c) nm) (times p (times a n)) (associative-times p a n)) (times p (times c b)) (associative-times p c b)) (times p (minus (times c b) (times a n))) (distributive-times-minus p (times c b) (times a n)))) (gcd p m) gcd1 H) X-clearme1) X-clearme0) (eq-minus-gcd m p)) X-clearme

divides-to-divides-times : (p : nat) -> (q : nat) -> (n : nat) -> (X-- : prime p) -> (X--1 : Not lzero (divides p q)) -> (X--2 : divides p n) -> (X--3 : divides q n) -> divides (times p q) n
divides-to-divides-times = λ (p : nat) -> λ (q : nat) -> λ (n : nat) -> λ (primep : prime p) -> λ (notdivpq : Not lzero (divides p q)) -> λ (divpn : divides p n) -> λ (X-clearme : divides q n) -> match-divides q n lzero (λ (X-- : divides q n) -> divides (times p q) n) (λ (b : nat) -> λ (eqn : eq lzero nat n (times q b)) -> eq-ind-r lzero lzero nat (times q b) (λ (x : nat) -> λ (X-- : eq lzero nat x (times q b)) -> (X--1 : divides p x) -> divides (times p q) x) (λ (divpn0 : divides p (times q b)) -> match-Or lzero lzero (divides p q) (divides p b) lzero (λ (X-- : Or lzero lzero (divides p q) (divides p b)) -> divides (times p q) (times q b)) (λ (H : divides p q) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> divides (times p q) (times q b)) (absurd lzero (divides p q) H notdivpq)) (λ (H : divides p b) -> match-divides p b lzero (λ (X-- : divides p b) -> divides (times p q) (times q b)) (λ (c : nat) -> λ (eqb-v : eq lzero nat b (times p c)) -> quotient (times p q) (times q b) c (eq-ind-r lzero lzero nat (times p c) (λ (x : nat) -> λ (X-- : eq lzero nat x (times p c)) -> eq lzero nat (times q x) (times (times p q) c)) (eq-ind lzero lzero nat (times (times q p) c) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times q p) c) x-1) -> eq lzero nat x-1 (times (times p q) c)) (rewrite-r lzero lzero nat (times p q) (λ (X-- : nat) -> eq lzero nat (times X-- c) (times (times p q) c)) (rewrite-r lzero lzero nat (times c (times p q)) (λ (X-- : nat) -> eq lzero nat X-- (times (times p q) c)) (rewrite-r lzero lzero nat (times p (times c q)) (λ (X-- : nat) -> eq lzero nat X-- (times (times p q) c)) (rewrite-r lzero lzero nat (times q c) (λ (X-- : nat) -> eq lzero nat (times p X--) (times (times p q) c)) (rewrite-r lzero lzero nat (times c (times p q)) (λ (X-- : nat) -> eq lzero nat (times p (times q c)) X--) (rewrite-r lzero lzero nat (times p (times c q)) (λ (X-- : nat) -> eq lzero nat (times p (times q c)) X--) (rewrite-r lzero lzero nat (times q c) (λ (X-- : nat) -> eq lzero nat (times p (times q c)) (times p X--)) (refl lzero nat (times p (times q c))) (times c q) (commutative-times c q)) (times c (times p q)) (times-times c p q)) (times (times p q) c) (commutative-times (times p q) c)) (times c q) (commutative-times c q)) (times c (times p q)) (times-times c p q)) (times (times p q) c) (commutative-times (times p q) c)) (times q p) (commutative-times q p)) (times q (times p c)) (associative-times q p c)) b eqb-v)) H) (divides-times-to-divides p q b primep divpn0)) n eqn divpn) X-clearme

