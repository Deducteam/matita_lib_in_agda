open import Agda.Primitive
open import matita-arithmetics-div-and-mod
open import matita-basics-logic
open import matita-arithmetics-exp
open import matita-arithmetics-bigops
open import matita-basics-bool
open import matita-arithmetics-nat
plusA : Aop lzero nat O
plusA = mk-Aop lzero nat O plus (λ (a : nat) -> refl lzero nat a) (λ (n : nat) -> sym-eq lzero nat n (plus n O) (plus-n-O n)) (λ (a : nat) -> λ (b : nat) -> λ (c : nat) -> sym-eq lzero nat (plus (plus a b) c) (plus a (plus b c)) (associative-plus a b c))

plusAC : ACop lzero nat O
plusAC = mk-ACop lzero nat O plusA commutative-plus

timesA : Aop lzero nat (S O)
timesA = mk-Aop lzero nat (S O) times (λ (a : nat) -> sym-eq lzero nat a (plus a O) (plus-n-O a)) (λ (n : nat) -> sym-eq lzero nat n (times n (S O)) (times-n-1 n)) (λ (a : nat) -> λ (b : nat) -> λ (c : nat) -> sym-eq lzero nat (times (times a b) c) (times a (times b c)) (associative-times a b c))

timesAC : ACop lzero nat (S O)
timesAC = mk-ACop lzero nat (S O) timesA commutative-times

natD : Dop lzero nat O
natD = mk-Dop lzero nat O plusAC times (λ (n : nat) -> sym-eq lzero nat O (times n O) (times-n-O n)) distributive-times-plus

sigma-const : (n : nat) -> eq lzero nat (bigop n (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) n
sigma-const = λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop X-x-365 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) X-x-365) (refl lzero nat (bigop O (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O))) (λ (n1 : nat) -> eq-ind-r lzero lzero nat (plus (S O) (bigop n1 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S O) (bigop n1 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)))) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) n1) -> eq lzero nat x (S n1)) (λ (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) n1) -> rewrite-r lzero lzero nat n1 (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S n1)) (rewrite-r lzero lzero nat (plus n1 (S O)) (λ (X-- : nat) -> eq lzero nat X-- (S n1)) (rewrite-l lzero lzero nat (S n1) (λ (X-- : nat) -> eq lzero nat X-- (S n1)) (refl lzero nat (S n1)) (plus n1 (S O)) (rewrite-r lzero lzero nat (plus n1 O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n1 (S O))) (plus-n-Sm n1 O) n1 (plus-n-O n1))) (plus (S O) n1) (commutative-plus (S O) n1)) (bigop n1 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) X-x-368) (bigop (S n1) (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) (bigop-Strue n1 (λ (X-- : nat) -> true) nat O plus (λ (X-- : nat) -> S O) (refl lzero bool true))) n

let-clause-1033'' : (n : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (g1 : (X-- : nat) -> nat) -> (g2 : (X-- : nat) -> nat) -> (n1 : nat) -> (Hind : (X-- : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (X--1 : (i : nat) -> (X--1 : lt i n1) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> le (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) -> (H1 : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (H2 : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> (Hp2 : eq lzero bool (p2 n1) true) -> (Hp1 : eq lzero bool (p1 n1) true) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-1033'' = λ (n : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (g1 : (X-- : nat) -> nat) -> λ (g2 : (X-- : nat) -> nat) -> λ (n1 : nat) -> λ (Hind : (X-- : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (X--1 : (i : nat) -> (X--1 : lt i n1) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> le (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) -> λ (H1 : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> λ (H2 : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> λ (Hp2 : eq lzero bool (p2 n1) true) -> λ (Hp1 : eq lzero bool (p1 n1) true) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

le-sigma : (n : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (g1 : (X-- : nat) -> nat) -> (g2 : (X-- : nat) -> nat) -> (X-- : (i : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (X--1 : (i : nat) -> (X--1 : lt i n) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> le (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))
le-sigma = λ (n : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (g1 : (X-- : nat) -> nat) -> λ (g2 : (X-- : nat) -> nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : (i : nat) -> (X-- : lt i X-x-365) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (X--1 : (i : nat) -> (X--1 : lt i X-x-365) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> le (bigop X-x-365 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop X-x-365 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (X-- : (i : nat) -> (X-- : lt i O) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> λ (X-0 : (i : nat) -> (X--1 : lt i O) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> le-n (bigop O (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (λ (n1 : nat) -> λ (Hind : (X-- : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (X--1 : (i : nat) -> (X--1 : lt i n1) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> le (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) -> λ (H1 : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> λ (H2 : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> match-Or lzero lzero (eq lzero bool (p2 n1) true) (eq lzero bool (p2 n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p2 n1) true) (eq lzero bool (p2 n1) false)) -> le (bigop (S n1) (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop (S n1) (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (Hp2 : eq lzero bool (p2 n1) true) -> eq-ind-r lzero lzero nat (plus (g2 n1) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (g2 n1) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)))) -> le (bigop (S n1) (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) x) (match-Or lzero lzero (eq lzero bool (p1 n1) true) (eq lzero bool (p1 n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p1 n1) true) (eq lzero bool (p1 n1) false)) -> le (bigop (S n1) (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (plus (g2 n1) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)))) (λ (Hp1 : eq lzero bool (p1 n1) true) -> eq-ind-r lzero lzero nat (plus (g1 n1) (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (g1 n1) (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)))) -> le x (plus (g2 n1) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)))) (le-plus (g1 n1) (g2 n1) (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)) (H2 n1 (eq-coerc lzero (lt (mod n1 O) (plus (plus (mod n1 O) (times O (div n1 O))) (S O))) (lt n1 (S n1)) (lt-plus-Sn-r (mod n1 O) (times O (div n1 O)) O) (rewrite-l lzero (lsuc lzero) nat n1 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod n1 O) (plus X-- (S O))) (lt n1 (S n1))) (rewrite-l lzero (lsuc lzero) nat n1 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus n1 (S O))) (lt n1 (S n1))) (rewrite-l lzero (lsuc lzero) nat (S n1) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt n1 X--) (lt n1 (S n1))) (refl (lsuc lzero) (Set (lzero)) (lt n1 (S n1))) (plus n1 (S O)) (rewrite-r lzero lzero nat (plus n1 O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n1 (S O))) (plus-n-Sm n1 O) n1 (plus-n-O n1))) (mod n1 O) (rewrite-r lzero lzero nat (plus O (mod n1 O)) (λ (X-- : nat) -> eq lzero nat n1 X--) (rewrite-l lzero lzero nat (plus (mod n1 O) O) (λ (X-- : nat) -> eq lzero nat n1 X--) (rewrite-r lzero lzero nat (times O (div n1 O)) (λ (X-- : nat) -> eq lzero nat n1 (plus (mod n1 O) X--)) (rewrite-l lzero lzero nat (plus (times O (div n1 O)) (mod n1 O)) (λ (X-- : nat) -> eq lzero nat n1 X--) (let-clause-1033'' n p1 p2 g1 g2 n1 Hind H1 H2 Hp2 Hp1 n1 O) (plus (mod n1 O) (times O (div n1 O))) (commutative-plus (times O (div n1 O)) (mod n1 O))) O (times-O-n (div n1 O))) (plus O (mod n1 O)) (commutative-plus (mod n1 O) O)) (mod n1 O) (plus-O-n (mod n1 O)))) (plus (mod n1 O) (times O (div n1 O))) (rewrite-l lzero lzero nat (plus (times O (div n1 O)) (mod n1 O)) (λ (X-- : nat) -> eq lzero nat n1 X--) (let-clause-1033'' n p1 p2 g1 g2 n1 Hind H1 H2 Hp2 Hp1 n1 O) (plus (mod n1 O) (times O (div n1 O))) (commutative-plus (times O (div n1 O)) (mod n1 O))))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p1 n1) Hp1)) (Hind (λ (j : nat) -> λ (ltin1 : lt j n1) -> λ (Hp1j : eq lzero bool (p1 j) true) -> H1 j (le-S (S j) n1 ltin1) Hp1j) (λ (j : nat) -> λ (ltin1 : lt j n1) -> λ (Hgj : eq lzero bool (p1 j) true) -> H2 j (le-S (S j) n1 ltin1) Hgj))) (bigop (S n1) (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop-Strue n1 p1 nat O plus g1 Hp1)) (λ (Hp1 : eq lzero bool (p1 n1) false) -> eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) -> le x (plus (g2 n1) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)))) (le-plus-a (g2 n1) (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)) (Hind (λ (j : nat) -> λ (ltin1 : lt j n1) -> λ (Hp1j : eq lzero bool (p1 j) true) -> H1 j (le-S (S j) n1 ltin1) Hp1j) (λ (j : nat) -> λ (ltin1 : lt j n1) -> λ (Hgj : eq lzero bool (p1 j) true) -> H2 j (le-S (S j) n1 ltin1) Hgj))) (bigop (S n1) (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop-Sfalse n1 p1 nat O plus g1 Hp1)) (true-or-false (p1 n1))) (bigop (S n1) (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)) (bigop-Strue n1 p2 nat O plus g2 Hp2)) (λ (Hp2 : eq lzero bool (p2 n1) false) -> eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) -> le x (bigop (S n1) (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) -> le (bigop n1 (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) x) (Hind (λ (j : nat) -> λ (ltin1 : lt j n1) -> λ (Hp1j : eq lzero bool (p1 j) true) -> H1 j (le-S (S j) n1 ltin1) Hp1j) (λ (j : nat) -> λ (ltin1 : lt j n1) -> λ (Hgj : eq lzero bool (p1 j) true) -> H2 j (le-S (S j) n1 ltin1) Hgj)) (bigop (S n1) (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i)) (bigop-Sfalse n1 p2 nat O plus g2 Hp2)) (bigop (S n1) (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop-Sfalse n1 p1 nat O plus g1 (match-Or lzero lzero (eq lzero bool (p1 n1) true) (eq lzero bool (p1 n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p1 n1) true) (eq lzero bool (p1 n1) false)) -> eq lzero bool (p1 n1) false) (λ (Hp1 : eq lzero bool (p1 n1) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero bool x false) -> eq lzero bool (p1 n1) false) (λ (H : eq lzero bool true false) -> bool-discr lzero true false H (eq lzero bool (p1 n1) false)) (p2 n1) (H1 n1 (le-n (S n1)) Hp1) Hp2) (λ (Hp1 : eq lzero bool (p1 n1) false) -> rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p1 n1) Hp1) (true-or-false (p1 n1))))) (true-or-false (p2 n1))) n

lt-sigma-p : (n : nat) -> (p1 : (X-- : nat) -> bool) -> (p2 : (X-- : nat) -> bool) -> (g1 : (X-- : nat) -> nat) -> (g2 : (X-- : nat) -> nat) -> (X-- : (i : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> (X--1 : (i : nat) -> (X--1 : lt i n) -> (X--2 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> (X--2 : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 i) true) (lt (g1 i) (g2 i))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 i) false) (eq lzero bool (p2 i) true)) (lt O (g2 i)))))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))
lt-sigma-p = λ (n : nat) -> λ (p1 : (X-- : nat) -> bool) -> λ (p2 : (X-- : nat) -> bool) -> λ (g1 : (X-- : nat) -> nat) -> λ (g2 : (X-- : nat) -> nat) -> λ (H1 : (i : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (p1 i) true) -> eq lzero bool (p2 i) true) -> λ (H2 : (i : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (p1 i) true) -> le (g1 i) (g2 i)) -> λ (X-clearme : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 i) true) (lt (g1 i) (g2 i))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 i) false) (eq lzero bool (p2 i) true)) (lt O (g2 i)))))) -> match-ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 i) true) (lt (g1 i) (g2 i))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 i) false) (eq lzero bool (p2 i) true)) (lt O (g2 i))))) lzero (λ (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 i) true) (lt (g1 i) (g2 i))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 i) false) (eq lzero bool (p2 i) true)) (lt O (g2 i)))))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (k : nat) -> λ (X-clearme0 : And lzero lzero (lt k n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k))))) -> match-And lzero lzero (lt k n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k)))) lzero (λ (X-- : And lzero lzero (lt k n) (Or lzero lzero (And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k))))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (ltk : lt k n) -> λ (X-clearme1 : Or lzero lzero (And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k)))) -> match-Or lzero lzero (And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k))) lzero (λ (X-- : Or lzero lzero (And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) (And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k)))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (X-clearme2 : And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) -> match-And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k)) lzero (λ (X-- : And lzero lzero (eq lzero bool (p1 k) true) (lt (g1 k) (g2 k))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (p1k : eq lzero bool (p1 k) true) -> λ (gk : lt (g1 k) (g2 k)) -> eq-ind-r lzero lzero nat (aop--o--op lzero nat O plusAC (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat O plusAC (g1 k) (bigop n (λ (x0 : nat) -> andb (notb (eqb k x0)) (p1 x0)) nat O (aop--o--op lzero nat O plusAC) (λ (x0 : nat) -> g1 x0)))) -> lt x (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (eq-ind-r lzero lzero nat (aop--o--op lzero nat O plusAC (g2 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p2 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat O plusAC (g2 k) (bigop n (λ (x0 : nat) -> andb (notb (eqb k x0)) (p2 x0)) nat O (aop--o--op lzero nat O plusAC) (λ (x0 : nat) -> g2 x0)))) -> lt (aop--o--op lzero nat O plusAC (g1 k) (bigop n (λ (x0 : nat) -> andb (notb (eqb k x0)) (p1 x0)) nat O (aop--o--op lzero nat O plusAC) (λ (x0 : nat) -> g1 x0))) x) (eq-ind lzero lzero nat (plus (S (g1 k)) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (S (g1 k)) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))) x-1) -> le x-1 (aop--o--op lzero nat O plusAC (g2 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p2 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x)))) (le-plus (S (g1 k)) (g2 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p2 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x)) gk (le-sigma n (λ (X-- : nat) -> andb (notb (eqb k X--)) (p1 X--)) (λ (X-- : nat) -> andb (notb (eqb k X--)) (p2 X--)) g1 g2 (λ (i : nat) -> λ (ltin : lt i n) -> λ (H : eq lzero bool (andb (notb (eqb k i)) (p1 i)) true) -> true-to-andb-true (notb (eqb k i)) (p2 i) (andb-true-l (notb (eqb k i)) (p1 i) H) (H1 i ltin (andb-true-r (notb (eqb k i)) (p1 i) H))) (λ (i : nat) -> λ (ltin : lt i n) -> λ (H : eq lzero bool (andb (notb (eqb k i)) (p1 i)) true) -> H2 i ltin (andb-true-r (notb (eqb k i)) (p1 i) H)))) (S (plus (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)))) (rewrite-r lzero lzero nat (plus (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (S (g1 k))) (λ (X-- : nat) -> eq lzero nat X-- (S (plus (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))))) (rewrite-r lzero lzero nat (plus (g1 k) (S (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)))) (λ (X-- : nat) -> eq lzero nat (plus (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (S (g1 k))) X--) (rewrite-r lzero lzero nat (plus (g1 k) (S (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)))) (λ (X-- : nat) -> eq lzero nat X-- (plus (g1 k) (S (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))))) (refl lzero nat (plus (g1 k) (S (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))))) (plus (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (S (g1 k))) (rewrite-l lzero lzero nat (S (plus (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (g1 k))) (λ (X-- : nat) -> eq lzero nat X-- (plus (g1 k) (S (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))))) (rewrite-l lzero lzero nat (plus (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))) (λ (X-- : nat) -> eq lzero nat (S X--) (plus (g1 k) (S (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))))) (plus-n-Sm (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))) (plus (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (g1 k)) (commutative-plus (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)))) (plus (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (S (g1 k))) (plus-n-Sm (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (g1 k)))) (S (plus (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)))) (plus-n-Sm (g1 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)))) (plus (S (g1 k)) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))) (commutative-plus (S (g1 k)) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p1 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x))))) (bigop n (λ (x : nat) -> p2 x) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x)) (bigop-diff p2 nat O plusAC g2 k n ltk (H1 k ltk p1k))) (bigop n (λ (x : nat) -> p1 x) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g1 x)) (bigop-diff p1 nat O plusAC g1 k n ltk p1k)) X-clearme2) (λ (X-clearme2 : And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k))) -> match-And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k)) lzero (λ (X-- : And lzero lzero (And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) (lt O (g2 k))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (X-clearme3 : And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) -> match-And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true) lzero (λ (X-- : And lzero lzero (eq lzero bool (p1 k) false) (eq lzero bool (p2 k) true)) -> (X--1 : lt O (g2 k)) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p2 i) nat O plus (λ (i : nat) -> g2 i))) (λ (p1k : eq lzero bool (p1 k) false) -> λ (p2k : eq lzero bool (p2 k) true) -> λ (posg2 : lt O (g2 k)) -> eq-ind-r lzero lzero nat (aop--o--op lzero nat O plusAC (g2 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p2 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat O plusAC (g2 k) (bigop n (λ (x0 : nat) -> andb (notb (eqb k x0)) (p2 x0)) nat O (aop--o--op lzero nat O plusAC) (λ (x0 : nat) -> g2 x0)))) -> lt (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) x) (eq-ind lzero lzero nat (plus (S O) (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (S O) (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) x-1) -> le x-1 (aop--o--op lzero nat O plusAC (g2 k) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p2 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x)))) (le-plus (S O) (g2 k) (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (bigop n (λ (x : nat) -> andb (notb (eqb k x)) (p2 x)) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x)) posg2 (le-sigma n p1 (λ (X-- : nat) -> andb (notb (eqb k X--)) (p2 X--)) g1 g2 (λ (i : nat) -> λ (ltin : lt i n) -> λ (H : eq lzero bool (p1 i) true) -> true-to-andb-true (notb (eqb k i)) (p2 i) (match-Or lzero lzero (eq lzero bool (eqb k i) true) (eq lzero bool (eqb k i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (eqb k i) true) (eq lzero bool (eqb k i) false)) -> eq lzero bool (notb (eqb k i)) true) (λ (Hc : eq lzero bool (eqb k i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero bool (notb x) true) (eq-ind lzero lzero bool (p1 i) (λ (x-1 : bool) -> λ (X-x-2 : eq lzero bool (p1 i) x-1) -> eq lzero bool false x-1) (eq-ind lzero lzero bool (p1 k) (λ (x-1 : bool) -> λ (X-x-2 : eq lzero bool (p1 k) x-1) -> eq lzero bool x-1 (p1 i)) (eq-ind-r lzero lzero nat i (λ (x : nat) -> λ (X-- : eq lzero nat x i) -> eq lzero bool (p1 x) (p1 i)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- (p1 i)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool true X--) (refl lzero bool true) (p1 i) H) (p1 i) H) k (eqb-true-to-eq k i Hc)) false p1k) true H) (eqb k i) Hc) (λ (Hc : eq lzero bool (eqb k i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero bool (notb x) true) (refl lzero bool (notb false)) (eqb k i) Hc) (true-or-false (eqb k i))) (H1 i ltin H)) (λ (i : nat) -> λ (ltin : lt i n) -> λ (H : eq lzero bool (p1 i) true) -> H2 i ltin H))) (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (rewrite-r lzero lzero nat (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (λ (X-- : nat) -> eq lzero nat X-- (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)))) (refl lzero nat (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)))) (plus (S O) (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (rewrite-r lzero lzero nat (times (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)))) (rewrite-r lzero lzero nat (times (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (S O))) X--) (times-Sn-m (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (S O)) (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))) (times-n-1 (S (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i))))) (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)) (times-n-1 (bigop n (λ (i : nat) -> p1 i) nat O plus (λ (i : nat) -> g1 i)))))) (bigop n (λ (x : nat) -> p2 x) nat O (aop--o--op lzero nat O plusAC) (λ (x : nat) -> g2 x)) (bigop-diff p2 nat O plusAC g2 k n ltk p2k)) X-clearme3) X-clearme2) X-clearme1) X-clearme0) X-clearme

let-clause-10331' : (n : nat) -> (p : (X-- : nat) -> bool) -> (g1 : (X-- : nat) -> nat) -> (g2 : (X-- : nat) -> nat) -> (n1 : nat) -> (Hind : (X-- : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> le (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) -> (Hle : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> (Hcase : eq lzero bool (p n1) true) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10331' = λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (g1 : (X-- : nat) -> nat) -> λ (g2 : (X-- : nat) -> nat) -> λ (n1 : nat) -> λ (Hind : (X-- : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> le (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) -> λ (Hle : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> λ (Hcase : eq lzero bool (p n1) true) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

le-pi : (n : nat) -> (p : (X-- : nat) -> bool) -> (g1 : (X-- : nat) -> nat) -> (g2 : (X-- : nat) -> nat) -> (X-- : (i : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> le (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))
le-pi = λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (g1 : (X-- : nat) -> nat) -> λ (g2 : (X-- : nat) -> nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : (i : nat) -> (X-- : lt i X-x-365) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> le (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) (λ (X-- : (i : nat) -> (X-- : lt i O) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> le-n (bigop O (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i))) (λ (n1 : nat) -> λ (Hind : (X-- : (i : nat) -> (X-- : lt i n1) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> le (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) -> λ (Hle : (i : nat) -> (X-- : lt i (S n1)) -> (X--1 : eq lzero bool (p i) true) -> le (g1 i) (g2 i)) -> match-Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false)) -> le (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) (λ (Hcase : eq lzero bool (p n1) true) -> eq-ind-r lzero lzero nat (times (g1 n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (g1 n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)))) -> le x (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) (eq-ind-r lzero lzero nat (times (g2 n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (g2 n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i)))) -> le (times (g1 n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i))) x) (le-times (g1 n1) (g2 n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i)) (Hle n1 (eq-coerc lzero (lt (mod n1 O) (plus (plus (mod n1 O) (times O (div n1 O))) (S O))) (lt n1 (S n1)) (lt-plus-Sn-r (mod n1 O) (times O (div n1 O)) O) (rewrite-l lzero (lsuc lzero) nat n1 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod n1 O) (plus X-- (S O))) (lt n1 (S n1))) (rewrite-l lzero (lsuc lzero) nat n1 (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus n1 (S O))) (lt n1 (S n1))) (rewrite-l lzero (lsuc lzero) nat (S n1) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt n1 X--) (lt n1 (S n1))) (refl (lsuc lzero) (Set (lzero)) (lt n1 (S n1))) (plus n1 (S O)) (rewrite-r lzero lzero nat (plus n1 O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n1 (S O))) (plus-n-Sm n1 O) n1 (plus-n-O n1))) (mod n1 O) (rewrite-r lzero lzero nat (plus O (mod n1 O)) (λ (X-- : nat) -> eq lzero nat n1 X--) (rewrite-l lzero lzero nat (plus (mod n1 O) O) (λ (X-- : nat) -> eq lzero nat n1 X--) (rewrite-r lzero lzero nat (times O (div n1 O)) (λ (X-- : nat) -> eq lzero nat n1 (plus (mod n1 O) X--)) (rewrite-l lzero lzero nat (plus (times O (div n1 O)) (mod n1 O)) (λ (X-- : nat) -> eq lzero nat n1 X--) (let-clause-10331' n p g1 g2 n1 Hind Hle Hcase n1 O) (plus (mod n1 O) (times O (div n1 O))) (commutative-plus (times O (div n1 O)) (mod n1 O))) O (times-O-n (div n1 O))) (plus O (mod n1 O)) (commutative-plus (mod n1 O) O)) (mod n1 O) (plus-O-n (mod n1 O)))) (plus (mod n1 O) (times O (div n1 O))) (rewrite-l lzero lzero nat (plus (times O (div n1 O)) (mod n1 O)) (λ (X-- : nat) -> eq lzero nat n1 X--) (let-clause-10331' n p g1 g2 n1 Hind Hle Hcase n1 O) (plus (mod n1 O) (times O (div n1 O))) (commutative-plus (times O (div n1 O)) (mod n1 O))))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase)) (Hind (λ (i : nat) -> λ (lti : lt i n1) -> λ (Hpi : eq lzero bool (p i) true) -> Hle i (lt-to-le (S i) (S n1) (le-S-S (S i) n1 lti)) Hpi))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i)) (bigop-Strue n1 p nat (S O) times g2 (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop-Strue n1 p nat (S O) times g1 (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (λ (Hcase : eq lzero bool (p n1) false) -> eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i))) -> le x (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) (eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i))) -> le (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) x) (Hind (λ (i : nat) -> λ (lti : lt i n1) -> λ (Hpi : eq lzero bool (p i) true) -> Hle i (lt-to-le (S i) (S n1) (le-S-S (S i) n1 lti)) Hpi)) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g2 i)) (bigop-Sfalse n1 p nat (S O) times g2 (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g1 i)) (bigop-Sfalse n1 p nat (S O) times g1 (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (true-or-false (p n1))) n

exp-sigma : (n : nat) -> (a : nat) -> (p : (X-- : nat) -> bool) -> eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))
exp-sigma = λ (n : nat) -> λ (a : nat) -> λ (p : (X-- : nat) -> bool) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop X-x-365 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (refl lzero nat (bigop O (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a))) (λ (n1 : nat) -> match-Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false)) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> eq lzero nat (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop (S n1) (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (λ (Hcase : eq lzero bool (p n1) true) -> eq-ind-r lzero lzero nat (times a (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)))) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> eq lzero nat x (exp a (bigop (S n1) (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (eq-ind-r lzero lzero nat (plus (S O) (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S O) (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> eq lzero nat (times a (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a))) (exp a x)) (λ (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> rewrite-r lzero lzero nat (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) (λ (X-- : nat) -> eq lzero nat (times a X--) (exp a (plus (S O) (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))))) (rewrite-r lzero lzero nat (plus (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)) (S O)) (λ (X-- : nat) -> eq lzero nat (times a (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (exp a X--)) (rewrite-r lzero lzero nat (times (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) (exp a (S O))) (λ (X-- : nat) -> eq lzero nat (times a (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) X--) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (times a (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (times (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) X--)) (rewrite-r lzero lzero nat (times a (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (λ (X-- : nat) -> eq lzero nat (times a (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) X--) (refl lzero nat (times a (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))))) (times (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) a) (commutative-times (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) a)) (exp a (S O)) (exp-n-1 a)) (exp a (plus (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)) (S O))) (exp-plus-times a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)) (S O))) (plus (S O) (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) (commutative-plus (S O) (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) X-x-368) (bigop (S n1) (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)) (bigop-Strue n1 p nat O plus (λ (X-- : nat) -> S O) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (bigop-Strue n1 p nat (S O) times (λ (X-- : nat) -> a) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (λ (Hcase : eq lzero bool (p n1) false) -> eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a))) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> eq lzero nat x (exp a (bigop (S n1) (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a x)) (λ (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) -> rewrite-r lzero lzero nat (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O))) (λ (X-- : nat) -> eq lzero nat X-- (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (refl lzero nat (exp a (bigop n1 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)))) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) X-x-368) (bigop (S n1) (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> S O)) (bigop-Sfalse n1 p nat O plus (λ (X-- : nat) -> S O) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> a)) (bigop-Sfalse n1 p nat (S O) times (λ (X-- : nat) -> a) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (true-or-false (p n1))) n

times-pi : (n : nat) -> (p : (X-- : nat) -> bool) -> (f : (X-- : nat) -> nat) -> (g : (X-- : nat) -> nat) -> eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))
times-pi = λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> λ (f : (X-- : nat) -> nat) -> λ (g : (X-- : nat) -> nat) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (refl lzero nat (bigop O (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i)))) (λ (n1 : nat) -> match-Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false)) -> (X-x-368 : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) -> eq lzero nat (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (λ (Hcase : eq lzero bool (p n1) true) -> λ (Hind : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) -> eq-ind-r lzero lzero nat (times (times (f n1) (g n1)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (f n1) (g n1)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))))) -> eq lzero nat x (times (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (eq-ind-r lzero lzero nat (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) -> eq lzero nat (times (times (f n1) (g n1)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i)))) (times x (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (eq-ind-r lzero lzero nat (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) -> eq lzero nat (times (times (f n1) (g n1)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i)))) (times (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) x)) (rewrite-r lzero lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (λ (X-- : nat) -> eq lzero nat (times (times (f n1) (g n1)) X--) (times (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))))) (rewrite-r lzero lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (λ (X-- : nat) -> eq lzero nat X-- (times (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))))) (rewrite-r lzero lzero nat (times (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (λ (X-- : nat) -> eq lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) X--) (rewrite-r lzero lzero nat (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (λ (X-- : nat) -> eq lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) X--) (rewrite-r lzero lzero nat (times (f n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (λ (X-- : nat) -> eq lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (times (g n1) X--)) (rewrite-r lzero lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (λ (X-- : nat) -> eq lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) X--) (refl lzero nat (times (f n1) (times (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))))) (times (g n1) (times (f n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (times-times (g n1) (f n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (times-times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (times (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (associative-times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (times (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (commutative-times (times (f n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (times (g n1) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))))) (times (times (f n1) (g n1)) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (associative-times (f n1) (g n1) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))))) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (rewrite-l lzero lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) (λ (X-- : nat) -> eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) X--) Hind (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (commutative-times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop-Strue n1 p nat (S O) times g (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop-Strue n1 p nat (S O) times f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (bigop-Strue n1 p nat (S O) times (λ (X-- : nat) -> times (f X--) (g X--)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hcase))) (λ (Hcase : eq lzero bool (p n1) false) -> λ (Hind : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) -> eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i)))) -> eq lzero nat x (times (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) -> eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times x (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) -> eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) x)) (rewrite-r lzero lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (λ (X-- : nat) -> eq lzero nat X-- (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (rewrite-r lzero lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (λ (X-- : nat) -> eq lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) X--) (refl lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) (commutative-times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)))) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (rewrite-l lzero lzero nat (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))) (λ (X-- : nat) -> eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) X--) Hind (times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (commutative-times (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i))))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> g i)) (bigop-Sfalse n1 p nat (S O) times g (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (bigop-Sfalse n1 p nat (S O) times f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (f i) (g i))) (bigop-Sfalse n1 p nat (S O) times (λ (X-- : nat) -> times (f X--) (g X--)) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hcase))) (true-or-false (p n1))) n

pi-1 : (n : nat) -> (p : (X-- : nat) -> bool) -> eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (S O)
pi-1 = λ (n : nat) -> λ (p : (X-- : nat) -> bool) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (S O)) (refl lzero nat (bigop O (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O))) (λ (n1 : nat) -> λ (Hind : eq lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (S O)) -> match-Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p n1) true) (eq lzero bool (p n1) false)) -> eq lzero nat (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (S O)) (λ (Hc : eq lzero bool (p n1) true) -> eq-ind-r lzero lzero nat (times (S O) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)))) -> eq lzero nat x (S O)) (eq-ind-r lzero lzero nat (S O) (λ (x : nat) -> λ (X-- : eq lzero nat x (S O)) -> eq lzero nat (times (S O) x) (S O)) (rewrite-l lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat X-- (S O)) (refl lzero nat (S O)) (times (S O) (S O)) (times-n-1 (S O))) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) Hind) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (bigop-Strue n1 p nat (S O) times (λ (X-- : nat) -> S O) (eq-ind-r lzero lzero nat (S O) (λ (x : nat) -> λ (X-- : eq lzero nat x (S O)) -> eq lzero bool (p n1) true) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p n1) Hc) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) Hind))) (λ (Hc : eq lzero bool (p n1) false) -> eq-ind-r lzero lzero nat (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O))) -> eq lzero nat x (S O)) (rewrite-r lzero lzero nat (S O) (λ (X-- : nat) -> eq lzero nat X-- (S O)) (refl lzero nat (S O)) (bigop n1 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) Hind) (bigop (S n1) (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> S O)) (bigop-Sfalse n1 p nat (S O) times (λ (X-- : nat) -> S O) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p n1) Hc))) (true-or-false (p n1))) n

exp-pi : (n : nat) -> (m : nat) -> (p : (X-- : nat) -> bool) -> (f : (X-- : nat) -> nat) -> eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp (f i) m)) (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) m)
exp-pi = λ (n : nat) -> λ (m : nat) -> λ (p : (X-- : nat) -> bool) -> λ (f : (X-- : nat) -> nat) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp (f i) X-x-365)) (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) X-x-365)) (pi-1 n p) (λ (m1 : nat) -> λ (Hind : eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp (f i) m1)) (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) m1)) -> eq-ind-r lzero lzero nat (times (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp (f i) m1)) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp (f i) m1)) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) -> eq lzero nat x (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (S m1))) (eq-ind-r lzero lzero nat (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) m1) (λ (x : nat) -> λ (X-- : eq lzero nat x (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) m1)) -> eq lzero nat (times x (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i))) (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) (S m1))) (refl lzero nat (times (exp (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)) m1) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> f i)))) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp (f i) m1)) Hind) (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> times (exp (f i) m1) (f i))) (times-pi n p (λ (X-- : nat) -> exp (f X--) m1) f)) m

exp-sigma-l : (n : nat) -> (a : nat) -> (p : (X-- : nat) -> bool) -> (f : (X-- : nat) -> nat) -> eq lzero nat (bigop n (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp a (f i))) (exp a (bigop n (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> f i)))
exp-sigma-l = λ (n : nat) -> λ (a : nat) -> λ (p : (X-- : nat) -> bool) -> λ (f : (X-- : nat) -> nat) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop X-x-365 (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp a (f i))) (exp a (bigop X-x-365 (λ (i : nat) -> p i) nat O plus (λ (i : nat) -> f i)))) (refl lzero nat (bigop O (λ (i : nat) -> p i) nat (S O) times (λ (i : nat) -> exp a (f i)))) (λ (i : nat) -> λ (Hind : eq lzero nat (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) -> match-Or lzero lzero (eq lzero bool (p i) true) (eq lzero bool (p i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (p i) true) (eq lzero bool (p i) false)) -> eq lzero nat (bigop (S i) (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) (exp a (bigop (S i) (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) (λ (Hc : eq lzero bool (p i) true) -> eq-ind-r lzero lzero nat (times (exp a (f i)) (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp a (f i)) (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))))) -> eq lzero nat x (exp a (bigop (S i) (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) (eq-ind-r lzero lzero nat (plus (f i) (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (f i) (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) -> eq lzero nat (times (exp a (f i)) (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0)))) (exp a x)) (eq-ind-r lzero lzero nat (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) -> eq lzero nat (times (exp a (f i)) x) (exp a (plus (f i) (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0))))) (eq-ind-r lzero lzero nat (times (exp a (f i)) (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp a (f i)) (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0))))) -> eq lzero nat (times (exp a (f i)) (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) x) (refl lzero nat (times (exp a (f i)) (exp a (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0))))) (exp a (plus (f i) (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) (exp-plus-times a (f i) (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) Hind) (bigop (S i) (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)) (bigop-Strue i p nat O plus f (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p i) Hc))) (bigop (S i) (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) (bigop-Strue i p nat (S O) times (λ (X-- : nat) -> exp a (f X--)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (p i) Hc))) (λ (Hc : eq lzero bool (p i) false) -> eq-ind-r lzero lzero nat (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0)))) -> eq lzero nat x (exp a (bigop (S i) (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)))) (eq-ind-r lzero lzero nat (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop i (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0))) -> eq lzero nat (bigop i (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) (exp a x)) Hind (bigop (S i) (λ (i0 : nat) -> p i0) nat O plus (λ (i0 : nat) -> f i0)) (bigop-Sfalse i p nat O plus f (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p i) Hc))) (bigop (S i) (λ (i0 : nat) -> p i0) nat (S O) times (λ (i0 : nat) -> exp a (f i0))) (bigop-Sfalse i p nat (S O) times (λ (X-- : nat) -> exp a (f X--)) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (p i) Hc))) (true-or-false (p i))) n

exp-pi-l : (n : nat) -> (a : nat) -> (f : (X-- : nat) -> nat) -> eq lzero nat (times (exp a n) (bigop n (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> f i))) (bigop n (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> times a (f i)))
exp-pi-l = λ (n : nat) -> λ (a : nat) -> λ (f : (X-- : nat) -> nat) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (times (exp a X-x-365) (bigop X-x-365 (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> f i))) (bigop X-x-365 (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> times a (f i)))) (refl lzero nat (times (exp a O) (bigop O (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> f i)))) (λ (i : nat) -> λ (Hind : eq lzero nat (times (exp a i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> times a (f i0)))) -> eq-ind-r lzero lzero nat (times (f i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (f i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) -> eq lzero nat (times (exp a (S i)) x) (bigop (S i) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> times a (f i0)))) (eq-ind-r lzero lzero nat (times (times a (f i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> times a (f i0)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times a (f i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> times a (f i0))))) -> eq lzero nat (times (exp a (S i)) (times (f i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) x) (eq-ind lzero lzero nat (times (exp a i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (exp a i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) x-1) -> eq lzero nat (times (exp a (S i)) (times (f i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) (times (times a (f i)) x-1)) (eq-ind lzero lzero nat (times (times (exp a (S i)) (f i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (exp a (S i)) (f i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) x-1) -> eq lzero nat x-1 (times (times a (f i)) (times (exp a i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))))) (eq-ind lzero lzero nat (times (times (times a (f i)) (exp a i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (times a (f i)) (exp a i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) x-1) -> eq lzero nat (times (times (exp a (S i)) (f i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0))) x-1) (eq-f2 lzero lzero lzero nat nat nat times (times (exp a (S i)) (f i)) (times (times a (f i)) (exp a i)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)) (rewrite-r lzero lzero nat (times a (exp a i)) (λ (X-- : nat) -> eq lzero nat (times X-- (f i)) (times (times a (f i)) (exp a i))) (rewrite-r lzero lzero nat (times (f i) (times a (exp a i))) (λ (X-- : nat) -> eq lzero nat X-- (times (times a (f i)) (exp a i))) (rewrite-r lzero lzero nat (times a (times (f i) (exp a i))) (λ (X-- : nat) -> eq lzero nat X-- (times (times a (f i)) (exp a i))) (rewrite-r lzero lzero nat (times (exp a i) (times a (f i))) (λ (X-- : nat) -> eq lzero nat (times a (times (f i) (exp a i))) X--) (rewrite-r lzero lzero nat (times a (times (exp a i) (f i))) (λ (X-- : nat) -> eq lzero nat (times a (times (f i) (exp a i))) X--) (rewrite-r lzero lzero nat (times (f i) (exp a i)) (λ (X-- : nat) -> eq lzero nat (times a (times (f i) (exp a i))) (times a X--)) (refl lzero nat (times a (times (f i) (exp a i)))) (times (exp a i) (f i)) (commutative-times (exp a i) (f i))) (times (exp a i) (times a (f i))) (times-times (exp a i) a (f i))) (times (times a (f i)) (exp a i)) (commutative-times (times a (f i)) (exp a i))) (times (f i) (times a (exp a i))) (times-times (f i) a (exp a i))) (times (times a (exp a i)) (f i)) (commutative-times (times a (exp a i)) (f i))) (times (exp a i) a) (commutative-times (exp a i) a)) (refl lzero nat (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) (times (times a (f i)) (times (exp a i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) (associative-times (times a (f i)) (exp a i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) (times (exp a (S i)) (times (f i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) (associative-times (exp a (S i)) (f i) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)))) (bigop i (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> times a (f i0))) Hind) (bigop (S i) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> times a (f i0))) (bigop-Strue i (λ (X-- : nat) -> true) nat (S O) times (λ (X-- : nat) -> times a (f X--)) (refl lzero bool true))) (bigop (S i) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> f i0)) (bigop-Strue i (λ (X-- : nat) -> true) nat (S O) times f (refl lzero bool true))) n

exp-pi-bc : (a : nat) -> (b : nat) -> (c : nat) -> (f : (X-- : nat) -> nat) -> eq lzero nat (times (exp a (minus c b)) (bigop (minus c b) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> f (plus i b)))) (bigop (minus c b) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> times a (f (plus i b))))
exp-pi-bc = λ (a : nat) -> λ (b : nat) -> λ (c : nat) -> λ (f : (X-- : nat) -> nat) -> exp-pi-l (minus c b) a (λ (X-- : nat) -> f (plus X-- b))

