open import Agda.Primitive
import matita-basics-logic
predicate : (l4-v l1-v : Level) -> (X---v : Set l4-v) -> Set ((lsuc lzero) ⊔ (l4-v ⊔ (lsuc l1-v)))
predicate = λ (l4-v l1-v : Level) -> λ (A-v : Set l4-v) -> (X---v : A-v) -> Set l1-v

relation : (l7-v l2-v : Level) -> (X---v : Set l7-v) -> Set ((lsuc lzero) ⊔ (l7-v ⊔ (lsuc l2-v)))
relation = λ (l7-v l2-v : Level) -> λ (A-v : Set l7-v) -> (X---v : A-v) -> (X--1-v : A-v) -> Set l2-v

relation2 : (l8-v l7-v l2-v : Level) -> (X---v : Set l8-v) -> (X--1-v : Set l7-v) -> Set ((lsuc lzero) ⊔ ((l8-v ⊔ l7-v) ⊔ (lsuc l2-v)))
relation2 = λ (l8-v l7-v l2-v : Level) -> λ (A-v : Set l8-v) -> λ (B-v : Set l7-v) -> (X---v : A-v) -> (X--1-v : B-v) -> Set l2-v

relation3 : (l12-v l11-v l10-v l3-v : Level) -> (X---v : Set l12-v) -> (X--1-v : Set l11-v) -> (X--2-v : Set l10-v) -> Set ((lsuc lzero) ⊔ (((l11-v ⊔ (lsuc l3-v)) ⊔ l10-v) ⊔ l12-v))
relation3 = λ (l12-v l11-v l10-v l3-v : Level) -> λ (A-v : Set l12-v) -> λ (B-v : Set l11-v) -> λ (C-v : Set l10-v) -> (X---v : A-v) -> (X--1-v : B-v) -> (X--2-v : C-v) -> Set l3-v

relation4 : (l16-v l15-v l14-v l13-v l4-v : Level) -> (X---v : Set l16-v) -> (X--1-v : Set l15-v) -> (X--2-v : Set l14-v) -> (X--3-v : Set l13-v) -> Set ((lsuc lzero) ⊔ ((((l15-v ⊔ l14-v) ⊔ l13-v) ⊔ l16-v) ⊔ (lsuc l4-v)))
relation4 = λ (l16-v l15-v l14-v l13-v l4-v : Level) -> λ (A-v : Set l16-v) -> λ (B-v : Set l15-v) -> λ (C-v : Set l14-v) -> λ (D-v : Set l13-v) -> (X---v : A-v) -> (X--1-v : B-v) -> (X--2-v : C-v) -> (X--3-v : D-v) -> Set l4-v

reflexive : (l6-v l3-v : Level) -> (A-v : Set l6-v) -> (X-R-v : relation l6-v l3-v A-v) -> Set (lzero ⊔ (l6-v ⊔ l3-v))
reflexive = λ (l6-v l3-v : Level) -> λ (A-v : Set l6-v) -> λ (R-v : relation l6-v l3-v A-v) -> (x-v : A-v) -> R-v x-v x-v

symmetric : (l12-v l9-v : Level) -> (A-v : Set l12-v) -> (X-R-v : relation l12-v l9-v A-v) -> Set (lzero ⊔ (l9-v ⊔ l12-v))
symmetric = λ (l12-v l9-v : Level) -> λ (A-v : Set l12-v) -> λ (R-v : relation l12-v l9-v A-v) -> (x-v : A-v) -> (y-v : A-v) -> (X---v : R-v x-v y-v) -> R-v y-v x-v

transitive : (l18-v l15-v : Level) -> (A-v : Set l18-v) -> (X-R-v : relation l18-v l15-v A-v) -> Set (lzero ⊔ (l18-v ⊔ l15-v))
transitive = λ (l18-v l15-v : Level) -> λ (A-v : Set l18-v) -> λ (R-v : relation l18-v l15-v A-v) -> (x-v : A-v) -> (y-v : A-v) -> (z-v : A-v) -> (X---v : R-v x-v y-v) -> (X--1-v : R-v y-v z-v) -> R-v x-v z-v

irreflexive : (l7-v l4-v : Level) -> (A-v : Set l7-v) -> (X-R-v : relation l7-v l4-v A-v) -> Set (lzero ⊔ (l7-v ⊔ l4-v))
irreflexive = λ (l7-v l4-v : Level) -> λ (A-v : Set l7-v) -> λ (R-v : relation l7-v l4-v A-v) -> (x-v : A-v) -> matita-basics-logic.Not l4-v (R-v x-v x-v)

cotransitive : (l17-v l14-v : Level) -> (A-v : Set l17-v) -> (X-R-v : relation l17-v l14-v A-v) -> Set (lzero ⊔ (l17-v ⊔ l14-v))
cotransitive = λ (l17-v l14-v : Level) -> λ (A-v : Set l17-v) -> λ (R-v : relation l17-v l14-v A-v) -> (x-v : A-v) -> (y-v : A-v) -> (X---v : R-v x-v y-v) -> (z-v : A-v) -> matita-basics-logic.Or l14-v l14-v (R-v x-v z-v) (R-v z-v y-v)

tight-apart : (l23-v l20-v l17-v : Level) -> (A-v : Set l23-v) -> (X-eq-v : relation l23-v l20-v A-v) -> (X-ap-v : relation l23-v l17-v A-v) -> Set (lzero ⊔ ((l23-v ⊔ l20-v) ⊔ l17-v))
tight-apart = λ (l23-v l20-v l17-v : Level) -> λ (A-v : Set l23-v) -> λ (eq-v : relation l23-v l20-v A-v) -> λ (ap-v : relation l23-v l17-v A-v) -> (x-v : A-v) -> (y-v : A-v) -> matita-basics-logic.And (l20-v ⊔ l17-v) (l20-v ⊔ l17-v) ((X---v : matita-basics-logic.Not l17-v (ap-v x-v y-v)) -> eq-v x-v y-v) ((X---v : eq-v x-v y-v) -> matita-basics-logic.Not l17-v (ap-v x-v y-v))

antisymmetric : (l13-v l10-v : Level) -> (A-v : Set l13-v) -> (X-R-v : relation l13-v l10-v A-v) -> Set (lzero ⊔ (l13-v ⊔ l10-v))
antisymmetric = λ (l13-v l10-v : Level) -> λ (A-v : Set l13-v) -> λ (R-v : relation l13-v l10-v A-v) -> (x-v : A-v) -> (y-v : A-v) -> (X---v : R-v x-v y-v) -> matita-basics-logic.Not l10-v (R-v y-v x-v)

singlevalued : (l21-v l20-v l17-v : Level) -> (A-v : Set l21-v) -> (B-v : Set l20-v) -> predicate ((lsuc lzero) ⊔ (((lsuc l17-v) ⊔ l20-v) ⊔ l21-v)) ((l17-v ⊔ l20-v) ⊔ l21-v) (relation2 l21-v l20-v l17-v A-v B-v)
singlevalued = λ (l21-v l20-v l17-v : Level) -> λ (A-v : Set l21-v) -> λ (B-v : Set l20-v) -> λ (R-v : relation2 l21-v l20-v l17-v A-v B-v) -> (a-v : A-v) -> (b1-v : B-v) -> (X---v : R-v a-v b1-v) -> (b2-v : B-v) -> (X--1-v : R-v a-v b2-v) -> matita-basics-logic.eq l20-v B-v b1-v b2-v

confluent1 : (l21-v l18-v : Level) -> (A-v : Set l21-v) -> (X---v : relation l21-v l18-v A-v) -> predicate l21-v (l21-v ⊔ l18-v) A-v
confluent1 = λ (l21-v l18-v : Level) -> λ (A-v : Set l21-v) -> λ (R-v : relation l21-v l18-v A-v) -> λ (a0-v : A-v) -> (a1-v : A-v) -> (X---v : R-v a0-v a1-v) -> (a2-v : A-v) -> (X--1-v : R-v a0-v a2-v) -> matita-basics-logic.ex2 l21-v l18-v l18-v A-v (λ (a-v : A-v) -> R-v a1-v a-v) (λ (a-v : A-v) -> R-v a2-v a-v)

confluent : (l8-v l5-v : Level) -> (A-v : Set l8-v) -> predicate ((lsuc lzero) ⊔ (l8-v ⊔ (lsuc l5-v))) (l8-v ⊔ l5-v) (relation l8-v l5-v A-v)
confluent = λ (l8-v l5-v : Level) -> λ (A-v : Set l8-v) -> λ (R-v : relation l8-v l5-v A-v) -> (a0-v : A-v) -> confluent1 l8-v l5-v A-v R-v a0-v

Conf3 : (l23-v l22-v l19-v l15-v : Level) -> (A-v : Set l23-v) -> (B-v : Set l22-v) -> (X---v : relation2 l23-v l22-v l19-v A-v B-v) -> (X--1-v : relation l23-v l15-v A-v) -> Set (lzero ⊔ (((l19-v ⊔ l23-v) ⊔ l15-v) ⊔ l22-v))
Conf3 = λ (l23-v l22-v l19-v l15-v : Level) -> λ (A-v : Set l23-v) -> λ (B-v : Set l22-v) -> λ (S-v : relation2 l23-v l22-v l19-v A-v B-v) -> λ (R-v : relation l23-v l15-v A-v) -> (b-v : B-v) -> (a1-v : A-v) -> (X---v : S-v a1-v b-v) -> (a2-v : A-v) -> (X--1-v : R-v a1-v a2-v) -> S-v a2-v b-v

RC : (l8-v l5-v : Level) -> (A-v : Set l8-v) -> (X---v : relation l8-v l5-v A-v) -> relation l8-v (l8-v ⊔ l5-v) A-v
RC = λ (l8-v l5-v : Level) -> λ (A-v : Set l8-v) -> λ (R-v : relation l8-v l5-v A-v) -> λ (x-v : A-v) -> λ (y-v : A-v) -> matita-basics-logic.Or l5-v l8-v (R-v x-v y-v) (matita-basics-logic.eq l8-v A-v x-v y-v)

RC-reflexive : (l8-v l5-v : Level) -> (A-v : Set l8-v) -> (R-v : relation l8-v l5-v A-v) -> reflexive l8-v (l8-v ⊔ l5-v) A-v (RC l8-v l5-v A-v R-v)
RC-reflexive = λ (l8-v l5-v : Level) -> λ (A-v : Set l8-v) -> λ (R-v : relation l8-v l5-v A-v) -> λ (x-v : A-v) -> matita-basics-logic.or-intror l5-v l8-v (R-v x-v x-v) (matita-basics-logic.eq l8-v A-v x-v x-v) (matita-basics-logic.refl l8-v A-v x-v)

Rcomp : (l13-v l10-v l7-v : Level) -> (A-v : Set l13-v) -> (X-R1-v : relation l13-v l10-v A-v) -> (X-R2-v : relation l13-v l7-v A-v) -> (X-a1-v : A-v) -> (X-a2-v : A-v) -> Set (lzero ⊔ ((l7-v ⊔ l13-v) ⊔ l10-v))
Rcomp = λ (l13-v l10-v l7-v : Level) -> λ (A-v : Set l13-v) -> λ (R1-v : relation l13-v l10-v A-v) -> λ (R2-v : relation l13-v l7-v A-v) -> λ (a1-v : A-v) -> λ (a2-v : A-v) -> matita-basics-logic.ex l13-v (l7-v ⊔ l10-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l10-v l7-v (R1-v a1-v am-v) (R2-v am-v a2-v))

Runion : (l10-v l7-v l4-v : Level) -> (A-v : Set l10-v) -> (X-R1-v : relation l10-v l7-v A-v) -> (X-R2-v : relation l10-v l4-v A-v) -> (X-a-v : A-v) -> (X-b-v : A-v) -> Set (lzero ⊔ (l7-v ⊔ l4-v))
Runion = λ (l10-v l7-v l4-v : Level) -> λ (A-v : Set l10-v) -> λ (R1-v : relation l10-v l7-v A-v) -> λ (R2-v : relation l10-v l4-v A-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> matita-basics-logic.Or l7-v l4-v (R1-v a-v b-v) (R2-v a-v b-v)

Rintersection : (l10-v l7-v l4-v : Level) -> (A-v : Set l10-v) -> (X-R1-v : relation l10-v l7-v A-v) -> (X-R2-v : relation l10-v l4-v A-v) -> (X-a-v : A-v) -> (X-b-v : A-v) -> Set (lzero ⊔ (l7-v ⊔ l4-v))
Rintersection = λ (l10-v l7-v l4-v : Level) -> λ (A-v : Set l10-v) -> λ (R1-v : relation l10-v l7-v A-v) -> λ (R2-v : relation l10-v l4-v A-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> matita-basics-logic.And l7-v l4-v (R1-v a-v b-v) (R2-v a-v b-v)

inv : (l5-v l2-v : Level) -> (A-v : Set l5-v) -> (X-R-v : relation l5-v l2-v A-v) -> (X-a-v : A-v) -> (X-b-v : A-v) -> Set l2-v
inv = λ (l5-v l2-v : Level) -> λ (A-v : Set l5-v) -> λ (R-v : relation l5-v l2-v A-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> R-v b-v a-v

subR : (l15-v l12-v l9-v : Level) -> (A-v : Set l15-v) -> (X-R-v : relation l15-v l12-v A-v) -> (X-S-v : relation l15-v l9-v A-v) -> Set (lzero ⊔ ((l9-v ⊔ l15-v) ⊔ l12-v))
subR = λ (l15-v l12-v l9-v : Level) -> λ (A-v : Set l15-v) -> λ (R-v : relation l15-v l12-v A-v) -> λ (S-v : relation l15-v l9-v A-v) -> (a-v : A-v) -> (b-v : A-v) -> (X---v : R-v a-v b-v) -> S-v a-v b-v

sub-reflexive : (l6-v l3-v : Level) -> (T-v : Set l6-v) -> (R-v : relation l6-v l3-v T-v) -> subR l6-v l3-v l3-v T-v R-v R-v
sub-reflexive = λ (l6-v l3-v : Level) -> λ (T-v : Set l6-v) -> λ (R-v : relation l6-v l3-v T-v) -> λ (x-v : T-v) -> λ (b-v : T-v) -> λ (auto-v : R-v x-v b-v) -> auto-v

sub-comp-l : (l56-v l53-v l50-v l47-v : Level) -> (A-v : Set l56-v) -> (R-v : relation l56-v l53-v A-v) -> (R1-v : relation l56-v l50-v A-v) -> (R2-v : relation l56-v l47-v A-v) -> (X---v : subR l56-v l50-v l47-v A-v R1-v R2-v) -> subR l56-v ((l50-v ⊔ l53-v) ⊔ l56-v) ((l47-v ⊔ l53-v) ⊔ l56-v) A-v (Rcomp l56-v l50-v l53-v A-v R1-v R-v) (Rcomp l56-v l47-v l53-v A-v R2-v R-v)
sub-comp-l = λ (l56-v l53-v l50-v l47-v : Level) -> λ (A-v : Set l56-v) -> λ (R-v : relation l56-v l53-v A-v) -> λ (R1-v : relation l56-v l50-v A-v) -> λ (R2-v : relation l56-v l47-v A-v) -> λ (Hsub-v : subR l56-v l50-v l47-v A-v R1-v R2-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> λ (X-clearme-v : Rcomp l56-v l50-v l53-v A-v R1-v R-v a-v b-v) -> matita-basics-logic.match-ex l56-v (l53-v ⊔ l50-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l50-v l53-v (R1-v a-v am-v) (R-v am-v b-v)) ((l56-v ⊔ l53-v) ⊔ l47-v) (λ (X---v : matita-basics-logic.ex l56-v (l53-v ⊔ l50-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l50-v l53-v (R1-v a-v am-v) (R-v am-v b-v))) -> Rcomp l56-v l47-v l53-v A-v R2-v R-v a-v b-v) (λ (c-v : A-v) -> λ (X-clearme0-v : matita-basics-logic.And l50-v l53-v (R1-v a-v c-v) (R-v c-v b-v)) -> matita-basics-logic.match-And l50-v l53-v (R1-v a-v c-v) (R-v c-v b-v) ((l56-v ⊔ l53-v) ⊔ l47-v) (λ (X---v : matita-basics-logic.And l50-v l53-v (R1-v a-v c-v) (R-v c-v b-v)) -> Rcomp l56-v l47-v l53-v A-v R2-v R-v a-v b-v) (λ (auto-v : R1-v a-v c-v) -> λ (auto'-v : R-v c-v b-v) -> matita-basics-logic.ex-intro l56-v (l53-v ⊔ l47-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l47-v l53-v (R2-v a-v am-v) (R-v am-v b-v)) c-v (matita-basics-logic.conj l47-v l53-v (R2-v a-v c-v) (R-v c-v b-v) (Hsub-v a-v c-v auto-v) auto'-v)) X-clearme0-v) X-clearme-v

sub-comp-r : (l56-v l53-v l50-v l47-v : Level) -> (A-v : Set l56-v) -> (R-v : relation l56-v l53-v A-v) -> (R1-v : relation l56-v l50-v A-v) -> (R2-v : relation l56-v l47-v A-v) -> (X---v : subR l56-v l50-v l47-v A-v R1-v R2-v) -> subR l56-v ((l50-v ⊔ l53-v) ⊔ l56-v) ((l47-v ⊔ l53-v) ⊔ l56-v) A-v (Rcomp l56-v l53-v l50-v A-v R-v R1-v) (Rcomp l56-v l53-v l47-v A-v R-v R2-v)
sub-comp-r = λ (l56-v l53-v l50-v l47-v : Level) -> λ (A-v : Set l56-v) -> λ (R-v : relation l56-v l53-v A-v) -> λ (R1-v : relation l56-v l50-v A-v) -> λ (R2-v : relation l56-v l47-v A-v) -> λ (Hsub-v : subR l56-v l50-v l47-v A-v R1-v R2-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> λ (X-clearme-v : Rcomp l56-v l53-v l50-v A-v R-v R1-v a-v b-v) -> matita-basics-logic.match-ex l56-v (l53-v ⊔ l50-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l53-v l50-v (R-v a-v am-v) (R1-v am-v b-v)) ((l56-v ⊔ l53-v) ⊔ l47-v) (λ (X---v : matita-basics-logic.ex l56-v (l53-v ⊔ l50-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l53-v l50-v (R-v a-v am-v) (R1-v am-v b-v))) -> Rcomp l56-v l53-v l47-v A-v R-v R2-v a-v b-v) (λ (c-v : A-v) -> λ (X-clearme0-v : matita-basics-logic.And l53-v l50-v (R-v a-v c-v) (R1-v c-v b-v)) -> matita-basics-logic.match-And l53-v l50-v (R-v a-v c-v) (R1-v c-v b-v) ((l56-v ⊔ l53-v) ⊔ l47-v) (λ (X---v : matita-basics-logic.And l53-v l50-v (R-v a-v c-v) (R1-v c-v b-v)) -> Rcomp l56-v l53-v l47-v A-v R-v R2-v a-v b-v) (λ (auto-v : R-v a-v c-v) -> λ (auto'-v : R1-v c-v b-v) -> matita-basics-logic.ex-intro l56-v (l53-v ⊔ l47-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l53-v l47-v (R-v a-v am-v) (R2-v am-v b-v)) c-v (matita-basics-logic.conj l53-v l47-v (R-v a-v c-v) (R2-v c-v b-v) auto-v (Hsub-v c-v b-v auto'-v))) X-clearme0-v) X-clearme-v

sub-assoc-l : (l128-v l125-v l122-v l119-v : Level) -> (A-v : Set l128-v) -> (R1-v : relation l128-v l125-v A-v) -> (R2-v : relation l128-v l122-v A-v) -> (R3-v : relation l128-v l119-v A-v) -> subR l128-v (((l122-v ⊔ l125-v) ⊔ l128-v) ⊔ l119-v) (((l122-v ⊔ l125-v) ⊔ l128-v) ⊔ l119-v) A-v (Rcomp l128-v l125-v ((l128-v ⊔ l122-v) ⊔ l119-v) A-v R1-v (Rcomp l128-v l122-v l119-v A-v R2-v R3-v)) (Rcomp l128-v ((l128-v ⊔ l125-v) ⊔ l122-v) l119-v A-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v) R3-v)
sub-assoc-l = λ (l128-v l125-v l122-v l119-v : Level) -> λ (A-v : Set l128-v) -> λ (R1-v : relation l128-v l125-v A-v) -> λ (R2-v : relation l128-v l122-v A-v) -> λ (R3-v : relation l128-v l119-v A-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> λ (X-clearme-v : Rcomp l128-v l125-v ((l119-v ⊔ l122-v) ⊔ l128-v) A-v R1-v (Rcomp l128-v l122-v l119-v A-v R2-v R3-v) a-v b-v) -> matita-basics-logic.match-ex l128-v (((l122-v ⊔ l128-v) ⊔ l119-v) ⊔ l125-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l125-v ((l128-v ⊔ l122-v) ⊔ l119-v) (R1-v a-v am-v) (Rcomp l128-v l122-v l119-v A-v R2-v R3-v am-v b-v)) (((l122-v ⊔ l128-v) ⊔ l119-v) ⊔ l125-v) (λ (X---v : matita-basics-logic.ex l128-v (((l122-v ⊔ l125-v) ⊔ l128-v) ⊔ l119-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l125-v ((l128-v ⊔ l122-v) ⊔ l119-v) (R1-v a-v am-v) (Rcomp l128-v l122-v l119-v A-v R2-v R3-v am-v b-v))) -> Rcomp l128-v ((l128-v ⊔ l125-v) ⊔ l122-v) l119-v A-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v) R3-v a-v b-v) (λ (c-v : A-v) -> λ (X-clearme0-v : matita-basics-logic.And l125-v ((l119-v ⊔ l122-v) ⊔ l128-v) (R1-v a-v c-v) (Rcomp l128-v l122-v l119-v A-v R2-v R3-v c-v b-v)) -> matita-basics-logic.match-And l125-v ((l128-v ⊔ l122-v) ⊔ l119-v) (R1-v a-v c-v) (Rcomp l128-v l122-v l119-v A-v R2-v R3-v c-v b-v) (((l122-v ⊔ l128-v) ⊔ l119-v) ⊔ l125-v) (λ (X---v : matita-basics-logic.And l125-v ((l119-v ⊔ l122-v) ⊔ l128-v) (R1-v a-v c-v) (Rcomp l128-v l122-v l119-v A-v R2-v R3-v c-v b-v)) -> Rcomp l128-v ((l128-v ⊔ l125-v) ⊔ l122-v) l119-v A-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v) R3-v a-v b-v) (λ (Hac-v : R1-v a-v c-v) -> λ (X-clearme1-v : Rcomp l128-v l122-v l119-v A-v R2-v R3-v c-v b-v) -> matita-basics-logic.match-ex l128-v (l122-v ⊔ l119-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l122-v l119-v (R2-v c-v am-v) (R3-v am-v b-v)) (((l122-v ⊔ l128-v) ⊔ l119-v) ⊔ l125-v) (λ (X---v : matita-basics-logic.ex l128-v (l122-v ⊔ l119-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l122-v l119-v (R2-v c-v am-v) (R3-v am-v b-v))) -> Rcomp l128-v ((l128-v ⊔ l125-v) ⊔ l122-v) l119-v A-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v) R3-v a-v b-v) (λ (d-v : A-v) -> λ (X-clearme2-v : matita-basics-logic.And l122-v l119-v (R2-v c-v d-v) (R3-v d-v b-v)) -> matita-basics-logic.match-And l122-v l119-v (R2-v c-v d-v) (R3-v d-v b-v) (((l122-v ⊔ l128-v) ⊔ l119-v) ⊔ l125-v) (λ (X---v : matita-basics-logic.And l122-v l119-v (R2-v c-v d-v) (R3-v d-v b-v)) -> Rcomp l128-v ((l128-v ⊔ l125-v) ⊔ l122-v) l119-v A-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v) R3-v a-v b-v) (λ (auto-v : R2-v c-v d-v) -> λ (auto'-v : R3-v d-v b-v) -> matita-basics-logic.ex-intro l128-v (((l122-v ⊔ l128-v) ⊔ l119-v) ⊔ l125-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And ((l128-v ⊔ l125-v) ⊔ l122-v) l119-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v a-v am-v) (R3-v am-v b-v)) d-v (matita-basics-logic.conj ((l122-v ⊔ l125-v) ⊔ l128-v) l119-v (Rcomp l128-v l125-v l122-v A-v R1-v R2-v a-v d-v) (R3-v d-v b-v) (matita-basics-logic.ex-intro l128-v (l125-v ⊔ l122-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l125-v l122-v (R1-v a-v am-v) (R2-v am-v d-v)) c-v (matita-basics-logic.conj l125-v l122-v (R1-v a-v c-v) (R2-v c-v d-v) Hac-v auto-v)) auto'-v)) X-clearme2-v) X-clearme1-v) X-clearme0-v) X-clearme-v

sub-assoc-r : (l134-v l131-v l128-v l125-v : Level) -> (A-v : Set l134-v) -> (R1-v : relation l134-v l131-v A-v) -> (R2-v : relation l134-v l128-v A-v) -> (R3-v : relation l134-v l125-v A-v) -> subR l134-v (((l128-v ⊔ l131-v) ⊔ l134-v) ⊔ l125-v) (((l128-v ⊔ l131-v) ⊔ l134-v) ⊔ l125-v) A-v (Rcomp l134-v ((l134-v ⊔ l131-v) ⊔ l128-v) l125-v A-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v) R3-v) (Rcomp l134-v l131-v ((l134-v ⊔ l128-v) ⊔ l125-v) A-v R1-v (Rcomp l134-v l128-v l125-v A-v R2-v R3-v))
sub-assoc-r = λ (l134-v l131-v l128-v l125-v : Level) -> λ (A-v : Set l134-v) -> λ (R1-v : relation l134-v l131-v A-v) -> λ (R2-v : relation l134-v l128-v A-v) -> λ (R3-v : relation l134-v l125-v A-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> λ (X-clearme-v : Rcomp l134-v ((l128-v ⊔ l131-v) ⊔ l134-v) l125-v A-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v) R3-v a-v b-v) -> matita-basics-logic.match-ex l134-v (((l128-v ⊔ l134-v) ⊔ l125-v) ⊔ l131-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And ((l134-v ⊔ l131-v) ⊔ l128-v) l125-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v a-v am-v) (R3-v am-v b-v)) (((l128-v ⊔ l134-v) ⊔ l125-v) ⊔ l131-v) (λ (X---v : matita-basics-logic.ex l134-v (((l128-v ⊔ l131-v) ⊔ l134-v) ⊔ l125-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And ((l134-v ⊔ l131-v) ⊔ l128-v) l125-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v a-v am-v) (R3-v am-v b-v))) -> Rcomp l134-v l131-v ((l134-v ⊔ l128-v) ⊔ l125-v) A-v R1-v (Rcomp l134-v l128-v l125-v A-v R2-v R3-v) a-v b-v) (λ (c-v : A-v) -> λ (X-clearme0-v : matita-basics-logic.And ((l128-v ⊔ l131-v) ⊔ l134-v) l125-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v a-v c-v) (R3-v c-v b-v)) -> matita-basics-logic.match-And ((l134-v ⊔ l131-v) ⊔ l128-v) l125-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v a-v c-v) (R3-v c-v b-v) (((l128-v ⊔ l134-v) ⊔ l125-v) ⊔ l131-v) (λ (X---v : matita-basics-logic.And ((l128-v ⊔ l131-v) ⊔ l134-v) l125-v (Rcomp l134-v l131-v l128-v A-v R1-v R2-v a-v c-v) (R3-v c-v b-v)) -> Rcomp l134-v l131-v ((l134-v ⊔ l128-v) ⊔ l125-v) A-v R1-v (Rcomp l134-v l128-v l125-v A-v R2-v R3-v) a-v b-v) (λ (X-clearme1-v : Rcomp l134-v l131-v l128-v A-v R1-v R2-v a-v c-v) -> matita-basics-logic.match-ex l134-v (l131-v ⊔ l128-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l131-v l128-v (R1-v a-v am-v) (R2-v am-v c-v)) (((l128-v ⊔ l134-v) ⊔ l125-v) ⊔ l131-v) (λ (X---v : matita-basics-logic.ex l134-v (l131-v ⊔ l128-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l131-v l128-v (R1-v a-v am-v) (R2-v am-v c-v))) -> (X--1-v : R3-v c-v b-v) -> Rcomp l134-v l131-v ((l134-v ⊔ l128-v) ⊔ l125-v) A-v R1-v (Rcomp l134-v l128-v l125-v A-v R2-v R3-v) a-v b-v) (λ (d-v : A-v) -> λ (X-clearme2-v : matita-basics-logic.And l131-v l128-v (R1-v a-v d-v) (R2-v d-v c-v)) -> matita-basics-logic.match-And l131-v l128-v (R1-v a-v d-v) (R2-v d-v c-v) (((l128-v ⊔ l134-v) ⊔ l125-v) ⊔ l131-v) (λ (X---v : matita-basics-logic.And l131-v l128-v (R1-v a-v d-v) (R2-v d-v c-v)) -> (X--1-v : R3-v c-v b-v) -> Rcomp l134-v l131-v ((l134-v ⊔ l128-v) ⊔ l125-v) A-v R1-v (Rcomp l134-v l128-v l125-v A-v R2-v R3-v) a-v b-v) (λ (auto-v : R1-v a-v d-v) -> λ (auto'-v : R2-v d-v c-v) -> λ (auto''-v : R3-v c-v b-v) -> matita-basics-logic.ex-intro l134-v (((l128-v ⊔ l134-v) ⊔ l125-v) ⊔ l131-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l131-v ((l134-v ⊔ l128-v) ⊔ l125-v) (R1-v a-v am-v) (Rcomp l134-v l128-v l125-v A-v R2-v R3-v am-v b-v)) d-v (matita-basics-logic.conj l131-v ((l125-v ⊔ l128-v) ⊔ l134-v) (R1-v a-v d-v) (Rcomp l134-v l128-v l125-v A-v R2-v R3-v d-v b-v) auto-v (matita-basics-logic.ex-intro l134-v (l128-v ⊔ l125-v) A-v (λ (am-v : A-v) -> matita-basics-logic.And l128-v l125-v (R2-v d-v am-v) (R3-v am-v b-v)) c-v (matita-basics-logic.conj l128-v l125-v (R2-v d-v c-v) (R3-v c-v b-v) auto'-v auto''-v)))) X-clearme2-v) X-clearme1-v) X-clearme0-v) X-clearme-v

compose : (l7-v l6-v l5-v : Level) -> (A-v : Set l7-v) -> (B-v : Set l6-v) -> (C-v : Set l5-v) -> (X-f-v : (X---v : B-v) -> C-v) -> (X-g-v : (X---v : A-v) -> B-v) -> (X-x-v : A-v) -> C-v
compose = λ (l7-v l6-v l5-v : Level) -> λ (A-v : Set l7-v) -> λ (B-v : Set l6-v) -> λ (C-v : Set l5-v) -> λ (f-v : (X---v : B-v) -> C-v) -> λ (g-v : (X---v : A-v) -> B-v) -> λ (x-v : A-v) -> f-v (g-v x-v)

||injective|| : (l15-v l14-v : Level) -> (A-v : Set l15-v) -> (B-v : Set l14-v) -> (X-f-v : (X---v : A-v) -> B-v) -> Set (lzero ⊔ (l15-v ⊔ l14-v))
||injective|| = λ (l15-v l14-v : Level) -> λ (A-v : Set l15-v) -> λ (B-v : Set l14-v) -> λ (f-v : (X---v : A-v) -> B-v) -> (x-v : A-v) -> (y-v : A-v) -> (X---v : matita-basics-logic.eq l14-v B-v (f-v x-v) (f-v y-v)) -> matita-basics-logic.eq l15-v A-v x-v y-v

surjective : (l10-v l9-v : Level) -> (A-v : Set l10-v) -> (B-v : Set l9-v) -> (X-f-v : (X---v : A-v) -> B-v) -> Set (lzero ⊔ (l9-v ⊔ l10-v))
surjective = λ (l10-v l9-v : Level) -> λ (A-v : Set l10-v) -> λ (B-v : Set l9-v) -> λ (f-v : (X---v : A-v) -> B-v) -> (z-v : B-v) -> matita-basics-logic.ex l10-v l9-v A-v (λ (x-v : A-v) -> matita-basics-logic.eq l9-v B-v z-v (f-v x-v))

commutative : (l10-v : Level) -> (A-v : Set l10-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> Set l10-v
commutative = λ (l10-v : Level) -> λ (A-v : Set l10-v) -> λ (f-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (x-v : A-v) -> (y-v : A-v) -> matita-basics-logic.eq l10-v A-v (f-v x-v y-v) (f-v y-v x-v)

commutative2 : (l11-v l10-v : Level) -> (A-v : Set l11-v) -> (B-v : Set l10-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : A-v) -> B-v) -> Set (lzero ⊔ (l11-v ⊔ l10-v))
commutative2 = λ (l11-v l10-v : Level) -> λ (A-v : Set l11-v) -> λ (B-v : Set l10-v) -> λ (f-v : (X---v : A-v) -> (X--1-v : A-v) -> B-v) -> (x-v : A-v) -> (y-v : A-v) -> matita-basics-logic.eq l10-v B-v (f-v x-v y-v) (f-v y-v x-v)

associative : (l13-v : Level) -> (A-v : Set l13-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> Set l13-v
associative = λ (l13-v : Level) -> λ (A-v : Set l13-v) -> λ (f-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (x-v : A-v) -> (y-v : A-v) -> (z-v : A-v) -> matita-basics-logic.eq l13-v A-v (f-v (f-v x-v y-v) z-v) (f-v x-v (f-v y-v z-v))

monotonic : (l14-v l11-v : Level) -> (A-v : Set l14-v) -> (X-R-v : (X---v : A-v) -> (X--1-v : A-v) -> Set l11-v) -> (X-f-v : (X---v : A-v) -> A-v) -> Set (lzero ⊔ (l14-v ⊔ l11-v))
monotonic = λ (l14-v l11-v : Level) -> λ (A-v : Set l14-v) -> λ (R-v : (X---v : A-v) -> (X--1-v : A-v) -> Set l11-v) -> λ (f-v : (X---v : A-v) -> A-v) -> (x-v : A-v) -> (y-v : A-v) -> (X---v : R-v x-v y-v) -> R-v (f-v x-v) (f-v y-v)

distributive : (l16-v : Level) -> (A-v : Set l16-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-g-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> Set l16-v
distributive = λ (l16-v : Level) -> λ (A-v : Set l16-v) -> λ (f-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (g-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (x-v : A-v) -> (y-v : A-v) -> (z-v : A-v) -> matita-basics-logic.eq l16-v A-v (f-v x-v (g-v y-v z-v)) (g-v (f-v x-v y-v) (f-v x-v z-v))

distributive2 : (l17-v l16-v : Level) -> (A-v : Set l17-v) -> (B-v : Set l16-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : B-v) -> B-v) -> (X-g-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> Set (lzero ⊔ (l17-v ⊔ l16-v))
distributive2 = λ (l17-v l16-v : Level) -> λ (A-v : Set l17-v) -> λ (B-v : Set l16-v) -> λ (f-v : (X---v : A-v) -> (X--1-v : B-v) -> B-v) -> λ (g-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (x-v : A-v) -> (y-v : B-v) -> (z-v : B-v) -> matita-basics-logic.eq l16-v B-v (f-v x-v (g-v y-v z-v)) (g-v (f-v x-v y-v) (f-v x-v z-v))

injective-compose : (l23-v l20-v l19-v : Level) -> (A-v : Set l23-v) -> (B-v : Set l20-v) -> (C-v : Set l19-v) -> (f-v : (X---v : A-v) -> B-v) -> (g-v : (X---v : B-v) -> C-v) -> (X---v : ||injective|| l23-v l20-v A-v B-v f-v) -> (X--1-v : ||injective|| l20-v l19-v B-v C-v g-v) -> ||injective|| l23-v l19-v A-v C-v (λ (x-v : A-v) -> g-v (f-v x-v))
injective-compose = λ (l23-v l20-v l19-v : Level) -> λ (A-v : Set l23-v) -> λ (B-v : Set l20-v) -> λ (C-v : Set l19-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (g-v : (X---v : B-v) -> C-v) -> λ (auto-v : ||injective|| l23-v l20-v A-v B-v f-v) -> λ (auto'-v : ||injective|| l20-v l19-v B-v C-v g-v) -> λ (x-v : A-v) -> λ (y-v : A-v) -> λ (auto''-v : matita-basics-logic.eq l19-v C-v (g-v (f-v x-v)) (g-v (f-v y-v))) -> auto-v x-v y-v (auto'-v (f-v x-v) (f-v y-v) (matita-basics-logic.rewrite-l l19-v l19-v C-v (g-v (f-v x-v)) (λ (X---v : C-v) -> matita-basics-logic.eq l19-v C-v (g-v (f-v x-v)) X---v) (matita-basics-logic.refl l19-v C-v (g-v (f-v x-v))) (g-v (f-v y-v)) auto''-v))

exteqR : (l15-v l14-v l11-v l8-v : Level) -> (A-v : Set l15-v) -> (B-v : Set l14-v) -> (X-R-v : (X---v : A-v) -> (X--1-v : B-v) -> Set l11-v) -> (X-S-v : (X---v : A-v) -> (X--1-v : B-v) -> Set l8-v) -> Set (lzero ⊔ (((l14-v ⊔ l8-v) ⊔ l11-v) ⊔ l15-v))
exteqR = λ (l15-v l14-v l11-v l8-v : Level) -> λ (A-v : Set l15-v) -> λ (B-v : Set l14-v) -> λ (R-v : (X---v : A-v) -> (X--1-v : B-v) -> Set l11-v) -> λ (S-v : (X---v : A-v) -> (X--1-v : B-v) -> Set l8-v) -> (a-v : A-v) -> (b-v : B-v) -> matita-basics-logic.iff l11-v l8-v (R-v a-v b-v) (S-v a-v b-v)

exteqF : (l9-v l8-v : Level) -> (A-v : Set l9-v) -> (B-v : Set l8-v) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-g-v : (X---v : A-v) -> B-v) -> Set (lzero ⊔ (l9-v ⊔ l8-v))
exteqF = λ (l9-v l8-v : Level) -> λ (A-v : Set l9-v) -> λ (B-v : Set l8-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (g-v : (X---v : A-v) -> B-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v B-v (f-v a-v) (g-v a-v)

bi-relation : (l14-v l13-v l4-v : Level) -> (X---v : Set l14-v) -> (X--1-v : Set l13-v) -> Set ((lsuc lzero) ⊔ (((lsuc l4-v) ⊔ l14-v) ⊔ l13-v))
bi-relation = λ (l14-v l13-v l4-v : Level) -> λ (A-v : Set l14-v) -> λ (B-v : Set l13-v) -> (X---v : A-v) -> (X--1-v : B-v) -> (X--2-v : A-v) -> (X--3-v : B-v) -> Set l4-v

bi-reflexive : (l11-v l10-v l7-v : Level) -> (A-v : Set l11-v) -> (B-v : Set l10-v) -> (X-R-v : bi-relation l11-v l10-v l7-v A-v B-v) -> Set (lzero ⊔ ((l7-v ⊔ l11-v) ⊔ l10-v))
bi-reflexive = λ (l11-v l10-v l7-v : Level) -> λ (A-v : Set l11-v) -> λ (B-v : Set l10-v) -> λ (R-v : bi-relation l11-v l10-v l7-v A-v B-v) -> (a-v : A-v) -> (b-v : B-v) -> R-v a-v b-v a-v b-v

bi-symmetric : (l20-v l19-v l16-v : Level) -> (A-v : Set l20-v) -> (B-v : Set l19-v) -> (X-R-v : bi-relation l20-v l19-v l16-v A-v B-v) -> Set (lzero ⊔ ((l20-v ⊔ l19-v) ⊔ l16-v))
bi-symmetric = λ (l20-v l19-v l16-v : Level) -> λ (A-v : Set l20-v) -> λ (B-v : Set l19-v) -> λ (R-v : bi-relation l20-v l19-v l16-v A-v B-v) -> (a1-v : A-v) -> (a2-v : A-v) -> (b1-v : B-v) -> (b2-v : B-v) -> (X---v : R-v a2-v b2-v a1-v b1-v) -> R-v a1-v b1-v a2-v b2-v

bi-transitive : (l29-v l28-v l25-v : Level) -> (A-v : Set l29-v) -> (B-v : Set l28-v) -> (X-R-v : bi-relation l29-v l28-v l25-v A-v B-v) -> Set (lzero ⊔ ((l29-v ⊔ l28-v) ⊔ l25-v))
bi-transitive = λ (l29-v l28-v l25-v : Level) -> λ (A-v : Set l29-v) -> λ (B-v : Set l28-v) -> λ (R-v : bi-relation l29-v l28-v l25-v A-v B-v) -> (a1-v : A-v) -> (a-v : A-v) -> (b1-v : B-v) -> (b-v : B-v) -> (X---v : R-v a1-v b1-v a-v b-v) -> (a2-v : A-v) -> (b2-v : B-v) -> (X--1-v : R-v a-v b-v a2-v b2-v) -> R-v a1-v b1-v a2-v b2-v

bi-RC : (l15-v l14-v l11-v : Level) -> (A-v : Set l15-v) -> (B-v : Set l14-v) -> (X---v : bi-relation l15-v l14-v l11-v A-v B-v) -> bi-relation l15-v l14-v ((l11-v ⊔ l14-v) ⊔ l15-v) A-v B-v
bi-RC = λ (l15-v l14-v l11-v : Level) -> λ (A-v : Set l15-v) -> λ (B-v : Set l14-v) -> λ (R-v : bi-relation l15-v l14-v l11-v A-v B-v) -> λ (a1-v : A-v) -> λ (b1-v : B-v) -> λ (a2-v : A-v) -> λ (b2-v : B-v) -> matita-basics-logic.Or l11-v (l15-v ⊔ l14-v) (R-v a1-v b1-v a2-v b2-v) (matita-basics-logic.And l15-v l14-v (matita-basics-logic.eq l15-v A-v a1-v a2-v) (matita-basics-logic.eq l14-v B-v b1-v b2-v))

bi-RC-reflexive : (l19-v l18-v l15-v : Level) -> (A-v : Set l19-v) -> (B-v : Set l18-v) -> (R-v : bi-relation l19-v l18-v l15-v A-v B-v) -> bi-reflexive l19-v l18-v ((l15-v ⊔ l18-v) ⊔ l19-v) A-v B-v (bi-RC l19-v l18-v l15-v A-v B-v R-v)
bi-RC-reflexive = λ (l19-v l18-v l15-v : Level) -> λ (A-v : Set l19-v) -> λ (B-v : Set l18-v) -> λ (R-v : bi-relation l19-v l18-v l15-v A-v B-v) -> λ (a-v : A-v) -> λ (b-v : B-v) -> matita-basics-logic.or-intror l15-v (l19-v ⊔ l18-v) (R-v a-v b-v a-v b-v) (matita-basics-logic.And l19-v l18-v (matita-basics-logic.eq l19-v A-v a-v a-v) (matita-basics-logic.eq l18-v B-v b-v b-v)) (matita-basics-logic.conj l19-v l18-v (matita-basics-logic.eq l19-v A-v a-v a-v) (matita-basics-logic.eq l18-v B-v b-v b-v) (matita-basics-logic.refl l19-v A-v a-v) (matita-basics-logic.refl l18-v B-v b-v))

tri-relation : (l21-v l20-v l19-v l6-v : Level) -> (X---v : Set l21-v) -> (X--1-v : Set l20-v) -> (X--2-v : Set l19-v) -> Set ((lsuc lzero) ⊔ (((l20-v ⊔ (lsuc l6-v)) ⊔ l19-v) ⊔ l21-v))
tri-relation = λ (l21-v l20-v l19-v l6-v : Level) -> λ (A-v : Set l21-v) -> λ (B-v : Set l20-v) -> λ (C-v : Set l19-v) -> (X---v : A-v) -> (X--1-v : B-v) -> (X--2-v : C-v) -> (X--3-v : A-v) -> (X--4-v : B-v) -> (X--5-v : C-v) -> Set l6-v

tri-reflexive : (l16-v l15-v l14-v l11-v : Level) -> (A-v : Set l16-v) -> (B-v : Set l15-v) -> (C-v : Set l14-v) -> (X-R-v : tri-relation l16-v l15-v l14-v l11-v A-v B-v C-v) -> Set (lzero ⊔ (((l14-v ⊔ l16-v) ⊔ l11-v) ⊔ l15-v))
tri-reflexive = λ (l16-v l15-v l14-v l11-v : Level) -> λ (A-v : Set l16-v) -> λ (B-v : Set l15-v) -> λ (C-v : Set l14-v) -> λ (R-v : tri-relation l16-v l15-v l14-v l11-v A-v B-v C-v) -> (a-v : A-v) -> (b-v : B-v) -> (c-v : C-v) -> R-v a-v b-v c-v a-v b-v c-v

tri-symmetric : (l28-v l27-v l26-v l23-v : Level) -> (A-v : Set l28-v) -> (B-v : Set l27-v) -> (C-v : Set l26-v) -> (X-R-v : tri-relation l28-v l27-v l26-v l23-v A-v B-v C-v) -> Set (lzero ⊔ (((l26-v ⊔ l28-v) ⊔ l23-v) ⊔ l27-v))
tri-symmetric = λ (l28-v l27-v l26-v l23-v : Level) -> λ (A-v : Set l28-v) -> λ (B-v : Set l27-v) -> λ (C-v : Set l26-v) -> λ (R-v : tri-relation l28-v l27-v l26-v l23-v A-v B-v C-v) -> (a1-v : A-v) -> (a2-v : A-v) -> (b1-v : B-v) -> (b2-v : B-v) -> (c1-v : C-v) -> (c2-v : C-v) -> (X---v : R-v a2-v b2-v c2-v a1-v b1-v c1-v) -> R-v a1-v b1-v c1-v a2-v b2-v c2-v

tri-transitive : (l40-v l39-v l38-v l35-v : Level) -> (A-v : Set l40-v) -> (B-v : Set l39-v) -> (C-v : Set l38-v) -> (X-R-v : tri-relation l40-v l39-v l38-v l35-v A-v B-v C-v) -> Set (lzero ⊔ (((l38-v ⊔ l40-v) ⊔ l35-v) ⊔ l39-v))
tri-transitive = λ (l40-v l39-v l38-v l35-v : Level) -> λ (A-v : Set l40-v) -> λ (B-v : Set l39-v) -> λ (C-v : Set l38-v) -> λ (R-v : tri-relation l40-v l39-v l38-v l35-v A-v B-v C-v) -> (a1-v : A-v) -> (a-v : A-v) -> (b1-v : B-v) -> (b-v : B-v) -> (c1-v : C-v) -> (c-v : C-v) -> (X---v : R-v a1-v b1-v c1-v a-v b-v c-v) -> (a2-v : A-v) -> (b2-v : B-v) -> (c2-v : C-v) -> (X--1-v : R-v a-v b-v c-v a2-v b2-v c2-v) -> R-v a1-v b1-v c1-v a2-v b2-v c2-v

