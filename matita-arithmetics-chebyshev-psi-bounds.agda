open import Agda.Primitive
open import matita-basics-relations
open import matita-basics-bool
open import matita-arithmetics-bigops
open import matita-arithmetics-sigma-pi
open import matita-arithmetics-primes
open import matita-arithmetics-chebyshev-factorization
open import matita-arithmetics-div-and-mod
open import matita-basics-logic
open import matita-arithmetics-exp
open import matita-arithmetics-chebyshev-chebyshev-psi
open import matita-arithmetics-log
open import matita-arithmetics-nat
le-B-Psi : (n : nat) -> le (B n) (Psi n)
le-B-Psi = λ (n : nat) -> eq-ind-r lzero lzero nat (Psi' n) (λ (x : nat) -> λ (X-- : eq lzero nat x (Psi' n)) -> le (B n) x) (le-pi (S n) primeb (λ (X-- : nat) -> bigop (log X-- n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (mod (div n (exp X-- (S i))) (S (S O))))) (λ (X-- : nat) -> bigop (log X-- n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> X--)) (λ (p : nat) -> λ (ltp : lt p (S n)) -> λ (primep : eq lzero bool (primeb p) true) -> le-pi (log p n) (λ (X-- : nat) -> true) (λ (X-- : nat) -> exp p (mod (div n (exp p (S X--))) (S (S O)))) (λ (X-- : nat) -> p) (λ (i : nat) -> λ (lti : lt i (log p n)) -> λ (X-- : eq lzero bool true true) -> eq-ind-r lzero lzero nat (exp p (S O)) (λ (x : nat) -> λ (X-0 : eq lzero nat x (exp p (S O))) -> le (exp p (mod (div n (exp p (S i))) (S (S O)))) x) (le-exp (mod (div n (exp p (S i))) (S (S O))) (S O) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (primeb p) primep))) (le-S-S-to-le (mod (div n (exp p (S i))) (S (S O))) (S O) (lt-mod-m-m (div n (exp p (S i))) (S (S O)) (lt-O-S (S O))))) p (exp-n-1 p)))) (Psi n) (eq-Psi-Psi' n)

let-clause-1033'''''' : (n : nat) -> (posn : lt O n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-1033'''''' = λ (n : nat) -> λ (posn : lt O n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

let-clause-10331''' : (n : nat) -> (posn : lt O n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10331''' = λ (n : nat) -> λ (posn : lt O n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

let-clause-10332' : (n : nat) -> (posn : lt O n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10332' = λ (n : nat) -> λ (posn : lt O n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

let-clause-10333 : (n : nat) -> (posn : lt O n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10333 = λ (n : nat) -> λ (posn : lt O n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

let-clause-10334 : (n : nat) -> (posn : lt O n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10334 = λ (n : nat) -> λ (posn : lt O n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

let-clause-10335 : (n : nat) -> (posn : lt O n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10335 = λ (n : nat) -> λ (posn : lt O n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

le-B-Psi4 : (n : nat) -> (X-- : lt O n) -> le (times (S (S O)) (B (times (S (S (S (S O)))) n))) (Psi (times (S (S (S (S O)))) n))
le-B-Psi4 = λ (n : nat) -> λ (posn : lt O n) -> eq-ind-r lzero lzero nat (Psi' (times (S (S (S (S O)))) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (Psi' (times (S (S (S (S O)))) n))) -> le (times (S (S O)) (B (times (S (S (S (S O)))) n))) x) (eq-ind-r lzero lzero nat (bigop (S (times (S (S (S (S O)))) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (mod (div (times (S (S (S (S O)))) n) (exp p (S i))) (S (S O)))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S (times (S (S (S (S O)))) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (mod (div (times (S (S (S (S O)))) n) (exp p (S i))) (S (S O))))))) -> le (times (S (S O)) x) (Psi' (times (S (S (S (S O)))) n))) (eq-ind-r lzero lzero nat (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb (S (S O)) x0)) (primeb x0)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> bigop (log x0 (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x0 (mod (div (times (S (S (S (S O)))) n) (exp x0 (S i))) (S (S O)))))))) -> le (times (S (S O)) x) (Psi' (times (S (S (S (S O)))) n))) (eq-ind-r lzero lzero nat (bigop (S (times (S (S (S (S O)))) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S (times (S (S (S (S O)))) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p)))) -> le (times (S (S O)) (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb (S (S O)) x0)) (primeb x0)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> bigop (log x0 (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x0 (mod (div (times (S (S (S (S O)))) n) (exp x0 (S i))) (S (S O)))))))) x) (eq-ind-r lzero lzero nat (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> S (S O))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> x)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> S (S O))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb (S (S O)) x0)) (primeb x0)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> bigop (log x0 (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> x0))))) -> le (times (S (S O)) (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb (S (S O)) x0)) (primeb x0)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> bigop (log x0 (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x0 (mod (div (times (S (S (S (S O)))) n) (exp x0 (S i))) (S (S O)))))))) x) (eq-ind lzero lzero nat (times (times (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O)))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O)))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O))))))) x-1) -> le x-1 (aop--o--op lzero nat (S O) timesAC (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> S (S O))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> x))))) (le-times (times (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O)))))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> S (S O))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O)))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> x))) (eq-ind-r lzero lzero nat (aop--o--op lzero nat (S O) timesAC (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O)))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O)))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat (S O) timesAC (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O)))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb O x0)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x0))) (S (S O))))))) -> le (times (S (S O)) x) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> S (S O)))) (eq-ind-r lzero lzero nat (aop--o--op lzero nat (S O) timesAC (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (aop--o--op lzero nat (S O) timesAC (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb O x0)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> S (S O))))) -> le (times (S (S O)) (aop--o--op lzero nat (S O) timesAC (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O)))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb O x0)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x0))) (S (S O))))))) x) (eq-ind lzero lzero nat (times (times (S (S O)) (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O))))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O))))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O)))))) x-1) -> le x-1 (aop--o--op lzero nat (S O) timesAC (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O))))) (eq-ind-r lzero lzero nat (times (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb O x0)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> S (S O))))) -> le (times (times (S (S O)) (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O))))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x0 : nat) -> andb (notb (eqb O x0)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x0 : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x0))) (S (S O)))))) x) (le-times (times (S (S O)) (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O))))) (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O))))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O))) (eq-ind lzero lzero nat (S (S O)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (S O)) x-1) -> le (times (S (S O)) (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) x-1) (S (S O))))) (S (S O))) (eq-ind-r lzero lzero nat (times (S (S O)) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S (S O)))) -> le (times (S (S O)) (exp (S (S O)) (mod (div (times x n) (S (S O))) (S (S O))))) (S (S O))) (eq-ind-r lzero lzero nat (times (S (S O)) (times (S (S O)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (times (S (S O)) n))) -> le (times (S (S O)) (exp (S (S O)) (mod (div x (S (S O))) (S (S O))))) (S (S O))) (eq-ind-r lzero lzero nat (times (times (S (S O)) n) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) n) (S (S O)))) -> le (times (S (S O)) (exp (S (S O)) (mod (div x (S (S O))) (S (S O))))) (S (S O))) (eq-ind-r lzero lzero nat (times (S (S O)) n) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) n)) -> le (times (S (S O)) (exp (S (S O)) (mod x (S (S O))))) (S (S O))) (eq-ind-r lzero lzero nat O (λ (x : nat) -> λ (X-- : eq lzero nat x O) -> le (times (S (S O)) (exp (S (S O)) x)) (S (S O))) (le-n (times (S (S O)) (exp (S (S O)) O))) (mod (times (S (S O)) n) (S (S O))) (divides-to-mod-O (S (S O)) (times (S (S O)) n) (lt-O-S (S O)) (quotient (S (S O)) (times (S (S O)) n) n (rewrite-r lzero lzero nat (times n (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (times (S (S O)) n)) (rewrite-l lzero lzero nat (plus n (times n (S O))) (λ (X-- : nat) -> eq lzero nat X-- (times (S (S O)) n)) (rewrite-l lzero lzero nat (plus n (times n O)) (λ (X-- : nat) -> eq lzero nat (plus n X--) (times (S (S O)) n)) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus n (plus n X--)) (times (S (S O)) n)) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (plus n X--) (times (S (S O)) n)) (rewrite-r lzero lzero nat (times n (S (S O))) (λ (X-- : nat) -> eq lzero nat (plus n n) X--) (rewrite-l lzero lzero nat (plus n (times n (S O))) (λ (X-- : nat) -> eq lzero nat (plus n n) X--) (rewrite-l lzero lzero nat (plus n (times n O)) (λ (X-- : nat) -> eq lzero nat (plus n n) (plus n X--)) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus n n) (plus n (plus n X--))) (rewrite-l lzero lzero nat n (λ (X-- : nat) -> eq lzero nat (plus n n) (plus n X--)) (refl lzero nat (plus n n)) (plus n O) (plus-n-O n)) (times n O) (times-n-O n)) (times n (S O)) (times-n-Sm n O)) (times n (S (S O))) (times-n-Sm n (S O))) (times (S (S O)) n) (commutative-times (S (S O)) n)) (plus n O) (plus-n-O n)) (times n O) (times-n-O n)) (times n (S O)) (times-n-Sm n O)) (times n (S (S O))) (times-n-Sm n (S O))) (times (S (S O)) n) (commutative-times (S (S O)) n))))) (div (times (times (S (S O)) n) (S (S O))) (S (S O))) (div-times (times (S (S O)) n) (S (S O)) (lt-O-S (S O)))) (times (S (S O)) (times (S (S O)) n)) (commutative-times (S (S O)) (times (S (S O)) n))) (times (times (S (S O)) (S (S O))) n) (associative-times (S (S O)) (S (S O)) n)) (S (S (S (S O)))) (refl lzero nat (S (S (S (S O)))))) (exp (S (S O)) (S O)) (exp-n-1 (S (S O)))) (le-pi (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (X-- : nat) -> andb (notb (eqb O X--)) true) (λ (X-- : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S X--))) (S (S O)))) (λ (X-- : nat) -> S (S O)) (λ (i : nat) -> λ (lti : lt i (log (S (S O)) (times (S (S (S (S O)))) n))) -> λ (H : eq lzero bool (andb (notb (eqb O i)) true) true) -> eq-ind-r lzero lzero nat (exp (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (exp (S (S O)) (S O))) -> le (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O)))) x) (le-exp (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))) (S O) (S (S O)) (lt-O-S (S O)) (le-S-S-to-le (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))) (S O) (lt-mod-m-m (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O)) (lt-O-S (S O))))) (S (S O)) (exp-n-1 (S (S O)))))) (aop--o--op lzero nat (S O) timesAC (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O)))) (timesACdef (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O))))) (times (S (S O)) (times (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O)))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O))))))) (associative-times (S (S O)) (exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S O))) (S (S O)))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb O x)) true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O))))))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> S (S O))) (bigop-diff (λ (X-- : nat) -> true) nat (S O) timesAC (λ (X-- : nat) -> S (S O)) O (log (S (S O)) (times (S (S (S (S O)))) n)) (lt-O-log (S (S O)) (times (S (S (S (S O)))) n) (le-S-S-to-le (S (S O)) (times (S (S (S (S O)))) n) (le-S-S (S (S O)) (times (S (S (S (S O)))) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S (S (S O)))) n)) (le-times (S (S O)) (S (S (S (S O)))) (S O) n (eq-coerc lzero (le (S (mod (S O) O)) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S (S (S O))))) (le (S (S O)) (S (S (S (S O))))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) (S (S O))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S O) O)) (plus X-- (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S O) (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-r lzero (lsuc lzero) nat (S (S (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S O)) X--) (le (S (S O)) (S (S (S (S O)))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S O)) (S (S (S (S O)))))) (plus (S O) (S (S (S O)))) (rewrite-r lzero lzero nat (times (S (S (S O))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S (S (S O))))) (rewrite-r lzero lzero nat (times (S (S (S (S O)))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S (S (S O))) (S O))) X--) (times-Sn-m (S (S (S O))) (S O)) (S (S (S (S O)))) (times-n-1 (S (S (S (S O)))))) (S (S (S O))) (times-n-1 (S (S (S O)))))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-1033'''''' n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-1033'''''' n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) posn) (S (S O)) (times-n-1 (S (S O)))))) (le-S-S-to-le (S (S O)) (times (S (S (S (S O)))) n) (le-S-S (S (S O)) (times (S (S (S (S O)))) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S (S (S O)))) n)) (le-times (S (S O)) (S (S (S (S O)))) (S O) n (eq-coerc lzero (le (S (mod (S O) O)) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S (S (S O))))) (le (S (S O)) (S (S (S (S O))))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) (S (S O))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S O) O)) (plus X-- (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S O) (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-r lzero (lsuc lzero) nat (S (S (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S O)) X--) (le (S (S O)) (S (S (S (S O)))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S O)) (S (S (S (S O)))))) (plus (S O) (S (S (S O)))) (rewrite-r lzero lzero nat (times (S (S (S O))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S (S (S O))))) (rewrite-r lzero lzero nat (times (S (S (S (S O)))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S (S (S O))) (S O))) X--) (times-Sn-m (S (S (S O))) (S O)) (S (S (S (S O)))) (times-n-1 (S (S (S (S O)))))) (S (S (S O))) (times-n-1 (S (S (S O)))))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10331''' n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10331''' n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) posn) (S (S O)) (times-n-1 (S (S O))))))) (refl lzero bool true))) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (x : nat) -> true) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S x))) (S (S O))))) (bigop-diff (λ (X-- : nat) -> true) nat (S O) timesAC (λ (X-- : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S X--))) (S (S O)))) O (log (S (S O)) (times (S (S (S (S O)))) n)) (lt-O-log (S (S O)) (times (S (S (S (S O)))) n) (le-S-S-to-le (S (S O)) (times (S (S (S (S O)))) n) (le-S-S (S (S O)) (times (S (S (S (S O)))) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S (S (S O)))) n)) (le-times (S (S O)) (S (S (S (S O)))) (S O) n (eq-coerc lzero (le (S (mod (S O) O)) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S (S (S O))))) (le (S (S O)) (S (S (S (S O))))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) (S (S O))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S O) O)) (plus X-- (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S O) (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-r lzero (lsuc lzero) nat (S (S (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S O)) X--) (le (S (S O)) (S (S (S (S O)))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S O)) (S (S (S (S O)))))) (plus (S O) (S (S (S O)))) (rewrite-r lzero lzero nat (times (S (S (S O))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S (S (S O))))) (rewrite-r lzero lzero nat (times (S (S (S (S O)))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S (S (S O))) (S O))) X--) (times-Sn-m (S (S (S O))) (S O)) (S (S (S (S O)))) (times-n-1 (S (S (S (S O)))))) (S (S (S O))) (times-n-1 (S (S (S O)))))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10332' n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10332' n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) posn) (S (S O)) (times-n-1 (S (S O)))))) (le-S-S-to-le (S (S O)) (times (S (S (S (S O)))) n) (le-S-S (S (S O)) (times (S (S (S (S O)))) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S (S (S O)))) n)) (le-times (S (S O)) (S (S (S (S O)))) (S O) n (eq-coerc lzero (le (S (mod (S O) O)) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S (S (S O))))) (le (S (S O)) (S (S (S (S O))))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) (S (S O))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S O) O)) (plus X-- (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S O) (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-r lzero (lsuc lzero) nat (S (S (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S O)) X--) (le (S (S O)) (S (S (S (S O)))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S O)) (S (S (S (S O)))))) (plus (S O) (S (S (S O)))) (rewrite-r lzero lzero nat (times (S (S (S O))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S (S (S O))))) (rewrite-r lzero lzero nat (times (S (S (S (S O)))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S (S (S O))) (S O))) X--) (times-Sn-m (S (S (S O))) (S O)) (S (S (S (S O)))) (times-n-1 (S (S (S (S O)))))) (S (S (S O))) (times-n-1 (S (S (S O)))))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10333 n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10333 n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) posn) (S (S O)) (times-n-1 (S (S O))))))) (refl lzero bool true))) (le-pi (S (times (S (S (S (S O)))) n)) (λ (X-- : nat) -> andb (notb (eqb (S (S O)) X--)) (primeb X--)) (λ (X-- : nat) -> bigop (log X-- (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (mod (div (times (S (S (S (S O)))) n) (exp X-- (S i))) (S (S O))))) (λ (X-- : nat) -> bigop (log X-- (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> X--)) (λ (p : nat) -> λ (ltp : lt p (S (times (S (S (S (S O)))) n))) -> λ (Hp : eq lzero bool (andb (notb (eqb (S (S O)) p)) (primeb p)) true) -> le-pi (log p (times (S (S (S (S O)))) n)) (λ (X-- : nat) -> true) (λ (X-- : nat) -> exp p (mod (div (times (S (S (S (S O)))) n) (exp p (S X--))) (S (S O)))) (λ (X-- : nat) -> p) (λ (i : nat) -> λ (lti : lt i (log p (times (S (S (S (S O)))) n))) -> λ (H : eq lzero bool true true) -> eq-ind-r lzero lzero nat (exp p (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (exp p (S O))) -> le (exp p (mod (div (times (S (S (S (S O)))) n) (exp p (S i))) (S (S O)))) x) (le-exp (mod (div (times (S (S (S (S O)))) n) (exp p (S i))) (S (S O))) (S O) p (prime-to-lt-O p (primeb-true-to-prime p (andb-true-r (notb (eqb (S (S O)) p)) (primeb p) Hp))) (le-S-S-to-le (mod (div (times (S (S (S (S O)))) n) (exp p (S i))) (S (S O))) (S O) (lt-mod-m-m (div (times (S (S (S (S O)))) n) (exp p (S i))) (S (S O)) (lt-O-S (S O))))) p (exp-n-1 p))))) (times (S (S O)) (times (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O)))))))) (associative-times (S (S O)) (bigop (log (S (S O)) (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp (S (S O)) (mod (div (times (S (S (S (S O)))) n) (exp (S (S O)) (S i))) (S (S O))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> andb (notb (eqb (S (S O)) x)) (primeb x)) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O)))))))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> primeb x) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> x))) (bigop-diff primeb nat (S O) timesAC (λ (X-- : nat) -> bigop (log X-- (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> X--)) (S (S O)) (S (times (S (S (S (S O)))) n)) (le-S-S (S (S O)) (times (S (S (S (S O)))) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S (S (S O)))) n)) (le-times (S (S O)) (S (S (S (S O)))) (S O) n (eq-coerc lzero (le (S (mod (S O) O)) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S (S (S O))))) (le (S (S O)) (S (S (S (S O))))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) (S (S O))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S O) O)) (plus X-- (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S O) (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-r lzero (lsuc lzero) nat (S (S (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S O)) X--) (le (S (S O)) (S (S (S (S O)))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S O)) (S (S (S (S O)))))) (plus (S O) (S (S (S O)))) (rewrite-r lzero lzero nat (times (S (S (S O))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S (S (S O))))) (rewrite-r lzero lzero nat (times (S (S (S (S O)))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S (S (S O))) (S O))) X--) (times-Sn-m (S (S (S O))) (S O)) (S (S (S (S O)))) (times-n-1 (S (S (S (S O)))))) (S (S (S O))) (times-n-1 (S (S (S O)))))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10334 n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10334 n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) posn) (S (S O)) (times-n-1 (S (S O))))) (refl lzero bool (primeb (S (S O)))))) (Psi' (times (S (S (S (S O)))) n)) (Psidef (times (S (S (S (S O)))) n))) (bigop (S (times (S (S (S (S O)))) n)) (λ (x : nat) -> primeb x) nat (S O) (aop--o--op lzero nat (S O) timesAC) (λ (x : nat) -> bigop (log x (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp x (mod (div (times (S (S (S (S O)))) n) (exp x (S i))) (S (S O)))))) (bigop-diff primeb nat (S O) timesAC (λ (X-- : nat) -> bigop (log X-- (times (S (S (S (S O)))) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (mod (div (times (S (S (S (S O)))) n) (exp X-- (S i))) (S (S O))))) (S (S O)) (S (times (S (S (S (S O)))) n)) (le-S-S (S (S O)) (times (S (S (S (S O)))) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S (S (S O)))) n)) (le-times (S (S O)) (S (S (S (S O)))) (S O) n (eq-coerc lzero (le (S (mod (S O) O)) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S (S (S O))))) (le (S (S O)) (S (S (S (S O))))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) (S (S O))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S O) O)) (plus X-- (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S O) (S (S (S O))))) (le (S (S O)) (S (S (S (S O)))))) (rewrite-r lzero (lsuc lzero) nat (S (S (S (S O)))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S O)) X--) (le (S (S O)) (S (S (S (S O)))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S O)) (S (S (S (S O)))))) (plus (S O) (S (S (S O)))) (rewrite-r lzero lzero nat (times (S (S (S O))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S (S (S O))))) (rewrite-r lzero lzero nat (times (S (S (S (S O)))) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S (S (S O))) (S O))) X--) (times-Sn-m (S (S (S O))) (S O)) (S (S (S (S O)))) (times-n-1 (S (S (S (S O)))))) (S (S (S O))) (times-n-1 (S (S (S O)))))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10335 n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10335 n posn (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) posn) (S (S O)) (times-n-1 (S (S O))))) (refl lzero bool (primeb (S (S O)))))) (B (times (S (S (S (S O)))) n)) (Bdef (times (S (S (S (S O)))) n))) (Psi (times (S (S (S (S O)))) n)) (eq-Psi-Psi' (times (S (S (S (S O)))) n))


bool-to-nat : (X-b-v : bool) -> nat
bool-to-nat X-b-v = match-bool lzero (λ (X---v : bool) -> nat) (S O) O X-b-v



eq-Psi-2-n : (n : nat) -> (X-- : lt O n) -> eq lzero nat (Psi (times (S (S O)) n)) (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) (Psi n))
eq-Psi-2-n = λ (n : nat) -> λ (posn : lt O n) -> eq-ind-r lzero lzero nat (Psi' (times (S (S O)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (Psi' (times (S (S O)) n))) -> eq lzero nat x (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) (Psi n))) (eq-ind-r lzero lzero nat (Psi' n) (λ (x : nat) -> λ (X-- : eq lzero nat x (Psi' n)) -> eq lzero nat (Psi' (times (S (S O)) n)) (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) x)) (eq-ind-r lzero lzero nat (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p)))) -> eq lzero nat (Psi' (times (S (S O)) n)) (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) x)) (eq-ind-r lzero lzero nat (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i))))))))) -> eq lzero nat (Psi' (times (S (S O)) n)) (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) x)) (eq-ind lzero lzero nat (bigop (S (times (S (S O)) n)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> times (bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (leb (S n) (exp i (S i0)))))) (bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0))))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (bigop (S (times (S (S O)) n)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> times (bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (leb (S n) (exp i (S i0)))))) (bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0))))))))) x-1) -> eq lzero nat (Psi' (times (S (S O)) n)) x-1) (eq-ind-r lzero lzero nat (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p)))) -> eq lzero nat x (bigop (S (times (S (S O)) n)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> times (bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (leb (S n) (exp i (S i0)))))) (bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0)))))))))) (same-bigop (S (times (S (S O)) n)) primeb primeb nat (S O) times (λ (X-- : nat) -> bigop (log X-- (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> X--)) (λ (X-- : nat) -> times (bigop (log X-- (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp X-- (bool-to-nat (leb (S n) (exp X-- (S i0)))))) (bigop (log X-- (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp X-- (bool-to-nat (notb (leb (S n) (exp X-- (S i0)))))))) (λ (i : nat) -> λ (auto : lt i (S (times (S (S O)) n))) -> refl lzero bool (primeb i)) (λ (p : nat) -> λ (lt1p : lt p (S (times (S (S O)) n))) -> λ (primep : eq lzero bool (primeb p) true) -> eq-ind lzero lzero nat (bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> times (exp p (bool-to-nat (leb (S n) (exp p (S i))))) (exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> times (exp p (bool-to-nat (leb (S n) (exp p (S i))))) (exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) x-1) -> eq lzero nat (bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p)) x-1) (same-bigop (log p (times (S (S O)) n)) (λ (X-- : nat) -> true) (λ (X-- : nat) -> true) nat (S O) times (λ (X-- : nat) -> p) (λ (X-- : nat) -> times (exp p (bool-to-nat (leb (S n) (exp p (S X--))))) (exp p (bool-to-nat (notb (leb (S n) (exp p (S X--))))))) (λ (i : nat) -> λ (auto : lt i (log p (times (S (S O)) n))) -> refl lzero bool true) (λ (i : nat) -> λ (lt1i : lt i (log p (times (S (S O)) n))) -> λ (X-- : eq lzero bool true true) -> match-Or lzero lzero (eq lzero bool (leb (S n) (exp p (S i))) true) (eq lzero bool (leb (S n) (exp p (S i))) false) lzero (λ (X-0 : Or lzero lzero (eq lzero bool (leb (S n) (exp p (S i))) true) (eq lzero bool (leb (S n) (exp p (S i))) false)) -> eq lzero nat p (times (exp p (bool-to-nat (leb (S n) (exp p (S i))))) (exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (λ (Hc : eq lzero bool (leb (S n) (exp p (S i))) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-0 : eq lzero bool x true) -> eq lzero nat p (times (exp p (bool-to-nat x)) (exp p (bool-to-nat (notb x))))) (eq-ind lzero lzero nat (plus p O) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus p O) x-1) -> eq lzero nat p x-1) (eq-ind-r lzero lzero nat (plus O O) (λ (x : nat) -> λ (X-0 : eq lzero nat x (plus O O)) -> eq lzero nat p (plus p O)) (rewrite-l lzero lzero nat p (λ (X--1 : nat) -> eq lzero nat p X--1) (refl lzero nat p) (plus p O) (plus-n-O p)) O (plus-n-O O)) (times (plus p O) (S O)) (times-n-1 (plus p O))) (leb (S n) (exp p (S i))) Hc) (λ (Hc : eq lzero bool (leb (S n) (exp p (S i))) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-0 : eq lzero bool x false) -> eq lzero nat p (times (exp p (bool-to-nat x)) (exp p (bool-to-nat (notb x))))) (eq-ind lzero lzero nat (plus p O) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus p O) x-1) -> eq lzero nat p x-1) (eq-ind lzero lzero nat p (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat p x-1) -> eq lzero nat p x-1) (refl lzero nat p) (plus p O) (plus-n-O p)) (plus (plus p O) O) (plus-n-O (plus p O))) (leb (S n) (exp p (S i))) Hc) (true-or-false (leb (S n) (exp p (S i)))))) (times (bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i)))))) (bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (times-pi (log p (times (S (S O)) n)) (λ (X-- : nat) -> true) (λ (X-- : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S X--))))) (λ (X-- : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S X--))))))))) (Psi' (times (S (S O)) n)) (Psidef (times (S (S O)) n))) (times (bigop (S (times (S (S O)) n)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (leb (S n) (exp i (S i0))))))) (bigop (S (times (S (S O)) n)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> bigop (log i (times (S (S O)) n)) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0))))))))) (times-pi (S (times (S (S O)) n)) primeb (λ (X-- : nat) -> bigop (log X-- (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (leb (S n) (exp X-- (S i)))))) (λ (X-- : nat) -> bigop (log X-- (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (notb (leb (S n) (exp X-- (S i))))))))) (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p))) (trans-eq lzero nat (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> p))) (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (same-bigop (S n) primeb primeb nat (S O) times (λ (X-- : nat) -> bigop (log X-- n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> X--)) (λ (X-- : nat) -> bigop (log X-- n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (notb (leb (S n) (exp X-- (S i))))))) (λ (i : nat) -> λ (auto : lt i (S n)) -> refl lzero bool (primeb i)) (λ (p : nat) -> λ (lt1p : lt p (S n)) -> λ (primep : eq lzero bool (primeb p) true) -> same-bigop (log p n) (λ (X-- : nat) -> true) (λ (X-- : nat) -> true) nat (S O) times (λ (X-- : nat) -> p) (λ (X-- : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S X--)))))) (λ (i : nat) -> λ (auto : lt i (log p n)) -> refl lzero bool true) (λ (i : nat) -> λ (lti : lt i (log p n)) -> λ (X-- : eq lzero bool true true) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-0 : eq lzero bool x false) -> eq lzero nat p (exp p (bool-to-nat (notb x)))) (plus-n-O p) (leb (S n) (exp p (S i))) (lt-to-leb-false (S n) (exp p (S i)) (le-S-S (exp p (S i)) n (transitive-le (exp p (S i)) (exp p (log p n)) n (le-exp (S i) (log p n) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (primeb p) primep))) lti) (le-exp-log p n posn))))))) (trans-eq lzero nat (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))))) (pad-bigop-nil (S (times (S (S O)) n)) (S n) primeb nat (S O) timesA (λ (X-- : nat) -> bigop (log X-- n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (notb (leb (S n) (exp X-- (S i))))))) (le-S-S n (times (S (S O)) n) (le-plus-n-r (times (S O) n) n)) (λ (i : nat) -> λ (lti : le (S n) i) -> λ (upi : lt i (S (times (S (S O)) n))) -> or-intror lzero lzero (eq lzero bool (primeb i) false) (eq lzero nat (bigop (log i n) (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0))))))) (S O)) (eq-ind-r lzero lzero nat O (λ (x : nat) -> λ (X-- : eq lzero nat x O) -> eq lzero nat (bigop x (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0))))))) (S O)) (refl lzero nat (bigop O (λ (i0 : nat) -> true) nat (S O) times (λ (i0 : nat) -> exp i (bool-to-nat (notb (leb (S n) (exp i (S i0)))))))) (log i n) (lt-to-log-O i n posn lti)))) (same-bigop (S (times (S (S O)) n)) primeb primeb nat (S O) times (λ (X-- : nat) -> bigop (log X-- n) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (notb (leb (S n) (exp X-- (S i))))))) (λ (X-- : nat) -> bigop (log X-- (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (notb (leb (S n) (exp X-- (S i))))))) (λ (i : nat) -> λ (auto : lt i (S (times (S (S O)) n))) -> refl lzero bool (primeb i)) (λ (p : nat) -> λ (ltp : lt p (S (times (S (S O)) n))) -> λ (primep : eq lzero bool (primeb p) true) -> pad-bigop-nil (log p (times (S (S O)) n)) (log p n) (λ (X-- : nat) -> true) nat (S O) timesA (λ (X-- : nat) -> exp p (bool-to-nat (notb (leb (S n) (exp p (S X--)))))) (le-log p n (times (S (S O)) n) (prime-to-lt-SO p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep))) (le-plus-n-r (times (S O) n) n)) (λ (i : nat) -> λ (lei : le (log p n) i) -> λ (iup : lt i (log p (times (S (S O)) n))) -> or-intror lzero lzero (eq lzero bool true false) (eq lzero nat (exp p (bool-to-nat (notb (leb (S n) (exp p (S i)))))) (S O)) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (exp p (bool-to-nat (notb x))) (S O)) (refl lzero nat (exp p (bool-to-nat (notb true)))) (leb (S n) (exp p (S i))) (le-to-leb-true (S n) (exp p (S i)) (lt-to-le-to-lt n (exp p (S (log p n))) (exp p (S i)) (lt-exp-log p n (prime-to-lt-SO p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep)))) (le-exp (S (log p n)) (S i) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep))) (le-S-S (log p n) i lei))))))))))) (Psi' n) (Psidef n)) (Psi n) (eq-Psi-Psi' n)) (Psi (times (S (S O)) n)) (eq-Psi-Psi' (times (S (S O)) n))

le-Psi-BPsi1 : (n : nat) -> (X-- : lt O n) -> le (Psi (times (S (S O)) n)) (times (B (times (S (S O)) n)) (Psi n))
le-Psi-BPsi1 = λ (n : nat) -> λ (posn : lt O n) -> eq-ind-r lzero lzero nat (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) (Psi n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) (Psi n))) -> le x (times (B (times (S (S O)) n)) (Psi n))) (le-times (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) (B (times (S (S O)) n)) (Psi n) (Psi n) (eq-ind-r lzero lzero nat (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O)))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O))))))) -> le (bigop (S (times (S (S O)) n)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> bigop (log p (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S i))))))) x) (le-pi (S (times (S (S O)) n)) primeb (λ (X-- : nat) -> bigop (log X-- (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (bool-to-nat (leb (S n) (exp X-- (S i)))))) (λ (X-- : nat) -> bigop (log X-- (times (S (S O)) n)) (λ (i : nat) -> true) nat (S O) times (λ (i : nat) -> exp X-- (mod (div (times (S (S O)) n) (exp X-- (S i))) (S (S O))))) (λ (p : nat) -> λ (ltp : lt p (S (times (S (S O)) n))) -> λ (primep : eq lzero bool (primeb p) true) -> le-pi (log p (times (S (S O)) n)) (λ (X-- : nat) -> true) (λ (X-- : nat) -> exp p (bool-to-nat (leb (S n) (exp p (S X--))))) (λ (X-- : nat) -> exp p (mod (div (times (S (S O)) n) (exp p (S X--))) (S (S O)))) (λ (i : nat) -> λ (lti : lt i (log p (times (S (S O)) n))) -> λ (X-- : eq lzero bool true true) -> le-exp (bool-to-nat (leb (S n) (exp p (S i)))) (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O))) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (primeb p) primep))) (match-Or lzero lzero (eq lzero bool (leb (S n) (exp p (S i))) true) (eq lzero bool (leb (S n) (exp p (S i))) false) lzero (λ (X-0 : Or lzero lzero (eq lzero bool (leb (S n) (exp p (S i))) true) (eq lzero bool (leb (S n) (exp p (S i))) false)) -> le (bool-to-nat (leb (S n) (exp p (S i)))) (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O)))) (λ (Hc : eq lzero bool (leb (S n) (exp p (S i))) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-0 : eq lzero bool x true) -> le (bool-to-nat x) (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O)))) (eq-ind-r lzero lzero nat (S O) (λ (x : nat) -> λ (X-0 : eq lzero nat x (S O)) -> le (S O) (mod x (S (S O)))) (le-n (S O)) (div (times (S (S O)) n) (exp p (S i))) (div-mod-spec-to-eq (times (S (S O)) n) (exp p (S i)) (div (times (S (S O)) n) (exp p (S i))) (mod (times (S (S O)) n) (exp p (S i))) (S O) (minus (times (S (S O)) n) (exp p (S i))) (div-mod-spec-div-mod (times (S (S O)) n) (exp p (S i)) (lt-O-exp p (S i) (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (primeb p) primep))))) (div-mod-spec-intro (times (S (S O)) n) (exp p (S i)) (S O) (minus (times (S (S O)) n) (exp p (S i))) (lt-plus-to-minus (times (S (S O)) n) (exp p (S i)) (exp p (S i)) (transitive-le (exp p (S i)) (exp p (log p (times (S (S O)) n))) (times (S (S O)) n) (le-exp (S i) (log p (times (S (S O)) n)) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (primeb p) primep))) lti) (le-exp-log p (times (S (S O)) n) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-0 : eq lzero nat x (times O O)) -> lt x (times (S (S O)) n)) (lt-times O (S (S O)) O n (lt-O-S (S O)) posn) O (times-n-O O)))) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> lt (plus n x-1) (plus (exp p (S i)) (exp p (S i)))) (lt-plus n (exp p (S i)) n (exp p (S i)) (leb-true-to-le (S n) (exp p (S i)) (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (leb (S n) (exp p (S i))) Hc)) (leb-true-to-le (S n) (exp p (S i)) (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (leb (S n) (exp p (S i))) Hc))) (plus n O) (plus-n-O n))) (eq-ind-r lzero lzero nat (plus (minus (times (S (S O)) n) (exp p (S i))) (times (S O) (exp p (S i)))) (λ (x : nat) -> λ (X-0 : eq lzero nat x (plus (minus (times (S (S O)) n) (exp p (S i))) (times (S O) (exp p (S i))))) -> eq lzero nat (times (S (S O)) n) x) (eq-ind-r lzero lzero nat (times (exp p (S i)) (S O)) (λ (x : nat) -> λ (X-0 : eq lzero nat x (times (exp p (S i)) (S O))) -> eq lzero nat (times (S (S O)) n) (plus (minus (times (S (S O)) n) (exp p (S i))) x)) (eq-ind lzero lzero nat (exp p (S i)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp p (S i)) x-1) -> eq lzero nat (times (S (S O)) n) (plus (minus (times (S (S O)) n) (exp p (S i))) x-1)) (plus-minus-m-m (times (S (S O)) n) (exp p (S i)) (transitive-le (exp p (S i)) (exp p (log p (times (S (S O)) n))) (times (S (S O)) n) (le-exp (S i) (log p (times (S (S O)) n)) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool X--1 true) (refl lzero bool true) (primeb p) primep))) lti) (le-exp-log p (times (S (S O)) n) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-0 : eq lzero nat x (times O O)) -> lt x (times (S (S O)) n)) (lt-times O (S (S O)) O n (lt-O-S (S O)) posn) O (times-n-O O))))) (times (exp p (S i)) (S O)) (times-n-1 (exp p (S i)))) (times (S O) (exp p (S i))) (commutative-times (S O) (exp p (S i)))) (plus (times (S O) (exp p (S i))) (minus (times (S (S O)) n) (exp p (S i)))) (commutative-plus (times (S O) (exp p (S i))) (minus (times (S (S O)) n) (exp p (S i)))))))) (leb (S n) (exp p (S i))) Hc) (λ (Hc : eq lzero bool (leb (S n) (exp p (S i))) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-0 : eq lzero bool x false) -> le (bool-to-nat x) (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O)))) (le-O-n (mod (div (times (S (S O)) n) (exp p (S i))) (S (S O)))) (leb (S n) (exp p (S i))) Hc) (true-or-false (leb (S n) (exp p (S i)))))))) (B (times (S (S O)) n)) (Bdef (times (S (S O)) n))) (le-n (Psi n))) (Psi (times (S (S O)) n)) (eq-Psi-2-n n posn)

le-Psi-BPsi : (n : nat) -> le (Psi (times (S (S O)) n)) (times (B (times (S (S O)) n)) (Psi n))
le-Psi-BPsi = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> le (Psi (times (S (S O)) X--)) (times (B (times (S (S O)) X--)) (Psi X--))) (le-n (Psi (times (S (S O)) O))) (λ (m : nat) -> le-Psi-BPsi1 (S m) (lt-O-S m)) n

le-Psi-exp : (n : nat) -> le (Psi (times (S (S O)) n)) (times (exp (S (S O)) (pred (times (S (S O)) n))) (Psi n))
le-Psi-exp = λ (n : nat) -> transitive-le (Psi (times (S (S O)) n)) (times (B (times (S (S O)) n)) (Psi n)) (times (exp (S (S O)) (pred (times (S (S O)) n))) (Psi n)) (le-Psi-BPsi n) (le-times (B (times (S (S O)) n)) (exp (S (S O)) (pred (times (S (S O)) n))) (Psi n) (Psi n) (le-B-exp n) (le-n (Psi n)))

lt-4-to-le-Psi-exp : (n : nat) -> (X-- : lt (S (S (S (S O)))) n) -> le (Psi (times (S (S O)) n)) (times (exp (S (S O)) (minus (times (S (S O)) n) (S (S O)))) (Psi n))
lt-4-to-le-Psi-exp = λ (n : nat) -> λ (lt4n : lt (S (S (S (S O)))) n) -> transitive-le (Psi (times (S (S O)) n)) (times (B (times (S (S O)) n)) (Psi n)) (times (exp (S (S O)) (minus (times (S (S O)) n) (S (S O)))) (Psi n)) (le-Psi-BPsi n) (le-times (B (times (S (S O)) n)) (exp (S (S O)) (minus (times (S (S O)) n) (S (S O)))) (Psi n) (Psi n) (lt-4-to-le-B-exp n lt4n) (le-n (Psi n)))

times-2-pred : (n : nat) -> le (times (S (S O)) (pred n)) (pred (times (S (S O)) n))
times-2-pred = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> le (times (S (S O)) (pred X--)) (pred (times (S (S O)) X--))) (le-n (times (S (S O)) (pred O))) (λ (m : nat) -> monotonic-le-plus-r (pred (S m)) (times (S O) (pred (S m))) (times (S O) (S m)) (le-n-Sn (times (S O) (pred (S m))))) n

le-S-times-2 : (n : nat) -> (X-- : lt O n) -> le (S n) (times (S (S O)) n)
le-S-times-2 = λ (n : nat) -> λ (posn : lt O n) -> le-ind lzero (S O) (λ (x-417 : nat) -> λ (X-x-418 : le (S O) x-417) -> le (S x-417) (times (S (S O)) x-417)) (le-n (S (S O))) (λ (m : nat) -> λ (posm : le (S O) m) -> λ (Hind : le (S m) (times (S (S O)) m)) -> eq-ind-r lzero lzero nat (S (S (times (S (S O)) m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) m)))) -> le (S (S m)) x) (le-S-S (S m) (S (times (S (S O)) m)) (transitive-le (S m) (times (S (S O)) m) (S (times (S (S O)) m)) Hind (le-n-Sn (times (S (S O)) m)))) (times (S (S O)) (S m)) (eq-ind lzero lzero nat (S (plus m (plus m O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus m (plus m O))) x-1) -> eq lzero nat (S x-1) (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (S (S (plus m X--))) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (S X--) (S (S (plus m (plus m O))))) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus m (plus m O))))) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S (S (plus m X--)))) (rewrite-r lzero lzero nat (plus m (S m)) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) (S X--)) (rewrite-r lzero lzero nat (plus m (S (S m))) (λ (X-- : nat) -> eq lzero nat (plus m (S (S m))) X--) (refl lzero nat (plus m (S (S m)))) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (S (plus m (S m))) (plus-n-Sm m (S m))) (S (plus m m)) (plus-n-Sm m m)) (plus m O) (plus-n-O m)) (plus m (S (plus m O))) (plus-n-Sm m (plus m O)))) n posn

le-Psi-exp1 : (n : nat) -> le (Psi (exp (S (S O)) n)) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) n)) (S (S n))))
le-Psi-exp1 = λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> le (Psi (exp (S (S O)) X-x-365)) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) X-x-365)) (S (S X-x-365))))) (le-n (Psi (exp (S (S O)) O))) (λ (n1 : nat) -> λ (Hind : le (Psi (exp (S (S O)) n1)) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) -> eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) n1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) n1))) -> le (Psi x) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))))) (transitive-le (Psi (times (S (S O)) (exp (S (S O)) n1))) (times (exp (S (S O)) (pred (times (S (S O)) (exp (S (S O)) n1)))) (Psi (exp (S (S O)) n1))) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1))))) (le-Psi-exp (exp (S (S O)) n1)) (transitive-le (times (exp (S (S O)) (pred (times (S (S O)) (exp (S (S O)) n1)))) (Psi (exp (S (S O)) n1))) (times (exp (S (S O)) (pred (times (S (S O)) (exp (S (S O)) n1)))) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1))))) (monotonic-le-times-r (exp (S (S O)) (pred (times (S (S O)) (exp (S (S O)) n1)))) (Psi (exp (S (S O)) n1)) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) Hind) (eq-ind lzero lzero nat (exp (S (S O)) (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) x-1) -> le x-1 (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))))) (le-exp (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))) (S (S O)) (lt-O-S (S O)) (le-S-S-to-le (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))) (eq-ind lzero lzero nat (plus (S (pred (times (S (S O)) (exp (S (S O)) n1)))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (S (pred (times (S (S O)) (exp (S (S O)) n1)))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) x-1) -> le x-1 (S (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) n1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) n1))) -> le (plus x (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (S (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))))) (eq-ind-r lzero lzero nat (pred (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (pred (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1))))) -> le (plus (times (S (S O)) (exp (S (S O)) n1)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (S x)) (eq-ind-r lzero lzero nat (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1)))) -> le (plus (times (S (S O)) (exp (S (S O)) n1)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) x) (eq-ind-r lzero lzero nat (minus (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1))) (S (S n1))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1))) (S (S n1)))) -> le x (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1)))) (monotonic-le-minus-l (times (S (S O)) (exp (S (S O)) (S n1))) (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1))) (S (S n1)) (eq-ind lzero lzero nat (times (S (S O)) (times (S (S O)) (exp (S (S O)) n1))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (S (S O)) (times (S (S O)) (exp (S (S O)) n1))) x-1) -> le x-1 (times (S (S O)) (exp (S (S O)) (S n1)))) (monotonic-le-times-r (S (S O)) (times (S (S O)) (exp (S (S O)) n1)) (exp (S (S O)) (S n1)) (eq-ind-r lzero lzero nat (times (exp (S (S O)) n1) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S (S O)) n1) (S (S O)))) -> le x (exp (S (S O)) (S n1))) (le-n (times (exp (S (S O)) n1) (S (S O)))) (times (S (S O)) (exp (S (S O)) n1)) (commutative-times (S (S O)) (exp (S (S O)) n1)))) (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1))) (rewrite-r lzero lzero nat (times (times (S (S O)) (exp (S (S O)) n1)) (S (S O))) (λ (X-- : nat) -> eq lzero nat X-- (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)))) (rewrite-l lzero lzero nat (plus (times (S (S O)) (exp (S (S O)) n1)) (times (times (S (S O)) (exp (S (S O)) n1)) (S O))) (λ (X-- : nat) -> eq lzero nat X-- (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)))) (rewrite-l lzero lzero nat (plus (times (S (S O)) (exp (S (S O)) n1)) (times (times (S (S O)) (exp (S (S O)) n1)) O)) (λ (X-- : nat) -> eq lzero nat (plus (times (S (S O)) (exp (S (S O)) n1)) X--) (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)))) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (plus (times (S (S O)) (exp (S (S O)) n1)) (plus (times (S (S O)) (exp (S (S O)) n1)) X--)) (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)))) (rewrite-l lzero lzero nat (times (S (S O)) (exp (S (S O)) n1)) (λ (X-- : nat) -> eq lzero nat (plus (times (S (S O)) (exp (S (S O)) n1)) X--) (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)))) (refl lzero nat (plus (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)))) (plus (times (S (S O)) (exp (S (S O)) n1)) O) (plus-n-O (times (S (S O)) (exp (S (S O)) n1)))) (times (times (S (S O)) (exp (S (S O)) n1)) O) (times-n-O (times (S (S O)) (exp (S (S O)) n1)))) (times (times (S (S O)) (exp (S (S O)) n1)) (S O)) (times-n-Sm (times (S (S O)) (exp (S (S O)) n1)) O)) (times (times (S (S O)) (exp (S (S O)) n1)) (S (S O))) (times-n-Sm (times (S (S O)) (exp (S (S O)) n1)) (S O))) (times (S (S O)) (times (S (S O)) (exp (S (S O)) n1))) (commutative-times (S (S O)) (times (S (S O)) (exp (S (S O)) n1)))))) (plus (times (S (S O)) (exp (S (S O)) n1)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (plus-minus-associative (times (S (S O)) (exp (S (S O)) n1)) (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)) (nat-ind lzero (λ (X-x-365 : nat) -> le (S (S X-x-365)) (times (S (S O)) (exp (S (S O)) X-x-365))) (le-n (S (S O))) (λ (n2 : nat) -> eq-ind-r lzero lzero nat (times (exp (S (S O)) n2) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S (S O)) n2) (S (S O)))) -> (X-x-368 : le (S (S n2)) x) -> le (S (S (S n2))) (times (S (S O)) (exp (S (S O)) (S n2)))) (λ (Hind1 : le (S (S n2)) (times (exp (S (S O)) n2) (S (S O)))) -> transitive-le (S (S (S n2))) (times (S (S O)) (S (S n2))) (times (S (S O)) (exp (S (S O)) (S n2))) (le-S-times-2 (S (S n2)) (lt-O-S (S n2))) (monotonic-le-times-r (S (S O)) (S (S n2)) (exp (S (S O)) (S n2)) Hind1)) (times (S (S O)) (exp (S (S O)) n2)) (commutative-times (S (S O)) (exp (S (S O)) n2))) n1))) (S (pred (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1))))) (S-pred (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1))) (lt-plus-to-minus-r O (S (S n1)) (times (S (S O)) (exp (S (S O)) (S n1))) (lt-to-le-to-lt (S (S n1)) (times (S (S O)) (S (S n1))) (times (S (S O)) (exp (S (S O)) (S n1))) (eq-ind-r lzero lzero nat (times (S (S n1)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S n1)) (S O))) -> lt x (times (S (S O)) (S (S n1)))) (eq-ind-r lzero lzero nat (times (S O) (S (S n1))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) (S (S n1)))) -> lt x (times (S (S O)) (S (S n1)))) (monotonic-lt-times-l (S (S n1)) (lt-O-S (S n1)) (S O) (S (S O)) (le-n (S (S O)))) (times (S (S n1)) (S O)) (commutative-times (S (S n1)) (S O))) (S (S n1)) (times-n-1 (S (S n1)))) (monotonic-le-times-r (S (S O)) (S (S n1)) (exp (S (S O)) (S n1)) (eq-coerc lzero (le (S (S n1)) (times (S (S O)) (exp (S (S O)) n1))) (le (S (S n1)) (times (exp (S (S O)) n1) (S (S O)))) (nat-ind lzero (λ (X-x-365 : nat) -> le (S (S X-x-365)) (times (S (S O)) (exp (S (S O)) X-x-365))) (le-n (S (S O))) (λ (n2 : nat) -> eq-ind-r lzero lzero nat (times (exp (S (S O)) n2) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S (S O)) n2) (S (S O)))) -> (X-x-368 : le (S (S n2)) x) -> le (S (S (S n2))) (times (S (S O)) (exp (S (S O)) (S n2)))) (λ (Hind1 : le (S (S n2)) (times (exp (S (S O)) n2) (S (S O)))) -> transitive-le (S (S (S n2))) (times (S (S O)) (S (S n2))) (times (S (S O)) (exp (S (S O)) (S n2))) (le-S-times-2 (S (S n2)) (lt-O-S (S n2))) (monotonic-le-times-r (S (S O)) (S (S n2)) (exp (S (S O)) (S n2)) Hind1)) (times (S (S O)) (exp (S (S O)) n2)) (commutative-times (S (S O)) (exp (S (S O)) n2))) n1) (rewrite-r lzero (lsuc lzero) nat (times (S (S O)) (exp (S (S O)) n1)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S n1)) (times (S (S O)) (exp (S (S O)) n1))) (le (S (S n1)) X--)) (refl (lsuc lzero) (Set (lzero)) (le (S (S n1)) (times (S (S O)) (exp (S (S O)) n1)))) (times (exp (S (S O)) n1) (S (S O))) (commutative-times (exp (S (S O)) n1) (S (S O)))))))))) (minus (times (S (S O)) (exp (S (S O)) (S n1))) (S (S (S n1)))) (eq-minus-S-pred (times (S (S O)) (exp (S (S O)) (S n1))) (S (S n1)))) (S (pred (times (S (S O)) (exp (S (S O)) n1)))) (S-pred (times (S (S O)) (exp (S (S O)) n1)) (eq-ind-r lzero lzero nat (times (S O) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) (S O))) -> le x (times (S (S O)) (exp (S (S O)) n1))) (le-times (S O) (S (S O)) (S O) (exp (S (S O)) n1) (le-n-Sn (S O)) (lt-O-exp (S (S O)) n1 (lt-O-S (S O)))) (S O) (times-n-1 (S O))))) (S (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (rewrite-r lzero lzero nat (plus (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (S (pred (times (S (S O)) (exp (S (S O)) n1))))) (λ (X-- : nat) -> eq lzero nat X-- (S (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))))) (rewrite-r lzero lzero nat (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (S (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (λ (X-- : nat) -> eq lzero nat (plus (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (S (pred (times (S (S O)) (exp (S (S O)) n1))))) X--) (rewrite-r lzero lzero nat (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (S (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (λ (X-- : nat) -> eq lzero nat X-- (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (S (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))))) (refl lzero nat (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (S (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))))) (plus (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (S (pred (times (S (S O)) (exp (S (S O)) n1))))) (rewrite-l lzero lzero nat (S (plus (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (pred (times (S (S O)) (exp (S (S O)) n1))))) (λ (X-- : nat) -> eq lzero nat X-- (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (S (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))))) (rewrite-l lzero lzero nat (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (λ (X-- : nat) -> eq lzero nat (S X--) (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (S (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))))) (plus-n-Sm (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (plus (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (pred (times (S (S O)) (exp (S (S O)) n1)))) (commutative-plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (plus (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (S (pred (times (S (S O)) (exp (S (S O)) n1))))) (plus-n-Sm (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))) (pred (times (S (S O)) (exp (S (S O)) n1)))))) (S (plus (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (plus-n-Sm (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (plus (S (pred (times (S (S O)) (exp (S (S O)) n1)))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))) (commutative-plus (S (pred (times (S (S O)) (exp (S (S O)) n1)))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1)))))))) (times (exp (S (S O)) (pred (times (S (S O)) (exp (S (S O)) n1)))) (exp (S (S O)) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))) (exp-plus-times (S (S O)) (pred (times (S (S O)) (exp (S (S O)) n1))) (minus (times (S (S O)) (exp (S (S O)) n1)) (S (S n1))))))) (times (exp (S (S O)) n1) (S (S O))) (commutative-times (exp (S (S O)) n1) (S (S O)))) n

monotonic-Psi : monotonic lzero lzero nat le Psi
monotonic-Psi = λ (n : nat) -> λ (m : nat) -> λ (lenm : le n m) -> le-ind lzero n (λ (x-417 : nat) -> λ (X-x-418 : le n x-417) -> le (Psi n) (Psi x-417)) (le-n (Psi n)) (λ (n1 : nat) -> λ (len : le n n1) -> λ (Hind : le (Psi n) (Psi n1)) -> transitive-le (Psi n) (Psi n1) (Psi (S n1)) Hind (eq-ind-r lzero lzero nat (bigop (S (S n1)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> exp p (log p (S n1)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S (S n1)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> exp p (log p (S n1))))) -> le (Psi n1) x) (match-Or lzero lzero (eq lzero bool (primeb (S n1)) true) (eq lzero bool (primeb (S n1)) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (primeb (S n1)) true) (eq lzero bool (primeb (S n1)) false)) -> le (Psi n1) (bigop (S (S n1)) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> exp p (log p (S n1))))) (λ (Hc : eq lzero bool (primeb (S n1)) true) -> eq-ind-r lzero lzero nat (times (exp (S n1) (log (S n1) (S n1))) (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S n1) (log (S n1) (S n1))) (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))))) -> le (Psi n1) x) (eq-ind-r lzero lzero nat (times (Psi n1) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (Psi n1) (S O))) -> le x (times (exp (S n1) (log (S n1) (S n1))) (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))))) (eq-ind-r lzero lzero nat (times (S O) (Psi n1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) (Psi n1))) -> le x (times (exp (S n1) (log (S n1) (S n1))) (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))))) (le-times (S O) (exp (S n1) (log (S n1) (S n1))) (Psi n1) (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))) (lt-O-exp (S n1) (log (S n1) (S n1)) (lt-O-S n1)) (le-pi (S n1) primeb (λ (X-- : nat) -> exp X-- (log X-- n1)) (λ (X-- : nat) -> exp X-- (log X-- (S n1))) (λ (p : nat) -> λ (ltp : lt p (S n1)) -> λ (primep : eq lzero bool (primeb p) true) -> le-exp (log p n1) (log p (S n1)) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep))) (le-log p n1 (S n1) (prime-to-lt-SO p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep))) (le-n-Sn n1))))) (times (Psi n1) (S O)) (commutative-times (Psi n1) (S O))) (Psi n1) (times-n-1 (Psi n1))) (bigop (S (S n1)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))) (bigop-Strue (S n1) primeb nat (S O) times (λ (X-- : nat) -> exp X-- (log X-- (S n1))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb (S n1)) Hc))) (λ (Hc : eq lzero bool (primeb (S n1)) false) -> eq-ind-r lzero lzero nat (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (bigop (S n1) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1))))) -> le (Psi n1) x) (le-pi (S n1) primeb (λ (X-- : nat) -> exp X-- (log X-- n1)) (λ (X-- : nat) -> exp X-- (log X-- (S n1))) (λ (p : nat) -> λ (ltp : lt p (S n1)) -> λ (primep : eq lzero bool (primeb p) true) -> le-exp (log p n1) (log p (S n1)) p (prime-to-lt-O p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep))) (le-log p n1 (S n1) (prime-to-lt-SO p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep))) (le-n-Sn n1)))) (bigop (S (S n1)) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i (S n1)))) (bigop-Sfalse (S n1) primeb nat (S O) times (λ (X-- : nat) -> exp X-- (log X-- (S n1))) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (primeb (S n1)) Hc))) (true-or-false (primeb (S n1)))) (Psi (S n1)) (psi-def (S n1)))) m lenm

Psi-1 : eq lzero nat (Psi (S O)) (S O)
Psi-1 = refl lzero nat (Psi (S O))

Psi-2 : eq lzero nat (Psi (S (S O))) (S (S O))
Psi-2 = refl lzero nat (Psi (S (S O)))

Psi-3 : eq lzero nat (Psi (S (S (S O)))) (S (S (S (S (S (S O))))))
Psi-3 = refl lzero nat (Psi (S (S (S O))))

Psi-4 : eq lzero nat (Psi (S (S (S (S O))))) (S (S (S (S (S (S (S (S (S (S (S (S O))))))))))))
Psi-4 = refl lzero nat (Psi (S (S (S (S O)))))

let-clause-10336 : (n : nat) -> (m : nat) -> (Hind : (p : nat) -> (X-- : lt p m) -> (X--1 : lt (S O) p) -> le (Psi p) (times (pred p) (exp (S (S O)) (minus (times (S (S O)) p) (S (S (S O))))))) -> (a : nat) -> (X-clearme : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> (Hm : eq lzero nat m (S (times (S (S O)) a))) -> (Hlt : lt (S O) (S (times (S (S O)) a))) -> (Ha : lt O a) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10336 = λ (n : nat) -> λ (m : nat) -> λ (Hind : (p : nat) -> (X-- : lt p m) -> (X--1 : lt (S O) p) -> le (Psi p) (times (pred p) (exp (S (S O)) (minus (times (S (S O)) p) (S (S (S O))))))) -> λ (a : nat) -> λ (X-clearme : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> λ (Hm : eq lzero nat m (S (times (S (S O)) a))) -> λ (Hlt : lt (S O) (S (times (S (S O)) a))) -> λ (Ha : lt O a) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

let-clause-1686 : (n : nat) -> (m : nat) -> (Hind : (p : nat) -> (X-- : lt p m) -> (X--1 : lt (S O) p) -> le (Psi p) (times (pred p) (exp (S (S O)) (minus (times (S (S O)) p) (S (S (S O))))))) -> (a : nat) -> (X-clearme : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> (Hm : eq lzero nat m (S (times (S (S O)) a))) -> (Hlt : lt (S O) (S (times (S (S O)) a))) -> (Ha : lt O a) -> eq lzero nat (pred m) (plus a a)
let-clause-1686 = λ (n : nat) -> λ (m : nat) -> λ (Hind : (p : nat) -> (X-- : lt p m) -> (X--1 : lt (S O) p) -> le (Psi p) (times (pred p) (exp (S (S O)) (minus (times (S (S O)) p) (S (S (S O))))))) -> λ (a : nat) -> λ (X-clearme : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> λ (Hm : eq lzero nat m (S (times (S (S O)) a))) -> λ (Hlt : lt (S O) (S (times (S (S O)) a))) -> λ (Ha : lt O a) -> rewrite-r lzero lzero nat (plus a (S a)) (λ (X-- : nat) -> eq lzero nat (pred X--) (plus a a)) (rewrite-r lzero lzero nat (plus a O) (λ (X-- : nat) -> eq lzero nat (pred (plus a (S a))) (plus a X--)) (rewrite-r lzero lzero nat (times a O) (λ (X-- : nat) -> eq lzero nat (pred (plus a (S a))) (plus a (plus a X--))) (rewrite-r lzero lzero nat (times a (S O)) (λ (X-- : nat) -> eq lzero nat (pred (plus a (S a))) (plus a X--)) (rewrite-r lzero lzero nat (times a (S (S O))) (λ (X-- : nat) -> eq lzero nat (pred (plus a (S a))) X--) (rewrite-l lzero lzero nat (times (S (S O)) a) (λ (X-- : nat) -> eq lzero nat (pred (plus a (S a))) X--) (rewrite-l lzero lzero nat (S (plus a a)) (λ (X-- : nat) -> eq lzero nat (pred X--) (times (S (S O)) a)) (rewrite-r lzero lzero nat (plus a O) (λ (X-- : nat) -> eq lzero nat (pred (S (plus a X--))) (times (S (S O)) a)) (rewrite-r lzero lzero nat (times a O) (λ (X-- : nat) -> eq lzero nat (pred (S (plus a (plus a X--)))) (times (S (S O)) a)) (rewrite-r lzero lzero nat (times a (S O)) (λ (X-- : nat) -> eq lzero nat (pred (S (plus a X--))) (times (S (S O)) a)) (rewrite-r lzero lzero nat (times a (S (S O))) (λ (X-- : nat) -> eq lzero nat (pred (S X--)) (times (S (S O)) a)) (rewrite-l lzero lzero nat (times (S (S O)) a) (λ (X-- : nat) -> eq lzero nat (pred (S X--)) (times (S (S O)) a)) (rewrite-l lzero lzero nat (times (S (S O)) a) (λ (X-- : nat) -> eq lzero nat X-- (times (S (S O)) a)) (refl lzero nat (times (S (S O)) a)) (pred (S (times (S (S O)) a))) (pred-Sn (times (S (S O)) a))) (times a (S (S O))) (commutative-times (S (S O)) a)) (plus a (times a (S O))) (times-n-Sm a (S O))) (plus a (times a O)) (times-n-Sm a O)) O (times-n-O a)) a (plus-n-O a)) (plus a (S a)) (plus-n-Sm a a)) (times a (S (S O))) (commutative-times (S (S O)) a)) (plus a (times a (S O))) (times-n-Sm a (S O))) (plus a (times a O)) (times-n-Sm a O)) O (times-n-O a)) a (plus-n-O a)) m (rewrite-l lzero lzero nat (S (plus a a)) (λ (X-- : nat) -> eq lzero nat m X--) (rewrite-r lzero lzero nat (plus a O) (λ (X-- : nat) -> eq lzero nat m (S (plus a X--))) (rewrite-r lzero lzero nat (times a O) (λ (X-- : nat) -> eq lzero nat m (S (plus a (plus a X--)))) (rewrite-r lzero lzero nat (times a (S O)) (λ (X-- : nat) -> eq lzero nat m (S (plus a X--))) (rewrite-r lzero lzero nat (times a (S (S O))) (λ (X-- : nat) -> eq lzero nat m (S X--)) (rewrite-l lzero lzero nat (times (S (S O)) a) (λ (X-- : nat) -> eq lzero nat m (S X--)) Hm (times a (S (S O))) (commutative-times (S (S O)) a)) (plus a (times a (S O))) (times-n-Sm a (S O))) (plus a (times a O)) (times-n-Sm a O)) O (times-n-O a)) a (plus-n-O a)) (plus a (S a)) (plus-n-Sm a a))

le-Psi-exp4 : (n : nat) -> (X-- : lt (S O) n) -> le (Psi n) (times (pred n) (exp (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))))
le-Psi-exp4 = λ (n : nat) -> nat-elim1 lzero n (λ (X-- : nat) -> (X--1 : lt (S O) X--) -> le (Psi X--) (times (pred X--) (exp (S (S O)) (minus (times (S (S O)) X--) (S (S (S O))))))) (λ (m : nat) -> λ (Hind : (p : nat) -> (X-- : lt p m) -> (X--1 : lt (S O) p) -> le (Psi p) (times (pred p) (exp (S (S O)) (minus (times (S (S O)) p) (S (S (S O))))))) -> match-ex lzero lzero nat (λ (a : nat) -> Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) lzero (λ (X-- : ex lzero lzero nat (λ (a : nat) -> Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a))))) -> (X--1 : lt (S O) m) -> le (Psi m) (times (pred m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))))) (λ (a : nat) -> λ (X-clearme : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> match-Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a))) lzero (λ (X-- : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> (X--1 : lt (S O) m) -> le (Psi m) (times (pred m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))))) (λ (Hm : eq lzero nat m (times (S (S O)) a)) -> eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> (X--1 : lt (S O) x) -> le (Psi x) (times (pred x) (exp (S (S O)) (minus (times (S (S O)) x) (S (S (S O))))))) (λ (Hlt : lt (S O) (times (S (S O)) a)) -> match-Or lzero lzero (lt (S O) a) (eq lzero nat (S O) a) lzero (λ (X-- : Or lzero lzero (lt (S O) a) (eq lzero nat (S O) a)) -> le (Psi (times (S (S O)) a)) (times (pred (times (S (S O)) a)) (exp (S (S O)) (minus (times (S (S O)) (times (S (S O)) a)) (S (S (S O))))))) (λ (Ha : lt (S O) a) -> transitive-le (Psi (times (S (S O)) a)) (times (exp (S (S O)) (pred (times (S (S O)) a))) (Psi a)) (times (pred (times (S (S O)) a)) (exp (S (S O)) (minus (times (S (S O)) (times (S (S O)) a)) (S (S (S O)))))) (le-Psi-exp a) (transitive-le (times (exp (S (S O)) (pred (times (S (S O)) a))) (Psi a)) (times (exp (S (S O)) (pred (times (S (S O)) a))) (times (pred a) (exp (S (S O)) (minus (times (S (S O)) a) (S (S (S O))))))) (times (pred (times (S (S O)) a)) (exp (S (S O)) (minus (times (S (S O)) (times (S (S O)) a)) (S (S (S O)))))) (monotonic-le-times-r (exp (S (S O)) (pred (times (S (S O)) a))) (Psi a) (times (pred a) (exp (S (S O)) (minus (times (S (S O)) a) (S (S (S O)))))) (Hind a (eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> lt a x) (eq-ind-r lzero lzero nat (times a (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (S O))) -> lt x (times (S (S O)) a)) (eq-ind-r lzero lzero nat (times (S O) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) a)) -> lt x (times (S (S O)) a)) (monotonic-lt-times-l a (lt-to-le (S O) a Ha) (S O) (S (S O)) (le-n (S (S O)))) (times a (S O)) (commutative-times a (S O))) a (times-n-1 a)) m Hm) Ha)) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (times (exp (S (S O)) (pred x-1)) (times (pred a) (exp (S (S O)) (minus x-1 (S (S (S O))))))) (times (pred x-1) (exp (S (S O)) (minus (times (S (S O)) x-1) (S (S (S O))))))) (eq-ind lzero lzero nat (times (times (exp (S (S O)) (pred m)) (pred a)) (exp (S (S O)) (minus m (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (exp (S (S O)) (pred m)) (pred a)) (exp (S (S O)) (minus m (S (S (S O)))))) x-1) -> le x-1 (times (pred m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))))) (eq-ind-r lzero lzero nat (times (pred a) (exp (S (S O)) (pred m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (pred a) (exp (S (S O)) (pred m)))) -> le (times x (exp (S (S O)) (minus m (S (S (S O)))))) (times (pred m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))))) (eq-ind-r lzero lzero nat (times (pred a) (times (exp (S (S O)) (pred m)) (exp (S (S O)) (minus m (S (S (S O))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (pred a) (times (exp (S (S O)) (pred m)) (exp (S (S O)) (minus m (S (S (S O)))))))) -> le x (times (pred m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))))) (le-times (pred a) (pred m) (times (exp (S (S O)) (pred m)) (exp (S (S O)) (minus m (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))) (eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> le (pred a) (pred x)) (match-nat lzero (λ (X-- : nat) -> le (pred X--) (pred (times (S (S O)) X--))) (le-n (pred O)) (λ (b : nat) -> le-plus-n-r (S (plus b O)) b) a) m Hm) (eq-ind lzero lzero nat (exp (S (S O)) (plus (pred m) (minus m (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) (plus (pred m) (minus m (S (S (S O)))))) x-1) -> le x-1 (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (le-exp (plus (pred m) (minus m (S (S (S O))))) (minus (times (S (S O)) m) (S (S (S O)))) (S (S O)) (lt-O-S (S O)) (transitive-le (plus (pred m) (minus m (S (S (S O))))) (plus m (minus m (S (S (S O))))) (minus (times (S (S O)) m) (S (S (S O)))) (monotonic-le-plus-l (minus m (S (S (S O)))) (pred m) m (le-pred-n m)) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (plus m (minus m (S (S (S O))))) (minus (plus m x-1) (S (S (S O))))) (eq-ind-r lzero lzero nat (minus (plus m m) (S (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (plus m m) (S (S (S O))))) -> le x (minus (plus m m) (S (S (S O))))) (le-n (minus (plus m m) (S (S (S O))))) (plus m (minus m (S (S (S O))))) (plus-minus-associative m m (S (S (S O))) (eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> le (S (S (S O))) x) (transitive-le (S (S (S O))) (times (S (S O)) (S (S O))) (times (S (S O)) a) (le-n-Sn (S (S (S O)))) (monotonic-le-times-r (S (S O)) (S (S O)) a Ha)) m Hm))) (plus m O) (plus-n-O m)))) (times (exp (S (S O)) (pred m)) (exp (S (S O)) (minus m (S (S (S O)))))) (exp-plus-times (S (S O)) (pred m) (minus m (S (S (S O))))))) (times (times (pred a) (exp (S (S O)) (pred m))) (exp (S (S O)) (minus m (S (S (S O)))))) (associative-times (pred a) (exp (S (S O)) (pred m)) (exp (S (S O)) (minus m (S (S (S O))))))) (times (exp (S (S O)) (pred m)) (pred a)) (commutative-times (exp (S (S O)) (pred m)) (pred a))) (times (exp (S (S O)) (pred m)) (times (pred a) (exp (S (S O)) (minus m (S (S (S O))))))) (associative-times (exp (S (S O)) (pred m)) (pred a) (exp (S (S O)) (minus m (S (S (S O))))))) (times (S (S O)) a) Hm))) (λ (Ha : eq lzero nat (S O) a) -> eq-ind lzero lzero nat (S O) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S O) x-1) -> le (Psi (times (S (S O)) x-1)) (times (pred (times (S (S O)) x-1)) (exp (S (S O)) (minus (times (S (S O)) (times (S (S O)) x-1)) (S (S (S O))))))) (le-n (S (S O))) a Ha) (le-to-or-lt-eq (S O) a (match-nat lzero (λ (X-- : nat) -> (X--1 : lt (S O) (times (S (S O)) X--)) -> lt O X--) (λ (lt10 : lt (S O) O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O O) (absurd lzero (lt (S O) O) lt10 (not-le-Sn-O (S O)))) (λ (b : nat) -> λ (X-- : lt (S O) (times (S (S O)) (S b))) -> lt-O-S b) a Hlt))) m Hm) (λ (Hm : eq lzero nat m (S (times (S (S O)) a))) -> eq-ind-r lzero lzero nat (S (times (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (times (S (S O)) a))) -> (X--1 : lt (S O) x) -> le (Psi x) (times (pred x) (exp (S (S O)) (minus (times (S (S O)) x) (S (S (S O))))))) (λ (Hlt : lt (S O) (S (times (S (S O)) a))) -> match-Or lzero lzero (lt O a) (eq lzero nat O a) lzero (λ (X-- : Or lzero lzero (lt O a) (eq lzero nat O a)) -> le (Psi (S (times (S (S O)) a))) (times (pred (S (times (S (S O)) a))) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (λ (Ha : lt O a) -> transitive-le (Psi (S (times (S (S O)) a))) (Psi (times (S (S O)) (S a))) (times (pred (S (times (S (S O)) a))) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O)))))) (monotonic-Psi (S (times (S (S O)) a)) (times (S (S O)) (S a)) (eq-ind-r lzero lzero nat (S (times (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (times (S (S O)) a))) -> le (S (times (S (S O)) a)) (times (S (S O)) (S a))) (eq-ind lzero lzero nat (S (plus a (plus a O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus a (plus a O))) x-1) -> le (S (plus a (plus a O))) (S x-1)) (le-n-Sn (S (plus a (plus a O)))) (plus a (S (plus a O))) (plus-n-Sm a (plus a O))) m Hm)) (transitive-le (Psi (times (S (S O)) (S a))) (times (exp (S (S O)) (pred (times (S (S O)) (S a)))) (Psi (S a))) (times (pred (S (times (S (S O)) a))) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O)))))) (le-Psi-exp (S a)) (transitive-le (times (exp (S (S O)) (pred (times (S (S O)) (S a)))) (Psi (S a))) (times (exp (S (S O)) (pred (times (S (S O)) (S a)))) (times a (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O))))))) (times (pred (S (times (S (S O)) a))) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O)))))) (monotonic-le-times-r (exp (S (S O)) (pred (times (S (S O)) (S a)))) (Psi (S a)) (times a (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O)))))) (Hind (S a) (eq-ind-r lzero lzero nat (S (times (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (times (S (S O)) a))) -> lt (S a) x) (le-S-S (S a) (times (S (S O)) a) (eq-ind-r lzero lzero nat (times a (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (S O))) -> le (S x) (times (S (S O)) a)) (eq-ind-r lzero lzero nat (times (S O) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) a)) -> le (S x) (times (S (S O)) a)) (monotonic-lt-times-l a Ha (S O) (S (S O)) (eq-coerc lzero (lt (mod (S O) O) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S O))) (lt (S O) (S (S O))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) O) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod (S O) O) (plus X-- (S O))) (lt (S O) (S (S O)))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus (S O) (S O))) (lt (S O) (S (S O)))) (rewrite-r lzero (lsuc lzero) nat (S (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S O) X--) (lt (S O) (S (S O)))) (refl (lsuc lzero) (Set (lzero)) (lt (S O) (S (S O)))) (plus (S O) (S O)) (rewrite-r lzero lzero nat (times (S O) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S O))) (rewrite-r lzero lzero nat (times (S (S O)) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S O) (S O))) X--) (times-Sn-m (S O) (S O)) (S (S O)) (times-n-1 (S (S O)))) (S O) (times-n-1 (S O)))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10336 n m Hind a X-clearme Hm Hlt Ha (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10336 n m Hind a X-clearme Hm Hlt Ha (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O)))))) (times a (S O)) (commutative-times a (S O))) a (times-n-1 a))) m Hm) (le-S-S (S O) a Ha))) (eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> le (times (exp (S (S O)) (pred (times (S (S O)) (S a)))) (times a (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O))))))) (times x (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind-r lzero lzero nat (S (times (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (times (S (S O)) a))) -> le (times (exp (S (S O)) x) (times a (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O))))))) (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) -> le (times (exp (S (S O)) (S (times (S (S O)) a))) (times a x)) (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind lzero lzero nat (times (times a (S (S O))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times a (S (S O))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) x-1) -> le (times (exp (S (S O)) (S (times (S (S O)) a))) x-1) (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind lzero lzero nat (times (times (exp (S (S O)) (S (times (S (S O)) a))) (times a (S (S O)))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (exp (S (S O)) (S (times (S (S O)) a))) (times a (S (S O)))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) x-1) -> le x-1 (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind-r lzero lzero nat (times (times a (S (S O))) (exp (S (S O)) (S (times (S (S O)) a)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times a (S (S O))) (exp (S (S O)) (S (times (S (S O)) a))))) -> le (times x (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> le (times (times x (exp (S (S O)) (S (times (S (S O)) a)))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind-r lzero lzero nat (times (times (S (S O)) a) (times (exp (S (S O)) (S (times (S (S O)) a))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) a) (times (exp (S (S O)) (S (times (S (S O)) a))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))))) -> le x (times (times (S (S O)) a) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (monotonic-le-times-r (times (S (S O)) a) (times (exp (S (S O)) (S (times (S (S O)) a))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))) (eq-ind lzero lzero nat (exp (S (S O)) (plus (S (times (S (S O)) a)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) (plus (S (times (S (S O)) a)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) x-1) -> le x-1 (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O)))))) (le-exp (plus (S (times (S (S O)) a)) (minus (S (times (S (S O)) a)) (S (S (S O))))) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O)))) (S (S O)) (lt-O-S (S O)) (eq-ind-r lzero lzero nat (minus (plus (S (times (S (S O)) a)) (S (times (S (S O)) a))) (S (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (plus (S (times (S (S O)) a)) (S (times (S (S O)) a))) (S (S (S O))))) -> le x (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))) (eq-ind-r lzero lzero nat (plus (plus a (plus a O)) O) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (plus a (plus a O)) O)) -> le (minus (plus (plus a (plus a O)) (S x)) (S (S O))) (minus (plus (plus a (plus a O)) (S (plus (plus a (plus a O)) O))) (S (S O)))) (le-n (minus (plus (plus a (plus a O)) (S (plus (plus a (plus a O)) O))) (S (S O)))) (plus a (plus a O)) (plus-n-O (plus a (plus a O)))) (plus (S (times (S (S O)) a)) (minus (S (times (S (S O)) a)) (S (S (S O))))) (plus-minus-associative (S (times (S (S O)) a)) (S (times (S (S O)) a)) (S (S (S O))) (le-S-S (S (S O)) (times (S (S O)) a) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S O)) a)) (monotonic-le-times-r (S (S O)) (S O) a Ha) (S (S O)) (times-n-1 (S (S O)))))))) (times (exp (S (S O)) (S (times (S (S O)) a))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (exp-plus-times (S (S O)) (S (times (S (S O)) a)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (times (times (times (S (S O)) a) (exp (S (S O)) (S (times (S (S O)) a)))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (associative-times (times (S (S O)) a) (exp (S (S O)) (S (times (S (S O)) a))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (times a (S (S O))) (commutative-times a (S (S O)))) (times (exp (S (S O)) (S (times (S (S O)) a))) (times a (S (S O)))) (commutative-times (exp (S (S O)) (S (times (S (S O)) a))) (times a (S (S O))))) (times (exp (S (S O)) (S (times (S (S O)) a))) (times (times a (S (S O))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (associative-times (exp (S (S O)) (S (times (S (S O)) a))) (times a (S (S O))) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (times a (times (S (S O)) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (associative-times a (S (S O)) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))))) (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O))))) (eq-ind-r lzero lzero nat (times (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))) (S (S O)))) -> eq lzero nat (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O))))) x) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) a))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) a)))) -> eq lzero nat (exp (S (S O)) (minus x (S (S (S O))))) (times (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))) (S (S O)))) (eq-ind-r lzero lzero nat (S (minus (S (times (S (S O)) a)) (S (S (S O))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (minus (S (times (S (S O)) a)) (S (S (S O)))))) -> eq lzero nat (exp (S (S O)) x) (times (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O))))) (S (S O)))) (refl lzero nat (exp (S (S O)) (S (minus (S (times (S (S O)) a)) (S (S (S O))))))) (minus (S (S (times (S (S O)) a))) (S (S (S O)))) (minus-Sn-m (S (S (S O))) (S (times (S (S O)) a)) (le-S-S (S (S O)) (times (S (S O)) a) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S O)) a)) (monotonic-le-times-r (S (S O)) (S O) a Ha) (S (S O)) (times-n-1 (S (S O))))))) (times (S (S O)) (S a)) (eq-ind lzero lzero nat (S (plus a (plus a O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus a (plus a O))) x-1) -> eq lzero nat (S x-1) (S (S (plus a (plus a O))))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (S (S (plus a X--))) (S (S (plus a (plus a O))))) (rewrite-l lzero lzero nat (pred m) (λ (X-- : nat) -> eq lzero nat (S (S X--)) (S (S (plus a (plus a O))))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (S (S (pred m))) (S (S (plus a X--)))) (rewrite-l lzero lzero nat (pred m) (λ (X-- : nat) -> eq lzero nat (S (S (pred m))) (S (S X--))) (refl lzero nat (S (S (pred m)))) (plus a a) (let-clause-1686 n m Hind a X-clearme Hm Hlt Ha)) (plus a O) (plus-n-O a)) (plus a a) (let-clause-1686 n m Hind a X-clearme Hm Hlt Ha)) (plus a O) (plus-n-O a)) (plus a (S (plus a O))) (plus-n-Sm a (plus a O)))) (times (S (S O)) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))) (commutative-times (S (S O)) (exp (S (S O)) (minus (S (times (S (S O)) a)) (S (S (S O)))))))) (pred (times (S (S O)) (S a))) (rewrite-l lzero lzero nat (S (plus a (plus a O))) (λ (X-- : nat) -> eq lzero nat X-- (S (plus a (plus a O)))) (refl lzero nat (S (plus a (plus a O)))) (plus a (S (plus a O))) (plus-n-Sm a (plus a O)))) (pred (S (times (S (S O)) a))) (rewrite-l lzero lzero nat (times (S (S O)) a) (λ (X-- : nat) -> eq lzero nat X-- (times (S (S O)) a)) (refl lzero nat (times (S (S O)) a)) (pred (S (times (S (S O)) a))) (pred-Sn (times (S (S O)) a))))))) (λ (Ha : eq lzero nat O a) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> le (Psi (S (times (S (S O)) a))) (times (pred (S (times (S (S O)) a))) (exp (S (S O)) (minus (times (S (S O)) (S (times (S (S O)) a))) (S (S (S O))))))) (eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> (X-- : lt (S O) (S (times (S (S O)) x-1))) -> False lzero) (λ (Hfalse : le (S (S O)) (S O)) -> absurd lzero (le (S (S O)) (S O)) Hfalse (not-le-Sn-n (S O))) a Ha Hlt)) (le-to-or-lt-eq O a (le-O-n a))) m Hm) X-clearme) (even-or-odd m))

le-n-8-to-le-Psi-exp : (n : nat) -> (X-- : le n (S (S (S (S (S (S (S (S O))))))))) -> le (Psi n) (exp (S (S O)) (minus (times (S (S O)) n) (S (S (S O)))))
le-n-8-to-le-Psi-exp = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le X-- (S (S (S (S (S (S (S (S O))))))))) -> le (Psi X--) (exp (S (S O)) (minus (times (S (S O)) X--) (S (S (S O)))))) (λ (X-- : le O (S (S (S (S (S (S (S (S O))))))))) -> le-n (Psi O)) (λ (n1 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S X--) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S X--)) (exp (S (S O)) (minus (times (S (S O)) (S X--)) (S (S (S O)))))) (λ (X-- : le (S O) (S (S (S (S (S (S (S (S O))))))))) -> le-n (Psi (S O))) (λ (n2 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S X--)) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S X--))) (exp (S (S O)) (minus (times (S (S O)) (S (S X--))) (S (S (S O)))))) (λ (X-- : le (S (S O)) (S (S (S (S (S (S (S (S O))))))))) -> le-n (Psi (S (S O)))) (λ (n3 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S (S X--))) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S (S X--)))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S X--)))) (S (S (S O)))))) (λ (X-- : le (S (S (S O))) (S (S (S (S (S (S (S (S O))))))))) -> leb-true-to-le (Psi (S (S (S O)))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S O)))) (S (S (S O))))) (refl lzero bool (leb (Psi (S (S (S O)))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S O)))) (S (S (S O)))))))) (λ (n4 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S (S (S X--)))) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S (S (S X--))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S X--))))) (S (S (S O)))))) (λ (X-- : le (S (S (S (S O)))) (S (S (S (S (S (S (S (S O))))))))) -> leb-true-to-le (Psi (S (S (S (S O))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S O))))) (S (S (S O))))) (refl lzero bool (leb (Psi (S (S (S (S O))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S O))))) (S (S (S O)))))))) (λ (n5 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S (S (S (S X--))))) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S (S (S (S X--)))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S X--)))))) (S (S (S O)))))) (λ (X-- : le (S (S (S (S (S O))))) (S (S (S (S (S (S (S (S O))))))))) -> leb-true-to-le (Psi (S (S (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S (S O))))) (refl lzero bool (leb (Psi (S (S (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S O)))))) (S (S (S O)))))))) (λ (n6 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S (S (S (S (S X--)))))) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S (S (S (S (S X--))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S X--))))))) (S (S (S O)))))) (λ (X-- : le (S (S (S (S (S (S O)))))) (S (S (S (S (S (S (S (S O))))))))) -> leb-true-to-le (Psi (S (S (S (S (S (S O))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S O))))))) (S (S (S O))))) (refl lzero bool (leb (Psi (S (S (S (S (S (S O))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S O))))))) (S (S (S O)))))))) (λ (n7 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S (S (S (S (S (S X--))))))) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S (S (S (S (S (S X--)))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S X--)))))))) (S (S (S O)))))) (λ (X-- : le (S (S (S (S (S (S (S O))))))) (S (S (S (S (S (S (S (S O))))))))) -> leb-true-to-le (Psi (S (S (S (S (S (S (S O)))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S O)))))))) (S (S (S O))))) (refl lzero bool (leb (Psi (S (S (S (S (S (S (S O)))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S O)))))))) (S (S (S O)))))))) (λ (n8 : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : le (S (S (S (S (S (S (S (S X--)))))))) (S (S (S (S (S (S (S (S O))))))))) -> le (Psi (S (S (S (S (S (S (S (S X--))))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S (S X--))))))))) (S (S (S O)))))) (λ (X-- : le (S (S (S (S (S (S (S (S O)))))))) (S (S (S (S (S (S (S (S O))))))))) -> leb-true-to-le (Psi (S (S (S (S (S (S (S (S O))))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S (S O))))))))) (S (S (S O))))) (refl lzero bool (leb (Psi (S (S (S (S (S (S (S (S O))))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S (S O))))))))) (S (S (S O)))))))) (λ (n9 : nat) -> λ (H : le (S (S (S (S (S (S (S (S (S n9))))))))) (S (S (S (S (S (S (S (S O))))))))) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> le (Psi (S (S (S (S (S (S (S (S (S n9)))))))))) (exp (S (S O)) (minus (times (S (S O)) (S (S (S (S (S (S (S (S (S n9)))))))))) (S (S (S O)))))) (absurd lzero (le (S (S (S (S (S (S (S (S O)))))))) (S (S (S (S (S (S (S (S n9))))))))) (leb-true-to-le (S (S (S (S (S (S (S (S O)))))))) (S (S (S (S (S (S (S (S n9)))))))) (refl lzero bool (leb (S (S (S (S (S (S (S (S O)))))))) (S (S (S (S (S (S (S (S n9))))))))))) (lt-to-not-le (S (S (S (S (S (S (S (S n9)))))))) (S (S (S (S (S (S (S (S O)))))))) H))) n8) n7) n6) n5) n4) n3) n2) n1) n

le-Psi-exp5 : (n : nat) -> le (Psi n) (exp (S (S O)) (minus (times (S (S O)) n) (S (S (S O)))))
le-Psi-exp5 = λ (n : nat) -> nat-elim1 lzero n (λ (X-- : nat) -> le (Psi X--) (exp (S (S O)) (minus (times (S (S O)) X--) (S (S (S O)))))) (λ (m : nat) -> λ (Hind : (p : nat) -> (X-- : lt p m) -> le (Psi p) (exp (S (S O)) (minus (times (S (S O)) p) (S (S (S O)))))) -> match-Or lzero lzero (le (S (S (S (S (S (S (S (S (S O))))))))) m) (Not lzero (le (S (S (S (S (S (S (S (S (S O))))))))) m)) lzero (λ (X-- : Or lzero lzero (le (S (S (S (S (S (S (S (S (S O))))))))) m) (Not lzero (le (S (S (S (S (S (S (S (S (S O))))))))) m))) -> le (Psi m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (λ (lem : le (S (S (S (S (S (S (S (S (S O))))))))) m) -> match-ex lzero lzero nat (λ (a : nat) -> Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) lzero (λ (X-- : ex lzero lzero nat (λ (a : nat) -> Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a))))) -> le (Psi m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (λ (a : nat) -> λ (X-clearme : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> match-Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a))) lzero (λ (X-- : Or lzero lzero (eq lzero nat m (times (S (S O)) a)) (eq lzero nat m (S (times (S (S O)) a)))) -> le (Psi m) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (λ (Hm : eq lzero nat m (times (S (S O)) a)) -> eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> le (Psi x) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (transitive-le (Psi (times (S (S O)) a)) (times (exp (S (S O)) (pred (times (S (S O)) a))) (Psi a)) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))) (le-Psi-exp a) (transitive-le (times (exp (S (S O)) (pred (times (S (S O)) a))) (Psi a)) (times (exp (S (S O)) (pred (times (S (S O)) a))) (exp (S (S O)) (minus (times (S (S O)) a) (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))) (monotonic-le-times-r (exp (S (S O)) (pred (times (S (S O)) a))) (Psi a) (exp (S (S O)) (minus (times (S (S O)) a) (S (S (S O))))) (Hind a (eq-ind-r lzero lzero nat (times (S (S O)) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) a)) -> lt a x) (eq-ind-r lzero lzero nat (times a (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (S O))) -> lt x (times (S (S O)) a)) (eq-ind-r lzero lzero nat (times (S O) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) a)) -> lt x (times (S (S O)) a)) (monotonic-lt-times-l a (transitive-lt O (S (S (S O))) a (lt-O-S (S (S O))) (le-times-to-le (S (S O)) (S (S (S (S O)))) a (lt-O-S (S O)) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (times (S (S O)) (S (S (S (S O))))) x-1) (lt-to-le (times (S (S O)) (S (S (S (S O))))) m lem) (times (S (S O)) a) Hm))) (S O) (S (S O)) (le-n (S (S O)))) (times a (S O)) (commutative-times a (S O))) a (times-n-1 a)) m Hm))) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (times (exp (S (S O)) (pred x-1)) (exp (S (S O)) (minus x-1 (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (eq-ind lzero lzero nat (exp (S (S O)) (plus (pred m) (minus m (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) (plus (pred m) (minus m (S (S (S O)))))) x-1) -> le x-1 (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (le-exp (plus (pred m) (minus m (S (S (S O))))) (minus (times (S (S O)) m) (S (S (S O)))) (S (S O)) (lt-O-S (S O)) (eq-ind-r lzero lzero nat (times m (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times m (S O))) -> le (plus (pred m) (minus m (S (S (S O))))) (minus (plus m x) (S (S (S O))))) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (plus (pred m) (minus m (S (S (S O))))) (minus (plus m x-1) (S (S (S O))))) (eq-ind lzero lzero nat (plus m (minus m (S (S (S O))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus m (minus m (S (S (S O))))) x-1) -> le (plus (pred m) (minus m (S (S (S O))))) x-1) (monotonic-le-plus-l (minus m (S (S (S O)))) (pred m) m (le-pred-n m)) (minus (plus m m) (S (S (S O)))) (plus-minus-associative m m (S (S (S O))) (transitive-le (S (S (S O))) (S (S (S (S (S (S (S (S (S O))))))))) m (leb-true-to-le (S (S (S O))) (S (S (S (S (S (S (S (S (S O))))))))) (refl lzero bool (leb (S (S (S O))) (S (S (S (S (S (S (S (S (S O)))))))))))) lem))) (times m (S O)) (times-n-1 m)) (times (S O) m) (commutative-times (S O) m))) (times (exp (S (S O)) (pred m)) (exp (S (S O)) (minus m (S (S (S O)))))) (exp-plus-times (S (S O)) (pred m) (minus m (S (S (S O)))))) (times (S (S O)) a) Hm))) m Hm) (λ (Hm : eq lzero nat m (S (times (S (S O)) a))) -> transitive-le (Psi m) (Psi (times (S (S O)) (S a))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))) (monotonic-Psi m (times (S (S O)) (S a)) (eq-ind-r lzero lzero nat (S (times (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (times (S (S O)) a))) -> le x (times (S (S O)) (S a))) (eq-ind lzero lzero nat (S (plus a (plus a O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus a (plus a O))) x-1) -> le (S (plus a (plus a O))) (S x-1)) (le-n-Sn (S (plus a (plus a O)))) (plus a (S (plus a O))) (plus-n-Sm a (plus a O))) m Hm)) (transitive-le (Psi (times (S (S O)) (S a))) (times (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S O)))) (Psi (S a))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))) (lt-4-to-le-Psi-exp (S a) (le-S-S (S (S (S (S O)))) a (le-times-to-le (S (S O)) (S (S (S (S O)))) a (le-n-Sn (S O)) (le-S-S-to-le (times (S (S O)) (S (S (S (S O))))) (times (S (S O)) a) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (S (times (S (S O)) (S (S (S (S O)))))) x-1) lem (S (times (S (S O)) a)) Hm))))) (transitive-le (times (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S O)))) (Psi (S a))) (times (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S O)))) (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O))))) (monotonic-le-times-r (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S O)))) (Psi (S a)) (exp (S (S O)) (minus (times (S (S O)) (S a)) (S (S (S O))))) (Hind (S a) (eq-ind-r lzero lzero nat (S (times (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (times (S (S O)) a))) -> lt (S a) x) (le-S-S (S a) (times (S (S O)) a) (eq-ind-r lzero lzero nat (times a (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times a (S O))) -> le (S x) (times (S (S O)) a)) (eq-ind-r lzero lzero nat (times (S O) a) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) a)) -> le (S x) (times (S (S O)) a)) (monotonic-lt-times-l a (transitive-lt O (S (S (S O))) a (lt-O-S (S (S O))) (le-times-to-le (S (S O)) (S (S (S (S O)))) a (lt-O-S (S O)) (le-S-S-to-le (times (S (S O)) (S (S (S (S O))))) (times (S (S O)) a) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (S (times (S (S O)) (S (S (S (S O)))))) x-1) lem (S (times (S (S O)) a)) Hm)))) (S O) (S (S O)) (le-n (S (S O)))) (times a (S O)) (commutative-times a (S O))) a (times-n-1 a))) m Hm))) (eq-ind-r lzero lzero nat (S (S (times (S (S O)) a))) (λ (x : nat) -> λ (X-- : eq lzero nat x (S (S (times (S (S O)) a)))) -> le (times (exp (S (S O)) (minus x (S (S O)))) (exp (S (S O)) (minus x (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (times (exp (S (S O)) (minus (S x-1) (S (S O)))) (exp (S (S O)) (minus (S x-1) (S (S (S O)))))) (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (eq-ind lzero lzero nat (exp (S (S O)) (plus (minus (S m) (S (S O))) (minus (S m) (S (S (S O)))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) (plus (minus (S m) (S (S O))) (minus (S m) (S (S (S O)))))) x-1) -> le x-1 (exp (S (S O)) (minus (times (S (S O)) m) (S (S (S O)))))) (le-exp (plus (minus (S m) (S (S O))) (minus (S m) (S (S (S O))))) (minus (times (S (S O)) m) (S (S (S O)))) (S (S O)) (lt-O-S (S O)) (match-nat lzero (λ (X-- : nat) -> le (plus (minus (S X--) (S (S O))) (minus (S X--) (S (S (S O))))) (minus (times (S (S O)) X--) (S (S (S O))))) (le-n (plus (minus (S O) (S (S O))) (minus (S O) (S (S (S O)))))) (λ (n1 : nat) -> match-nat lzero (λ (X-- : nat) -> le (plus (minus (S (S X--)) (S (S O))) (minus (S (S X--)) (S (S (S O))))) (minus (times (S (S O)) (S X--)) (S (S (S O))))) (le-n (plus (minus (S (S O)) (S (S O))) (minus (S (S O)) (S (S (S O)))))) (λ (n2 : nat) -> eq-ind lzero lzero nat n2 (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n2 x-1) -> le (S (plus n2 x-1)) (minus (plus n2 (S (S (plus n2 O)))) (S O))) (eq-ind lzero lzero nat n2 (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n2 x-1) -> le (S (plus n2 n2)) (minus (plus n2 (S (S x-1))) (S O))) (eq-ind lzero lzero nat (S (plus n2 (S n2))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus n2 (S n2))) x-1) -> le (S (plus n2 n2)) (minus x-1 (S O))) (eq-ind lzero lzero nat (plus n2 (S n2)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus n2 (S n2)) x-1) -> le (S (plus n2 n2)) x-1) (eq-ind lzero lzero nat (S (plus n2 n2)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus n2 n2)) x-1) -> le (S (plus n2 n2)) x-1) (le-n (S (plus n2 n2))) (plus n2 (S n2)) (plus-n-Sm n2 n2)) (minus (plus n2 (S n2)) O) (minus-n-O (plus n2 (S n2)))) (plus n2 (S (S n2))) (plus-n-Sm n2 (S n2))) (plus n2 O) (plus-n-O n2)) (minus n2 O) (minus-n-O n2)) n1) m)) (times (exp (S (S O)) (minus (S m) (S (S O)))) (exp (S (S O)) (minus (S m) (S (S (S O)))))) (exp-plus-times (S (S O)) (minus (S m) (S (S O))) (minus (S m) (S (S (S O)))))) (S (times (S (S O)) a)) Hm) (times (S (S O)) (S a)) (eq-ind lzero lzero nat (S (plus a (plus a O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus a (plus a O))) x-1) -> eq lzero nat (S x-1) (S (S (plus a (plus a O))))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (S (S (plus a X--))) (S (S (plus a (plus a O))))) (rewrite-r lzero lzero nat (plus a (S a)) (λ (X-- : nat) -> eq lzero nat (S X--) (S (S (plus a (plus a O))))) (rewrite-r lzero lzero nat (plus a (S (S a))) (λ (X-- : nat) -> eq lzero nat X-- (S (S (plus a (plus a O))))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (plus a (S (S a))) (S (S (plus a X--)))) (rewrite-r lzero lzero nat (plus a (S a)) (λ (X-- : nat) -> eq lzero nat (plus a (S (S a))) (S X--)) (rewrite-r lzero lzero nat (plus a (S (S a))) (λ (X-- : nat) -> eq lzero nat (plus a (S (S a))) X--) (refl lzero nat (plus a (S (S a)))) (S (plus a (S a))) (plus-n-Sm a (S a))) (S (plus a a)) (plus-n-Sm a a)) (plus a O) (plus-n-O a)) (S (plus a (S a))) (plus-n-Sm a (S a))) (S (plus a a)) (plus-n-Sm a a)) (plus a O) (plus-n-O a)) (plus a (S (plus a O))) (plus-n-Sm a (plus a O))))))) X-clearme) (even-or-odd m)) (λ (H : Not lzero (le (S (S (S (S (S (S (S (S (S O))))))))) m)) -> le-n-8-to-le-Psi-exp m (le-S-S-to-le m (S (S (S (S (S (S (S (S O)))))))) (not-le-to-lt (S (S (S (S (S (S (S (S (S O))))))))) m H))) (decidable-le (S (S (S (S (S (S (S (S (S O))))))))) m))

le-exp-Psil : (n : nat) -> (X-- : lt O n) -> le (exp (S (S O)) n) (Psi (times (S (S O)) n))
le-exp-Psil = λ (n : nat) -> λ (posn : lt O n) -> transitive-le (exp (S (S O)) n) (div (exp (S (S O)) (times (S (S O)) n)) (times (S (S O)) n)) (Psi (times (S (S O)) n)) (le-times-to-le-div (exp (S (S O)) (times (S (S O)) n)) (times (S (S O)) n) (exp (S (S O)) n) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times (S (S O)) n)) (lt-times O (S (S O)) O n (lt-O-S (S O)) posn) O (times-n-O O)) (eq-ind lzero lzero nat n (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat n x-1) -> le (times (times (S (S O)) n) (exp (S (S O)) n)) (exp (S (S O)) (plus n x-1))) (eq-ind-r lzero lzero nat (times (exp (S (S O)) n) (exp (S (S O)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp (S (S O)) n) (exp (S (S O)) n))) -> le (times (times (S (S O)) n) (exp (S (S O)) n)) x) (le-times (times (S (S O)) n) (exp (S (S O)) n) (exp (S (S O)) n) (exp (S (S O)) n) (le-ind lzero (S O) (λ (x-417 : nat) -> λ (X-x-418 : le (S O) x-417) -> le (times (S (S O)) x-417) (exp (S (S O)) x-417)) (le-n (times (S (S O)) (S O))) (λ (m : nat) -> λ (le1m : le (S O) m) -> λ (Hind : le (times (S (S O)) m) (exp (S (S O)) m)) -> eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) m))) -> le (times (S (S O)) (S m)) x) (monotonic-le-times-r (S (S O)) (S m) (exp (S (S O)) m) (transitive-le (S m) (times (S (S O)) m) (exp (S (S O)) m) (eq-ind-r lzero lzero nat (times m (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times m (S O))) -> le (S x) (times (S (S O)) m)) (eq-ind-r lzero lzero nat (times (S O) m) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S O) m)) -> le (S x) (times (S (S O)) m)) (monotonic-lt-times-l m le1m (S O) (S (S O)) (le-n (S (S O)))) (times m (S O)) (commutative-times m (S O))) m (times-n-1 m)) Hind)) (times (exp (S (S O)) m) (S (S O))) (commutative-times (exp (S (S O)) m) (S (S O)))) n posn) (le-n (exp (S (S O)) n))) (exp (S (S O)) (plus n n)) (exp-plus-times (S (S O)) n n)) (plus n O) (plus-n-O n))) (le-times-to-le-div2 (Psi (times (S (S O)) n)) (exp (S (S O)) (times (S (S O)) n)) (times (S (S O)) n) (eq-ind-r lzero lzero nat (times O O) (λ (x : nat) -> λ (X-- : eq lzero nat x (times O O)) -> lt x (times (S (S O)) n)) (lt-times O (S (S O)) O n (lt-O-S (S O)) posn) O (times-n-O O)) (transitive-le (exp (S (S O)) (times (S (S O)) n)) (times (B (times (S (S O)) n)) (times (S (S O)) n)) (times (Psi (times (S (S O)) n)) (times (S (S O)) n)) (eq-ind lzero lzero nat (times (times (S (S O)) n) (B (times (S (S O)) n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) n) (B (times (S (S O)) n))) x-1) -> le (exp (S (S O)) (times (S (S O)) n)) x-1) (le-exp-B n posn) (times (B (times (S (S O)) n)) (times (S (S O)) n)) (commutative-times (times (S (S O)) n) (B (times (S (S O)) n)))) (le-times (B (times (S (S O)) n)) (Psi (times (S (S O)) n)) (times (S (S O)) n) (times (S (S O)) n) (le-B-Psi (times (S (S O)) n)) (le-n (times (S (S O)) n)))))

le-exp-Psi2 : (n : nat) -> (X-- : lt (S O) n) -> le (exp (S (S O)) (div n (S (S O)))) (Psi n)
le-exp-Psi2 = λ (n : nat) -> λ (lt1n : lt (S O) n) -> transitive-le (exp (S (S O)) (div n (S (S O)))) (Psi (times (div n (S (S O))) (S (S O)))) (Psi n) (eq-ind-r lzero lzero nat (times (S (S O)) (div n (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (div n (S (S O))))) -> le (exp (S (S O)) (div n (S (S O)))) (Psi x)) (le-exp-Psil (div n (S (S O))) (match-Or lzero lzero (lt O (div n (S (S O)))) (eq lzero nat O (div n (S (S O)))) lzero (λ (X-- : Or lzero lzero (lt O (div n (S (S O)))) (eq lzero nat O (div n (S (S O))))) -> lt O (div n (S (S O)))) (λ (auto : lt O (div n (S (S O)))) -> auto) (λ (Heq : eq lzero nat O (div n (S (S O)))) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt O (div n (S (S O)))) (absurd lzero (le n (S O)) (eq-ind-r lzero lzero nat (plus (times (div n (S (S O))) (S (S O))) (mod n (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (div n (S (S O))) (S (S O))) (mod n (S (S O))))) -> le x (S O)) (eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> le (plus (times x-1 (S (S O))) (mod n (S (S O)))) (S O)) (le-S-S-to-le (mod-aux n n (S O)) (S O) (lt-mod-m-m n (S (S O)) (lt-O-S (S O)))) (div n (S (S O))) Heq) n (div-mod n (S (S O)))) (lt-to-not-le (S O) n lt1n))) (le-to-or-lt-eq O (div n (S (S O))) (le-O-n (div n (S (S O))))))) (times (div n (S (S O))) (S (S O))) (commutative-times (div n (S (S O))) (S (S O)))) (monotonic-Psi (times (div n (S (S O))) (S (S O))) n (eq-ind-r lzero lzero nat (plus (times (div n (S (S O))) (S (S O))) (mod n (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (div n (S (S O))) (S (S O))) (mod n (S (S O))))) -> le (times (div n (S (S O))) (S (S O))) x) (le-plus-n-r (mod n (S (S O))) (times (div n (S (S O))) (S (S O)))) n (div-mod n (S (S O)))))

eq-sigma-pi-SO-n : (n : nat) -> eq lzero nat (bigop n (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) n
eq-sigma-pi-SO-n = λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> eq lzero nat (bigop X-x-365 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) X-x-365) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- O) (refl lzero nat O) (bigop O (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) (sigma-const O)) (λ (x-366 : nat) -> λ (X-x-368 : eq lzero nat (bigop x-366 (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) x-366) -> rewrite-r lzero lzero nat (S x-366) (λ (X-- : nat) -> eq lzero nat X-- (S x-366)) (refl lzero nat (S x-366)) (bigop (S x-366) (λ (i : nat) -> true) nat O plus (λ (i : nat) -> S O)) (sigma-const (S x-366))) n

lePsi-prim : (n : nat) -> le (exp n (prim n)) (times (Psi n) (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> p)))
lePsi-prim = λ (n : nat) -> eq-ind lzero lzero nat (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> n)) x-1) -> le x-1 (times (Psi n) (bigop (S n) (λ (p : nat) -> primeb p) nat (S O) times (λ (p : nat) -> p)))) (eq-ind lzero lzero nat (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> times (exp i (log i n)) i)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> times (exp i (log i n)) i)) x-1) -> le (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> n)) x-1) (le-pi (S n) primeb (λ (X-- : nat) -> n) (λ (X-- : nat) -> times (exp X-- (log X-- n)) X--) (λ (p : nat) -> λ (ltp : lt p (S n)) -> λ (primep : eq lzero bool (primeb p) true) -> lt-to-le n (times (exp p (log p n)) p) (lt-exp-log p n (prime-to-lt-SO p (primeb-true-to-prime p (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (primeb p) primep)))))) (times (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> exp i (log i n))) (bigop (S n) (λ (i : nat) -> primeb i) nat (S O) times (λ (i : nat) -> i))) (times-pi (S n) primeb (λ (X-- : nat) -> exp X-- (log X-- n)) (λ (X-- : nat) -> X--))) (exp n (bigop (S n) (λ (i : nat) -> primeb i) nat O plus (λ (i : nat) -> S O))) (exp-sigma (S n) n primeb)

le-prim-log : (n : nat) -> (b : nat) -> (X-- : lt (S O) b) -> le (log b (Psi n)) (times (prim n) (S (log b n)))
le-prim-log = λ (n : nat) -> λ (b : nat) -> λ (lt1b : lt (S O) b) -> transitive-le (log b (Psi n)) (log b (exp n (prim n))) (times (prim n) (S (log b n))) (le-log b (Psi n) (exp n (prim n)) lt1b (le-Psil n)) (log-exp1 b n (prim n) lt1b)

exp-Sn : (b : nat) -> (n : nat) -> eq lzero nat (exp b (S n)) (times b (exp b n))
exp-Sn = λ (b : nat) -> λ (n : nat) -> rewrite-r lzero lzero nat (times b (exp b n)) (λ (X-- : nat) -> eq lzero nat X-- (times b (exp b n))) (refl lzero nat (times b (exp b n))) (times (exp b n) b) (commutative-times (exp b n) b)

le-exp-priml : (n : nat) -> (X-- : lt O n) -> le (exp (S (S O)) (times (S (S O)) n)) (exp (times (S (S O)) n) (S (prim (times (S (S O)) n))))
le-exp-priml = λ (n : nat) -> λ (posn : lt O n) -> transitive-le (exp (S (S O)) (times (S (S O)) n)) (times (times (S (S O)) n) (B (times (S (S O)) n))) (exp (times (S (S O)) n) (S (prim (times (S (S O)) n)))) (le-exp-B n posn) (eq-ind-r lzero lzero nat (times (times (S (S O)) n) (exp (times (S (S O)) n) (prim (times (S (S O)) n)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S O)) n) (exp (times (S (S O)) n) (prim (times (S (S O)) n))))) -> le (times (times (S (S O)) n) (B (times (S (S O)) n))) x) (monotonic-le-times-r (times (S (S O)) n) (B (times (S (S O)) n)) (exp (times (S (S O)) n) (prim (times (S (S O)) n))) (transitive-le (B (times (S (S O)) n)) (Psi (times (S (S O)) n)) (exp (times (S (S O)) n) (prim (times (S (S O)) n))) (le-B-Psi (times (S (S O)) n)) (le-Psil (times (S (S O)) n)))) (exp (times (S (S O)) n) (S (prim (times (S (S O)) n)))) (exp-Sn (times (S (S O)) n) (prim (times (S (S O)) n))))

le-exp-prim4l : (n : nat) -> (X-- : lt O n) -> le (exp (S (S O)) (S (times (S (S (S (S O)))) n))) (exp (times (S (S (S (S O)))) n) (S (prim (times (S (S (S (S O)))) n))))
le-exp-prim4l = λ (n : nat) -> λ (posn : lt O n) -> transitive-le (exp (S (S O)) (S (times (S (S (S (S O)))) n))) (times (S (S O)) (times (times (S (S (S (S O)))) n) (B (times (S (S (S (S O)))) n)))) (exp (times (S (S (S (S O)))) n) (S (prim (times (S (S (S (S O)))) n)))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) (times (S (S (S (S O)))) n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) (times (S (S (S (S O)))) n)))) -> le x (times (S (S O)) (times (times (S (S (S (S O)))) n) (B (times (S (S (S (S O)))) n))))) (monotonic-le-times-r (S (S O)) (exp (S (S O)) (times (S (S (S (S O)))) n)) (times (times (S (S (S (S O)))) n) (B (times (S (S (S (S O)))) n))) (eq-ind-r lzero lzero nat (times (S (S O)) (times (S (S O)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (times (S (S O)) n))) -> le (exp (S (S O)) x) (times x (B x))) (le-exp-B (times (S (S O)) n) (lt-to-le (S O) (times (S (S O)) n) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le x (times (S (S O)) n)) (monotonic-le-times-r (S (S O)) (S O) n posn) (S (S O)) (times-n-1 (S (S O)))))) (times (S (S (S (S O)))) n) (eq-ind lzero lzero nat (times (times (S (S O)) (S (S O))) n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) (S (S O))) n) x-1) -> eq lzero nat (times (S (S (S (S O)))) n) x-1) (refl lzero nat (times (S (S (S (S O)))) n)) (times (S (S O)) (times (S (S O)) n)) (associative-times (S (S O)) (S (S O)) n)))) (exp (S (S O)) (S (times (S (S (S (S O)))) n))) (exp-Sn (S (S O)) (times (S (S (S (S O)))) n))) (eq-ind-r lzero lzero nat (times (times (S (S (S (S O)))) n) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S (S (S O)))) n) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))))) -> le (times (S (S O)) (times (times (S (S (S (S O)))) n) (B (times (S (S (S (S O)))) n)))) x) (eq-ind lzero lzero nat (times (times (S (S O)) (times (S (S (S (S O)))) n)) (B (times (S (S (S (S O)))) n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (S (S O)) (times (S (S (S (S O)))) n)) (B (times (S (S (S (S O)))) n))) x-1) -> le x-1 (times (times (S (S (S (S O)))) n) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))))) (eq-ind-r lzero lzero nat (times (times (S (S (S (S O)))) n) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S (S (S O)))) n) (S (S O)))) -> le (times x (B (times (S (S (S (S O)))) n))) (times (times (S (S (S (S O)))) n) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))))) (eq-ind-r lzero lzero nat (times (times (S (S (S (S O)))) n) (times (S (S O)) (B (times (S (S (S (S O)))) n)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (S (S (S (S O)))) n) (times (S (S O)) (B (times (S (S (S (S O)))) n))))) -> le x (times (times (S (S (S (S O)))) n) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))))) (monotonic-le-times-r (times (S (S (S (S O)))) n) (times (S (S O)) (B (times (S (S (S (S O)))) n))) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))) (transitive-le (times (S (S O)) (B (times (S (S (S (S O)))) n))) (Psi (times (S (S (S (S O)))) n)) (exp (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))) (le-B-Psi4 n posn) (le-Psil (times (S (S (S (S O)))) n)))) (times (times (times (S (S (S (S O)))) n) (S (S O))) (B (times (S (S (S (S O)))) n))) (associative-times (times (S (S (S (S O)))) n) (S (S O)) (B (times (S (S (S (S O)))) n)))) (times (S (S O)) (times (S (S (S (S O)))) n)) (commutative-times (S (S O)) (times (S (S (S (S O)))) n))) (times (S (S O)) (times (times (S (S (S (S O)))) n) (B (times (S (S (S (S O)))) n)))) (associative-times (S (S O)) (times (S (S (S (S O)))) n) (B (times (S (S (S (S O)))) n)))) (exp (times (S (S (S (S O)))) n) (S (prim (times (S (S (S (S O)))) n)))) (exp-Sn (times (S (S (S (S O)))) n) (prim (times (S (S (S (S O)))) n))))

le-priml : (n : nat) -> (X-- : lt O n) -> le (times (S (S O)) n) (times (S (log (S (S O)) (times (S (S O)) n))) (S (prim (times (S (S O)) n))))
le-priml = λ (n : nat) -> λ (posn : lt O n) -> eq-ind lzero lzero nat (log (S (S O)) (exp (S (S O)) (times (S (S O)) n))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (log (S (S O)) (exp (S (S O)) (times (S (S O)) n))) x-1) -> le x-1 (times (S (log (S (S O)) (times (S (S O)) n))) (S (prim (times (S (S O)) n))))) (transitive-le (log (S (S O)) (exp (S (S O)) (times (S (S O)) n))) (log (S (S O)) (exp (times (S (S O)) n) (S (prim (times (S (S O)) n))))) (times (S (log (S (S O)) (times (S (S O)) n))) (S (prim (times (S (S O)) n)))) (le-log (S (S O)) (exp (S (S O)) (times (S (S O)) n)) (exp (times (S (S O)) n) (S (prim (times (S (S O)) n)))) (le-n (S (S O))) (le-exp-priml n posn)) (eq-ind-r lzero lzero nat (times (S (prim (times (S (S O)) n))) (S (log (S (S O)) (times (S (S O)) n)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (prim (times (S (S O)) n))) (S (log (S (S O)) (times (S (S O)) n))))) -> le (log (S (S O)) (exp (times (S (S O)) n) (S (prim (times (S (S O)) n))))) x) (log-exp1 (S (S O)) (times (S (S O)) n) (S (prim (times (S (S O)) n))) (le-n (S (S O)))) (times (S (log (S (S O)) (times (S (S O)) n))) (S (prim (times (S (S O)) n)))) (commutative-times (S (log (S (S O)) (times (S (S O)) n))) (S (prim (times (S (S O)) n)))))) (times (S (S O)) n) (eq-log-exp (S (S O)) (times (S (S O)) n) (le-n (S (S O))))

le-exp-primr : (n : nat) -> le (exp n (prim n)) (exp (S (S O)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))))
le-exp-primr = λ (n : nat) -> transitive-le (exp n (prim n)) (exp (Psi n) (S (S O))) (exp (S (S O)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O)))))) (eq-ind-r lzero lzero nat (times (Psi n) (exp (Psi n) (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (Psi n) (exp (Psi n) (S O)))) -> le (exp n (prim n)) x) (eq-ind-r lzero lzero nat (times (Psi n) (exp (Psi n) O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (Psi n) (exp (Psi n) O))) -> le (exp n (prim n)) (times (Psi n) x)) (eq-ind lzero lzero nat (Psi n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (Psi n) x-1) -> le (exp n (prim n)) (times (Psi n) x-1)) (lePsi-r2 n) (times (Psi n) (S O)) (times-n-1 (Psi n))) (exp (Psi n) (S O)) (exp-Sn (Psi n) O)) (exp (Psi n) (S (S O))) (exp-Sn (Psi n) (S O))) (eq-ind-r lzero lzero nat (times (minus (times (S (S O)) n) (S (S (S O)))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (minus (times (S (S O)) n) (S (S (S O)))) (S (S O)))) -> le (exp (Psi n) (S (S O))) (exp (S (S O)) x)) (eq-ind lzero lzero nat (exp (exp (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (S (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (exp (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (S (S O))) x-1) -> le (exp (Psi n) (S (S O))) x-1) (le-exp1 (Psi n) (exp (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (S (S O)) (lt-O-S (S O)) (le-Psi-exp5 n)) (exp (S (S O)) (times (minus (times (S (S O)) n) (S (S (S O)))) (S (S O)))) (exp-exp-times (S (S O)) (minus (times (S (S O)) n) (S (S (S O)))) (S (S O)))) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (commutative-times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))))

le-primr : (n : nat) -> (X-- : lt (S O) n) -> le (prim n) (div (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (log (S (S O)) n))
le-primr = λ (n : nat) -> λ (lt1n : lt (S O) n) -> le-times-to-le-div (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (log (S (S O)) n) (prim n) (lt-O-log (S (S O)) n lt1n lt1n) (transitive-le (times (log (S (S O)) n) (prim n)) (log (S (S O)) (exp n (prim n))) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (eq-ind-r lzero lzero nat (times (prim n) (log (S (S O)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (prim n) (log (S (S O)) n))) -> le x (log (S (S O)) (exp n (prim n)))) (log-exp2 (S (S O)) n (prim n) (le-n (S (S O))) (lt-to-le (S O) n lt1n)) (times (log (S (S O)) n) (prim n)) (commutative-times (log (S (S O)) n) (prim n))) (eq-ind lzero lzero nat (log (S (S O)) (exp (S (S O)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (log (S (S O)) (exp (S (S O)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))))) x-1) -> le (log (S (S O)) (exp n (prim n))) x-1) (le-log (S (S O)) (exp n (prim n)) (exp (S (S O)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O)))))) (le-n (S (S O))) (le-exp-primr n)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (eq-log-exp (S (S O)) (times (S (S O)) (minus (times (S (S O)) n) (S (S (S O))))) (le-n (S (S O))))))

le-priml1 : (n : nat) -> (X-- : lt O n) -> le (minus (div (times (S (S O)) n) (plus (log (S (S O)) n) (S (S O)))) (S O)) (prim (times (S (S O)) n))
le-priml1 = λ (n : nat) -> λ (posn : lt O n) -> le-plus-to-minus (div (times (S (S O)) n) (plus (log (S (S O)) n) (S (S O)))) (S O) (prim (times (S (S O)) n)) (le-times-to-le-div2 (plus (prim (times (S (S O)) n)) (S O)) (times (S (S O)) n) (plus (log (S (S O)) n) (S (S O))) (eq-ind-r lzero lzero nat (plus (S (S O)) (log (S (S O)) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S (S O)) (log (S (S O)) n))) -> lt O x) (lt-O-S (plus (S O) (log (S (S O)) n))) (plus (log (S (S O)) n) (S (S O))) (commutative-plus (log (S (S O)) n) (S (S O)))) (eq-ind-r lzero lzero nat (times (plus (log (S (S O)) n) (S (S O))) (plus (prim (times (S (S O)) n)) (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (plus (log (S (S O)) n) (S (S O))) (plus (prim (times (S (S O)) n)) (S O)))) -> le (times (S (S O)) n) x) (eq-ind lzero lzero nat (S (plus (log (S (S O)) n) (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus (log (S (S O)) n) (S O))) x-1) -> le (times (S (S O)) n) (times x-1 (plus (prim (times (S (S O)) n)) (S O)))) (eq-ind lzero lzero nat (S (plus (prim (times (S (S O)) n)) O)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus (prim (times (S (S O)) n)) O)) x-1) -> le (times (S (S O)) n) (times (S (plus (log (S (S O)) n) (S O))) x-1)) (eq-ind lzero lzero nat (prim (times (S (S O)) n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (prim (times (S (S O)) n)) x-1) -> le (times (S (S O)) n) (times (S (plus (log (S (S O)) n) (S O))) (S x-1))) (eq-ind lzero lzero nat (plus (S O) (log (S (S O)) n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (S O) (log (S (S O)) n)) x-1) -> le (times (S (S O)) n) (times (S x-1) (S (prim (times (S (S O)) n))))) (eq-ind lzero lzero nat (log (S (S O)) (times (exp (S (S O)) (S O)) n)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (log (S (S O)) (times (exp (S (S O)) (S O)) n)) x-1) -> le (times (S (S O)) n) (times (S x-1) (S (prim (times (S (S O)) n))))) (le-priml n posn) (plus (S O) (log (S (S O)) n)) (log-exp (S (S O)) (S O) n (le-n (S (S O))) posn)) (plus (log (S (S O)) n) (S O)) (commutative-plus (S O) (log (S (S O)) n))) (plus (prim (times (S (S O)) n)) O) (plus-n-O (prim (times (S (S O)) n)))) (plus (prim (times (S (S O)) n)) (S O)) (plus-n-Sm (prim (times (S (S O)) n)) O)) (plus (log (S (S O)) n) (S (S O))) (plus-n-Sm (log (S (S O)) n) (S O))) (times (plus (prim (times (S (S O)) n)) (S O)) (plus (log (S (S O)) n) (S (S O)))) (commutative-times (plus (prim (times (S (S O)) n)) (S O)) (plus (log (S (S O)) n) (S (S O))))))

