open import Agda.Primitive
import matita-basics-relations
import matita-basics-logic
import matita-basics-bool
import matita-arithmetics-nat

mod-aux : matita-arithmetics-nat.nat -> matita-arithmetics-nat.nat -> matita-arithmetics-nat.nat -> matita-arithmetics-nat.nat
mod-aux matita-arithmetics-nat.O y z = y
mod-aux (matita-arithmetics-nat.S x) y z = matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) y (mod-aux x (matita-arithmetics-nat.minus y (matita-arithmetics-nat.S z)) z) (matita-arithmetics-nat.leb y z)


mod : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
mod = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) n-v (λ (p-v : matita-arithmetics-nat.nat) -> mod-aux n-v n-v p-v) m-v


div-aux : matita-arithmetics-nat.nat -> matita-arithmetics-nat.nat -> matita-arithmetics-nat.nat -> matita-arithmetics-nat.nat
div-aux matita-arithmetics-nat.O y z = matita-arithmetics-nat.O
div-aux (matita-arithmetics-nat.S x) y z = matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) matita-arithmetics-nat.O (matita-arithmetics-nat.S (div-aux x (matita-arithmetics-nat.minus y (matita-arithmetics-nat.S z)) z)) (matita-arithmetics-nat.leb y z)


div : (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat
div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat) (matita-arithmetics-nat.S n-v) (λ (p-v : matita-arithmetics-nat.nat) -> div-aux n-v n-v p-v) m-v

le-mod-aux-m-m : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v p-v) -> matita-arithmetics-nat.le (mod-aux p-v n-v m-v) m-v
le-mod-aux-m-m = λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v X-x-365-v) -> matita-arithmetics-nat.le (mod-aux X-x-365-v n-v m-v) m-v) (λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (lenO-v : matita-arithmetics-nat.le n-v matita-arithmetics-nat.O) -> matita-arithmetics-nat.le-n-O-elim lzero n-v lenO-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.le X---v m-v) (matita-arithmetics-nat.le-O-n m-v)) (λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.le n-v q-v) -> matita-arithmetics-nat.le (mod-aux q-v n-v m-v) m-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (len-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.S q-v)) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-arithmetics-nat.le (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) X---v) m-v) (λ (auto-v : matita-arithmetics-nat.le n-v m-v) -> auto-v) (λ (notlenm-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> Hind-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v (matita-arithmetics-nat.le-plus-to-minus n-v (matita-arithmetics-nat.S m-v) q-v (matita-arithmetics-nat.transitive-le n-v (matita-arithmetics-nat.S q-v) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v)) len-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S q-v) m-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v))) (matita-arithmetics-nat.le-plus-n-r m-v (matita-arithmetics-nat.S q-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S q-v) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v)))) (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S q-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.S m-v))) (matita-arithmetics-nat.plus-n-Sm q-v m-v) (matita-arithmetics-nat.plus m-v q-v) (matita-arithmetics-nat.commutative-plus q-v m-v)) (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.plus-n-Sm m-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S q-v) m-v) (matita-arithmetics-nat.commutative-plus m-v (matita-arithmetics-nat.S q-v)))))))) p-v

lt-mod-m-m : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.lt (mod n-v m-v) m-v
lt-mod-m-m = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O X---v) -> matita-arithmetics-nat.lt (mod n-v X---v) X---v) (λ (abs-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-arithmetics-nat.lt (mod n-v matita-arithmetics-nat.O) matita-arithmetics-nat.O) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O) abs-v (matita-arithmetics-nat.not-le-Sn-O matita-arithmetics-nat.O))) (λ (p-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.S p-v)) -> matita-arithmetics-nat.le-S-S (mod-aux n-v n-v p-v) p-v (le-mod-aux-m-m n-v n-v p-v (matita-arithmetics-nat.le-n n-v))) m-v

div-aux-mod-aux : (p-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux p-v n-v m-v) (matita-arithmetics-nat.S m-v)) (mod-aux p-v n-v m-v))
div-aux-mod-aux = λ (p-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind lzero (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux X-x-365-v n-v m-v) (matita-arithmetics-nat.S m-v)) (mod-aux X-x-365-v n-v m-v))) (λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (λ (q-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux q-v n-v m-v) (matita-arithmetics-nat.S m-v)) (mod-aux q-v n-v m-v))) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.leb-elim lzero n-v m-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) matita-arithmetics-nat.O (matita-arithmetics-nat.S (div-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v)) X---v) (matita-arithmetics-nat.S m-v)) (matita-basics-bool.match-bool lzero (λ (X-0-v : matita-basics-bool.bool) -> matita-arithmetics-nat.nat) n-v (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) X---v))) (λ (lenm-v : matita-arithmetics-nat.le n-v m-v) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (λ (lenm-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le n-v m-v)) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) (matita-arithmetics-nat.S m-v)) (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) (matita-arithmetics-nat.S m-v)) (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v x-1-v))) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.S m-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v))))) (matita-arithmetics-nat.plus-minus-m-m n-v (matita-arithmetics-nat.S m-v) (matita-arithmetics-nat.not-le-to-lt n-v m-v lenm-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S m-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) (matita-arithmetics-nat.S m-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v X---v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) (matita-arithmetics-nat.S m-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) (matita-arithmetics-nat.S m-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v))))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v))))) (matita-arithmetics-nat.plus-n-Sm m-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) m-v) (matita-arithmetics-nat.commutative-plus m-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)) m-v))) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))) (matita-arithmetics-nat.plus-n-Sm m-v (matita-arithmetics-nat.pred (matita-arithmetics-nat.minus n-v m-v)))) (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.eq-minus-S-pred n-v m-v)) (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) (matita-arithmetics-nat.eq-minus-S-pred n-v m-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) (matita-arithmetics-nat.S m-v)) (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v)) (Hind-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (div-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) (matita-arithmetics-nat.S m-v))) (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v)) (matita-arithmetics-nat.associative-plus m-v (matita-arithmetics-nat.times (div-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v) (matita-arithmetics-nat.S m-v)) (mod-aux q-v (matita-arithmetics-nat.minus n-v (matita-arithmetics-nat.S m-v)) m-v)))) p-v

div-mod : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v m-v) m-v) (mod n-v m-v))
div-mod = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat lzero (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v X---v) X---v) (mod n-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v n-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.commutative-plus matita-arithmetics-nat.O n-v)) (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O n-v)) (λ (auto-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux n-v n-v auto-v) (matita-arithmetics-nat.S auto-v)) (mod-aux n-v n-v auto-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux n-v n-v auto-v) (matita-arithmetics-nat.S auto-v)) (mod-aux n-v n-v auto-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div-aux n-v n-v auto-v) (matita-arithmetics-nat.S auto-v)) (mod-aux n-v n-v auto-v))) n-v (div-aux-mod-aux n-v n-v auto-v)) m-v

eq-times-div-minus-mod : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div a-v b-v) b-v) (matita-arithmetics-nat.minus a-v (mod a-v b-v))
eq-times-div-minus-mod = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (mod a-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div a-v b-v) b-v) (matita-arithmetics-nat.minus a-v (mod a-v b-v))) (matita-arithmetics-nat.minus-plus-m-m (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.minus X---v (mod a-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div a-v b-v) b-v) (matita-arithmetics-nat.minus a-v (mod a-v b-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (mod a-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus a-v (mod a-v b-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.minus X---v (mod a-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.minus a-v (mod a-v b-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.minus a-v (mod a-v b-v)))) (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div a-v b-v) b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v (mod a-v b-v))) (div-mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.commutative-times (div a-v b-v) b-v)) (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)))) (matita-arithmetics-nat.times (div a-v b-v) b-v) (matita-arithmetics-nat.commutative-times (div a-v b-v) b-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)))

data div-mod-spec (n-v : matita-arithmetics-nat.nat) (m-v : matita-arithmetics-nat.nat) (q-v : matita-arithmetics-nat.nat)  (r-v : matita-arithmetics-nat.nat) : Set where
  div-mod-spec-intro' : (X---v : matita-arithmetics-nat.lt r-v m-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) -> div-mod-spec n-v m-v q-v r-v

div-mod-spec-intro : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt r-v m-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) -> div-mod-spec n-v m-v q-v r-v
div-mod-spec-intro _ _ _ _ = div-mod-spec-intro'

match-div-mod-spec : (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (return-sort-v : Level) -> (return-type-v : (z-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set return-sort-v) -> (case-div-mod-spec-intro-v : (X---v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> return-type-v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v X---v X--1-v)) -> (z-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> return-type-v z-v
match-div-mod-spec X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-ind : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-809-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-811-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-810-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-811-v x-810-v)) -> (x-809-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-809-v
div-mod-spec-ind X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-rect-Type4 : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-815-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-815-v x-814-v)) -> (x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-813-v
div-mod-spec-rect-Type4 X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-rect-Type3 : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-815-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-815-v x-814-v)) -> (x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-813-v
div-mod-spec-rect-Type3 X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-rect-Type5 : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-815-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-815-v x-814-v)) -> (x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-813-v
div-mod-spec-rect-Type5 X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-rect-Type2 : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-815-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-815-v x-814-v)) -> (x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-813-v
div-mod-spec-rect-Type2 X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-rect-Type1 : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-815-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-815-v x-814-v)) -> (x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-813-v
div-mod-spec-rect-Type1 X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v

div-mod-spec-rect-Type0 : (l2-v : Level) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-m-v : matita-arithmetics-nat.nat) -> (X-q-v : matita-arithmetics-nat.nat) -> (X-r-v : matita-arithmetics-nat.nat) -> (Q--v : (X-x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Set l2-v) -> (X-H-div-mod-spec-intro-v : (x-815-v : matita-arithmetics-nat.lt X-r-v X-m-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat X-n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times X-q-v X-m-v) X-r-v)) -> Q--v (div-mod-spec-intro X-n-v X-m-v X-q-v X-r-v x-815-v x-814-v)) -> (x-813-v : div-mod-spec X-n-v X-m-v X-q-v X-r-v) -> Q--v x-813-v
div-mod-spec-rect-Type0 X-n-12-v X-m-11-v X-q-10-v X-r-9-v return-sort-v return-type-v case-div-mod-spec-intro-v (div-mod-spec-intro' X---v X--1-v) = case-div-mod-spec-intro-v X---v X--1-v


div-mod-spec-inv-ind : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (x3-v : matita-arithmetics-nat.nat) -> (x4-v : matita-arithmetics-nat.nat) -> (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (P-v : (X-z1434-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> (X-H1-v : (x-811-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-810-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1435-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-811-v x-810-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-811-v x-810-v)) -> P-v Hterm-v
div-mod-spec-inv-ind = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (x3-v : matita-arithmetics-nat.nat) -> λ (x4-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> λ (P-v : (X-z1434-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> λ (H1-v : (x-811-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-810-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1435-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-811-v x-810-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-811-v x-810-v)) -> div-mod-spec-ind l14-v x1-v x2-v x3-v x4-v (λ (X-x-809-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (X-z1435-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v X-x-809-v) -> P-v X-x-809-v) H1-v Hterm-v (matita-basics-logic.refl lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v)

div-mod-spec-inv-rect-Type4 : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (x3-v : matita-arithmetics-nat.nat) -> (x4-v : matita-arithmetics-nat.nat) -> (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (P-v : (X-z1440-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> (X-H1-v : (x-815-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1441-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-815-v x-814-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-815-v x-814-v)) -> P-v Hterm-v
div-mod-spec-inv-rect-Type4 = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (x3-v : matita-arithmetics-nat.nat) -> λ (x4-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> λ (P-v : (X-z1440-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> λ (H1-v : (x-815-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-814-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1441-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-815-v x-814-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-815-v x-814-v)) -> div-mod-spec-rect-Type4 l14-v x1-v x2-v x3-v x4-v (λ (X-x-813-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (X-z1441-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v X-x-813-v) -> P-v X-x-813-v) H1-v Hterm-v (matita-basics-logic.refl lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v)

div-mod-spec-inv-rect-Type3 : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (x3-v : matita-arithmetics-nat.nat) -> (x4-v : matita-arithmetics-nat.nat) -> (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (P-v : (X-z1446-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> (X-H1-v : (x-823-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-822-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1447-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-823-v x-822-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-823-v x-822-v)) -> P-v Hterm-v
div-mod-spec-inv-rect-Type3 = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (x3-v : matita-arithmetics-nat.nat) -> λ (x4-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> λ (P-v : (X-z1446-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> λ (H1-v : (x-823-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-822-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1447-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-823-v x-822-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-823-v x-822-v)) -> div-mod-spec-rect-Type3 l14-v x1-v x2-v x3-v x4-v (λ (X-x-821-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (X-z1447-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v X-x-821-v) -> P-v X-x-821-v) H1-v Hterm-v (matita-basics-logic.refl lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v)

div-mod-spec-inv-rect-Type2 : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (x3-v : matita-arithmetics-nat.nat) -> (x4-v : matita-arithmetics-nat.nat) -> (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (P-v : (X-z1452-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> (X-H1-v : (x-827-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-826-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1453-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-827-v x-826-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-827-v x-826-v)) -> P-v Hterm-v
div-mod-spec-inv-rect-Type2 = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (x3-v : matita-arithmetics-nat.nat) -> λ (x4-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> λ (P-v : (X-z1452-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> λ (H1-v : (x-827-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-826-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1453-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-827-v x-826-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-827-v x-826-v)) -> div-mod-spec-rect-Type2 l14-v x1-v x2-v x3-v x4-v (λ (X-x-825-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (X-z1453-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v X-x-825-v) -> P-v X-x-825-v) H1-v Hterm-v (matita-basics-logic.refl lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v)

div-mod-spec-inv-rect-Type1 : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (x3-v : matita-arithmetics-nat.nat) -> (x4-v : matita-arithmetics-nat.nat) -> (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (P-v : (X-z1458-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> (X-H1-v : (x-831-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-830-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1459-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-831-v x-830-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-831-v x-830-v)) -> P-v Hterm-v
div-mod-spec-inv-rect-Type1 = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (x3-v : matita-arithmetics-nat.nat) -> λ (x4-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> λ (P-v : (X-z1458-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> λ (H1-v : (x-831-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-830-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1459-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-831-v x-830-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-831-v x-830-v)) -> div-mod-spec-rect-Type1 l14-v x1-v x2-v x3-v x4-v (λ (X-x-829-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (X-z1459-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v X-x-829-v) -> P-v X-x-829-v) H1-v Hterm-v (matita-basics-logic.refl lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v)

div-mod-spec-inv-rect-Type0 : (l14-v : Level) -> (x1-v : matita-arithmetics-nat.nat) -> (x2-v : matita-arithmetics-nat.nat) -> (x3-v : matita-arithmetics-nat.nat) -> (x4-v : matita-arithmetics-nat.nat) -> (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (P-v : (X-z1464-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> (X-H1-v : (x-835-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-834-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1465-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-835-v x-834-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-835-v x-834-v)) -> P-v Hterm-v
div-mod-spec-inv-rect-Type0 = λ (l14-v : Level) -> λ (x1-v : matita-arithmetics-nat.nat) -> λ (x2-v : matita-arithmetics-nat.nat) -> λ (x3-v : matita-arithmetics-nat.nat) -> λ (x4-v : matita-arithmetics-nat.nat) -> λ (Hterm-v : div-mod-spec x1-v x2-v x3-v x4-v) -> λ (P-v : (X-z1464-v : div-mod-spec x1-v x2-v x3-v x4-v) -> Set l14-v) -> λ (H1-v : (x-835-v : matita-arithmetics-nat.lt x4-v x2-v) -> (x-834-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x3-v x2-v) x4-v)) -> (X-z1465-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-835-v x-834-v)) -> P-v (div-mod-spec-intro x1-v x2-v x3-v x4-v x-835-v x-834-v)) -> div-mod-spec-rect-Type0 l14-v x1-v x2-v x3-v x4-v (λ (X-x-833-v : div-mod-spec x1-v x2-v x3-v x4-v) -> (X-z1465-v : matita-basics-logic.eq lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v X-x-833-v) -> P-v X-x-833-v) H1-v Hterm-v (matita-basics-logic.refl lzero (div-mod-spec x1-v x2-v x3-v x4-v) Hterm-v)

div-mod-spec-discr : (l207-v : Level) -> (a1-v : matita-arithmetics-nat.nat) -> (a2-v : matita-arithmetics-nat.nat) -> (a3-v : matita-arithmetics-nat.nat) -> (a4-v : matita-arithmetics-nat.nat) -> (x-v : div-mod-spec a1-v a2-v a3-v a4-v) -> (y-v : div-mod-spec a1-v a2-v a3-v a4-v) -> (X-e-v : matita-basics-logic.eq lzero (div-mod-spec a1-v a2-v a3-v a4-v) x-v y-v) -> match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l207-v))) (λ (X---v : div-mod-spec a1-v a2-v a3-v a4-v) -> Set ((lsuc lzero) ⊔ (lsuc l207-v))) (λ (t0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (t1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l207-v))) (λ (X---v : div-mod-spec a1-v a2-v a3-v a4-v) -> Set ((lsuc lzero) ⊔ (lsuc l207-v))) (λ (u0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (u1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> (P-v : Set l207-v) -> (X-z53-v : (e0-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) (matita-basics-logic.R0 lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) (matita-basics-logic.R1 lzero lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v (λ (x-19-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v x-19-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) y-v) x-v
div-mod-spec-discr = λ (l207-v : Level) -> λ (a1-v : matita-arithmetics-nat.nat) -> λ (a2-v : matita-arithmetics-nat.nat) -> λ (a3-v : matita-arithmetics-nat.nat) -> λ (a4-v : matita-arithmetics-nat.nat) -> λ (x-v : div-mod-spec a1-v a2-v a3-v a4-v) -> λ (y-v : div-mod-spec a1-v a2-v a3-v a4-v) -> λ (Deq-v : matita-basics-logic.eq lzero (div-mod-spec a1-v a2-v a3-v a4-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 lzero ((lsuc lzero) ⊔ (lsuc l207-v)) (div-mod-spec a1-v a2-v a3-v a4-v) x-v (λ (x-13-v : div-mod-spec a1-v a2-v a3-v a4-v) -> λ (X-x-14-v : matita-basics-logic.eq lzero (div-mod-spec a1-v a2-v a3-v a4-v) x-v x-13-v) -> match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l207-v))) (λ (X---v : div-mod-spec a1-v a2-v a3-v a4-v) -> Set ((lsuc lzero) ⊔ (lsuc l207-v))) (λ (t0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (t1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l207-v))) (λ (X---v : div-mod-spec a1-v a2-v a3-v a4-v) -> Set ((lsuc lzero) ⊔ (lsuc l207-v))) (λ (u0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (u1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> (P-v : Set l207-v) -> (X-z53-v : (e0-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) (matita-basics-logic.R0 lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) (matita-basics-logic.R1 lzero lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v (λ (x-19-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v x-19-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) x-13-v) x-v) (match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc lzero) ⊔ (lsuc l207-v)) (λ (X---v : div-mod-spec a1-v a2-v a3-v a4-v) -> match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l207-v))) (λ (X-0-v : div-mod-spec a1-v a2-v a3-v a4-v) -> Set ((lsuc lzero) ⊔ (lsuc l207-v))) (λ (t0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (t1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> match-div-mod-spec a1-v a2-v a3-v a4-v ((lsuc (lsuc lzero)) ⊔ (lsuc (lsuc l207-v))) (λ (X-0-v : div-mod-spec a1-v a2-v a3-v a4-v) -> Set ((lsuc lzero) ⊔ (lsuc l207-v))) (λ (u0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (u1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> (P-v : Set l207-v) -> (X-z53-v : (e0-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) (matita-basics-logic.R0 lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) (matita-basics-logic.R1 lzero lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v (λ (x-19-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) t0-v x-19-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (a10-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) -> λ (P-v : Set l207-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) (matita-basics-logic.R0 lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v) a0-v) -> (X-e1-v : matita-basics-logic.eq lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) (matita-basics-logic.R1 lzero lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v (λ (x-19-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v x-19-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) a10-v a0-v e0-v) a10-v) -> P-v) -> DH-v (matita-basics-logic.refl lzero (matita-arithmetics-nat.lt a4-v a2-v) (matita-basics-logic.R0 lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v)) (matita-basics-logic.refl lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) (matita-basics-logic.R1 lzero lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v (λ (x-19-v : matita-arithmetics-nat.lt a4-v a2-v) -> λ (X-x-20-v : matita-basics-logic.eq lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v x-19-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a3-v a2-v) a4-v)) a10-v a0-v (matita-basics-logic.refl lzero (matita-arithmetics-nat.lt a4-v a2-v) (matita-basics-logic.R0 lzero (matita-arithmetics-nat.lt a4-v a2-v) a0-v))))) x-v) y-v Deq-v

div-mod-spec-to-not-eq-O : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (X---v : div-mod-spec n-v m-v q-v r-v) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O)
div-mod-spec-to-not-eq-O = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : div-mod-spec n-v m-v q-v r-v) -> match-div-mod-spec n-v m-v q-v r-v lzero (λ (X---v : div-mod-spec n-v m-v q-v r-v) -> matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O)) (λ (auto-v : matita-arithmetics-nat.lt r-v m-v) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) -> matita-basics-logic.not-to-not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) (λ (auto''-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v matita-arithmetics-nat.O) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S r-v) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) auto-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S X---v) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) m-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) m-v)) matita-arithmetics-nat.O auto''-v) r-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v r-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v r-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v r-v)) auto'-v (matita-arithmetics-nat.times m-v q-v) (matita-arithmetics-nat.commutative-times q-v m-v)) m-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v (matita-arithmetics-nat.times X---v q-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times matita-arithmetics-nat.O q-v)) (matita-arithmetics-nat.times-O-n q-v) m-v auto''-v) m-v auto''-v)) r-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat r-v (matita-arithmetics-nat.plus X---v r-v)) (matita-arithmetics-nat.plus-O-n r-v) m-v auto''-v)))) (matita-arithmetics-nat.not-le-Sn-O n-v)) X-clearme-v

div-mod-spec-div-mod : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> div-mod-spec n-v m-v (div n-v m-v) (mod n-v m-v)
div-mod-spec-div-mod = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> div-mod-spec-intro n-v m-v (div n-v m-v) (mod n-v m-v) (lt-mod-m-m n-v m-v posm-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v m-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v m-v) m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v m-v))) (div-mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v)) (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v))) (matita-arithmetics-nat.times (div n-v m-v) m-v) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v))

let-clause-1078 : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (q1-v : matita-arithmetics-nat.nat) -> (r1-v : matita-arithmetics-nat.nat) -> (X-clearme-v : div-mod-spec a-v b-v q-v r-v) -> (ltrb-v : matita-arithmetics-nat.lt r-v b-v) -> (spec-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> (X-clearme0-v : div-mod-spec a-v b-v q1-v r1-v) -> (ltr1b-v : matita-arithmetics-nat.lt r1-v b-v) -> (spec1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> (leqq1-v : matita-arithmetics-nat.le q-v q1-v) -> (ltqq1-v : matita-arithmetics-nat.lt q-v q1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v))
let-clause-1078 = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (q1-v : matita-arithmetics-nat.nat) -> λ (r1-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : div-mod-spec a-v b-v q-v r-v) -> λ (ltrb-v : matita-arithmetics-nat.lt r-v b-v) -> λ (spec-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> λ (X-clearme0-v : div-mod-spec a-v b-v q1-v r1-v) -> λ (ltr1b-v : matita-arithmetics-nat.lt r1-v b-v) -> λ (spec1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> λ (leqq1-v : matita-arithmetics-nat.le q-v q1-v) -> λ (ltqq1-v : matita-arithmetics-nat.lt q-v q1-v) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v r-v)) spec-v (matita-arithmetics-nat.times b-v q-v) (matita-arithmetics-nat.commutative-times q-v b-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v)

let-clause-1062 : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (q1-v : matita-arithmetics-nat.nat) -> (r1-v : matita-arithmetics-nat.nat) -> (X-clearme-v : div-mod-spec a-v b-v q-v r-v) -> (ltrb-v : matita-arithmetics-nat.lt r-v b-v) -> (spec-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> (X-clearme0-v : div-mod-spec a-v b-v q1-v r1-v) -> (ltr1b-v : matita-arithmetics-nat.lt r1-v b-v) -> (spec1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> (leqq1-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le q-v q1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v))
let-clause-1062 = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (q1-v : matita-arithmetics-nat.nat) -> λ (r1-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : div-mod-spec a-v b-v q-v r-v) -> λ (ltrb-v : matita-arithmetics-nat.lt r-v b-v) -> λ (spec-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> λ (X-clearme0-v : div-mod-spec a-v b-v q1-v r1-v) -> λ (ltr1b-v : matita-arithmetics-nat.lt r1-v b-v) -> λ (spec1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> λ (leqq1-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le q-v q1-v)) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q1-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v r1-v)) spec1-v (matita-arithmetics-nat.times b-v q1-v) (matita-arithmetics-nat.commutative-times q1-v b-v)) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) r1-v)

div-mod-spec-to-eq : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (q1-v : matita-arithmetics-nat.nat) -> (r1-v : matita-arithmetics-nat.nat) -> (X---v : div-mod-spec a-v b-v q-v r-v) -> (X--1-v : div-mod-spec a-v b-v q1-v r1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v
div-mod-spec-to-eq = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (q1-v : matita-arithmetics-nat.nat) -> λ (r1-v : matita-arithmetics-nat.nat) -> λ (X-clearme-v : div-mod-spec a-v b-v q-v r-v) -> match-div-mod-spec a-v b-v q-v r-v lzero (λ (X---v : div-mod-spec a-v b-v q-v r-v) -> (X--1-v : div-mod-spec a-v b-v q1-v r1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (λ (ltrb-v : matita-arithmetics-nat.lt r-v b-v) -> λ (spec-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> λ (X-clearme0-v : div-mod-spec a-v b-v q1-v r1-v) -> match-div-mod-spec a-v b-v q1-v r1-v lzero (λ (X---v : div-mod-spec a-v b-v q1-v r1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (λ (ltr1b-v : matita-arithmetics-nat.lt r1-v b-v) -> λ (spec1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> matita-arithmetics-nat.leb-elim lzero q-v q1-v (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (λ (leqq1-v : matita-arithmetics-nat.le q-v q1-v) -> matita-basics-logic.Or-ind lzero lzero lzero (matita-arithmetics-nat.lt q-v q1-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt q-v q1-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (λ (ltqq1-v : matita-arithmetics-nat.lt q-v q1-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S a-v) a-v) (matita-arithmetics-nat.lt-to-le-to-lt a-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v) a-v (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) b-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v)) (matita-arithmetics-nat.monotonic-lt-plus-r (matita-arithmetics-nat.times q-v b-v) r-v b-v ltrb-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus X---v r-v) (matita-arithmetics-nat.plus X---v b-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus X---v r-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.lt a-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.lt a-v X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v X---v) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) b-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) b-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (let-clause-1078 a-v b-v q-v r-v q1-v r1-v X-clearme-v ltrb-v spec-v X-clearme0-v ltr1b-v spec1-v leqq1-v ltqq1-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v)) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times-n-Sm b-v q-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S q-v) b-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (let-clause-1078 a-v b-v q-v r-v q1-v r1-v X-clearme-v ltrb-v spec-v X-clearme0-v ltr1b-v spec1-v leqq1-v ltqq1-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v)) (matita-arithmetics-nat.times q-v b-v) (matita-arithmetics-nat.commutative-times q-v b-v))) a-v spec-v) (matita-arithmetics-nat.transitive-le (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v) (matita-arithmetics-nat.times q1-v b-v) a-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v) (matita-arithmetics-nat.times q1-v b-v)) (matita-arithmetics-nat.monotonic-le-times-r b-v (matita-arithmetics-nat.S q-v) q1-v ltqq1-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times q1-v b-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times q1-v b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.times b-v q1-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.times b-v q1-v))) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times-n-Sm b-v q-v)) (matita-arithmetics-nat.times q1-v b-v) (matita-arithmetics-nat.commutative-times q1-v b-v)) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q-v)) (matita-arithmetics-nat.times-n-Sm b-v q-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q-v) b-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S q-v) b-v))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times q1-v b-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times q1-v b-v) a-v) (matita-arithmetics-nat.le-plus-n-r r1-v (matita-arithmetics-nat.times q1-v b-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus X---v r1-v)) (matita-arithmetics-nat.le X---v a-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q1-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q1-v) a-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q1-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q1-v) a-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q1-v) a-v)) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q1-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v r1-v)) spec1-v (matita-arithmetics-nat.times b-v q1-v) (matita-arithmetics-nat.commutative-times q1-v b-v)) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) r1-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) r1-v)) (matita-arithmetics-nat.times q1-v b-v) (matita-arithmetics-nat.commutative-times q1-v b-v))))) (matita-arithmetics-nat.not-le-Sn-n a-v))) (λ (X-x-172-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat q-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat q-v) q1-v X-x-172-v) (matita-arithmetics-nat.le-to-or-lt-eq q-v q1-v leqq1-v)) (λ (leqq1-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le q-v q1-v)) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v q1-v) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S a-v) a-v) (matita-arithmetics-nat.lt-to-le-to-lt a-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v) a-v (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) b-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v)) (matita-arithmetics-nat.monotonic-lt-plus-r (matita-arithmetics-nat.times q1-v b-v) r1-v b-v ltr1b-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus X---v r1-v) (matita-arithmetics-nat.plus X---v b-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus X---v r1-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.lt a-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.lt a-v X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v X---v) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) b-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) b-v)) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (let-clause-1062 a-v b-v q-v r-v q1-v r1-v X-clearme-v ltrb-v spec-v X-clearme0-v ltr1b-v spec1-v leqq1-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) r1-v)) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times-n-Sm b-v q1-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S q1-v) b-v)) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (let-clause-1062 a-v b-v q-v r-v q1-v r1-v X-clearme-v ltrb-v spec-v X-clearme0-v ltr1b-v spec1-v leqq1-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) r1-v)) (matita-arithmetics-nat.times q1-v b-v) (matita-arithmetics-nat.commutative-times q1-v b-v))) a-v spec1-v) (matita-arithmetics-nat.transitive-le (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v) (matita-arithmetics-nat.times q-v b-v) a-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v) (matita-arithmetics-nat.times q-v b-v)) (matita-arithmetics-nat.monotonic-le-times-r b-v (matita-arithmetics-nat.S q1-v) q-v (matita-arithmetics-nat.not-le-to-lt q-v q1-v leqq1-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times q-v b-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times q-v b-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.times b-v q-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.times b-v q-v))) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times-n-Sm b-v q1-v)) (matita-arithmetics-nat.times q-v b-v) (matita-arithmetics-nat.commutative-times q-v b-v)) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times-n-Sm b-v q1-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S q1-v) b-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S q1-v) b-v))) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times q-v b-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times q-v b-v) a-v) (matita-arithmetics-nat.le-plus-n-r r-v (matita-arithmetics-nat.times q-v b-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus X---v r-v)) (matita-arithmetics-nat.le X---v a-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q-v) a-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q-v) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q-v) a-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v q-v) a-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v r-v)) spec-v (matita-arithmetics-nat.times b-v q-v) (matita-arithmetics-nat.commutative-times q-v b-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v)) (matita-arithmetics-nat.times q-v b-v) (matita-arithmetics-nat.commutative-times q-v b-v))))) (matita-arithmetics-nat.not-le-Sn-n a-v)))) X-clearme0-v) X-clearme-v

div-mod-spec-to-eq2 : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (q1-v : matita-arithmetics-nat.nat) -> (r1-v : matita-arithmetics-nat.nat) -> (X---v : div-mod-spec a-v b-v q-v r-v) -> (X--1-v : div-mod-spec a-v b-v q1-v r1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat r-v r1-v
div-mod-spec-to-eq2 = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (q1-v : matita-arithmetics-nat.nat) -> λ (r1-v : matita-arithmetics-nat.nat) -> λ (spec-v : div-mod-spec a-v b-v q-v r-v) -> λ (spec1-v : div-mod-spec a-v b-v q1-v r1-v) -> div-mod-spec-ind lzero a-v b-v q-v r-v (λ (X-x-809-v : div-mod-spec a-v b-v q-v r-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat r-v r1-v) (λ (X---v : matita-arithmetics-nat.lt r-v b-v) -> λ (eqa-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r-v)) -> div-mod-spec-ind lzero a-v b-v q1-v r1-v (λ (X-x-809-v : div-mod-spec a-v b-v q1-v r1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat r-v r1-v) (λ (X-0-v : matita-arithmetics-nat.lt r1-v b-v) -> λ (eqa1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q1-v b-v) r1-v)) -> matita-arithmetics-nat.injective-plus-r (matita-arithmetics-nat.times q-v b-v) r-v r1-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X--1-v r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r1-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X--1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r1-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat a-v (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X--1-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v b-v) r1-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v q-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X--1-v r1-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q-v)) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X--1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat a-v (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X--1-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat a-v) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat q1-v (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v X--1-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q1-v) r1-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X--1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q1-v b-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X--1-v r1-v)) eqa1-v (matita-arithmetics-nat.times b-v q1-v) (matita-arithmetics-nat.commutative-times q1-v b-v)) (matita-arithmetics-nat.plus r1-v (matita-arithmetics-nat.times b-v q1-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q1-v) r1-v)) q-v (div-mod-spec-to-eq a-v b-v q-v r-v q1-v r1-v spec-v spec1-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r1-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r1-v)) (matita-arithmetics-nat.times q-v b-v) (matita-arithmetics-nat.commutative-times q-v b-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X--1-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v b-v) (λ (X--1-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X--1-v r-v)) eqa-v (matita-arithmetics-nat.times b-v q-v) (matita-arithmetics-nat.commutative-times q-v b-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times b-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v q-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v q-v) r-v)) (matita-arithmetics-nat.times q-v b-v) (matita-arithmetics-nat.commutative-times q-v b-v))) spec1-v) spec-v

div-plus-times : (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt r-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v) q-v
div-plus-times = λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (ltrm-v : matita-arithmetics-nat.lt r-v m-v) -> div-mod-spec-to-eq (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v (div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v) (mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v) q-v r-v (div-mod-spec-div-mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v (matita-arithmetics-nat.ltn-to-ltO r-v m-v ltrm-v)) (div-mod-spec-intro (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v q-v r-v ltrm-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times m-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.plus X---v r-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v q-v) r-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v q-v) r-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v q-v) r-v)) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.commutative-plus r-v (matita-arithmetics-nat.times m-v q-v))) (matita-arithmetics-nat.times q-v m-v) (matita-arithmetics-nat.commutative-times q-v m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v q-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v q-v) r-v)) (matita-arithmetics-nat.times q-v m-v) (matita-arithmetics-nat.commutative-times q-v m-v)))

mod-plus-times : (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (r-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt r-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v) r-v
mod-plus-times = λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (r-v : matita-arithmetics-nat.nat) -> λ (ltrm-v : matita-arithmetics-nat.lt r-v m-v) -> div-mod-spec-to-eq2 (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v (div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v) (mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v) q-v r-v (div-mod-spec-div-mod (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v (matita-arithmetics-nat.ltn-to-ltO r-v m-v ltrm-v)) (div-mod-spec-intro (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) m-v q-v r-v ltrm-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v r-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times m-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times q-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times m-v q-v)) X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v X---v) (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times q-v m-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus r-v (matita-arithmetics-nat.times q-v m-v))) (matita-arithmetics-nat.times m-v q-v) (matita-arithmetics-nat.commutative-times m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v m-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v m-v) r-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v q-v) r-v) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v q-v) r-v)) (matita-arithmetics-nat.times q-v m-v) (matita-arithmetics-nat.commutative-times q-v m-v)))

div-times : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times a-v b-v) b-v) a-v
div-times = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (posb-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> div-mod-spec-to-eq (matita-arithmetics-nat.times a-v b-v) b-v (div (matita-arithmetics-nat.times a-v b-v) b-v) (mod (matita-arithmetics-nat.times a-v b-v) b-v) a-v matita-arithmetics-nat.O (div-mod-spec-div-mod (matita-arithmetics-nat.times a-v b-v) b-v posb-v) (div-mod-spec-intro (matita-arithmetics-nat.times a-v b-v) b-v a-v matita-arithmetics-nat.O posb-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times a-v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v b-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v b-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v b-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times a-v b-v)) (matita-arithmetics-nat.plus-O-n (matita-arithmetics-nat.times a-v b-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v b-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times a-v b-v) matita-arithmetics-nat.O)))

div-n-n : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div n-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
div-n-n = λ (n-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div n-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (div-plus-times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O auto-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div X---v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div n-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div X---v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div n-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div n-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) X---v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) n-v (matita-arithmetics-nat.times-n-1 n-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)))

eq-div-O : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div n-v m-v) matita-arithmetics-nat.O
eq-div-O = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltnm-v : matita-arithmetics-nat.lt n-v m-v) -> div-mod-spec-to-eq n-v m-v (div n-v m-v) (mod n-v m-v) matita-arithmetics-nat.O n-v (div-mod-spec-div-mod n-v m-v (matita-arithmetics-nat.ltn-to-ltO n-v m-v ltnm-v)) (div-mod-spec-intro n-v m-v matita-arithmetics-nat.O n-v ltnm-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v n-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v n-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.commutative-plus matita-arithmetics-nat.O n-v)) (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O m-v)) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O m-v)))

mod-n-n : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod n-v n-v) matita-arithmetics-nat.O
mod-n-n = λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> div-mod-spec-to-eq2 n-v n-v (div n-v n-v) (mod n-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O (div-mod-spec-div-mod n-v n-v posn-v) (div-mod-spec-intro n-v n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O posn-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus n-v X---v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O n-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-Sm n-v matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v)))

mod-S : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--1-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v m-v)) m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod (matita-arithmetics-nat.S n-v) m-v) (matita-arithmetics-nat.S (mod n-v m-v))
mod-S = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (H-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v m-v)) m-v) -> div-mod-spec-to-eq2 (matita-arithmetics-nat.S n-v) m-v (div (matita-arithmetics-nat.S n-v) m-v) (mod (matita-arithmetics-nat.S n-v) m-v) (div n-v m-v) (matita-arithmetics-nat.S (mod n-v m-v)) (div-mod-spec-div-mod (matita-arithmetics-nat.S n-v) m-v posm-v) (div-mod-spec-intro (matita-arithmetics-nat.S n-v) m-v (div n-v m-v) (matita-arithmetics-nat.S (mod n-v m-v)) H-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v m-v) m-v) (matita-arithmetics-nat.S (mod n-v m-v)))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat matita-arithmetics-nat.S n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v m-v) m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v m-v))) (div-mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v)) (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S (mod n-v m-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.S (mod n-v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.S (mod n-v m-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.S (mod n-v m-v))))) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v))) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v))) (matita-arithmetics-nat.times (div n-v m-v) m-v) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v))))

mod-O-n : (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O
mod-O-n = λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (mod matita-arithmetics-nat.O n-v) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (mod matita-arithmetics-nat.O n-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (mod matita-arithmetics-nat.O n-v)) (matita-arithmetics-nat.le-n-O-to-eq (mod matita-arithmetics-nat.O n-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))) (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))) (matita-arithmetics-nat.le (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))) (matita-arithmetics-nat.le (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (mod matita-arithmetics-nat.O n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))) (matita-arithmetics-nat.le (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (mod matita-arithmetics-nat.O n-v) X---v) (matita-arithmetics-nat.le (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)) (mod matita-arithmetics-nat.O n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div matita-arithmetics-nat.O n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.plus X---v (mod matita-arithmetics-nat.O n-v))) (div-mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)) (matita-arithmetics-nat.commutative-times (div matita-arithmetics-nat.O n-v) n-v)) (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)) (mod matita-arithmetics-nat.O n-v)))) (matita-arithmetics-nat.minus (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O (mod matita-arithmetics-nat.O n-v))) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus (mod matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v))) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))) (matita-arithmetics-nat.minus-plus-plus-l (mod matita-arithmetics-nat.O n-v) matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v (div matita-arithmetics-nat.O n-v)))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (mod matita-arithmetics-nat.O n-v))))

lt-to-eq-mod : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt n-v m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod n-v m-v) n-v
lt-to-eq-mod = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (ltnm-v : matita-arithmetics-nat.lt n-v m-v) -> div-mod-spec-to-eq2 n-v m-v (div n-v m-v) (mod n-v m-v) matita-arithmetics-nat.O n-v (div-mod-spec-div-mod n-v m-v (matita-arithmetics-nat.ltn-to-ltO n-v m-v ltnm-v)) (div-mod-spec-intro n-v m-v matita-arithmetics-nat.O n-v ltnm-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v n-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v n-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.commutative-plus matita-arithmetics-nat.O n-v)) (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O m-v)) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O m-v)))

or-div-mod : (n-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.S (mod n-v q-v)))))
or-div-mod = λ (n-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posq-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-basics-logic.Or-ind lzero lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.S (mod n-v q-v)))))) (λ (H-v : matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.S (mod n-v q-v))))) (matita-basics-logic.conj lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.S (mod n-v q-v)))) H-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.S (mod n-v q-v)))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat matita-arithmetics-nat.S n-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v q-v))) (div-mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S (mod n-v q-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.S (mod n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.S (mod n-v q-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.S (mod n-v q-v))))) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v))) (matita-arithmetics-nat.plus-n-Sm (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v))) (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v))))) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.And lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v q-v)) q-v))) (matita-basics-logic.And lzero lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.S (mod n-v q-v))))) (matita-basics-logic.conj lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) q-v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v q-v)) q-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat q-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v q-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat q-v) (matita-arithmetics-nat.S (mod n-v q-v)) H-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus q-v (matita-arithmetics-nat.times q-v (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) X---v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (mod n-v q-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S n-v) (matita-arithmetics-nat.plus x-1-v (matita-arithmetics-nat.times q-v (div n-v q-v)))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat matita-arithmetics-nat.S n-v (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v q-v))) (div-mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v))))) q-v H-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.S (div n-v q-v))) (matita-arithmetics-nat.times-n-Sm q-v (div n-v q-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v q-v)) q-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.S (div n-v q-v)) q-v)))) (matita-arithmetics-nat.le-to-or-lt-eq (matita-arithmetics-nat.S (mod n-v q-v)) q-v (lt-mod-m-m n-v q-v posq-v))

injective-times-r : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-relations.||injective|| lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.times n-v m-v)
injective-times-r = λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (eqn-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v a-v) (matita-arithmetics-nat.times n-v b-v)) -> matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times a-v n-v) n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times a-v n-v) n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v b-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times b-v n-v) n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times b-v n-v) n-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times a-v n-v) n-v) x-1-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div X---v n-v) (div (matita-arithmetics-nat.times b-v n-v) n-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times n-v a-v) n-v) (div X---v n-v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times n-v a-v) n-v) (div X---v n-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times n-v a-v) n-v)) (matita-arithmetics-nat.times n-v b-v) eqn-v) (matita-arithmetics-nat.times b-v n-v) (matita-arithmetics-nat.commutative-times b-v n-v)) (matita-arithmetics-nat.times a-v n-v) (matita-arithmetics-nat.commutative-times a-v n-v)) b-v (div-times b-v n-v posn-v)) a-v (div-times a-v n-v posn-v)

injective-times-l : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-relations.||injective|| lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (λ (m-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.times m-v n-v)
injective-times-l = λ (n-v : matita-arithmetics-nat.nat) -> λ (auto-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (x-v : matita-arithmetics-nat.nat) -> λ (y-v : matita-arithmetics-nat.nat) -> λ (auto'-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times x-v n-v) (matita-arithmetics-nat.times y-v n-v)) -> injective-times-r n-v auto-v x-v y-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v y-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times n-v y-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v y-v)) (matita-arithmetics-nat.times n-v x-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times y-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v x-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times x-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.times y-v n-v)) auto'-v (matita-arithmetics-nat.times n-v x-v) (matita-arithmetics-nat.commutative-times x-v n-v)) (matita-arithmetics-nat.times n-v y-v) (matita-arithmetics-nat.commutative-times y-v n-v)))

lt-div-S : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div n-v m-v)) m-v)
lt-div-S = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v m-v) m-v) (mod n-v m-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v m-v) m-v) (mod n-v m-v))) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (div n-v m-v) m-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times (div n-v m-v) m-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times (div n-v m-v) m-v))) -> matita-arithmetics-nat.lt x-v (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (div n-v m-v) m-v))) (matita-arithmetics-nat.monotonic-lt-plus-l (matita-arithmetics-nat.times (div n-v m-v) m-v) (mod n-v m-v) m-v (lt-mod-m-m n-v m-v posm-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v m-v) m-v) (mod n-v m-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times (div n-v m-v) m-v) (mod n-v m-v))) n-v (div-mod n-v m-v)

le-div : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-arithmetics-nat.le (div m-v n-v) m-v
le-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v n-v) n-v) (mod m-v n-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v n-v) n-v) (mod m-v n-v))) -> matita-arithmetics-nat.le (div m-v n-v) x-v) (matita-arithmetics-nat.transitive-le (div m-v n-v) (matita-arithmetics-nat.times (div m-v n-v) n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v n-v) n-v) (mod m-v n-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times (div m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (div m-v n-v) n-v)) (matita-arithmetics-nat.le (div m-v n-v) (matita-arithmetics-nat.times (div m-v n-v) n-v)) (matita-arithmetics-nat.monotonic-le-times-r (div m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v posn-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times (div m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times (div m-v n-v) n-v)) (matita-arithmetics-nat.le (div m-v n-v) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (div m-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times (div m-v n-v) n-v)) (matita-arithmetics-nat.le (div m-v n-v) (matita-arithmetics-nat.times n-v (div m-v n-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (div m-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (div m-v n-v) X---v) (matita-arithmetics-nat.le (div m-v n-v) (matita-arithmetics-nat.times n-v (div m-v n-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (div m-v n-v) (matita-arithmetics-nat.times n-v (div m-v n-v)))) (matita-arithmetics-nat.times (div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (div m-v n-v) n-v)) (matita-arithmetics-nat.times (div m-v n-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.times-n-1 (div m-v n-v))) (matita-arithmetics-nat.times (div m-v n-v) n-v) (matita-arithmetics-nat.commutative-times (div m-v n-v) n-v))) (matita-arithmetics-nat.le-plus-n-r (mod m-v n-v) (matita-arithmetics-nat.times (div m-v n-v) n-v))) m-v (div-mod m-v n-v)

le-plus-mod : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))
le-plus-mod = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posq-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-basics-logic.Or-ind lzero lzero lzero (matita-arithmetics-nat.le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))) (matita-basics-logic.Not lzero (matita-arithmetics-nat.le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)))) (λ (X-x-170-v : matita-basics-logic.Or lzero lzero (matita-arithmetics-nat.le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))) (matita-basics-logic.Not lzero (matita-arithmetics-nat.le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))))) -> matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))) (λ (Hle-v : matita-arithmetics-nat.le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))) -> matita-arithmetics-nat.transitive-le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.le-S-S-to-le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) q-v (matita-arithmetics-nat.le-S (matita-arithmetics-nat.S (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) q-v (lt-mod-m-m (matita-arithmetics-nat.plus m-v n-v) q-v posq-v))) Hle-v) (λ (Hle-v : matita-basics-logic.Not lzero (matita-arithmetics-nat.le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)))) -> matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))) (matita-arithmetics-nat.le-plus-n-r matita-arithmetics-nat.O (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) matita-arithmetics-nat.O)) (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) X---v) (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (mod (matita-arithmetics-nat.plus m-v n-v) q-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (mod (matita-arithmetics-nat.plus m-v n-v) q-v))) (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O (mod (matita-arithmetics-nat.plus m-v n-v) q-v))) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (div-mod-spec-to-eq2 (matita-arithmetics-nat.plus m-v n-v) q-v (div (matita-arithmetics-nat.plus m-v n-v) q-v) (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (div-mod-spec-div-mod (matita-arithmetics-nat.plus m-v n-v) q-v posq-v) (div-mod-spec-intro (matita-arithmetics-nat.plus m-v n-v) q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.not-le-to-lt q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) Hle-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v x-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)))) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)) (mod n-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (λ (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus x-v (mod n-v q-v)) (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus x-v (matita-arithmetics-nat.times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v))) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v)) (matita-arithmetics-nat.times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (λ (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.plus x-v (mod m-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (div m-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) X---v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.times q-v (div n-v q-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) X---v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus X---v (mod m-v q-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) X---v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod m-v q-v))) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.commutative-times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.distributive-times-plus q-v (div m-v q-v) (div n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (div m-v q-v))) (matita-arithmetics-nat.times q-v (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)))) X---v) (matita-arithmetics-nat.assoc-plus1 (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod m-v q-v) (matita-arithmetics-nat.times q-v (div m-v q-v))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.times q-v (div n-v q-v)))) (matita-arithmetics-nat.associative-plus (mod m-v q-v) (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.times q-v (div n-v q-v))))) (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v)) (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.commutative-times (div m-v q-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v)) (matita-arithmetics-nat.times (div n-v q-v) q-v)) (matita-arithmetics-nat.associative-plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v)))) m-v (div-mod m-v q-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)) (mod n-v q-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v)) (mod n-v q-v)) (matita-arithmetics-nat.associative-plus (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) q-v) (mod m-v q-v) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v)) (matita-arithmetics-nat.associative-plus m-v (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)))) n-v (div-mod n-v q-v)))))) (matita-arithmetics-nat.decidable-le q-v (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)))

le-plus-div : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) (div (matita-arithmetics-nat.plus m-v n-v) q-v)
le-plus-div = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posq-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> matita-arithmetics-nat.le-times-to-le q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)) (div (matita-arithmetics-nat.plus m-v n-v) q-v) posq-v (matita-arithmetics-nat.le-plus-to-le-r (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (matita-arithmetics-nat.times q-v (div (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div (matita-arithmetics-nat.plus m-v n-v) q-v) q-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times (div (matita-arithmetics-nat.plus m-v n-v) q-v) q-v)) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.plus x-v (mod (matita-arithmetics-nat.plus m-v n-v) q-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v n-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v n-v) x-1-v) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) x-1-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v))) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.plus x-v n-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v)) x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times (div m-v q-v) q-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times (div m-v q-v) q-v))) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.plus x-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))))) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) x-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v)) x-1-v) -> matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) x-1-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v)))) (matita-arithmetics-nat.monotonic-le-plus-l (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (le-plus-mod m-v n-v q-v posq-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (div m-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.times (div n-v q-v) q-v)) (mod n-v q-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) X---v) (mod n-v q-v))))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus X---v (mod n-v q-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) X---v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod (matita-arithmetics-nat.plus m-v n-v) q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (mod n-v q-v)) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v)))) (matita-arithmetics-nat.associative-plus (mod m-v q-v) (mod n-v q-v) (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod n-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div m-v q-v)) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.distributive-times-plus q-v (div m-v q-v) (div n-v q-v))) (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v)) (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.commutative-times (div m-v q-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (matita-arithmetics-nat.plus (div m-v q-v) (div n-v q-v))) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.associative-plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod m-v q-v) (matita-arithmetics-nat.times (div m-v q-v) q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v))) (matita-arithmetics-nat.associative-plus (mod m-v q-v) (matita-arithmetics-nat.times (div m-v q-v) q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times (div m-v q-v) q-v) (mod m-v q-v))) n-v (div-mod n-v q-v)) m-v (div-mod m-v q-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div (matita-arithmetics-nat.plus m-v n-v) q-v) q-v) (mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (div-mod (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.times q-v (div (matita-arithmetics-nat.plus m-v n-v) q-v)) (matita-arithmetics-nat.commutative-times q-v (div (matita-arithmetics-nat.plus m-v n-v) q-v))))

le-times-to-le-div : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> (X--1-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) -> matita-arithmetics-nat.le c-v (div a-v b-v)
le-times-to-le-div = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (posb-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> λ (Hle-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) -> matita-arithmetics-nat.le-S-S-to-le c-v (div a-v b-v) (matita-arithmetics-nat.lt-times-n-to-lt-l b-v c-v (matita-arithmetics-nat.S (div a-v b-v)) (matita-arithmetics-nat.le-to-lt-to-lt (matita-arithmetics-nat.times c-v b-v) a-v (matita-arithmetics-nat.times (matita-arithmetics-nat.S (div a-v b-v)) b-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times c-v b-v) a-v) Hle-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v c-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) (matita-arithmetics-nat.le X---v a-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v)) (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.commutative-times c-v b-v))) (lt-div-S a-v b-v posb-v)))

le-times-to-le-div2 : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> (X--1-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times m-v q-v)) -> matita-arithmetics-nat.le (div n-v q-v) m-v
le-times-to-le-div2 = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posq-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O q-v) -> λ (Hle-v : matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times m-v q-v)) -> matita-arithmetics-nat.le-times-to-le q-v (div n-v q-v) m-v posq-v (matita-arithmetics-nat.le-plus-to-le (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.times q-v m-v) (matita-arithmetics-nat.le-plus-a (mod n-v q-v) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.times q-v m-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.times q-v m-v)) Hle-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times q-v m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.le n-v X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.times m-v q-v))) (matita-arithmetics-nat.times q-v m-v) (matita-arithmetics-nat.commutative-times q-v m-v)) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v q-v))) (div-mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)))))))

lt-times-to-lt-div : (m-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v)) -> matita-arithmetics-nat.lt (div n-v q-v) m-v
lt-times-to-lt-div = λ (m-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (Hlt-v : matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v)) -> matita-arithmetics-nat.lt-times-n-to-lt-l q-v (div n-v q-v) m-v (matita-arithmetics-nat.lt-plus-to-lt-l (mod n-v q-v) (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.times m-v q-v) (matita-arithmetics-nat.lt-to-le-to-lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)) (matita-arithmetics-nat.times m-v q-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v q-v) (mod n-v q-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div n-v q-v) q-v) (mod n-v q-v)) (matita-arithmetics-nat.times m-v q-v)) Hlt-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times q-v (div n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus X---v (mod n-v q-v)) (matita-arithmetics-nat.times m-v q-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times m-v q-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times m-v q-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt n-v (matita-arithmetics-nat.times m-v q-v))) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v q-v) q-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v q-v))) (div-mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v)) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v)) (matita-arithmetics-nat.plus (mod n-v q-v) (matita-arithmetics-nat.times q-v (div n-v q-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times q-v (div n-v q-v)) (mod n-v q-v))) (matita-arithmetics-nat.times (div n-v q-v) q-v) (matita-arithmetics-nat.commutative-times (div n-v q-v) q-v))) (matita-arithmetics-nat.le-plus-n-r (mod n-v q-v) (matita-arithmetics-nat.times m-v q-v))))

le-div-S-S-div : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.le (div (matita-arithmetics-nat.S n-v) m-v) (matita-arithmetics-nat.S (div n-v m-v))
le-div-S-S-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> le-times-to-le-div2 (matita-arithmetics-nat.S (div n-v m-v)) (matita-arithmetics-nat.S n-v) m-v posm-v (lt-div-S n-v m-v posm-v)

le-times-div-div-times : (a-v : matita-arithmetics-nat.nat) -> (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.le (matita-arithmetics-nat.times a-v (div n-v m-v)) (div (matita-arithmetics-nat.times a-v n-v) m-v)
le-times-div-div-times = λ (a-v : matita-arithmetics-nat.nat) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> le-times-to-le-div (matita-arithmetics-nat.times a-v n-v) m-v (matita-arithmetics-nat.times a-v (div n-v m-v)) posm-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v (div n-v m-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (mod n-v m-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v (div n-v m-v))))) (matita-arithmetics-nat.le (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v (div n-v m-v))) (matita-arithmetics-nat.times a-v n-v)) (matita-arithmetics-nat.le-plus-n (matita-arithmetics-nat.times a-v (mod n-v m-v)) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v (div n-v m-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (mod n-v m-v)) X---v)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.times a-v n-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v))) X---v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.times a-v n-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.times a-v X---v)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.times a-v n-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.times a-v n-v))) (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v m-v) m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat n-v (matita-arithmetics-nat.plus X---v (mod n-v m-v))) (div-mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v)) (matita-arithmetics-nat.plus (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times m-v (div n-v m-v)) (mod n-v m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times a-v (mod n-v m-v)) (matita-arithmetics-nat.times a-v (matita-arithmetics-nat.times m-v (div n-v m-v)))) (matita-arithmetics-nat.distributive-times-plus a-v (mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v)))) (matita-arithmetics-nat.times m-v (matita-arithmetics-nat.times a-v (div n-v m-v))) (matita-arithmetics-nat.times-times m-v a-v (div n-v m-v))))

monotonic-div : (n-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> matita-basics-relations.monotonic lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.le (λ (m-v : matita-arithmetics-nat.nat) -> div m-v n-v)
monotonic-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (leab-v : matita-arithmetics-nat.le a-v b-v) -> le-times-to-le-div b-v n-v (div a-v n-v) posn-v (matita-arithmetics-nat.le-plus-b (mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v)) b-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le a-v b-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (div a-v n-v)) (mod a-v n-v)) b-v) leab-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le a-v b-v) (matita-arithmetics-nat.le X---v b-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v b-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v))) b-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.plus (mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v))) b-v)) a-v (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (div a-v n-v)) (mod a-v n-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div a-v n-v) n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v (mod a-v n-v))) (div-mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v)) (matita-arithmetics-nat.commutative-times (div a-v n-v) n-v)) (matita-arithmetics-nat.plus (mod a-v n-v) (matita-arithmetics-nat.times n-v (div a-v n-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (div a-v n-v)) (mod a-v n-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (div a-v n-v)) (mod a-v n-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (div a-v n-v)) (mod a-v n-v)))))

pos-div : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod n-v m-v) matita-arithmetics-nat.O) -> matita-arithmetics-nat.lt matita-arithmetics-nat.O (div n-v m-v)
pos-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (mod0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod n-v m-v) matita-arithmetics-nat.O) -> matita-arithmetics-nat.lt-times-n-to-lt-l m-v matita-arithmetics-nat.O (div n-v m-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.times (div n-v m-v) m-v)) posn-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times (div n-v m-v) m-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times (div n-v m-v) m-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div n-v m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O X---v) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times m-v (div n-v m-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times m-v (div n-v m-v)))) n-v (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div n-v m-v)) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (mod n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.minus n-v X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div n-v m-v) m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus n-v (mod n-v m-v))) (eq-times-div-minus-mod n-v m-v) (matita-arithmetics-nat.times m-v (div n-v m-v)) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v)) matita-arithmetics-nat.O mod0-v) n-v (matita-arithmetics-nat.minus-n-O n-v))) (matita-arithmetics-nat.times (div n-v m-v) m-v) (matita-arithmetics-nat.commutative-times (div n-v m-v) m-v)) (matita-arithmetics-nat.times m-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O m-v)) (matita-arithmetics-nat.times matita-arithmetics-nat.O m-v) (matita-arithmetics-nat.commutative-times matita-arithmetics-nat.O m-v)))

let-clause-1034 : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> (x2515-v : matita-arithmetics-nat.nat) -> (x2516-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2515-v (matita-arithmetics-nat.plus (mod x2515-v x2516-v) (matita-arithmetics-nat.times x2516-v (div x2515-v x2516-v)))
let-clause-1034 = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> λ (x2515-v : matita-arithmetics-nat.nat) -> λ (x2516-v : matita-arithmetics-nat.nat) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times x2516-v (div x2515-v x2516-v)) (mod x2515-v x2516-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2515-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div x2515-v x2516-v) x2516-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x2515-v (matita-arithmetics-nat.plus X---v (mod x2515-v x2516-v))) (div-mod x2515-v x2516-v) (matita-arithmetics-nat.times x2516-v (div x2515-v x2516-v)) (matita-arithmetics-nat.commutative-times (div x2515-v x2516-v) x2516-v)) (matita-arithmetics-nat.plus (mod x2515-v x2516-v) (matita-arithmetics-nat.times x2516-v (div x2515-v x2516-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times x2516-v (div x2515-v x2516-v)) (mod x2515-v x2516-v))

eq-div-div-div-times : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v n-v) m-v) (div q-v (matita-arithmetics-nat.times n-v m-v))
eq-div-div-div-times = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> div-mod-spec-to-eq q-v (matita-arithmetics-nat.times n-v m-v) (div (div q-v n-v) m-v) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (div q-v (matita-arithmetics-nat.times n-v m-v)) (mod q-v (matita-arithmetics-nat.times n-v m-v)) (div-mod-spec-intro q-v (matita-arithmetics-nat.times n-v m-v) (div (div q-v n-v) m-v) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.lt-to-le-to-lt (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S (mod (div q-v n-v) m-v)))) (matita-arithmetics-nat.monotonic-lt-plus-l (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)) (mod q-v n-v) n-v (lt-mod-m-m q-v n-v posn-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))))) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.times-n-Sm n-v (mod (div q-v n-v) m-v)))) (matita-arithmetics-nat.monotonic-le-times-r n-v (matita-arithmetics-nat.S (mod (div q-v n-v) m-v)) m-v (lt-mod-m-m (div q-v n-v) m-v posm-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times (div (div q-v n-v) m-v) m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v X---v) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v X---v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.plus (mod q-v n-v) X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.plus (mod (div q-v n-v) m-v) (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.plus (mod q-v n-v) X---v)) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (div q-v n-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v X---v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat q-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat q-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat q-v) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (div q-v n-v))) (let-clause-1034 n-v m-v q-v posn-v posm-v q-v n-v)) (matita-arithmetics-nat.plus (mod (div q-v n-v) m-v) (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (let-clause-1034 n-v m-v q-v posn-v posm-v (div q-v n-v) m-v)) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)))) (matita-arithmetics-nat.distributive-times-plus n-v (mod (div q-v n-v) m-v) (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)))) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) X---v) (matita-arithmetics-nat.assoc-plus1 (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)) (mod q-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v)))) (matita-arithmetics-nat.plus (mod q-v n-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v)))) (matita-arithmetics-nat.associative-plus (mod q-v n-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.times m-v (div (div q-v n-v) m-v))) (matita-arithmetics-nat.times n-v (mod (div q-v n-v) m-v))))) (matita-arithmetics-nat.times (div (div q-v n-v) m-v) m-v) (matita-arithmetics-nat.commutative-times (div (div q-v n-v) m-v) m-v)) (matita-arithmetics-nat.times (div (div q-v n-v) m-v) (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.times-times (div (div q-v n-v) m-v) n-v m-v))) (div-mod-spec-div-mod q-v (matita-arithmetics-nat.times n-v m-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O n-v matita-arithmetics-nat.O m-v posn-v posm-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times n-v m-v)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v m-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v m-v))) (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (matita-arithmetics-nat.times-O-n matita-arithmetics-nat.O))))

eq-div-div-div-div : (n-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (q-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v n-v) m-v) (div (div q-v m-v) n-v)
eq-div-div-div-div = λ (n-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-basics-logic.trans-eq lzero matita-arithmetics-nat.nat (div (div q-v n-v) m-v) (div q-v (matita-arithmetics-nat.times n-v m-v)) (div (div q-v m-v) n-v) (eq-div-div-div-times n-v m-v q-v posn-v posm-v) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (div (div q-v m-v) n-v) (div q-v (matita-arithmetics-nat.times n-v m-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v m-v) n-v) (div q-v (matita-arithmetics-nat.times m-v n-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v m-v) n-v) (div q-v (matita-arithmetics-nat.times n-v m-v))) (eq-div-div-div-times m-v n-v q-v posm-v posn-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v m-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v m-v) n-v) (div q-v X---v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v m-v) n-v) (div q-v (matita-arithmetics-nat.times n-v m-v)))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div q-v m-v) n-v) (div q-v (matita-arithmetics-nat.times n-v m-v)))) (matita-arithmetics-nat.times m-v n-v) (matita-arithmetics-nat.commutative-times m-v n-v))))

lt-to-le-times-to-lt-S-to-div : (a-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> (X--1-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) -> (X--2-v : matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S c-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div a-v b-v) c-v
lt-to-le-times-to-lt-S-to-div = λ (a-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (posb-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> λ (lea-v : matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) -> λ (lta-v : matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S c-v))) -> div-mod-spec-to-eq a-v b-v (div a-v b-v) (mod a-v b-v) c-v (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times b-v c-v)) (div-mod-spec-div-mod a-v b-v posb-v) (div-mod-spec-intro a-v b-v c-v (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.lt-plus-to-minus a-v (matita-arithmetics-nat.times b-v c-v) b-v lea-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S c-v))) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v c-v))) lta-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v c-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v X---v) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v c-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v X---v)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times b-v c-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times c-v b-v))) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v X---v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt a-v (matita-arithmetics-nat.plus b-v (matita-arithmetics-nat.times c-v b-v)))) (matita-arithmetics-nat.times b-v c-v) (matita-arithmetics-nat.commutative-times b-v c-v)) (matita-arithmetics-nat.times b-v c-v) (matita-arithmetics-nat.commutative-times b-v c-v)) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.S c-v)) (matita-arithmetics-nat.times-n-Sm b-v c-v)))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times b-v c-v))) a-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times b-v c-v))) a-v) (matita-arithmetics-nat.plus-minus (matita-arithmetics-nat.times c-v b-v) a-v (matita-arithmetics-nat.times c-v b-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.times b-v c-v) a-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times c-v b-v) a-v) lea-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v a-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.times c-v b-v) a-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.times c-v b-v) a-v)) (matita-arithmetics-nat.times b-v c-v) (matita-arithmetics-nat.commutative-times b-v c-v)))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v X---v)) a-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v))) a-v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v))) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v))) a-v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v))) a-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.minus-plus-m-m a-v (matita-arithmetics-nat.times c-v b-v))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.minus a-v (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.times c-v b-v))) (matita-arithmetics-nat.times b-v c-v) (matita-arithmetics-nat.commutative-times b-v c-v)))))

div-times-times : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div a-v b-v) (div (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v))
div-times-times = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (posc-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> λ (posb-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v b-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times c-v b-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div a-v b-v) (div (matita-arithmetics-nat.times a-v c-v) x-v)) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (div (div (matita-arithmetics-nat.times a-v c-v) c-v) b-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div (div (matita-arithmetics-nat.times a-v c-v) c-v) b-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div a-v b-v) x-1-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat a-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v a-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (div a-v b-v) (div x-v b-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (div a-v b-v)) (div (matita-arithmetics-nat.times a-v c-v) c-v) (div-times a-v c-v posc-v)) (div (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times c-v b-v)) (eq-div-div-div-times c-v b-v (matita-arithmetics-nat.times a-v c-v) posc-v posb-v)) (matita-arithmetics-nat.times b-v c-v) (matita-arithmetics-nat.commutative-times b-v c-v)

times-mod : (a-v : matita-arithmetics-nat.nat) -> (b-v : matita-arithmetics-nat.nat) -> (c-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (mod (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.times c-v (mod a-v b-v))
times-mod = λ (a-v : matita-arithmetics-nat.nat) -> λ (b-v : matita-arithmetics-nat.nat) -> λ (c-v : matita-arithmetics-nat.nat) -> λ (posc-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O c-v) -> λ (posb-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O b-v) -> div-mod-spec-to-eq2 (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v) (div a-v b-v) (mod (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v)) (div a-v b-v) (matita-arithmetics-nat.times c-v (mod a-v b-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (div (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (div (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v))) -> div-mod-spec (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v) x-v (mod (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v))) (div-mod-spec-div-mod (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.lt-times matita-arithmetics-nat.O b-v matita-arithmetics-nat.O c-v posb-v posc-v) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt X---v (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times b-v c-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt matita-arithmetics-nat.O (matita-arithmetics-nat.times b-v c-v))) (matita-arithmetics-nat.times matita-arithmetics-nat.O matita-arithmetics-nat.O) (matita-arithmetics-nat.times-O-n matita-arithmetics-nat.O)))) (div a-v b-v) (div-times-times a-v b-v c-v posc-v posb-v)) (div-mod-spec-intro (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times b-v c-v) (div a-v b-v) (matita-arithmetics-nat.times c-v (mod a-v b-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.lt (matita-arithmetics-nat.times c-v (mod a-v b-v)) (matita-arithmetics-nat.times c-v b-v)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.times c-v (mod a-v b-v)) (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.monotonic-lt-times-r c-v posc-v (mod a-v b-v) b-v (lt-mod-m-m a-v b-v posb-v)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v c-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.times c-v (mod a-v b-v)) X---v) (matita-arithmetics-nat.lt (matita-arithmetics-nat.times c-v (mod a-v b-v)) (matita-arithmetics-nat.times b-v c-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.lt (matita-arithmetics-nat.times c-v (mod a-v b-v)) (matita-arithmetics-nat.times b-v c-v))) (matita-arithmetics-nat.times c-v b-v) (matita-arithmetics-nat.commutative-times c-v b-v))) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) c-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div a-v b-v) (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.times c-v (mod a-v b-v)))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat (λ (x-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.times x-v c-v) a-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat a-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat a-v) (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times (div a-v b-v) b-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat a-v (matita-arithmetics-nat.plus X---v (mod a-v b-v))) (div-mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v)) (matita-arithmetics-nat.commutative-times (div a-v b-v) b-v)) (matita-arithmetics-nat.plus (mod a-v b-v) (matita-arithmetics-nat.times b-v (div a-v b-v))) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (matita-arithmetics-nat.commutative-plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times (div a-v b-v) (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.times c-v (mod a-v b-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.times (div a-v b-v) c-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.times c-v (mod a-v b-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v (div a-v b-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v X---v) (matita-arithmetics-nat.times c-v (mod a-v b-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.times c-v (div a-v b-v))) (matita-arithmetics-nat.times c-v (mod a-v b-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) X---v) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.times c-v (div a-v b-v))) (matita-arithmetics-nat.times c-v (mod a-v b-v))))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times a-v c-v) (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.times c-v (div a-v b-v))) (matita-arithmetics-nat.times c-v (mod a-v b-v))))) (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.times b-v (div a-v b-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times c-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v))) (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.times c-v (mod a-v b-v)))) (matita-arithmetics-nat.distributive-times-plus c-v (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) (matita-arithmetics-nat.times b-v (matita-arithmetics-nat.times c-v (div a-v b-v))) (matita-arithmetics-nat.times-times c-v b-v (div a-v b-v)))) (matita-arithmetics-nat.times (div a-v b-v) c-v) (matita-arithmetics-nat.commutative-times (div a-v b-v) c-v)) (matita-arithmetics-nat.times (div a-v b-v) (matita-arithmetics-nat.times b-v c-v)) (matita-arithmetics-nat.times-times (div a-v b-v) b-v c-v)) (matita-arithmetics-nat.times (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v)) c-v) (matita-arithmetics-nat.commutative-times c-v (matita-arithmetics-nat.plus (matita-arithmetics-nat.times b-v (div a-v b-v)) (mod a-v b-v))))))

le-div-times-m : (a-v : matita-arithmetics-nat.nat) -> (i-v : matita-arithmetics-nat.nat) -> (m-v : matita-arithmetics-nat.nat) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.le (div (matita-arithmetics-nat.times a-v (div m-v i-v)) m-v) (div a-v i-v)
le-div-times-m = λ (a-v : matita-arithmetics-nat.nat) -> λ (i-v : matita-arithmetics-nat.nat) -> λ (m-v : matita-arithmetics-nat.nat) -> λ (posi-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O i-v) -> λ (posm-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O m-v) -> matita-arithmetics-nat.transitive-le (div (matita-arithmetics-nat.times a-v (div m-v i-v)) m-v) (div (div (matita-arithmetics-nat.times a-v m-v) i-v) m-v) (div a-v i-v) (monotonic-div m-v posm-v (matita-arithmetics-nat.times a-v (div m-v i-v)) (div (matita-arithmetics-nat.times a-v m-v) i-v) (le-times-div-div-times a-v m-v i-v posi-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (div (div (matita-arithmetics-nat.times a-v m-v) m-v) i-v) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (div (div (matita-arithmetics-nat.times a-v m-v) m-v) i-v)) -> matita-arithmetics-nat.le x-v (div a-v i-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat a-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v a-v) -> matita-arithmetics-nat.le (div x-v i-v) (div a-v i-v)) (matita-arithmetics-nat.le-n (div a-v i-v)) (div (matita-arithmetics-nat.times a-v m-v) m-v) (div-times a-v m-v posm-v)) (div (div (matita-arithmetics-nat.times a-v m-v) i-v) m-v) (eq-div-div-div-div i-v m-v (matita-arithmetics-nat.times a-v m-v) posi-v posm-v))



