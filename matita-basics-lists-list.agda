
open import Agda.Primitive

import matita-arithmetics-nat
import matita-basics-bool
import matita-basics-relations
import matita-basics-types
import matita-basics-logic

data list (l1-v : Level) (A-v : Set l1-v) : Set l1-v where
  nil' : list l1-v A-v
  cons' : (X---v : A-v) -> (X--1-v : list l1-v A-v) -> list l1-v A-v

nil : (l1-v : Level) -> (A-v : Set l1-v) -> list l1-v A-v
nil _ _ = nil'

cons : (l4-v : Level) -> (A-v : Set l4-v) -> (X---v : A-v) -> (X--1-v : list l4-v A-v) -> list l4-v A-v
cons _ _ = cons'

match-list : (l8-v : Level) -> (X-A-v : Set l8-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : list l8-v X-A-v) -> Set return-sort-v) -> (case-nil-v : return-type-v (nil l8-v X-A-v)) -> (case-cons-v : (X---v : X-A-v) -> (X--1-v : list l8-v X-A-v) -> return-type-v (cons l8-v X-A-v X---v X--1-v)) -> (z-v : list l8-v X-A-v) -> return-type-v z-v
match-list _ _ _ _ casenil casecons nil' = casenil
match-list _ _ _ _ casenil casecons (cons' x1 x2) = casecons x1 x2

list-ind : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-716-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-718-v : X-A-v) -> (x-717-v : list l13-v X-A-v) -> (X-x-720-v : Q--v x-717-v) -> Q--v (cons l13-v X-A-v x-718-v x-717-v)) -> (x-716-v : list l13-v X-A-v) -> Q--v x-716-v
list-ind _ _ _ _ casenil casecons nil' = casenil
list-ind A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)

list-rect-Type5 : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-721-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-723-v : X-A-v) -> (x-722-v : list l13-v X-A-v) -> (X-x-725-v : Q--v x-722-v) -> Q--v (cons l13-v X-A-v x-723-v x-722-v)) -> (x-721-v : list l13-v X-A-v) -> Q--v x-721-v
list-rect-Type5 _ _ _ _ casenil casecons nil' = casenil
list-rect-Type5 A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)

list-rect-Type4 : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-721-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-723-v : X-A-v) -> (x-722-v : list l13-v X-A-v) -> (X-x-725-v : Q--v x-722-v) -> Q--v (cons l13-v X-A-v x-723-v x-722-v)) -> (x-721-v : list l13-v X-A-v) -> Q--v x-721-v
list-rect-Type4 _ _ _ _ casenil casecons nil' = casenil
list-rect-Type4 A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)

list-rect-Type3 : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-721-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-723-v : X-A-v) -> (x-722-v : list l13-v X-A-v) -> (X-x-725-v : Q--v x-722-v) -> Q--v (cons l13-v X-A-v x-723-v x-722-v)) -> (x-721-v : list l13-v X-A-v) -> Q--v x-721-v
list-rect-Type3 _ _ _ _ casenil casecons nil' = casenil
list-rect-Type3 A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)

list-rect-Type2 : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-721-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-723-v : X-A-v) -> (x-722-v : list l13-v X-A-v) -> (X-x-725-v : Q--v x-722-v) -> Q--v (cons l13-v X-A-v x-723-v x-722-v)) -> (x-721-v : list l13-v X-A-v) -> Q--v x-721-v
list-rect-Type2 _ _ _ _ casenil casecons nil' = casenil
list-rect-Type2 A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)

list-rect-Type1 : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-721-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-723-v : X-A-v) -> (x-722-v : list l13-v X-A-v) -> (X-x-725-v : Q--v x-722-v) -> Q--v (cons l13-v X-A-v x-723-v x-722-v)) -> (x-721-v : list l13-v X-A-v) -> Q--v x-721-v
list-rect-Type1 _ _ _ _ casenil casecons nil' = casenil
list-rect-Type1 A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)

list-rect-Type0 : (l13-v l10-v : Level) -> (X-A-v : Set l13-v) -> (Q--v : (X-x-721-v : list l13-v X-A-v) -> Set l10-v) -> (X-H-nil-v : Q--v (nil l13-v X-A-v)) -> (X-H-cons-v : (x-723-v : X-A-v) -> (x-722-v : list l13-v X-A-v) -> (X-x-725-v : Q--v x-722-v) -> Q--v (cons l13-v X-A-v x-723-v x-722-v)) -> (x-721-v : list l13-v X-A-v) -> Q--v x-721-v
list-rect-Type0 _ _ _ _ casenil casecons nil' = casenil
list-rect-Type0 A1 A2 A3 A4 casenil casecons (cons' x1 x2) = casecons x1 x2 (list-ind A1 A2 A3 A4 casenil casecons x2)


list-inv-ind : (l37-v l32-v : Level) -> (x1-v : Set l37-v) -> (Hterm-v : list l37-v x1-v) -> (P-v : (X-z1302-v : list l37-v x1-v) -> Set l32-v) -> (X-H1-v : (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> (X-H2-v : (x-718-v : x1-v) -> (x-717-v : list l37-v x1-v) -> (X-x-720-v : (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-717-v) -> P-v x-717-v) -> (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-718-v x-717-v)) -> P-v (cons l37-v x1-v x-718-v x-717-v)) -> P-v Hterm-v
list-inv-ind = λ (l37-v l32-v : Level) -> λ (x1-v : Set l37-v) -> λ (Hterm-v : list l37-v x1-v) -> λ (P-v : (X-z1302-v : list l37-v x1-v) -> Set l32-v) -> λ (H1-v : (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> λ (H2-v : (x-718-v : x1-v) -> (x-717-v : list l37-v x1-v) -> (X-x-720-v : (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-717-v) -> P-v x-717-v) -> (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-718-v x-717-v)) -> P-v (cons l37-v x1-v x-718-v x-717-v)) -> list-ind l37-v (l37-v ⊔ l32-v) x1-v (λ (X-x-716-v : list l37-v x1-v) -> (X-z1303-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v X-x-716-v) -> P-v X-x-716-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l37-v (list l37-v x1-v) Hterm-v)

list-inv-rect-Type4 : (l37-v l32-v : Level) -> (x1-v : Set l37-v) -> (Hterm-v : list l37-v x1-v) -> (P-v : (X-z1308-v : list l37-v x1-v) -> Set l32-v) -> (X-H1-v : (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> (X-H2-v : (x-723-v : x1-v) -> (x-722-v : list l37-v x1-v) -> (X-x-725-v : (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-722-v) -> P-v x-722-v) -> (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-723-v x-722-v)) -> P-v (cons l37-v x1-v x-723-v x-722-v)) -> P-v Hterm-v
list-inv-rect-Type4 = λ (l37-v l32-v : Level) -> λ (x1-v : Set l37-v) -> λ (Hterm-v : list l37-v x1-v) -> λ (P-v : (X-z1308-v : list l37-v x1-v) -> Set l32-v) -> λ (H1-v : (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> λ (H2-v : (x-723-v : x1-v) -> (x-722-v : list l37-v x1-v) -> (X-x-725-v : (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-722-v) -> P-v x-722-v) -> (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-723-v x-722-v)) -> P-v (cons l37-v x1-v x-723-v x-722-v)) -> list-rect-Type4 l37-v (l37-v ⊔ l32-v) x1-v (λ (X-x-721-v : list l37-v x1-v) -> (X-z1309-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v X-x-721-v) -> P-v X-x-721-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l37-v (list l37-v x1-v) Hterm-v)

list-inv-rect-Type3 : (l37-v l32-v : Level) -> (x1-v : Set l37-v) -> (Hterm-v : list l37-v x1-v) -> (P-v : (X-z1314-v : list l37-v x1-v) -> Set l32-v) -> (X-H1-v : (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> (X-H2-v : (x-733-v : x1-v) -> (x-732-v : list l37-v x1-v) -> (X-x-735-v : (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-732-v) -> P-v x-732-v) -> (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-733-v x-732-v)) -> P-v (cons l37-v x1-v x-733-v x-732-v)) -> P-v Hterm-v
list-inv-rect-Type3 = λ (l37-v l32-v : Level) -> λ (x1-v : Set l37-v) -> λ (Hterm-v : list l37-v x1-v) -> λ (P-v : (X-z1314-v : list l37-v x1-v) -> Set l32-v) -> λ (H1-v : (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> λ (H2-v : (x-733-v : x1-v) -> (x-732-v : list l37-v x1-v) -> (X-x-735-v : (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-732-v) -> P-v x-732-v) -> (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-733-v x-732-v)) -> P-v (cons l37-v x1-v x-733-v x-732-v)) -> list-rect-Type3 l37-v (l37-v ⊔ l32-v) x1-v (λ (X-x-731-v : list l37-v x1-v) -> (X-z1315-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v X-x-731-v) -> P-v X-x-731-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l37-v (list l37-v x1-v) Hterm-v)

list-inv-rect-Type2 : (l37-v l32-v : Level) -> (x1-v : Set l37-v) -> (Hterm-v : list l37-v x1-v) -> (P-v : (X-z1320-v : list l37-v x1-v) -> Set l32-v) -> (X-H1-v : (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> (X-H2-v : (x-738-v : x1-v) -> (x-737-v : list l37-v x1-v) -> (X-x-740-v : (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-737-v) -> P-v x-737-v) -> (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-738-v x-737-v)) -> P-v (cons l37-v x1-v x-738-v x-737-v)) -> P-v Hterm-v
list-inv-rect-Type2 = λ (l37-v l32-v : Level) -> λ (x1-v : Set l37-v) -> λ (Hterm-v : list l37-v x1-v) -> λ (P-v : (X-z1320-v : list l37-v x1-v) -> Set l32-v) -> λ (H1-v : (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> λ (H2-v : (x-738-v : x1-v) -> (x-737-v : list l37-v x1-v) -> (X-x-740-v : (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-737-v) -> P-v x-737-v) -> (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-738-v x-737-v)) -> P-v (cons l37-v x1-v x-738-v x-737-v)) -> list-rect-Type2 l37-v (l37-v ⊔ l32-v) x1-v (λ (X-x-736-v : list l37-v x1-v) -> (X-z1321-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v X-x-736-v) -> P-v X-x-736-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l37-v (list l37-v x1-v) Hterm-v)

list-inv-rect-Type1 : (l37-v l32-v : Level) -> (x1-v : Set l37-v) -> (Hterm-v : list l37-v x1-v) -> (P-v : (X-z1326-v : list l37-v x1-v) -> Set l32-v) -> (X-H1-v : (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> (X-H2-v : (x-743-v : x1-v) -> (x-742-v : list l37-v x1-v) -> (X-x-745-v : (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-742-v) -> P-v x-742-v) -> (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-743-v x-742-v)) -> P-v (cons l37-v x1-v x-743-v x-742-v)) -> P-v Hterm-v
list-inv-rect-Type1 = λ (l37-v l32-v : Level) -> λ (x1-v : Set l37-v) -> λ (Hterm-v : list l37-v x1-v) -> λ (P-v : (X-z1326-v : list l37-v x1-v) -> Set l32-v) -> λ (H1-v : (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> λ (H2-v : (x-743-v : x1-v) -> (x-742-v : list l37-v x1-v) -> (X-x-745-v : (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-742-v) -> P-v x-742-v) -> (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-743-v x-742-v)) -> P-v (cons l37-v x1-v x-743-v x-742-v)) -> list-rect-Type1 l37-v (l37-v ⊔ l32-v) x1-v (λ (X-x-741-v : list l37-v x1-v) -> (X-z1327-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v X-x-741-v) -> P-v X-x-741-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l37-v (list l37-v x1-v) Hterm-v)

list-inv-rect-Type0 : (l37-v l32-v : Level) -> (x1-v : Set l37-v) -> (Hterm-v : list l37-v x1-v) -> (P-v : (X-z1332-v : list l37-v x1-v) -> Set l32-v) -> (X-H1-v : (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> (X-H2-v : (x-748-v : x1-v) -> (x-747-v : list l37-v x1-v) -> (X-x-750-v : (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-747-v) -> P-v x-747-v) -> (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-748-v x-747-v)) -> P-v (cons l37-v x1-v x-748-v x-747-v)) -> P-v Hterm-v
list-inv-rect-Type0 = λ (l37-v l32-v : Level) -> λ (x1-v : Set l37-v) -> λ (Hterm-v : list l37-v x1-v) -> λ (P-v : (X-z1332-v : list l37-v x1-v) -> Set l32-v) -> λ (H1-v : (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (nil l37-v x1-v)) -> P-v (nil l37-v x1-v)) -> λ (H2-v : (x-748-v : x1-v) -> (x-747-v : list l37-v x1-v) -> (X-x-750-v : (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v x-747-v) -> P-v x-747-v) -> (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v (cons l37-v x1-v x-748-v x-747-v)) -> P-v (cons l37-v x1-v x-748-v x-747-v)) -> list-rect-Type0 l37-v (l37-v ⊔ l32-v) x1-v (λ (X-x-746-v : list l37-v x1-v) -> (X-z1333-v : matita-basics-logic.eq l37-v (list l37-v x1-v) Hterm-v X-x-746-v) -> P-v X-x-746-v) H1-v H2-v Hterm-v (matita-basics-logic.refl l37-v (list l37-v x1-v) Hterm-v)

list-discr : (l2l222-v l293-v : Level) -> (a1-v : Set ((lsuc lzero) ⊔ (lsuc l2l222-v))) -> (x-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (y-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (X-e-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) x-v y-v) -> match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) (match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) ((P-v : Set (l2l222-v ⊔ l293-v)) -> (X-z47-v : P-v) -> P-v) (λ (u0-v : a1-v) -> λ (u1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (P-v : Set (l2l222-v ⊔ l293-v)) -> P-v) y-v) (λ (t0-v : a1-v) -> λ (t1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) ((P-v : Set (l2l222-v ⊔ l293-v)) -> P-v) (λ (u0-v : a1-v) -> λ (u1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (P-v : Set l293-v) -> (X-z48-v : (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l2l222-v)) ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) y-v) x-v
list-discr = λ (l2l222-v l293-v : Level) -> λ (a1-v : Set ((lsuc lzero) ⊔ (lsuc l2l222-v))) -> λ (x-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> λ (y-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> λ (Deq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 ((lsuc lzero) ⊔ (lsuc l2l222-v)) ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v))) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) x-v (λ (x-13-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> λ (X-x-14-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) x-v x-13-v) -> match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) (match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) ((P-v : Set (l2l222-v ⊔ l293-v)) -> (X-z47-v : P-v) -> P-v) (λ (u0-v : a1-v) -> λ (u1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (P-v : Set (l2l222-v ⊔ l293-v)) -> P-v) x-13-v) (λ (t0-v : a1-v) -> λ (t1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) ((P-v : Set (l2l222-v ⊔ l293-v)) -> P-v) (λ (u0-v : a1-v) -> λ (u1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (P-v : Set l293-v) -> (X-z48-v : (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l2l222-v)) ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) x-13-v) x-v) (match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v))) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X-0-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) (match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X-0-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) ((P-v : Set (l2l222-v ⊔ l293-v)) -> (X-z47-v : P-v) -> P-v) (λ (u0-v : a1-v) -> λ (u1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (P-v : Set (l2l222-v ⊔ l293-v)) -> P-v) X---v) (λ (t0-v : a1-v) -> λ (t1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> match-list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l2l222-v)) ⊔ (lsuc (lsuc l293-v)))) (λ (X-0-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> Set ((lsuc lzero) ⊔ ((lsuc l2l222-v) ⊔ (lsuc l293-v)))) ((P-v : Set (l2l222-v ⊔ l293-v)) -> P-v) (λ (u0-v : a1-v) -> λ (u1-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> (P-v : Set l293-v) -> (X-z48-v : (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v) u0-v) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l2l222-v)) ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v t0-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) t1-v u0-v e0-v) u1-v) -> P-v) -> P-v) X---v) X---v) (λ (P-v : Set (lzero ⊔ (l2l222-v ⊔ l293-v))) -> λ (DH-v : P-v) -> DH-v) (λ (a0-v : a1-v) -> λ (a10-v : list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) -> λ (P-v : Set l293-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v) a0-v) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l2l222-v)) ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) a10-v a0-v e0-v) a10-v) -> P-v) -> DH-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v)) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l2l222-v)) (list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l2l222-v)) ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v (λ (x0-v : a1-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v) a10-v a0-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l2l222-v)) a1-v a0-v))))) x-v) y-v Deq-v

is-nil : (l12-v l13-v : Level) -> (A-v : Set l12-v) -> (X---v : list l12-v A-v) -> Set l13-v
is-nil = λ (l12-v l13-v : Level) -> λ (A-v : Set l12-v) -> λ (l-v : list l12-v A-v) -> match-list l12-v A-v ((lsuc lzero) ⊔ (lsuc l13-v)) (λ (X---v : list l12-v A-v) -> Set l13-v) (matita-basics-logic.True l13-v) (λ (hd-v : A-v) -> λ (tl-v : list l12-v A-v) -> matita-basics-logic.False l13-v) l-v

nil-cons : (l27-v : Level) -> (A-v : Set l27-v) -> (l-v : list l27-v A-v) -> (a-v : A-v) -> matita-basics-logic.Not l27-v (matita-basics-logic.eq l27-v (list l27-v A-v) (cons l27-v A-v a-v l-v) (nil l27-v A-v))
nil-cons = λ (l27-v : Level) -> λ (A-v : Set l27-v) -> λ (l-v : list l27-v A-v) -> λ (a-v : A-v) -> matita-basics-logic.nmk l27-v (matita-basics-logic.eq l27-v (list l27-v A-v) (cons l27-v A-v a-v l-v) (nil l27-v A-v)) (λ (Heq-v : matita-basics-logic.eq l27-v (list l27-v A-v) (cons l27-v A-v a-v l-v) (nil l27-v A-v)) -> matita-basics-logic.eq-ind-r l27-v l27-v (list l27-v A-v) (nil l27-v A-v) (λ (x-v : list l27-v A-v) -> λ (X---v : matita-basics-logic.eq l27-v (list l27-v A-v) x-v (nil l27-v A-v)) -> is-nil l27-v l27-v A-v x-v) (matita-basics-logic.I l27-v) (cons l27-v A-v a-v l-v) Heq-v)

append : (l5-v : Level) -> (H-v : Set l5-v) -> (X---v : list l5-v H-v) -> (X--1-v : list l5-v H-v) -> list l5-v H-v
append l12-v H-v nil' l2 = l2
append l12-v H-v (cons' x' l') l2 = cons l12-v H-v x' (append l12-v H-v l' l2)


hd : (l10-v : Level) -> (A-v : Set l10-v) -> (X-l-v : list l10-v A-v) -> (X-d-v : A-v) -> A-v
hd = λ (l10-v : Level) -> λ (A-v : Set l10-v) -> λ (l-v : list l10-v A-v) -> λ (d-v : A-v) -> match-list l10-v A-v l10-v (λ (X---v : list l10-v A-v) -> A-v) d-v (λ (a-v : A-v) -> λ (X---v : list l10-v A-v) -> a-v) l-v

tail : (l11-v : Level) -> (A-v : Set l11-v) -> (X-l-v : list l11-v A-v) -> list l11-v A-v
tail = λ (l11-v : Level) -> λ (A-v : Set l11-v) -> λ (l-v : list l11-v A-v) -> match-list l11-v A-v l11-v (λ (X---v : list l11-v A-v) -> list l11-v A-v) (nil l11-v A-v) (λ (hd-v : A-v) -> λ (tl-v : list l11-v A-v) -> tl-v) l-v

option-hd : (l12-v : Level) -> (A-v : Set l12-v) -> (X-l-v : list l12-v A-v) -> matita-basics-types.option l12-v A-v
option-hd = λ (l12-v : Level) -> λ (A-v : Set l12-v) -> λ (l-v : list l12-v A-v) -> match-list l12-v A-v l12-v (λ (X---v : list l12-v A-v) -> matita-basics-types.option l12-v A-v) (matita-basics-types.None l12-v A-v) (λ (a-v : A-v) -> λ (X---v : list l12-v A-v) -> matita-basics-types.Some l12-v A-v a-v) l-v

append-nil : (l35-v : Level) -> (A-v : Set l35-v) -> (l-v : list l35-v A-v) -> matita-basics-logic.eq l35-v (list l35-v A-v) (append l35-v A-v l-v (nil l35-v A-v)) l-v
append-nil = λ (l35-v : Level) -> λ (A-v : Set l35-v) -> λ (l-v : list l35-v A-v) -> list-ind l35-v l35-v A-v (λ (X-x-716-v : list l35-v A-v) -> matita-basics-logic.eq l35-v (list l35-v A-v) (append l35-v A-v X-x-716-v (nil l35-v A-v)) X-x-716-v) (matita-basics-logic.refl l35-v (list l35-v A-v) (nil l35-v A-v)) (λ (x-718-v : A-v) -> λ (x-717-v : list l35-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq l35-v (list l35-v A-v) (append l35-v A-v x-717-v (nil l35-v A-v)) x-717-v) -> matita-basics-logic.rewrite-r l35-v l35-v (list l35-v A-v) x-717-v (λ (X---v : list l35-v A-v) -> matita-basics-logic.eq l35-v (list l35-v A-v) (cons l35-v A-v x-718-v X---v) (cons l35-v A-v x-718-v x-717-v)) (matita-basics-logic.refl l35-v (list l35-v A-v) (cons l35-v A-v x-718-v x-717-v)) (append l35-v A-v x-717-v (nil l35-v A-v)) X-x-720-v) l-v

associative-append : (l53-v : Level) -> (A-v : Set l53-v) -> matita-basics-relations.associative l53-v (list l53-v A-v) (append l53-v A-v)
associative-append = λ (l53-v : Level) -> λ (A-v : Set l53-v) -> λ (l1-v : list l53-v A-v) -> λ (l2-v : list l53-v A-v) -> λ (l3-v : list l53-v A-v) -> list-ind l53-v l53-v A-v (λ (X-x-716-v : list l53-v A-v) -> matita-basics-logic.eq l53-v (list l53-v A-v) (append l53-v A-v (append l53-v A-v X-x-716-v l2-v) l3-v) (append l53-v A-v X-x-716-v (append l53-v A-v l2-v l3-v))) (matita-basics-logic.refl l53-v (list l53-v A-v) (append l53-v A-v l2-v l3-v)) (λ (x-718-v : A-v) -> λ (x-717-v : list l53-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq l53-v (list l53-v A-v) (append l53-v A-v (append l53-v A-v x-717-v l2-v) l3-v) (append l53-v A-v x-717-v (append l53-v A-v l2-v l3-v))) -> matita-basics-logic.rewrite-r l53-v l53-v (list l53-v A-v) (append l53-v A-v x-717-v (append l53-v A-v l2-v l3-v)) (λ (X---v : list l53-v A-v) -> matita-basics-logic.eq l53-v (list l53-v A-v) (cons l53-v A-v x-718-v X---v) (cons l53-v A-v x-718-v (append l53-v A-v x-717-v (append l53-v A-v l2-v l3-v)))) (matita-basics-logic.refl l53-v (list l53-v A-v) (cons l53-v A-v x-718-v (append l53-v A-v x-717-v (append l53-v A-v l2-v l3-v)))) (append l53-v A-v (append l53-v A-v x-717-v l2-v) l3-v) X-x-720-v) l1-v

append-cons : (l36-v : Level) -> (A-v : Set l36-v) -> (a-v : A-v) -> (l-v : list l36-v A-v) -> (l1-v : list l36-v A-v) -> matita-basics-logic.eq l36-v (list l36-v A-v) (append l36-v A-v l-v (cons l36-v A-v a-v l1-v)) (append l36-v A-v (append l36-v A-v l-v (cons l36-v A-v a-v (nil l36-v A-v))) l1-v)
append-cons = λ (l36-v : Level) -> λ (A-v : Set l36-v) -> λ (a-v : A-v) -> λ (l-v : list l36-v A-v) -> λ (l1-v : list l36-v A-v) -> matita-basics-logic.eq-ind-r l36-v l36-v (list l36-v A-v) (append l36-v A-v l-v (append l36-v A-v (cons l36-v A-v a-v (nil l36-v A-v)) l1-v)) (λ (x-v : list l36-v A-v) -> λ (X---v : matita-basics-logic.eq l36-v (list l36-v A-v) x-v (append l36-v A-v l-v (append l36-v A-v (cons l36-v A-v a-v (nil l36-v A-v)) l1-v))) -> matita-basics-logic.eq l36-v (list l36-v A-v) (append l36-v A-v l-v (cons l36-v A-v a-v l1-v)) x-v) (matita-basics-logic.refl l36-v (list l36-v A-v) (append l36-v A-v l-v (cons l36-v A-v a-v l1-v))) (append l36-v A-v (append l36-v A-v l-v (cons l36-v A-v a-v (nil l36-v A-v))) l1-v) (associative-append l36-v A-v l-v (cons l36-v A-v a-v (nil l36-v A-v)) l1-v)

nil-append-elim : (l73-v l61-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l73-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> (P-v : (X---v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> (X--1-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> Set (lzero ⊔ (l73-v ⊔ l61-v))) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l73-v)) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l73-v)) A-v l1-v l2-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> (X--1-v : P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> P-v l1-v l2-v
nil-append-elim = λ (l73-v l61-v : Level) -> λ (A-v : Set ((lsuc lzero) ⊔ (lsuc l73-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> λ (P-v : (X---v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> (X--1-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> Set (lzero ⊔ (l73-v ⊔ l61-v))) -> match-list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ l61-v)) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l73-v)) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l73-v)) A-v X---v l2-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> (X--2-v : P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> P-v X---v l2-v) (λ (auto-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l73-v)) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> λ (auto'-v : P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> matita-basics-logic.eq-coerc (l73-v ⊔ l61-v) (P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) (P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v) auto'-v (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l73-v)) ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (Set (l73-v ⊔ l61-v)) (P-v X---v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) (P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v)) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l73-v)) ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (Set (l73-v ⊔ l61-v)) (P-v l2-v X---v) (P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v)) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l73-v)) ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (Set (l73-v ⊔ l61-v)) (P-v l2-v l2-v) (P-v X---v l2-v)) (matita-basics-logic.refl ((lsuc lzero) ⊔ ((lsuc l73-v) ⊔ (lsuc l61-v))) (Set (l73-v ⊔ l61-v)) (P-v l2-v l2-v)) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) auto-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) auto-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) auto-v)) (λ (a-v : A-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) -> λ (heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l73-v)) (list ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l73-v)) A-v a-v (append ((lsuc lzero) ⊔ (lsuc l73-v)) A-v l3-v l2-v)) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> list-discr l73-v l61-v A-v (cons ((lsuc lzero) ⊔ (lsuc l73-v)) A-v a-v (append ((lsuc lzero) ⊔ (lsuc l73-v)) A-v l3-v l2-v)) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) heq-v ((X---v : P-v (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l73-v)) A-v)) -> P-v (cons ((lsuc lzero) ⊔ (lsuc l73-v)) A-v a-v l3-v) l2-v)) l1-v

nil-to-nil : (l82-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l82-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) l1-v (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) l2-v (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v))
nil-to-nil = λ (l82-v : Level) -> λ (A-v : Set ((lsuc lzero) ⊔ (lsuc l82-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> λ (isnil-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) -> nil-append-elim l82-v ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> λ (X-0-v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) X---v (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) X-0-v (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v))) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v)) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) isnil-v) (matita-basics-logic.conj ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) X---v (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v)) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) isnil-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) isnil-v) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) X---v (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v)) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l82-v)) ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v) X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l82-v)) (list ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l82-v)) A-v l1-v l2-v)) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) isnil-v) (nil ((lsuc lzero) ⊔ (lsuc l82-v)) A-v) isnil-v))

cons-injective-l : (l94-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l94-v))) -> (a1-v : A-v) -> (a2-v : A-v) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a1-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a1-v a2-v
cons-injective-l = λ (l94-v : Level) -> λ (A-v : Set ((lsuc lzero) ⊔ (lsuc l94-v))) -> λ (a1-v : A-v) -> λ (a2-v : A-v) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a1-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> list-discr l94-v ((lsuc lzero) ⊔ (lsuc l94-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a1-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v) Heq-v (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a1-v a2-v) (λ (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a1-v) a2-v) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l94-v)) ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v (λ (x-v : A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v x-v a2-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v x-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l94-v)) ((lsuc lzero) ⊔ (lsuc l94-v)) A-v x-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v x-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) l1-v a2-v X---v) l2-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v x-v a2-v) (λ (Heq0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> λ (e00-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l94-v)) ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) l1-v a2-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v)) l2-v) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l94-v)) ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) l2-v (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) x-v l2-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v x-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v a2-v) (λ (Heq1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> matita-basics-logic.streicherK ((lsuc lzero) ⊔ (lsuc l94-v)) ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v) (λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) (list ((lsuc lzero) ⊔ (lsuc l94-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v) (cons ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v l2-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v a2-v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l94-v)) A-v a2-v) Heq1-v) l1-v e00-v Heq0-v) a1-v e0-v Heq-v)

cons-injective-r : (l99-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l99-v))) -> (a1-v : A-v) -> (a2-v : A-v) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a1-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l1-v l2-v
cons-injective-r = λ (l99-v : Level) -> λ (A-v : Set ((lsuc lzero) ⊔ (lsuc l99-v))) -> λ (a1-v : A-v) -> λ (a2-v : A-v) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a1-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> list-discr l99-v ((lsuc lzero) ⊔ (lsuc l99-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a1-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v) Heq-v (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l1-v l2-v) (λ (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) A-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a1-v) a2-v) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l99-v)) ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v (λ (x-v : A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) A-v x-v a2-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v x-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l99-v)) ((lsuc lzero) ⊔ (lsuc l99-v)) A-v x-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) A-v x-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l1-v a2-v X---v) l2-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l1-v l2-v) (λ (Heq0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l1-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> λ (e00-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l99-v)) ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v (λ (x0-v : A-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l1-v a2-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v)) l2-v) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l99-v)) ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l2-v (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) x-v l2-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v x-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) x-v l2-v) (λ (Heq1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> matita-basics-logic.streicherK ((lsuc lzero) ⊔ (lsuc l99-v)) ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v) (λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v) (cons ((lsuc lzero) ⊔ (lsuc l99-v)) A-v a2-v l2-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l2-v l2-v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l99-v)) (list ((lsuc lzero) ⊔ (lsuc l99-v)) A-v) l2-v) Heq1-v) l1-v e00-v Heq0-v) a1-v e0-v Heq-v)

option-cons : (l11-v : Level) -> (sig-v : Set l11-v) -> (X-c-v : matita-basics-types.option l11-v sig-v) -> (X-l-v : list l11-v sig-v) -> list l11-v sig-v
option-cons = λ (l11-v : Level) -> λ (sig-v : Set l11-v) -> λ (c-v : matita-basics-types.option l11-v sig-v) -> λ (l-v : list l11-v sig-v) -> matita-basics-types.match-option l11-v sig-v l11-v (λ (X---v : matita-basics-types.option l11-v sig-v) -> list l11-v sig-v) l-v (λ (c0-v : sig-v) -> cons l11-v sig-v c0-v l-v) c-v

opt-cons-tail-expand : (l20-v : Level) -> (A-v : Set l20-v) -> (l-v : list l20-v A-v) -> matita-basics-logic.eq l20-v (list l20-v A-v) l-v (option-cons l20-v A-v (option-hd l20-v A-v l-v) (tail l20-v A-v l-v))
opt-cons-tail-expand = λ (l20-v : Level) -> λ (A-v : Set l20-v) -> λ (X-clearme-v : list l20-v A-v) -> match-list l20-v A-v l20-v (λ (X---v : list l20-v A-v) -> matita-basics-logic.eq l20-v (list l20-v A-v) X---v (option-cons l20-v A-v (option-hd l20-v A-v X---v) (tail l20-v A-v X---v))) (matita-basics-logic.refl l20-v (list l20-v A-v) (nil l20-v A-v)) (λ (auto-v : A-v) -> λ (auto'-v : list l20-v A-v) -> matita-basics-logic.refl l20-v (list l20-v A-v) (cons l20-v A-v auto-v auto'-v)) X-clearme-v

compare-append : (l516-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l516-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l1-v l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l4-v)) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))))
compare-append = λ (l516-v : Level) -> λ (A-v : Set ((lsuc lzero) ⊔ (lsuc l516-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> list-ind ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (λ (X-x-716-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v X-x-716-v l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l4-v)) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) X-x-716-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v X-x-716-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))))) (λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l4-v)) -> matita-basics-logic.ex-intro ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)))) l3-v (matita-basics-logic.or-intror ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l3-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l4-v))) (matita-basics-logic.conj ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l4-v)) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v) Heq-v))) (λ (a1-v : A-v) -> λ (tl1-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (Hind-v : (l2-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l4-v)) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))))) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> match-list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v ((lsuc lzero) ⊔ (lsuc l516-v)) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v X---v l4-v)) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v X---v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) X---v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))))) (λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v)) -> matita-basics-logic.ex-intro ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)))) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (matita-basics-logic.or-introl ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v))) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v))) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l4-v))) (matita-basics-logic.conj ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (nil ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v))) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l2-v)) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v)) (matita-basics-logic.sym-eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l2-v) l4-v Heq-v)))) (λ (a3-v : A-v) -> λ (tl3-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l2-v)) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l4-v))) -> matita-basics-logic.match-ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)))) ((lsuc lzero) ⊔ (lsuc l516-v)) (λ (X---v : matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))))) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))))) (λ (l-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (X-clearme-v : matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)))) -> matita-basics-logic.match-Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))) ((lsuc lzero) ⊔ (lsuc l516-v)) (λ (X---v : matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)))) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l0-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l4-v))))) (λ (X-clearme0-v : matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) -> matita-basics-logic.match-And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (λ (X---v : matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l0-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l4-v))))) (λ (Heq1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl1-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) -> λ (Heq2-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v)) -> matita-basics-logic.ex-intro ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l0-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l4-v)))) l-v (matita-basics-logic.or-introl ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))) (matita-basics-logic.conj ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v)) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v x-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l-v)) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v (λ (x-v : A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) A-v x-v a3-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v x-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v)) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l-v)) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l-v))) a1-v (cons-injective-l l516-v A-v a1-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l4-v) Heq-v)) tl1-v Heq1-v) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v) Heq2-v)))) X-clearme0-v) (λ (X-clearme0-v : matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))) -> matita-basics-logic.match-And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (λ (X---v : matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l0-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l4-v))))) (λ (Heq1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) tl3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) -> λ (Heq2-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)) -> matita-basics-logic.ex-intro ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (λ (l0-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.Or ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l0-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l0-v l4-v)))) l-v (matita-basics-logic.or-intror ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l4-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l2-v))) (matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v))) (matita-basics-logic.conj ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v tl3-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v)) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v x-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a1-v tl1-v) l-v)) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v (λ (x-v : A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) A-v x-v a3-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v)) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v x-v tl1-v) l-v)) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) (cons ((lsuc lzero) ⊔ (lsuc l516-v)) A-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l-v))) a1-v (cons-injective-l l516-v A-v a1-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l4-v) Heq-v)) tl3-v Heq1-v) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l516-v)) ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l516-v)) (list ((lsuc lzero) ⊔ (lsuc l516-v)) A-v) l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v l-v l4-v) Heq2-v)))) X-clearme0-v) X-clearme-v) (Hind-v l2-v tl3-v l4-v (cons-injective-r l516-v A-v a1-v a3-v (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl1-v l2-v) (append ((lsuc lzero) ⊔ (lsuc l516-v)) A-v tl3-v l4-v) Heq-v))) l3-v) l1-v

map : (l5-v l4-v : Level) -> (A-v : Set l5-v) -> (B-v : Set l4-v) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l5-v A-v) -> list l4-v B-v
map l5-v l0-v A-v B-v X-f-v nil' = nil l0-v B-v
map l5-v l0-v A-v B-v X-f-v (cons' x-v tl-v) = cons l0-v B-v (X-f-v x-v) (map l5-v l0-v A-v B-v X-f-v tl-v)
{-
postulate map-body : (l5-v l4-v : Level) -> (A-v : Set l5-v) -> (B-v : Set l4-v) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l5-v A-v) -> list l4-v B-v

-- postulate rewrite-rule-442 : (l5-v : Level) -> (l0-v : Level) -> (A-v : Set l5-v) -> (B-v : Set l0-v) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l5-v A-v) -> map l5-v l0-v A-v B-v X-f-v X-l-v ≡ filter-list l5-v A-v l0-v (λ (X-l-v : list l5-v A-v) -> list l0-v B-v) (map-body l5-v l0-v A-v B-v X-f-v) X-l-v


-- postulate rewrite-rule-443 : (l5-v : Level) -> (l0-v : Level) -> (A-v : Set l5-v) -> (B-v : Set l0-v) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l5-v A-v) -> map-body l5-v l0-v A-v B-v X-f-v X-l-v ≡ match-list l5-v A-v l0-v (λ (X---v : list l5-v A-v) -> list l0-v B-v) (nil l0-v B-v) (λ (x-v : A-v) -> λ (tl-v : list l5-v A-v) -> cons l0-v B-v (X-f-v x-v) (map l5-v l0-v A-v B-v X-f-v tl-v)) X-l-v
-}

map-append : (l78-v l77-v : Level) -> (A-v : Set l78-v) -> (B-v : Set l77-v) -> (f-v : (X---v : A-v) -> B-v) -> (l1-v : list l78-v A-v) -> (l2-v : list l78-v A-v) -> matita-basics-logic.eq l77-v (list l77-v B-v) (append l77-v B-v (map l78-v l77-v A-v B-v f-v l1-v) (map l78-v l77-v A-v B-v f-v l2-v)) (map l78-v l77-v A-v B-v f-v (append l78-v A-v l1-v l2-v))
map-append = λ (l78-v l77-v : Level) -> λ (A-v : Set l78-v) -> λ (B-v : Set l77-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (l1-v : list l78-v A-v) -> list-ind l78-v (l78-v ⊔ l77-v) A-v (λ (X-x-716-v : list l78-v A-v) -> (l2-v : list l78-v A-v) -> matita-basics-logic.eq l77-v (list l77-v B-v) (append l77-v B-v (map l78-v l77-v A-v B-v f-v X-x-716-v) (map l78-v l77-v A-v B-v f-v l2-v)) (map l78-v l77-v A-v B-v f-v (append l78-v A-v X-x-716-v l2-v))) (λ (l2-v : list l78-v A-v) -> matita-basics-logic.refl l77-v (list l77-v B-v) (append l77-v B-v (map l78-v l77-v A-v B-v f-v (nil l78-v A-v)) (map l78-v l77-v A-v B-v f-v l2-v))) (λ (h-v : A-v) -> λ (t-v : list l78-v A-v) -> λ (IH-v : (l2-v : list l78-v A-v) -> matita-basics-logic.eq l77-v (list l77-v B-v) (append l77-v B-v (map l78-v l77-v A-v B-v f-v t-v) (map l78-v l77-v A-v B-v f-v l2-v)) (map l78-v l77-v A-v B-v f-v (append l78-v A-v t-v l2-v))) -> λ (l2-v : list l78-v A-v) -> matita-basics-logic.rewrite-r l77-v l77-v (list l77-v B-v) (map l78-v l77-v A-v B-v f-v (append l78-v A-v t-v l2-v)) (λ (X---v : list l77-v B-v) -> matita-basics-logic.eq l77-v (list l77-v B-v) (cons l77-v B-v (f-v h-v) X---v) (cons l77-v B-v (f-v h-v) (map l78-v l77-v A-v B-v f-v (append l78-v A-v t-v l2-v)))) (matita-basics-logic.refl l77-v (list l77-v B-v) (cons l77-v B-v (f-v h-v) (map l78-v l77-v A-v B-v f-v (append l78-v A-v t-v l2-v)))) (append l77-v B-v (map l78-v l77-v A-v B-v f-v t-v) (map l78-v l77-v A-v B-v f-v l2-v)) (IH-v l2-v)) l1-v

foldr : (l6-v l5-v : Level) -> (A-v : Set l6-v) -> (B-v : Set l5-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : B-v) -> B-v) -> (X-b-v : B-v) -> (X-l-v : list l6-v A-v) -> B-v
foldr l4-v l0-v A-v B-v X-f-v X-b-v nil' = X-b-v
foldr l4-v l0-v A-v B-v X-f-v X-b-v (cons' a-v l) = X-f-v a-v (foldr l4-v l0-v A-v B-v X-f-v X-b-v l)


filter : (l13-v : Level) -> (T-v : Set l13-v) -> (X-p-v : (X---v : T-v) -> matita-basics-bool.bool) -> (X-l-v : list l13-v T-v) -> list l13-v T-v
filter = λ (l13-v : Level) -> λ (T-v : Set l13-v) -> λ (p-v : (X---v : T-v) -> matita-basics-bool.bool) -> foldr l13-v l13-v T-v (list l13-v T-v) (λ (x-v : T-v) -> λ (l0-v : list l13-v T-v) -> matita-basics-bool.match-bool l13-v (λ (X---v : matita-basics-bool.bool) -> list l13-v T-v) (cons l13-v T-v x-v l0-v) l0-v (p-v x-v)) (nil l13-v T-v)

compose : (l19-v l18-v l17-v : Level) -> (A-v : Set l19-v) -> (B-v : Set l18-v) -> (C-v : Set l17-v) -> (X-f-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> (X-l1-v : list l19-v A-v) -> (X-l2-v : list l18-v B-v) -> list l17-v C-v
compose = λ (l19-v l18-v l17-v : Level) -> λ (A-v : Set l19-v) -> λ (B-v : Set l18-v) -> λ (C-v : Set l17-v) -> λ (f-v : (X---v : A-v) -> (X--1-v : B-v) -> C-v) -> λ (l1-v : list l19-v A-v) -> λ (l2-v : list l18-v B-v) -> foldr l19-v l17-v A-v (list l17-v C-v) (λ (i-v : A-v) -> λ (acc-v : list l17-v C-v) -> append l17-v C-v (map l18-v l17-v B-v C-v (f-v i-v) l2-v) acc-v) (nil l17-v C-v) l1-v

filter-true : (l276-v : Level) -> (A-v : Set l276-v) -> (l-v : list l276-v A-v) -> (a-v : A-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.eq l276-v (list l276-v A-v) (filter l276-v A-v p-v (cons l276-v A-v a-v l-v)) (cons l276-v A-v a-v (filter l276-v A-v p-v l-v))
filter-true = λ (l276-v : Level) -> λ (A-v : Set l276-v) -> λ (l-v : list l276-v A-v) -> λ (a-v : A-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (pa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> list-ind l276-v l276-v A-v (λ (X-x-716-v : list l276-v A-v) -> matita-basics-logic.eq l276-v (list l276-v A-v) (filter l276-v A-v p-v (cons l276-v A-v a-v X-x-716-v)) (cons l276-v A-v a-v (filter l276-v A-v p-v X-x-716-v))) (matita-basics-logic.eq-ind-r lzero l276-v matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq l276-v (list l276-v A-v) (matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v a-v (nil l276-v A-v)) (nil l276-v A-v) x-v) (cons l276-v A-v a-v (nil l276-v A-v))) (matita-basics-logic.refl l276-v (list l276-v A-v) (cons l276-v A-v a-v (nil l276-v A-v))) (p-v a-v) pa-v) (matita-basics-logic.eq-ind-r lzero l276-v matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> (x-718-v : A-v) -> (x-717-v : list l276-v A-v) -> (X-x-720-v : matita-basics-logic.eq l276-v (list l276-v A-v) (matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v a-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v)) (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v) x-v) (cons l276-v A-v a-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v))) -> matita-basics-logic.eq l276-v (list l276-v A-v) (matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v a-v (matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-718-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v)) (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v) (p-v x-718-v))) (matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-718-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v)) (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v) (p-v x-718-v)) x-v) (cons l276-v A-v a-v (matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-718-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v)) (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X-0-v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l276-v A-v) x-717-v) (p-v x-718-v)))) (λ (x-718-v : A-v) -> λ (x-717-v : list l276-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq l276-v (list l276-v A-v) (cons l276-v A-v a-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X---v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l276-v A-v) x-717-v)) (cons l276-v A-v a-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X---v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l276-v A-v) x-717-v))) -> matita-basics-logic.refl l276-v (list l276-v A-v) (cons l276-v A-v a-v (matita-basics-bool.match-bool l276-v (λ (X---v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-718-v (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X---v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l276-v A-v) x-717-v)) (foldr l276-v l276-v A-v (list l276-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l276-v A-v) -> matita-basics-bool.match-bool l276-v (λ (X---v : matita-basics-bool.bool) -> list l276-v A-v) (cons l276-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l276-v A-v) x-717-v) (p-v x-718-v)))) (p-v a-v) pa-v) l-v

filter-false : (l267-v : Level) -> (A-v : Set l267-v) -> (l-v : list l267-v A-v) -> (a-v : A-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.eq l267-v (list l267-v A-v) (filter l267-v A-v p-v (cons l267-v A-v a-v l-v)) (filter l267-v A-v p-v l-v)
filter-false = λ (l267-v : Level) -> λ (A-v : Set l267-v) -> λ (l-v : list l267-v A-v) -> λ (a-v : A-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (pa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> list-ind l267-v l267-v A-v (λ (X-x-716-v : list l267-v A-v) -> matita-basics-logic.eq l267-v (list l267-v A-v) (filter l267-v A-v p-v (cons l267-v A-v a-v X-x-716-v)) (filter l267-v A-v p-v X-x-716-v)) (matita-basics-logic.eq-ind-r lzero l267-v matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq l267-v (list l267-v A-v) (matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v a-v (nil l267-v A-v)) (nil l267-v A-v) x-v) (nil l267-v A-v)) (matita-basics-logic.refl l267-v (list l267-v A-v) (nil l267-v A-v)) (p-v a-v) pa-v) (matita-basics-logic.eq-ind-r lzero l267-v matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> (x-718-v : A-v) -> (x-717-v : list l267-v A-v) -> (X-x-720-v : matita-basics-logic.eq l267-v (list l267-v A-v) (matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v a-v (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v)) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v) x-v) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v)) -> matita-basics-logic.eq l267-v (list l267-v A-v) (matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v a-v (matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-718-v (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v)) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v) (p-v x-718-v))) (matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-718-v (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v)) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v) (p-v x-718-v)) x-v) (matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-718-v (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v)) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x0-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X-0-v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x0-v l0-v) l0-v (p-v x0-v)) (nil l267-v A-v) x-717-v) (p-v x-718-v))) (λ (x-718-v : A-v) -> λ (x-717-v : list l267-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq l267-v (list l267-v A-v) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X---v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l267-v A-v) x-717-v) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X---v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l267-v A-v) x-717-v)) -> matita-basics-logic.refl l267-v (list l267-v A-v) (matita-basics-bool.match-bool l267-v (λ (X---v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-718-v (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X---v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l267-v A-v) x-717-v)) (foldr l267-v l267-v A-v (list l267-v A-v) (λ (x-v : A-v) -> λ (l0-v : list l267-v A-v) -> matita-basics-bool.match-bool l267-v (λ (X---v : matita-basics-bool.bool) -> list l267-v A-v) (cons l267-v A-v x-v l0-v) l0-v (p-v x-v)) (nil l267-v A-v) x-717-v) (p-v x-718-v))) (p-v a-v) pa-v) l-v

eq-map : (l64-v l63-v : Level) -> (A-v : Set l64-v) -> (B-v : Set l63-v) -> (f-v : (X---v : A-v) -> B-v) -> (g-v : (X---v : A-v) -> B-v) -> (l-v : list l64-v A-v) -> (X---v : (x-v : A-v) -> matita-basics-logic.eq l63-v B-v (f-v x-v) (g-v x-v)) -> matita-basics-logic.eq l63-v (list l63-v B-v) (map l64-v l63-v A-v B-v f-v l-v) (map l64-v l63-v A-v B-v g-v l-v)
eq-map = λ (l64-v l63-v : Level) -> λ (A-v : Set l64-v) -> λ (B-v : Set l63-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (g-v : (X---v : A-v) -> B-v) -> λ (l-v : list l64-v A-v) -> λ (eqfg-v : (x-v : A-v) -> matita-basics-logic.eq l63-v B-v (f-v x-v) (g-v x-v)) -> list-ind l64-v l63-v A-v (λ (X-x-716-v : list l64-v A-v) -> matita-basics-logic.eq l63-v (list l63-v B-v) (map l64-v l63-v A-v B-v f-v X-x-716-v) (map l64-v l63-v A-v B-v g-v X-x-716-v)) (matita-basics-logic.refl l63-v (list l63-v B-v) (nil l63-v B-v)) (λ (x-718-v : A-v) -> λ (x-717-v : list l64-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq l63-v (list l63-v B-v) (map l64-v l63-v A-v B-v f-v x-717-v) (map l64-v l63-v A-v B-v g-v x-717-v)) -> matita-basics-logic.rewrite-l l63-v l63-v B-v (f-v x-718-v) (λ (X---v : B-v) -> matita-basics-logic.eq l63-v (list l63-v B-v) (cons l63-v B-v (f-v x-718-v) (map l64-v l63-v A-v B-v f-v x-717-v)) (cons l63-v B-v X---v (map l64-v l63-v A-v B-v g-v x-717-v))) (matita-basics-logic.rewrite-l l63-v l63-v (list l63-v B-v) (map l64-v l63-v A-v B-v f-v x-717-v) (λ (X---v : list l63-v B-v) -> matita-basics-logic.eq l63-v (list l63-v B-v) (cons l63-v B-v (f-v x-718-v) (map l64-v l63-v A-v B-v f-v x-717-v)) (cons l63-v B-v (f-v x-718-v) X---v)) (matita-basics-logic.refl l63-v (list l63-v B-v) (cons l63-v B-v (f-v x-718-v) (map l64-v l63-v A-v B-v f-v x-717-v))) (map l64-v l63-v A-v B-v g-v x-717-v) X-x-720-v) (g-v x-718-v) (eqfg-v x-718-v)) l-v

rev-append : (l5-v : Level) -> (H-v : Set l5-v) -> (X---v : list l5-v H-v) -> (X--1-v : list l5-v H-v) -> list l5-v H-v
rev-append l12-v H-v nil' l2-v = l2-v
rev-append l12-v H-v (cons' a-v tl-v) l2-v = rev-append l12-v H-v tl-v (cons l12-v H-v a-v l2-v)

reverse : (l4-v : Level) -> (S-v : Set l4-v) -> (X-l-v : list l4-v S-v) -> list l4-v S-v
reverse = λ (l4-v : Level) -> λ (S-v : Set l4-v) -> λ (l-v : list l4-v S-v) -> rev-append l4-v S-v l-v (nil l4-v S-v)

reverse-single : (l6-v : Level) -> (S-v : Set l6-v) -> (a-v : S-v) -> matita-basics-logic.eq l6-v (list l6-v S-v) (reverse l6-v S-v (cons l6-v S-v a-v (nil l6-v S-v))) (cons l6-v S-v a-v (nil l6-v S-v))
reverse-single = λ (l6-v : Level) -> λ (S-v : Set l6-v) -> λ (a-v : S-v) -> matita-basics-logic.refl l6-v (list l6-v S-v) (reverse l6-v S-v (cons l6-v S-v a-v (nil l6-v S-v)))

rev-append-def : (l160-v : Level) -> (S-v : Set l160-v) -> (l1-v : list l160-v S-v) -> (l2-v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (rev-append l160-v S-v l1-v l2-v) (append l160-v S-v (reverse l160-v S-v l1-v) l2-v)
rev-append-def = λ (l160-v : Level) -> λ (S-v : Set l160-v) -> λ (l1-v : list l160-v S-v) -> list-ind l160-v l160-v S-v (λ (X-x-716-v : list l160-v S-v) -> (l2-v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (rev-append l160-v S-v X-x-716-v l2-v) (append l160-v S-v (reverse l160-v S-v X-x-716-v) l2-v)) (λ (l2-v : list l160-v S-v) -> matita-basics-logic.refl l160-v (list l160-v S-v) l2-v) (λ (x-718-v : S-v) -> λ (x-717-v : list l160-v S-v) -> λ (X-x-720-v : (l2-v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (rev-append l160-v S-v x-717-v l2-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) l2-v)) -> λ (l2-v : list l160-v S-v) -> matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v)) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) X---v (append l160-v S-v (rev-append l160-v S-v x-717-v (cons l160-v S-v x-718-v (nil l160-v S-v))) l2-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v (nil l160-v S-v))) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v)) (append l160-v S-v X---v l2-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (append l160-v S-v (cons l160-v S-v x-718-v (nil l160-v S-v)) l2-v)) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v)) X---v) (matita-basics-logic.rewrite-l l160-v l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v)) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v)) X---v) (matita-basics-logic.refl l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v))) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (append l160-v S-v (cons l160-v S-v x-718-v (nil l160-v S-v)) l2-v)) (matita-basics-logic.rewrite-l l160-v l160-v (list l160-v S-v) (append l160-v S-v (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v (nil l160-v S-v))) l2-v) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v l2-v)) X---v) (append-cons l160-v S-v x-718-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) l2-v) (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (append l160-v S-v (cons l160-v S-v x-718-v (nil l160-v S-v)) l2-v)) (associative-append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v (nil l160-v S-v)) l2-v))) (append l160-v S-v (append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v (nil l160-v S-v))) l2-v) (associative-append l160-v S-v (rev-append l160-v S-v x-717-v (nil l160-v S-v)) (cons l160-v S-v x-718-v (nil l160-v S-v)) l2-v)) (rev-append l160-v S-v x-717-v (cons l160-v S-v x-718-v (nil l160-v S-v))) (X-x-720-v (cons l160-v S-v x-718-v (nil l160-v S-v)))) (rev-append l160-v S-v x-717-v (cons l160-v S-v x-718-v l2-v)) (X-x-720-v (cons l160-v S-v x-718-v l2-v))) l1-v

reverse-cons : (l30-v : Level) -> (S-v : Set l30-v) -> (a-v : S-v) -> (l-v : list l30-v S-v) -> matita-basics-logic.eq l30-v (list l30-v S-v) (reverse l30-v S-v (cons l30-v S-v a-v l-v)) (append l30-v S-v (reverse l30-v S-v l-v) (cons l30-v S-v a-v (nil l30-v S-v)))
reverse-cons = λ (l30-v : Level) -> λ (S-v : Set l30-v) -> λ (a-v : S-v) -> λ (l-v : list l30-v S-v) -> matita-basics-logic.rewrite-r l30-v l30-v (list l30-v S-v) (append l30-v S-v (reverse l30-v S-v l-v) (cons l30-v S-v a-v (nil l30-v S-v))) (λ (X---v : list l30-v S-v) -> matita-basics-logic.eq l30-v (list l30-v S-v) X---v (append l30-v S-v (reverse l30-v S-v l-v) (cons l30-v S-v a-v (nil l30-v S-v)))) (matita-basics-logic.refl l30-v (list l30-v S-v) (append l30-v S-v (reverse l30-v S-v l-v) (cons l30-v S-v a-v (nil l30-v S-v)))) (rev-append l30-v S-v l-v (cons l30-v S-v a-v (nil l30-v S-v))) (rev-append-def l30-v S-v l-v (cons l30-v S-v a-v (nil l30-v S-v)))

reverse-append : (l235-v : Level) -> (S-v : Set l235-v) -> (l1-v : list l235-v S-v) -> (l2-v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (reverse l235-v S-v (append l235-v S-v l1-v l2-v)) (append l235-v S-v (reverse l235-v S-v l2-v) (reverse l235-v S-v l1-v))
reverse-append = λ (l235-v : Level) -> λ (S-v : Set l235-v) -> λ (l1-v : list l235-v S-v) -> list-ind l235-v l235-v S-v (λ (X-x-716-v : list l235-v S-v) -> (l2-v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (reverse l235-v S-v (append l235-v S-v X-x-716-v l2-v)) (append l235-v S-v (reverse l235-v S-v l2-v) (reverse l235-v S-v X-x-716-v))) (λ (l2-v : list l235-v S-v) -> matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v l2-v) (nil l235-v S-v)) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) X---v (append l235-v S-v (rev-append l235-v S-v l2-v (nil l235-v S-v)) (nil l235-v S-v))) (matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (reverse l235-v S-v l2-v) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) X---v (append l235-v S-v (rev-append l235-v S-v l2-v (nil l235-v S-v)) (nil l235-v S-v))) (matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v l2-v) (nil l235-v S-v)) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (reverse l235-v S-v l2-v) (append l235-v S-v X---v (nil l235-v S-v))) (matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (reverse l235-v S-v l2-v) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (reverse l235-v S-v l2-v) (append l235-v S-v X---v (nil l235-v S-v))) (matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (reverse l235-v S-v l2-v) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (reverse l235-v S-v l2-v) X---v) (matita-basics-logic.refl l235-v (list l235-v S-v) (reverse l235-v S-v l2-v)) (append l235-v S-v (reverse l235-v S-v l2-v) (nil l235-v S-v)) (append-nil l235-v S-v (reverse l235-v S-v l2-v))) (append l235-v S-v (reverse l235-v S-v l2-v) (nil l235-v S-v)) (append-nil l235-v S-v (reverse l235-v S-v l2-v))) (rev-append l235-v S-v l2-v (nil l235-v S-v)) (rev-append-def l235-v S-v l2-v (nil l235-v S-v))) (append l235-v S-v (reverse l235-v S-v l2-v) (nil l235-v S-v)) (append-nil l235-v S-v (reverse l235-v S-v l2-v))) (rev-append l235-v S-v l2-v (nil l235-v S-v)) (rev-append-def l235-v S-v l2-v (nil l235-v S-v))) (λ (a-v : S-v) -> λ (tl-v : list l235-v S-v) -> λ (Hind-v : (l2-v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (reverse l235-v S-v (append l235-v S-v tl-v l2-v)) (append l235-v S-v (reverse l235-v S-v l2-v) (reverse l235-v S-v tl-v))) -> λ (l2-v : list l235-v S-v) -> matita-basics-logic.eq-ind-r l235-v l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v (append l235-v S-v tl-v l2-v)) (cons l235-v S-v a-v (nil l235-v S-v))) (λ (x-v : list l235-v S-v) -> λ (X---v : matita-basics-logic.eq l235-v (list l235-v S-v) x-v (append l235-v S-v (reverse l235-v S-v (append l235-v S-v tl-v l2-v)) (cons l235-v S-v a-v (nil l235-v S-v)))) -> matita-basics-logic.eq l235-v (list l235-v S-v) x-v (append l235-v S-v (reverse l235-v S-v l2-v) (reverse l235-v S-v (cons l235-v S-v a-v tl-v)))) (matita-basics-logic.eq-ind-r l235-v l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v))) (λ (x-v : list l235-v S-v) -> λ (X---v : matita-basics-logic.eq l235-v (list l235-v S-v) x-v (append l235-v S-v (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v)))) -> matita-basics-logic.eq l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v (append l235-v S-v tl-v l2-v)) (cons l235-v S-v a-v (nil l235-v S-v))) (append l235-v S-v (reverse l235-v S-v l2-v) x-v)) (matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v l2-v) (append l235-v S-v (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v)))) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) X---v (append l235-v S-v (reverse l235-v S-v l2-v) (append l235-v S-v (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v))))) (matita-basics-logic.refl l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v l2-v) (append l235-v S-v (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v))))) (append l235-v S-v (reverse l235-v S-v (append l235-v S-v tl-v l2-v)) (cons l235-v S-v a-v (nil l235-v S-v))) (matita-basics-logic.rewrite-r l235-v l235-v (list l235-v S-v) (append l235-v S-v (reverse l235-v S-v l2-v) (reverse l235-v S-v tl-v)) (λ (X---v : list l235-v S-v) -> matita-basics-logic.eq l235-v (list l235-v S-v) (append l235-v S-v X---v (cons l235-v S-v a-v (nil l235-v S-v))) (append l235-v S-v (reverse l235-v S-v l2-v) (append l235-v S-v (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v))))) (associative-append l235-v S-v (reverse l235-v S-v l2-v) (reverse l235-v S-v tl-v) (cons l235-v S-v a-v (nil l235-v S-v))) (reverse l235-v S-v (append l235-v S-v tl-v l2-v)) (Hind-v l2-v))) (reverse l235-v S-v (cons l235-v S-v a-v tl-v)) (reverse-cons l235-v S-v a-v tl-v)) (reverse l235-v S-v (cons l235-v S-v a-v (append l235-v S-v tl-v l2-v))) (reverse-cons l235-v S-v a-v (append l235-v S-v tl-v l2-v))) l1-v

reverse-reverse : (l160-v : Level) -> (S-v : Set l160-v) -> (l-v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (reverse l160-v S-v (reverse l160-v S-v l-v)) l-v
reverse-reverse = λ (l160-v : Level) -> λ (S-v : Set l160-v) -> λ (l-v : list l160-v S-v) -> list-ind l160-v l160-v S-v (λ (X-x-716-v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (reverse l160-v S-v (reverse l160-v S-v X-x-716-v)) X-x-716-v) (matita-basics-logic.refl l160-v (list l160-v S-v) (reverse l160-v S-v (reverse l160-v S-v (nil l160-v S-v)))) (λ (a-v : S-v) -> λ (tl-v : list l160-v S-v) -> λ (Hind-v : matita-basics-logic.eq l160-v (list l160-v S-v) (reverse l160-v S-v (reverse l160-v S-v tl-v)) tl-v) -> matita-basics-logic.eq-ind-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (reverse l160-v S-v tl-v) (cons l160-v S-v a-v (nil l160-v S-v))) (λ (x-v : list l160-v S-v) -> λ (X---v : matita-basics-logic.eq l160-v (list l160-v S-v) x-v (append l160-v S-v (reverse l160-v S-v tl-v) (cons l160-v S-v a-v (nil l160-v S-v)))) -> matita-basics-logic.eq l160-v (list l160-v S-v) (reverse l160-v S-v x-v) (cons l160-v S-v a-v tl-v)) (matita-basics-logic.eq-ind-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (reverse l160-v S-v (cons l160-v S-v a-v (nil l160-v S-v))) (reverse l160-v S-v (reverse l160-v S-v tl-v))) (λ (x-v : list l160-v S-v) -> λ (X---v : matita-basics-logic.eq l160-v (list l160-v S-v) x-v (append l160-v S-v (reverse l160-v S-v (cons l160-v S-v a-v (nil l160-v S-v))) (reverse l160-v S-v (reverse l160-v S-v tl-v)))) -> matita-basics-logic.eq l160-v (list l160-v S-v) x-v (cons l160-v S-v a-v tl-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (reverse l160-v S-v tl-v) (nil l160-v S-v)) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (cons l160-v S-v a-v (rev-append l160-v S-v X---v (nil l160-v S-v))) (cons l160-v S-v a-v tl-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) (reverse l160-v S-v tl-v) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (cons l160-v S-v a-v (rev-append l160-v S-v X---v (nil l160-v S-v))) (cons l160-v S-v a-v tl-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) (append l160-v S-v (reverse l160-v S-v (reverse l160-v S-v tl-v)) (nil l160-v S-v)) (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (cons l160-v S-v a-v X---v) (cons l160-v S-v a-v tl-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) tl-v (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (cons l160-v S-v a-v (append l160-v S-v X---v (nil l160-v S-v))) (cons l160-v S-v a-v tl-v)) (matita-basics-logic.rewrite-r l160-v l160-v (list l160-v S-v) tl-v (λ (X---v : list l160-v S-v) -> matita-basics-logic.eq l160-v (list l160-v S-v) (cons l160-v S-v a-v X---v) (cons l160-v S-v a-v tl-v)) (matita-basics-logic.refl l160-v (list l160-v S-v) (cons l160-v S-v a-v tl-v)) (append l160-v S-v tl-v (nil l160-v S-v)) (append-nil l160-v S-v tl-v)) (reverse l160-v S-v (reverse l160-v S-v tl-v)) Hind-v) (rev-append l160-v S-v (reverse l160-v S-v tl-v) (nil l160-v S-v)) (rev-append-def l160-v S-v (reverse l160-v S-v tl-v) (nil l160-v S-v))) (append l160-v S-v (reverse l160-v S-v tl-v) (nil l160-v S-v)) (append-nil l160-v S-v (reverse l160-v S-v tl-v))) (rev-append l160-v S-v tl-v (nil l160-v S-v)) (rev-append-def l160-v S-v tl-v (nil l160-v S-v))) (reverse l160-v S-v (append l160-v S-v (reverse l160-v S-v tl-v) (cons l160-v S-v a-v (nil l160-v S-v)))) (reverse-append l160-v S-v (reverse l160-v S-v tl-v) (cons l160-v S-v a-v (nil l160-v S-v)))) (reverse l160-v S-v (cons l160-v S-v a-v tl-v)) (reverse-cons l160-v S-v a-v tl-v)) l-v

list-elim-left : (l59-v l56-v : Level) -> (S-v : Set l59-v) -> (P-v : (X---v : list l59-v S-v) -> Set l56-v) -> (X---v : P-v (nil l59-v S-v)) -> (X--1-v : (a-v : S-v) -> (tl-v : list l59-v S-v) -> (X--1-v : P-v tl-v) -> P-v (append l59-v S-v tl-v (cons l59-v S-v a-v (nil l59-v S-v)))) -> (l-v : list l59-v S-v) -> P-v l-v
list-elim-left = λ (l59-v l56-v : Level) -> λ (S-v : Set l59-v) -> λ (P-v : (X---v : list l59-v S-v) -> Set l56-v) -> λ (Pnil-v : P-v (nil l59-v S-v)) -> λ (Pstep-v : (a-v : S-v) -> (tl-v : list l59-v S-v) -> (X---v : P-v tl-v) -> P-v (append l59-v S-v tl-v (cons l59-v S-v a-v (nil l59-v S-v)))) -> λ (l-v : list l59-v S-v) -> matita-basics-logic.eq-ind l59-v l56-v (list l59-v S-v) (reverse l59-v S-v (reverse l59-v S-v l-v)) (λ (x-1-v : list l59-v S-v) -> λ (X-x-2-v : matita-basics-logic.eq l59-v (list l59-v S-v) (reverse l59-v S-v (reverse l59-v S-v l-v)) x-1-v) -> P-v x-1-v) (list-ind l59-v l56-v S-v (λ (X-x-716-v : list l59-v S-v) -> P-v (reverse l59-v S-v X-x-716-v)) Pnil-v (λ (a-v : S-v) -> λ (tl-v : list l59-v S-v) -> λ (H-v : P-v (reverse l59-v S-v tl-v)) -> matita-basics-logic.eq-ind-r l59-v l56-v (list l59-v S-v) (append l59-v S-v (reverse l59-v S-v tl-v) (cons l59-v S-v a-v (nil l59-v S-v))) (λ (x-v : list l59-v S-v) -> λ (X---v : matita-basics-logic.eq l59-v (list l59-v S-v) x-v (append l59-v S-v (reverse l59-v S-v tl-v) (cons l59-v S-v a-v (nil l59-v S-v)))) -> P-v x-v) (Pstep-v a-v (reverse l59-v S-v tl-v) H-v) (reverse l59-v S-v (cons l59-v S-v a-v tl-v)) (reverse-cons l59-v S-v a-v tl-v)) (reverse l59-v S-v l-v)) l-v (reverse-reverse l59-v S-v l-v)

length : (l2-v : Level) -> (H-v : Set l2-v) -> (X---v : list l2-v H-v) -> matita-arithmetics-nat.nat
length l3-v H-v nil' = matita-arithmetics-nat.O
length l3-v H-v (cons' a-v tl-v) = matita-arithmetics-nat.S (length l3-v H-v tl-v)
{-
postulate length-body : (l2-v : Level) -> (H-v : Set l2-v) -> (X---v : list l2-v H-v) -> matita-arithmetics-nat.nat

-- postulate rewrite-rule-448 : (l3-v : Level) -> (H-v : Set l3-v) -> (X---v : list l3-v H-v) -> length l3-v H-v X---v ≡ filter-list l3-v H-v lzero (λ (X---v : list l3-v H-v) -> matita-arithmetics-nat.nat) (length-body l3-v H-v) X---v


-- postulate rewrite-rule-449 : (l3-v : Level) -> (H-v : Set l3-v) -> (X---v : list l3-v H-v) -> length-body l3-v H-v X---v ≡ match-list l3-v H-v lzero (λ (X--1-v : list l3-v H-v) -> matita-arithmetics-nat.nat) matita-arithmetics-nat.O (λ (a-v : H-v) -> λ (tl-v : list l3-v H-v) -> matita-arithmetics-nat.S (length l3-v H-v tl-v)) X---v

-}


length-tail : (l26-v : Level) -> (A-v : Set l26-v) -> (l-v : list l26-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l26-v A-v (tail l26-v A-v l-v)) (matita-arithmetics-nat.pred (length l26-v A-v l-v))
length-tail = λ (l26-v : Level) -> λ (A-v : Set l26-v) -> λ (l-v : list l26-v A-v) -> list-ind l26-v lzero A-v (λ (X-x-716-v : list l26-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l26-v A-v (tail l26-v A-v X-x-716-v)) (matita-arithmetics-nat.pred (length l26-v A-v X-x-716-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l26-v A-v (tail l26-v A-v (nil l26-v A-v)))) (λ (x-718-v : A-v) -> λ (x-717-v : list l26-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l26-v A-v (tail l26-v A-v x-717-v)) (matita-arithmetics-nat.pred (length l26-v A-v x-717-v))) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l26-v A-v (tail l26-v A-v (cons l26-v A-v x-718-v x-717-v)))) l-v

length-tail1 : (l21-v : Level) -> (A-v : Set l21-v) -> (l-v : list l21-v A-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O (length l21-v A-v l-v)) -> matita-arithmetics-nat.lt (length l21-v A-v (tail l21-v A-v l-v)) (length l21-v A-v l-v)
length-tail1 = λ (l21-v : Level) -> λ (A-v : Set l21-v) -> λ (X-clearme-v : list l21-v A-v) -> match-list l21-v A-v lzero (λ (X---v : list l21-v A-v) -> (X--1-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O (length l21-v A-v X---v)) -> matita-arithmetics-nat.lt (length l21-v A-v (tail l21-v A-v X---v)) (length l21-v A-v X---v)) (λ (auto-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) matita-arithmetics-nat.O) -> auto-v) (λ (auto-v : A-v) -> λ (auto'-v : list l21-v A-v) -> λ (auto''-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) (matita-arithmetics-nat.S (length l21-v A-v auto'-v))) -> matita-arithmetics-nat.le-n (matita-arithmetics-nat.S (length l21-v A-v auto'-v))) X-clearme-v

length-append : (l48-v : Level) -> (A-v : Set l48-v) -> (l1-v : list l48-v A-v) -> (l2-v : list l48-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l48-v A-v (append l48-v A-v l1-v l2-v)) (matita-arithmetics-nat.plus (length l48-v A-v l1-v) (length l48-v A-v l2-v))
length-append = λ (l48-v : Level) -> λ (A-v : Set l48-v) -> λ (l1-v : list l48-v A-v) -> list-ind l48-v l48-v A-v (λ (X-x-716-v : list l48-v A-v) -> (l2-v : list l48-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l48-v A-v (append l48-v A-v X-x-716-v l2-v)) (matita-arithmetics-nat.plus (length l48-v A-v X-x-716-v) (length l48-v A-v l2-v))) (λ (l2-v : list l48-v A-v) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l48-v A-v (append l48-v A-v (nil l48-v A-v) l2-v))) (λ (X-x-718-v : A-v) -> λ (x-717-v : list l48-v A-v) -> λ (X-x-720-v : (l2-v : list l48-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l48-v A-v (append l48-v A-v x-717-v l2-v)) (matita-arithmetics-nat.plus (length l48-v A-v x-717-v) (length l48-v A-v l2-v))) -> λ (l2-v : list l48-v A-v) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length l48-v A-v (append l48-v A-v x-717-v l2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l48-v A-v (append l48-v A-v x-717-v l2-v))) (matita-arithmetics-nat.S X---v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l48-v A-v (append l48-v A-v x-717-v l2-v)))) (matita-arithmetics-nat.plus (length l48-v A-v x-717-v) (length l48-v A-v l2-v)) (X-x-720-v l2-v)) l1-v

length-map : (l39-v l38-v : Level) -> (A-v : Set l39-v) -> (B-v : Set l38-v) -> (l-v : list l39-v A-v) -> (f-v : (X---v : A-v) -> B-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l38-v B-v (map l39-v l38-v A-v B-v f-v l-v)) (length l39-v A-v l-v)
length-map = λ (l39-v l38-v : Level) -> λ (A-v : Set l39-v) -> λ (B-v : Set l38-v) -> λ (l-v : list l39-v A-v) -> λ (f-v : (X---v : A-v) -> B-v) -> list-ind l39-v lzero A-v (λ (X-x-716-v : list l39-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l38-v B-v (map l39-v l38-v A-v B-v f-v X-x-716-v)) (length l39-v A-v X-x-716-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l38-v B-v (map l39-v l38-v A-v B-v f-v (nil l39-v A-v)))) (λ (a-v : A-v) -> λ (tl-v : list l39-v A-v) -> λ (Hind-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l38-v B-v (map l39-v l38-v A-v B-v f-v tl-v)) (length l39-v A-v tl-v)) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length l39-v A-v tl-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.S (length l39-v A-v tl-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l39-v A-v tl-v))) (length l38-v B-v (map l39-v l38-v A-v B-v f-v tl-v)) Hind-v) l-v

length-reverse : (l127-v : Level) -> (A-v : Set l127-v) -> (l-v : list l127-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l127-v A-v (reverse l127-v A-v l-v)) (length l127-v A-v l-v)
length-reverse = λ (l127-v : Level) -> λ (A-v : Set l127-v) -> λ (l-v : list l127-v A-v) -> list-ind l127-v lzero A-v (λ (X-x-716-v : list l127-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l127-v A-v (reverse l127-v A-v X-x-716-v)) (length l127-v A-v X-x-716-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l127-v A-v (reverse l127-v A-v (nil l127-v A-v)))) (λ (a-v : A-v) -> λ (l0-v : list l127-v A-v) -> λ (IH-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l127-v A-v (reverse l127-v A-v l0-v)) (length l127-v A-v l0-v)) -> matita-basics-logic.eq-ind-r l127-v lzero (list l127-v A-v) (append l127-v A-v (reverse l127-v A-v l0-v) (cons l127-v A-v a-v (nil l127-v A-v))) (λ (x-v : list l127-v A-v) -> λ (X---v : matita-basics-logic.eq l127-v (list l127-v A-v) x-v (append l127-v A-v (reverse l127-v A-v l0-v) (cons l127-v A-v a-v (nil l127-v A-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l127-v A-v x-v) (length l127-v A-v (cons l127-v A-v a-v l0-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l127-v A-v (reverse l127-v A-v l0-v)) (length l127-v A-v (cons l127-v A-v a-v (nil l127-v A-v)))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (length l127-v A-v (reverse l127-v A-v l0-v)) (length l127-v A-v (cons l127-v A-v a-v (nil l127-v A-v))))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (length l127-v A-v (cons l127-v A-v a-v l0-v))) (matita-basics-logic.rewrite-r l127-v lzero (list l127-v A-v) (append l127-v A-v (reverse l127-v A-v l0-v) (nil l127-v A-v)) (λ (X---v : list l127-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l127-v A-v X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S (length l127-v A-v l0-v))) (matita-basics-logic.rewrite-r l127-v lzero (list l127-v A-v) (reverse l127-v A-v l0-v) (λ (X---v : list l127-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l127-v A-v X---v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S (length l127-v A-v l0-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length l127-v A-v l0-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus X---v (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.S (length l127-v A-v l0-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l127-v A-v l0-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S (length l127-v A-v l0-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l127-v A-v l0-v))) (matita-arithmetics-nat.plus (length l127-v A-v l0-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l127-v A-v l0-v) matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.plus (length l127-v A-v l0-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O))) (matita-arithmetics-nat.plus-n-Sm (length l127-v A-v l0-v) matita-arithmetics-nat.O) (length l127-v A-v l0-v) (matita-arithmetics-nat.plus-n-O (length l127-v A-v l0-v)))) (length l127-v A-v (reverse l127-v A-v l0-v)) IH-v) (append l127-v A-v (reverse l127-v A-v l0-v) (nil l127-v A-v)) (append-nil l127-v A-v (reverse l127-v A-v l0-v))) (rev-append l127-v A-v l0-v (nil l127-v A-v)) (rev-append-def l127-v A-v l0-v (nil l127-v A-v))) (length l127-v A-v (append l127-v A-v (reverse l127-v A-v l0-v) (cons l127-v A-v a-v (nil l127-v A-v)))) (length-append l127-v A-v (reverse l127-v A-v l0-v) (cons l127-v A-v a-v (nil l127-v A-v)))) (reverse l127-v A-v (cons l127-v A-v a-v l0-v)) (reverse-cons l127-v A-v a-v l0-v)) l-v

lenght-to-nil : (l35-v : Level) -> (A-v : Set l35-v) -> (l-v : list l35-v A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l35-v A-v l-v) matita-arithmetics-nat.O) -> matita-basics-logic.eq l35-v (list l35-v A-v) l-v (nil l35-v A-v)
lenght-to-nil = λ (l35-v : Level) -> λ (A-v : Set l35-v) -> λ (X-clearme-v : list l35-v A-v) -> match-list l35-v A-v l35-v (λ (X---v : list l35-v A-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l35-v A-v X---v) matita-arithmetics-nat.O) -> matita-basics-logic.eq l35-v (list l35-v A-v) X---v (nil l35-v A-v)) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l35-v A-v (nil l35-v A-v)) matita-arithmetics-nat.O) -> matita-basics-logic.refl l35-v (list l35-v A-v) (nil l35-v A-v)) (λ (a-v : A-v) -> λ (tl-v : list l35-v A-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l35-v A-v tl-v)) matita-arithmetics-nat.O) -> matita-arithmetics-nat.nat-discr l35-v (matita-arithmetics-nat.S (length l35-v A-v tl-v)) matita-arithmetics-nat.O H-v (matita-basics-logic.eq l35-v (list l35-v A-v) (cons l35-v A-v a-v tl-v) (nil l35-v A-v))) X-clearme-v

lists-length-split : (l1018-v : Level) -> (A-v : Set l1018-v) -> (l1-v : list l1018-v A-v) -> (l2-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v l1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v l2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l1-v (append l1018-v A-v la-v lb-v)))))
lists-length-split = λ (l1018-v : Level) -> λ (A-v : Set l1018-v) -> λ (l1-v : list l1018-v A-v) -> list-ind l1018-v l1018-v A-v (λ (X-x-716-v : list l1018-v A-v) -> (l2-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v X-x-716-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v l2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) X-x-716-v (append l1018-v A-v la-v lb-v)))))) (λ (l2-v : list l1018-v A-v) -> matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v l2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (nil l1018-v A-v) (append l1018-v A-v la-v lb-v))))) (nil l1018-v A-v) (matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v (nil l1018-v A-v) lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v l2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (nil l1018-v A-v) (append l1018-v A-v (nil l1018-v A-v) lb-v)))) l2-v (matita-basics-logic.or-introl l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v (nil l1018-v A-v) l2-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v l2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (nil l1018-v A-v) (append l1018-v A-v (nil l1018-v A-v) l2-v))) (matita-basics-logic.conj lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v (nil l1018-v A-v) l2-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.refl l1018-v (list l1018-v A-v) l2-v))))) (λ (hd1-v : A-v) -> λ (tl1-v : list l1018-v A-v) -> λ (IH-v : (l2-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) l2-v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v l2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v la-v lb-v)))))) -> λ (X-clearme-v : list l1018-v A-v) -> match-list l1018-v A-v l1018-v (λ (X---v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) X---v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v X---v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v)))))) (matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (nil l1018-v A-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v))))) (nil l1018-v A-v) (matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (nil l1018-v A-v) (append l1018-v A-v (nil l1018-v A-v) lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (nil l1018-v A-v) lb-v)))) (cons l1018-v A-v hd1-v tl1-v) (matita-basics-logic.or-intror l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (nil l1018-v A-v) (append l1018-v A-v (nil l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v)))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (nil l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v)))) (matita-basics-logic.conj lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v)) (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (nil l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l1018-v A-v (nil l1018-v A-v))) (matita-basics-logic.refl l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v)))))) (λ (hd2-v : A-v) -> λ (tl2-v : list l1018-v A-v) -> matita-basics-logic.match-ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v la-v lb-v))))) l1018-v (λ (X---v : matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v la-v lb-v)))))) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v)))))) (λ (x-v : list l1018-v A-v) -> λ (X-clearme0-v : matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v lb-v))))) -> matita-basics-logic.match-ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v lb-v)))) l1018-v (λ (X---v : matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v lb-v))))) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v)))))) (λ (y-v : list l1018-v A-v) -> λ (X-clearme1-v : matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v)))) -> matita-basics-logic.match-Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v))) l1018-v (λ (X---v : matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v)))) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v)))))) (λ (X-clearme2-v : matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v))) -> matita-basics-logic.match-And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v)) l1018-v (λ (X---v : matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v))) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v)))))) (λ (IH1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl1-v)) -> λ (IH2-v : matita-basics-logic.eq l1018-v (list l1018-v A-v) tl2-v (append l1018-v A-v x-v y-v)) -> matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v))))) (cons l1018-v A-v hd2-v x-v) (matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd2-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v (cons l1018-v A-v hd2-v x-v) lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd2-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (cons l1018-v A-v hd2-v x-v) lb-v)))) y-v (matita-basics-logic.or-introl l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd2-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v (cons l1018-v A-v hd2-v x-v) y-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd2-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (cons l1018-v A-v hd2-v x-v) y-v))) (matita-basics-logic.conj lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l1018-v A-v x-v)) (matita-arithmetics-nat.S (length l1018-v A-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (cons l1018-v A-v hd2-v (append l1018-v A-v x-v y-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length l1018-v A-v tl1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.S (length l1018-v A-v tl1-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l1018-v A-v tl1-v))) (length l1018-v A-v x-v) IH1-v) (matita-basics-logic.rewrite-l l1018-v l1018-v (list l1018-v A-v) tl2-v (λ (X---v : list l1018-v A-v) -> matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (cons l1018-v A-v hd2-v X---v)) (matita-basics-logic.refl l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v)) (append l1018-v A-v x-v y-v) IH2-v))))) X-clearme2-v) (λ (X-clearme2-v : matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v))) -> matita-basics-logic.match-And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v)) l1018-v (λ (X---v : matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) (matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v))) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v)))))) (λ (IH1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v x-v) (length l1018-v A-v tl2-v)) -> λ (IH2-v : matita-basics-logic.eq l1018-v (list l1018-v A-v) tl1-v (append l1018-v A-v x-v y-v)) -> matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (la-v : list l1018-v A-v) -> matita-basics-logic.ex l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v la-v lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v la-v) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v la-v lb-v))))) (cons l1018-v A-v hd1-v x-v) (matita-basics-logic.ex-intro l1018-v l1018-v (list l1018-v A-v) (λ (lb-v : list l1018-v A-v) -> matita-basics-logic.Or l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd1-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v (cons l1018-v A-v hd1-v x-v) lb-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd1-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (cons l1018-v A-v hd1-v x-v) lb-v)))) y-v (matita-basics-logic.or-intror l1018-v l1018-v (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd1-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd1-v tl1-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd2-v tl2-v) (append l1018-v A-v (cons l1018-v A-v hd1-v x-v) y-v))) (matita-basics-logic.And lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l1018-v A-v (cons l1018-v A-v hd1-v x-v)) (length l1018-v A-v (cons l1018-v A-v hd2-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (append l1018-v A-v (cons l1018-v A-v hd1-v x-v) y-v))) (matita-basics-logic.conj lzero l1018-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l1018-v A-v x-v)) (matita-arithmetics-nat.S (length l1018-v A-v tl2-v))) (matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (cons l1018-v A-v hd1-v (append l1018-v A-v x-v y-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length l1018-v A-v tl2-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S X---v) (matita-arithmetics-nat.S (length l1018-v A-v tl2-v))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l1018-v A-v tl2-v))) (length l1018-v A-v x-v) IH1-v) (matita-basics-logic.rewrite-l l1018-v l1018-v (list l1018-v A-v) tl1-v (λ (X---v : list l1018-v A-v) -> matita-basics-logic.eq l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v) (cons l1018-v A-v hd1-v X---v)) (matita-basics-logic.refl l1018-v (list l1018-v A-v) (cons l1018-v A-v hd1-v tl1-v)) (append l1018-v A-v x-v y-v) IH2-v))))) X-clearme2-v) X-clearme1-v) X-clearme0-v) (IH-v tl2-v)) X-clearme-v) l1-v

list-ind2 : (l143-v l142-v l133-v : Level) -> (T1-v : Set l143-v) -> (T2-v : Set l142-v) -> (l1-v : list l143-v T1-v) -> (l2-v : list l142-v T2-v) -> (P-v : (X---v : list l143-v T1-v) -> (X--1-v : list l142-v T2-v) -> Set l133-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v l1-v) (length l142-v T2-v l2-v)) -> (X--1-v : P-v (nil l143-v T1-v) (nil l142-v T2-v)) -> (X--2-v : (tl1-v : list l143-v T1-v) -> (tl2-v : list l142-v T2-v) -> (hd1-v : T1-v) -> (hd2-v : T2-v) -> (X--2-v : P-v tl1-v tl2-v) -> P-v (cons l143-v T1-v hd1-v tl1-v) (cons l142-v T2-v hd2-v tl2-v)) -> P-v l1-v l2-v
list-ind2 = λ (l143-v l142-v l133-v : Level) -> λ (T1-v : Set l143-v) -> λ (T2-v : Set l142-v) -> λ (l1-v : list l143-v T1-v) -> λ (l2-v : list l142-v T2-v) -> λ (P-v : (X---v : list l143-v T1-v) -> (X--1-v : list l142-v T2-v) -> Set l133-v) -> λ (Hl-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v l1-v) (length l142-v T2-v l2-v)) -> λ (Pnil-v : P-v (nil l143-v T1-v) (nil l142-v T2-v)) -> λ (Pcons-v : (tl1-v : list l143-v T1-v) -> (tl2-v : list l142-v T2-v) -> (hd1-v : T1-v) -> (hd2-v : T2-v) -> (X---v : P-v tl1-v tl2-v) -> P-v (cons l143-v T1-v hd1-v tl1-v) (cons l142-v T2-v hd2-v tl2-v)) -> list-ind l143-v (l142-v ⊔ l133-v) T1-v (λ (X-x-716-v : list l143-v T1-v) -> (l-v : list l142-v T2-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v X-x-716-v) (length l142-v T2-v l-v)) -> P-v X-x-716-v l-v) (λ (l20-v : list l142-v T2-v) -> match-list l142-v T2-v l133-v (λ (X---v : list l142-v T2-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v (nil l143-v T1-v)) (length l142-v T2-v X---v)) -> P-v (nil l143-v T1-v) X---v) (λ (auto-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v (nil l143-v T1-v)) (length l142-v T2-v (nil l142-v T2-v))) -> Pnil-v) (λ (t2-v : T2-v) -> λ (tl2-v : list l142-v T2-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (matita-arithmetics-nat.S (length l142-v T2-v tl2-v))) -> matita-arithmetics-nat.nat-discr l133-v matita-arithmetics-nat.O (matita-arithmetics-nat.S (length l142-v T2-v tl2-v)) H-v (P-v (nil l143-v T1-v) (cons l142-v T2-v t2-v tl2-v))) l20-v) (λ (t1-v : T1-v) -> λ (tl1-v : list l143-v T1-v) -> λ (IH-v : (l-v : list l142-v T2-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v tl1-v) (length l142-v T2-v l-v)) -> P-v tl1-v l-v) -> λ (l20-v : list l142-v T2-v) -> match-list l142-v T2-v l133-v (λ (X---v : list l142-v T2-v) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v (cons l143-v T1-v t1-v tl1-v)) (length l142-v T2-v X---v)) -> P-v (cons l143-v T1-v t1-v tl1-v) X---v) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (length l143-v T1-v tl1-v)) matita-arithmetics-nat.O) -> matita-arithmetics-nat.nat-discr l133-v (matita-arithmetics-nat.S (length l143-v T1-v tl1-v)) matita-arithmetics-nat.O H-v (P-v (cons l143-v T1-v t1-v tl1-v) (nil l142-v T2-v))) (λ (t2-v : T2-v) -> λ (tl2-v : list l142-v T2-v) -> λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v (cons l143-v T1-v t1-v tl1-v)) (length l142-v T2-v (cons l142-v T2-v t2-v tl2-v))) -> Pcons-v tl1-v tl2-v t1-v t2-v (IH-v tl2-v (matita-arithmetics-nat.nat-discr lzero (matita-arithmetics-nat.S (length l143-v T1-v tl1-v)) (matita-arithmetics-nat.S (length l142-v T2-v tl2-v)) H-v (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v tl1-v) (length l142-v T2-v tl2-v)) (λ (e0-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-basics-logic.R0 lzero matita-arithmetics-nat.nat (length l143-v T1-v tl1-v)) (length l142-v T2-v tl2-v)) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length l143-v T1-v tl1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l143-v T1-v tl1-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l143-v T1-v tl1-v)) (length l142-v T2-v tl2-v) e0-v)))) l20-v) l1-v l2-v Hl-v

list-cases2 : (l196-v l195-v l190-v : Level) -> (T1-v : Set l196-v) -> (T2-v : Set l195-v) -> (l1-v : list l196-v T1-v) -> (l2-v : list l195-v T2-v) -> (P-v : Set l190-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l196-v T1-v l1-v) (length l195-v T2-v l2-v)) -> (X--1-v : (X--1-v : matita-basics-logic.eq l196-v (list l196-v T1-v) l1-v (nil l196-v T1-v)) -> (X--2-v : matita-basics-logic.eq l195-v (list l195-v T2-v) l2-v (nil l195-v T2-v)) -> P-v) -> (X--2-v : (hd1-v : T1-v) -> (hd2-v : T2-v) -> (tl1-v : list l196-v T1-v) -> (tl2-v : list l195-v T2-v) -> (X--2-v : matita-basics-logic.eq l196-v (list l196-v T1-v) l1-v (cons l196-v T1-v hd1-v tl1-v)) -> (X--3-v : matita-basics-logic.eq l195-v (list l195-v T2-v) l2-v (cons l195-v T2-v hd2-v tl2-v)) -> P-v) -> P-v
list-cases2 = λ (l196-v l195-v l190-v : Level) -> λ (T1-v : Set l196-v) -> λ (T2-v : Set l195-v) -> λ (l1-v : list l196-v T1-v) -> λ (l2-v : list l195-v T2-v) -> λ (P-v : Set l190-v) -> λ (Hl-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l196-v T1-v l1-v) (length l195-v T2-v l2-v)) -> list-ind2 l196-v l195-v ((l196-v ⊔ l195-v) ⊔ l190-v) T1-v T2-v l1-v l2-v (λ (X---v : list l196-v T1-v) -> λ (X-0-v : list l195-v T2-v) -> (X--1-v : (X--1-v : matita-basics-logic.eq l196-v (list l196-v T1-v) X---v (nil l196-v T1-v)) -> (X--2-v : matita-basics-logic.eq l195-v (list l195-v T2-v) X-0-v (nil l195-v T2-v)) -> P-v) -> (X--2-v : (hd1-v : T1-v) -> (hd2-v : T2-v) -> (tl1-v : list l196-v T1-v) -> (tl2-v : list l195-v T2-v) -> (X--2-v : matita-basics-logic.eq l196-v (list l196-v T1-v) X---v (cons l196-v T1-v hd1-v tl1-v)) -> (X--3-v : matita-basics-logic.eq l195-v (list l195-v T2-v) X-0-v (cons l195-v T2-v hd2-v tl2-v)) -> P-v) -> P-v) Hl-v (λ (Pnil-v : (X---v : matita-basics-logic.eq l196-v (list l196-v T1-v) (nil l196-v T1-v) (nil l196-v T1-v)) -> (X--1-v : matita-basics-logic.eq l195-v (list l195-v T2-v) (nil l195-v T2-v) (nil l195-v T2-v)) -> P-v) -> λ (Pcons-v : (hd1-v : T1-v) -> (hd2-v : T2-v) -> (tl1-v : list l196-v T1-v) -> (tl2-v : list l195-v T2-v) -> (X---v : matita-basics-logic.eq l196-v (list l196-v T1-v) (nil l196-v T1-v) (cons l196-v T1-v hd1-v tl1-v)) -> (X--1-v : matita-basics-logic.eq l195-v (list l195-v T2-v) (nil l195-v T2-v) (cons l195-v T2-v hd2-v tl2-v)) -> P-v) -> Pnil-v (matita-basics-logic.refl l196-v (list l196-v T1-v) (nil l196-v T1-v)) (matita-basics-logic.refl l195-v (list l195-v T2-v) (nil l195-v T2-v))) (λ (tl1-v : list l196-v T1-v) -> λ (tl2-v : list l195-v T2-v) -> λ (hd1-v : T1-v) -> λ (hd2-v : T2-v) -> λ (IH1-v : (X---v : (X---v : matita-basics-logic.eq l196-v (list l196-v T1-v) tl1-v (nil l196-v T1-v)) -> (X--1-v : matita-basics-logic.eq l195-v (list l195-v T2-v) tl2-v (nil l195-v T2-v)) -> P-v) -> (X--1-v : (hd10-v : T1-v) -> (hd20-v : T2-v) -> (tl10-v : list l196-v T1-v) -> (tl20-v : list l195-v T2-v) -> (X--1-v : matita-basics-logic.eq l196-v (list l196-v T1-v) tl1-v (cons l196-v T1-v hd10-v tl10-v)) -> (X--2-v : matita-basics-logic.eq l195-v (list l195-v T2-v) tl2-v (cons l195-v T2-v hd20-v tl20-v)) -> P-v) -> P-v) -> λ (IH2-v : (X---v : matita-basics-logic.eq l196-v (list l196-v T1-v) (cons l196-v T1-v hd1-v tl1-v) (nil l196-v T1-v)) -> (X--1-v : matita-basics-logic.eq l195-v (list l195-v T2-v) (cons l195-v T2-v hd2-v tl2-v) (nil l195-v T2-v)) -> P-v) -> λ (Hp-v : (hd10-v : T1-v) -> (hd20-v : T2-v) -> (tl10-v : list l196-v T1-v) -> (tl20-v : list l195-v T2-v) -> (X---v : matita-basics-logic.eq l196-v (list l196-v T1-v) (cons l196-v T1-v hd1-v tl1-v) (cons l196-v T1-v hd10-v tl10-v)) -> (X--1-v : matita-basics-logic.eq l195-v (list l195-v T2-v) (cons l195-v T2-v hd2-v tl2-v) (cons l195-v T2-v hd20-v tl20-v)) -> P-v) -> Hp-v hd1-v hd2-v tl1-v tl2-v (matita-basics-logic.refl l196-v (list l196-v T1-v) (cons l196-v T1-v hd1-v tl1-v)) (matita-basics-logic.refl l195-v (list l195-v T2-v) (cons l195-v T2-v hd2-v tl2-v)))

append-l1-injective : (l125-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l125-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l125-v)) A-v l1-v) (length ((lsuc lzero) ⊔ (lsuc l125-v)) A-v l2-v)) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) A-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) A-v l2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) A-v) l1-v l2-v
append-l1-injective = λ (l125-v : Level) -> λ (a-v : Set ((lsuc lzero) ⊔ (lsuc l125-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (Hlen-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l125-v)) a-v l1-v) (length ((lsuc lzero) ⊔ (lsuc l125-v)) a-v l2-v)) -> list-ind2 ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) a-v a-v l1-v l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (X-0-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v X---v l3-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v X-0-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) X---v X-0-v) Hlen-v (λ (auto-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v (nil ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) l3-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v (nil ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) l4-v)) -> matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (nil ((lsuc lzero) ⊔ (lsuc l125-v)) a-v)) (λ (tl1-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (tl2-v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> λ (hd1-v : a-v) -> λ (hd2-v : a-v) -> λ (IH-v : (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) tl1-v tl2-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd1-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v))) -> list-discr l125-v ((lsuc lzero) ⊔ (lsuc l125-v)) a-v (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd1-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v)) Heq-v (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd1-v tl1-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v tl2-v)) (λ (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) a-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd1-v) hd2-v) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (λ (x-v : a-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) a-v x-v hd2-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v x-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v))) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) a-v x-v (λ (x0-v : a-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) a-v x-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v) hd2-v X---v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v x-v tl1-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v tl2-v)) (λ (Heq0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v))) -> λ (e00-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v (λ (x0-v : a-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v) hd2-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v)) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v)) -> matita-basics-logic.eq-f ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l125-v)) a-v hd2-v) tl1-v tl2-v (IH-v (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l125-v)) ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v) X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l125-v)) (list ((lsuc lzero) ⊔ (lsuc l125-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl1-v l3-v)) (append ((lsuc lzero) ⊔ (lsuc l125-v)) a-v tl2-v l4-v) e00-v))) hd1-v e0-v Heq-v))

append-l2-injective : (l118-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l118-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l1-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l2-v)) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) l3-v l4-v
append-l2-injective = λ (l118-v : Level) -> λ (a-v : Set ((lsuc lzero) ⊔ (lsuc l118-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (Hlen-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v)) -> list-ind2 ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) a-v a-v l1-v l2-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (X-0-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v X---v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v X-0-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) Hlen-v (λ (auto-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) -> matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v) l4-v auto-v) (λ (tl1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (tl2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (hd1-v : a-v) -> λ (hd2-v : a-v) -> λ (IH-v : (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd1-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v))) -> list-discr l118-v ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd1-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v)) Heq-v (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) (λ (e0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (matita-basics-logic.R0 ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd1-v) hd2-v) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (λ (x-v : a-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) a-v x-v hd2-v) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v x-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v))) -> (X-e1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) a-v x-v (λ (x0-v : a-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) a-v x-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v) hd2-v X---v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) (λ (Heq0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v)) (cons ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v))) -> λ (e00-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (matita-basics-logic.R1 ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v (λ (x0-v : a-v) -> λ (p0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v x0-v) -> list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v) hd2-v (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l118-v)) a-v hd2-v)) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v)) -> IH-v (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v) X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl1-v l3-v)) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v tl2-v l4-v) e00-v)) hd1-v e0-v Heq-v))

append-l1-injective-r : (l118-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l118-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l3-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l4-v)) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) l1-v l2-v
append-l1-injective-r = λ (l118-v : Level) -> λ (a-v : Set ((lsuc lzero) ⊔ (lsuc l118-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (Hlen-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v)) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) x-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v))) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) x-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v))) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l1-v l2-v) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v)) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) x-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v))) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) x-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l1-v l2-v) (λ (Heq1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v))) -> matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l1-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l1-v X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l1-v) l2-v (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v)) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l1-v X---v) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) X---v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v))) (matita-basics-logic.eq-f ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v) (append-l2-injective l118-v a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) Hlen-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) (length-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) (length-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) Heq1-v)) l1-v (reverse-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) l2-v (reverse-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v))) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v)) (reverse-append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v)) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v)) (reverse-append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v) (matita-basics-logic.eq-f ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v) Heq-v)

append-l2-injective-r : (l118-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l118-v))) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l3-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (l4-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l3-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l4-v)) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) A-v l2-v l4-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) A-v) l3-v l4-v
append-l2-injective-r = λ (l118-v : Level) -> λ (a-v : Set ((lsuc lzero) ⊔ (lsuc l118-v))) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l3-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (l4-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (Hlen-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) -> λ (Heq-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v)) -> matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) x-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v))) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) x-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v))) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v)) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) x-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v))) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) x-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v l4-v) (λ (Heq1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v)) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v))) -> matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v X---v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v) l4-v (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) l3-v X---v) (matita-basics-logic.rewrite-l ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) X---v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v))) (matita-basics-logic.eq-f ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (append-l1-injective l118-v a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) X---v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v) Hlen-v) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) (length-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v)) (length ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) (length-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) Heq1-v)) l3-v (reverse-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l3-v)) l4-v (reverse-reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l4-v))) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v)) (reverse-append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v)) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v)) (reverse-append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v) (matita-basics-logic.eq-f ((lsuc lzero) ⊔ (lsuc l118-v)) ((lsuc lzero) ⊔ (lsuc l118-v)) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (list ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (reverse ((lsuc lzero) ⊔ (lsuc l118-v)) a-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l1-v l3-v) (append ((lsuc lzero) ⊔ (lsuc l118-v)) a-v l2-v l4-v) Heq-v)

length-rev-append : (l68-v : Level) -> (A-v : Set l68-v) -> (l-v : list l68-v A-v) -> (acc-v : list l68-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l68-v A-v (rev-append l68-v A-v l-v acc-v)) (matita-arithmetics-nat.plus (length l68-v A-v l-v) (length l68-v A-v acc-v))
length-rev-append = λ (l68-v : Level) -> λ (A-v : Set l68-v) -> λ (l-v : list l68-v A-v) -> list-ind l68-v l68-v A-v (λ (X-x-716-v : list l68-v A-v) -> (acc-v : list l68-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l68-v A-v (rev-append l68-v A-v X-x-716-v acc-v)) (matita-arithmetics-nat.plus (length l68-v A-v X-x-716-v) (length l68-v A-v acc-v))) (λ (acc-v : list l68-v A-v) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l68-v A-v (rev-append l68-v A-v (nil l68-v A-v) acc-v))) (λ (a-v : A-v) -> λ (tl-v : list l68-v A-v) -> λ (Hind-v : (acc-v : list l68-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l68-v A-v (rev-append l68-v A-v tl-v acc-v)) (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v acc-v))) -> λ (acc-v : list l68-v A-v) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v (cons l68-v A-v a-v acc-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v (cons l68-v A-v a-v acc-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v acc-v)))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v acc-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v acc-v)))) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (length l68-v A-v acc-v)))) (matita-arithmetics-nat.plus (length l68-v A-v tl-v) (matita-arithmetics-nat.S (length l68-v A-v acc-v))) (matita-arithmetics-nat.plus-n-Sm (length l68-v A-v tl-v) (length l68-v A-v acc-v))) (length l68-v A-v (rev-append l68-v A-v tl-v (cons l68-v A-v a-v acc-v))) (Hind-v (cons l68-v A-v a-v acc-v))) l-v

mem : (l0-v : Level) -> (H-v : Set l0-v) -> (X---v : H-v) -> (X--1-v : list l0-v H-v) -> Set l0-v
mem ll0-v H-v X---v nil' = matita-basics-logic.False ll0-v
mem ll0-v H-v X---v (cons' hd-v tl-v) = matita-basics-logic.Or ll0-v ll0-v (matita-basics-logic.eq ll0-v H-v X---v hd-v) (mem ll0-v H-v X---v tl-v)


mem-append : (l117-v : Level) -> (A-v : Set l117-v) -> (a-v : A-v) -> (l1-v : list l117-v A-v) -> (l2-v : list l117-v A-v) -> (X---v : mem l117-v A-v a-v (append l117-v A-v l1-v l2-v)) -> matita-basics-logic.Or l117-v l117-v (mem l117-v A-v a-v l1-v) (mem l117-v A-v a-v l2-v)
mem-append = λ (l117-v : Level) -> λ (A-v : Set l117-v) -> λ (a-v : A-v) -> λ (l1-v : list l117-v A-v) -> list-ind l117-v l117-v A-v (λ (X-x-716-v : list l117-v A-v) -> (l2-v : list l117-v A-v) -> (X---v : mem l117-v A-v a-v (append l117-v A-v X-x-716-v l2-v)) -> matita-basics-logic.Or l117-v l117-v (mem l117-v A-v a-v X-x-716-v) (mem l117-v A-v a-v l2-v)) (λ (l2-v : list l117-v A-v) -> λ (mema-v : mem l117-v A-v a-v (append l117-v A-v (nil l117-v A-v) l2-v)) -> matita-basics-logic.or-intror l117-v l117-v (mem l117-v A-v a-v (nil l117-v A-v)) (mem l117-v A-v a-v l2-v) mema-v) (λ (b-v : A-v) -> λ (tl-v : list l117-v A-v) -> λ (Hind-v : (l2-v : list l117-v A-v) -> (X---v : mem l117-v A-v a-v (append l117-v A-v tl-v l2-v)) -> matita-basics-logic.Or l117-v l117-v (mem l117-v A-v a-v tl-v) (mem l117-v A-v a-v l2-v)) -> λ (l2-v : list l117-v A-v) -> λ (X-clearme-v : mem l117-v A-v a-v (append l117-v A-v (cons l117-v A-v b-v tl-v) l2-v)) -> matita-basics-logic.match-Or l117-v l117-v (matita-basics-logic.eq l117-v A-v a-v b-v) (mem l117-v A-v a-v (append l117-v A-v tl-v l2-v)) l117-v (λ (X---v : matita-basics-logic.Or l117-v l117-v (matita-basics-logic.eq l117-v A-v a-v b-v) (mem l117-v A-v a-v (append l117-v A-v tl-v l2-v))) -> matita-basics-logic.Or l117-v l117-v (mem l117-v A-v a-v (cons l117-v A-v b-v tl-v)) (mem l117-v A-v a-v l2-v)) (λ (eqab-v : matita-basics-logic.eq l117-v A-v a-v b-v) -> matita-basics-logic.or-introl l117-v l117-v (mem l117-v A-v a-v (cons l117-v A-v b-v tl-v)) (mem l117-v A-v a-v l2-v) (matita-basics-logic.or-introl l117-v l117-v (matita-basics-logic.eq l117-v A-v a-v b-v) (mem l117-v A-v a-v tl-v) eqab-v)) (λ (Hmema-v : mem l117-v A-v a-v (append l117-v A-v tl-v l2-v)) -> matita-basics-logic.match-Or l117-v l117-v (mem l117-v A-v a-v tl-v) (mem l117-v A-v a-v l2-v) l117-v (λ (X---v : matita-basics-logic.Or l117-v l117-v (mem l117-v A-v a-v tl-v) (mem l117-v A-v a-v l2-v)) -> matita-basics-logic.Or l117-v l117-v (mem l117-v A-v a-v (cons l117-v A-v b-v tl-v)) (mem l117-v A-v a-v l2-v)) (λ (Hmema0-v : mem l117-v A-v a-v tl-v) -> matita-basics-logic.or-introl l117-v l117-v (mem l117-v A-v a-v (cons l117-v A-v b-v tl-v)) (mem l117-v A-v a-v l2-v) (matita-basics-logic.or-intror l117-v l117-v (matita-basics-logic.eq l117-v A-v a-v b-v) (mem l117-v A-v a-v tl-v) Hmema0-v)) (λ (Hmema0-v : mem l117-v A-v a-v l2-v) -> matita-basics-logic.or-intror l117-v l117-v (mem l117-v A-v a-v (cons l117-v A-v b-v tl-v)) (mem l117-v A-v a-v l2-v) Hmema0-v) (Hind-v l2-v Hmema-v)) X-clearme-v) l1-v

mem-append-l1 : (l61-v : Level) -> (A-v : Set l61-v) -> (a-v : A-v) -> (l1-v : list l61-v A-v) -> (l2-v : list l61-v A-v) -> (X---v : mem l61-v A-v a-v l1-v) -> mem l61-v A-v a-v (append l61-v A-v l1-v l2-v)
mem-append-l1 = λ (l61-v : Level) -> λ (A-v : Set l61-v) -> λ (a-v : A-v) -> λ (l1-v : list l61-v A-v) -> λ (l2-v : list l61-v A-v) -> list-ind l61-v l61-v A-v (λ (X-x-716-v : list l61-v A-v) -> (X---v : mem l61-v A-v a-v X-x-716-v) -> mem l61-v A-v a-v (append l61-v A-v X-x-716-v l2-v)) (matita-basics-logic.False-ind l61-v l61-v (λ (X-x-66-v : matita-basics-logic.False l61-v) -> mem l61-v A-v a-v (append l61-v A-v (nil l61-v A-v) l2-v))) (λ (b-v : A-v) -> λ (tl-v : list l61-v A-v) -> λ (Hind-v : (X---v : mem l61-v A-v a-v tl-v) -> mem l61-v A-v a-v (append l61-v A-v tl-v l2-v)) -> λ (X-clearme-v : mem l61-v A-v a-v (cons l61-v A-v b-v tl-v)) -> matita-basics-logic.match-Or l61-v l61-v (matita-basics-logic.eq l61-v A-v a-v b-v) (mem l61-v A-v a-v tl-v) l61-v (λ (X---v : matita-basics-logic.Or l61-v l61-v (matita-basics-logic.eq l61-v A-v a-v b-v) (mem l61-v A-v a-v tl-v)) -> mem l61-v A-v a-v (append l61-v A-v (cons l61-v A-v b-v tl-v) l2-v)) (λ (eqab-v : matita-basics-logic.eq l61-v A-v a-v b-v) -> matita-basics-logic.or-introl l61-v l61-v (matita-basics-logic.eq l61-v A-v a-v b-v) (mem l61-v A-v a-v (append l61-v A-v tl-v l2-v)) eqab-v) (λ (Hmema-v : mem l61-v A-v a-v tl-v) -> matita-basics-logic.or-intror l61-v l61-v (matita-basics-logic.eq l61-v A-v a-v b-v) (mem l61-v A-v a-v (append l61-v A-v tl-v l2-v)) (Hind-v Hmema-v)) X-clearme-v) l1-v

mem-append-l2 : (l33-v : Level) -> (A-v : Set l33-v) -> (a-v : A-v) -> (l1-v : list l33-v A-v) -> (l2-v : list l33-v A-v) -> (X---v : mem l33-v A-v a-v l2-v) -> mem l33-v A-v a-v (append l33-v A-v l1-v l2-v)
mem-append-l2 = λ (l33-v : Level) -> λ (A-v : Set l33-v) -> λ (a-v : A-v) -> λ (l1-v : list l33-v A-v) -> λ (l2-v : list l33-v A-v) -> list-ind l33-v l33-v A-v (λ (X-x-716-v : list l33-v A-v) -> (X---v : mem l33-v A-v a-v l2-v) -> mem l33-v A-v a-v (append l33-v A-v X-x-716-v l2-v)) (λ (auto-v : mem l33-v A-v a-v l2-v) -> auto-v) (λ (b-v : A-v) -> λ (tl-v : list l33-v A-v) -> λ (Hind-v : (X---v : mem l33-v A-v a-v l2-v) -> mem l33-v A-v a-v (append l33-v A-v tl-v l2-v)) -> λ (Hmema-v : mem l33-v A-v a-v l2-v) -> matita-basics-logic.or-intror l33-v l33-v (matita-basics-logic.eq l33-v A-v a-v b-v) (mem l33-v A-v a-v (append l33-v A-v tl-v l2-v)) (Hind-v Hmema-v)) l1-v

mem-single : (l31-v : Level) -> (A-v : Set l31-v) -> (a-v : A-v) -> (b-v : A-v) -> (X---v : mem l31-v A-v a-v (cons l31-v A-v b-v (nil l31-v A-v))) -> matita-basics-logic.eq l31-v A-v a-v b-v
mem-single = λ (l31-v : Level) -> λ (A-v : Set l31-v) -> λ (a-v : A-v) -> λ (b-v : A-v) -> λ (X-clearme-v : mem l31-v A-v a-v (cons l31-v A-v b-v (nil l31-v A-v))) -> matita-basics-logic.match-Or l31-v l31-v (matita-basics-logic.eq l31-v A-v a-v b-v) (mem l31-v A-v a-v (nil l31-v A-v)) l31-v (λ (X---v : matita-basics-logic.Or l31-v l31-v (matita-basics-logic.eq l31-v A-v a-v b-v) (mem l31-v A-v a-v (nil l31-v A-v))) -> matita-basics-logic.eq l31-v A-v a-v b-v) (λ (auto-v : matita-basics-logic.eq l31-v A-v a-v b-v) -> matita-basics-logic.rewrite-l l31-v l31-v A-v a-v (λ (X---v : A-v) -> matita-basics-logic.eq l31-v A-v a-v X---v) (matita-basics-logic.refl l31-v A-v a-v) b-v auto-v) (matita-basics-logic.False-ind l31-v l31-v (λ (X-x-66-v : matita-basics-logic.False l31-v) -> matita-basics-logic.eq l31-v A-v a-v b-v)) X-clearme-v

mem-map : (l209-v l202-v : Level) -> (A-v : Set l209-v) -> (B-v : Set l202-v) -> (f-v : (X---v : A-v) -> B-v) -> (l-v : list l209-v A-v) -> (b-v : B-v) -> (X---v : mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v l-v)) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a-v : A-v) -> matita-basics-logic.And l209-v l202-v (mem l209-v A-v a-v l-v) (matita-basics-logic.eq l202-v B-v (f-v a-v) b-v))
mem-map = λ (l209-v l202-v : Level) -> λ (A-v : Set l209-v) -> λ (B-v : Set l202-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (l-v : list l209-v A-v) -> list-ind l209-v (l209-v ⊔ l202-v) A-v (λ (X-x-716-v : list l209-v A-v) -> (b-v : B-v) -> (X---v : mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v X-x-716-v)) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a-v : A-v) -> matita-basics-logic.And l209-v l202-v (mem l209-v A-v a-v X-x-716-v) (matita-basics-logic.eq l202-v B-v (f-v a-v) b-v))) (λ (b-v : B-v) -> matita-basics-logic.False-ind l202-v (l209-v ⊔ l202-v) (λ (X-x-66-v : matita-basics-logic.False l202-v) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a-v : A-v) -> matita-basics-logic.And l209-v l202-v (matita-basics-logic.False l209-v) (matita-basics-logic.eq l202-v B-v (f-v a-v) b-v)))) (λ (a-v : A-v) -> λ (tl-v : list l209-v A-v) -> λ (Hind-v : (b-v : B-v) -> (X---v : mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v tl-v)) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.And l209-v l202-v (mem l209-v A-v a0-v tl-v) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v))) -> λ (b-v : B-v) -> λ (X-clearme-v : matita-basics-logic.Or l202-v l202-v (matita-basics-logic.eq l202-v B-v b-v (f-v a-v)) (mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v tl-v))) -> matita-basics-logic.match-Or l202-v l202-v (matita-basics-logic.eq l202-v B-v b-v (f-v a-v)) (mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v tl-v)) (l209-v ⊔ l202-v) (λ (X---v : matita-basics-logic.Or l202-v l202-v (matita-basics-logic.eq l202-v B-v b-v (f-v a-v)) (mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v tl-v))) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.And l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a0-v a-v) (mem l209-v A-v a0-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v))) (λ (eqb-v : matita-basics-logic.eq l202-v B-v b-v (f-v a-v)) -> matita-basics-logic.ex-intro l209-v (l209-v ⊔ l202-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.And l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a0-v a-v) (mem l209-v A-v a0-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v)) a-v (matita-basics-logic.conj l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a-v a-v) (mem l209-v A-v a-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a-v) b-v) (matita-basics-logic.or-introl l209-v l209-v (matita-basics-logic.eq l209-v A-v a-v a-v) (mem l209-v A-v a-v tl-v) (matita-basics-logic.refl l209-v A-v a-v)) (matita-basics-logic.rewrite-l l202-v l202-v B-v b-v (λ (X---v : B-v) -> matita-basics-logic.eq l202-v B-v X---v b-v) (matita-basics-logic.refl l202-v B-v b-v) (f-v a-v) eqb-v))) (λ (memb-v : mem l202-v B-v b-v (map l209-v l202-v A-v B-v f-v tl-v)) -> matita-basics-logic.match-ex l209-v (l209-v ⊔ l202-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.And l209-v l202-v (mem l209-v A-v a0-v tl-v) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v)) (l209-v ⊔ l202-v) (λ (X---v : matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.And l209-v l202-v (mem l209-v A-v a0-v tl-v) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v))) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a0-v : A-v) -> matita-basics-logic.And l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a0-v a-v) (mem l209-v A-v a0-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v))) (λ (a0-v : A-v) -> λ (X-clearme0-v : matita-basics-logic.And l209-v l202-v (mem l209-v A-v a0-v tl-v) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v)) -> matita-basics-logic.match-And l209-v l202-v (mem l209-v A-v a0-v tl-v) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v) (l209-v ⊔ l202-v) (λ (X---v : matita-basics-logic.And l209-v l202-v (mem l209-v A-v a0-v tl-v) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v)) -> matita-basics-logic.ex l209-v (l209-v ⊔ l202-v) A-v (λ (a00-v : A-v) -> matita-basics-logic.And l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a00-v a-v) (mem l209-v A-v a00-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a00-v) b-v))) (λ (mema-v : mem l209-v A-v a0-v tl-v) -> λ (eqb-v : matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v) -> matita-basics-logic.ex-intro l209-v (l209-v ⊔ l202-v) A-v (λ (a00-v : A-v) -> matita-basics-logic.And l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a00-v a-v) (mem l209-v A-v a00-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a00-v) b-v)) a0-v (matita-basics-logic.conj l209-v l202-v (matita-basics-logic.Or l209-v l209-v (matita-basics-logic.eq l209-v A-v a0-v a-v) (mem l209-v A-v a0-v tl-v)) (matita-basics-logic.eq l202-v B-v (f-v a0-v) b-v) (matita-basics-logic.or-intror l209-v l209-v (matita-basics-logic.eq l209-v A-v a0-v a-v) (mem l209-v A-v a0-v tl-v) mema-v) (matita-basics-logic.rewrite-r l202-v l202-v B-v b-v (λ (X---v : B-v) -> matita-basics-logic.eq l202-v B-v X---v b-v) (matita-basics-logic.refl l202-v B-v b-v) (f-v a0-v) eqb-v))) X-clearme0-v) (Hind-v b-v memb-v)) X-clearme-v) l-v

mem-map-forward : (l75-v l74-v : Level) -> (A-v : Set l75-v) -> (B-v : Set l74-v) -> (f-v : (X---v : A-v) -> B-v) -> (a-v : A-v) -> (l-v : list l75-v A-v) -> (X---v : mem l75-v A-v a-v l-v) -> mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v l-v)
mem-map-forward = λ (l75-v l74-v : Level) -> λ (A-v : Set l75-v) -> λ (B-v : Set l74-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (a-v : A-v) -> λ (l-v : list l75-v A-v) -> list-ind l75-v (l75-v ⊔ l74-v) A-v (λ (X-x-716-v : list l75-v A-v) -> (X---v : mem l75-v A-v a-v X-x-716-v) -> mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v X-x-716-v)) (matita-basics-logic.False-ind l75-v l74-v (λ (X-x-66-v : matita-basics-logic.False l75-v) -> matita-basics-logic.False l74-v)) (λ (b-v : A-v) -> λ (tl-v : list l75-v A-v) -> λ (Hind-v : (X---v : mem l75-v A-v a-v tl-v) -> mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v tl-v)) -> λ (X-clearme-v : mem l75-v A-v a-v (cons l75-v A-v b-v tl-v)) -> matita-basics-logic.match-Or l75-v l75-v (matita-basics-logic.eq l75-v A-v a-v b-v) (mem l75-v A-v a-v tl-v) l74-v (λ (X---v : matita-basics-logic.Or l75-v l75-v (matita-basics-logic.eq l75-v A-v a-v b-v) (mem l75-v A-v a-v tl-v)) -> mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v (cons l75-v A-v b-v tl-v))) (λ (eqab-v : matita-basics-logic.eq l75-v A-v a-v b-v) -> matita-basics-logic.eq-ind l75-v l74-v A-v a-v (λ (x-1-v : A-v) -> λ (X-x-2-v : matita-basics-logic.eq l75-v A-v a-v x-1-v) -> mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v (cons l75-v A-v x-1-v tl-v))) (matita-basics-logic.or-introl l74-v l74-v (matita-basics-logic.eq l74-v B-v (f-v a-v) (f-v a-v)) (mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v tl-v)) (matita-basics-logic.refl l74-v B-v (f-v a-v))) b-v eqab-v) (λ (memtl-v : mem l75-v A-v a-v tl-v) -> matita-basics-logic.or-intror l74-v l74-v (matita-basics-logic.eq l74-v B-v (f-v a-v) (f-v b-v)) (mem l74-v B-v (f-v a-v) (map l75-v l74-v A-v B-v f-v tl-v)) (Hind-v memtl-v)) X-clearme-v) l-v

mem-filter : (l182-v : Level) -> (S-v : Set l182-v) -> (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> (a-v : S-v) -> (l-v : list l182-v S-v) -> (X---v : mem l182-v S-v a-v (filter l182-v S-v f-v l-v)) -> mem l182-v S-v a-v l-v
mem-filter = λ (l182-v : Level) -> λ (S-v : Set l182-v) -> λ (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> λ (a-v : S-v) -> λ (l-v : list l182-v S-v) -> list-ind l182-v l182-v S-v (λ (X-x-716-v : list l182-v S-v) -> (X---v : mem l182-v S-v a-v (filter l182-v S-v f-v X-x-716-v)) -> mem l182-v S-v a-v X-x-716-v) (λ (auto-v : matita-basics-logic.False l182-v) -> auto-v) (λ (b-v : S-v) -> λ (tl-v : list l182-v S-v) -> λ (Hind-v : (X---v : mem l182-v S-v a-v (filter l182-v S-v f-v tl-v)) -> mem l182-v S-v a-v tl-v) -> matita-basics-bool.match-bool l182-v (λ (X---v : matita-basics-bool.bool) -> (X--1-v : mem l182-v S-v a-v (matita-basics-bool.match-bool l182-v (λ (X-0-v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v b-v (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X-0-v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v)) (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X-0-v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v) X---v)) -> matita-basics-logic.Or l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v tl-v)) (λ (X-clearme-v : matita-basics-logic.Or l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X---v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v))) -> matita-basics-logic.match-Or l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X---v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v)) l182-v (λ (X---v : matita-basics-logic.Or l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X---v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v))) -> matita-basics-logic.Or l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v tl-v)) (λ (eqab-v : matita-basics-logic.eq l182-v S-v a-v b-v) -> matita-basics-logic.or-introl l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v tl-v) eqab-v) (λ (H-v : mem l182-v S-v a-v (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X---v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v)) -> matita-basics-logic.or-intror l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v tl-v) (Hind-v H-v)) X-clearme-v) (λ (H-v : mem l182-v S-v a-v (foldr l182-v l182-v S-v (list l182-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l182-v S-v) -> matita-basics-bool.match-bool l182-v (λ (X---v : matita-basics-bool.bool) -> list l182-v S-v) (cons l182-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l182-v S-v) tl-v)) -> matita-basics-logic.or-intror l182-v l182-v (matita-basics-logic.eq l182-v S-v a-v b-v) (mem l182-v S-v a-v tl-v) (Hind-v H-v)) (f-v b-v)) l-v

mem-filter-true : (l240-v : Level) -> (S-v : Set l240-v) -> (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> (a-v : S-v) -> (l-v : list l240-v S-v) -> (X---v : mem l240-v S-v a-v (filter l240-v S-v f-v l-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true
mem-filter-true = λ (l240-v : Level) -> λ (S-v : Set l240-v) -> λ (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> λ (a-v : S-v) -> λ (l-v : list l240-v S-v) -> list-ind l240-v l240-v S-v (λ (X-x-716-v : list l240-v S-v) -> (X---v : mem l240-v S-v a-v (filter l240-v S-v f-v X-x-716-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) (matita-basics-logic.False-ind l240-v lzero (λ (X-x-66-v : matita-basics-logic.False l240-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true)) (λ (b-v : S-v) -> λ (tl-v : list l240-v S-v) -> λ (Hind-v : (X---v : mem l240-v S-v a-v (filter l240-v S-v f-v tl-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.false) l240-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.false)) -> (X--1-v : mem l240-v S-v a-v (filter l240-v S-v f-v (cons l240-v S-v b-v tl-v))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero l240-v matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> (X--1-v : mem l240-v S-v a-v (matita-basics-bool.match-bool l240-v (λ (X-0-v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v b-v (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x0-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X-0-v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x0-v l0-v) l0-v (f-v x0-v)) (nil l240-v S-v) tl-v)) (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x0-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X-0-v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x0-v l0-v) l0-v (f-v x0-v)) (nil l240-v S-v) tl-v) x-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) (λ (X-clearme-v : matita-basics-logic.Or l240-v l240-v (matita-basics-logic.eq l240-v S-v a-v b-v) (mem l240-v S-v a-v (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X---v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l240-v S-v) tl-v))) -> matita-basics-logic.match-Or l240-v l240-v (matita-basics-logic.eq l240-v S-v a-v b-v) (mem l240-v S-v a-v (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X---v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l240-v S-v) tl-v)) lzero (λ (X---v : matita-basics-logic.Or l240-v l240-v (matita-basics-logic.eq l240-v S-v a-v b-v) (mem l240-v S-v a-v (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X---v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x-v l0-v) l0-v (f-v x-v)) (nil l240-v S-v) tl-v))) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) (λ (eqab-v : matita-basics-logic.eq l240-v S-v a-v b-v) -> matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (f-v a-v) (matita-basics-logic.rewrite-r l240-v lzero S-v b-v (λ (X---v : S-v) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v X---v) matita-basics-bool.true) H-v a-v eqab-v)) Hind-v X-clearme-v) (f-v b-v) H-v) (λ (H-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero l240-v matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> (X--1-v : mem l240-v S-v a-v (matita-basics-bool.match-bool l240-v (λ (X-0-v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v b-v (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x0-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X-0-v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x0-v l0-v) l0-v (f-v x0-v)) (nil l240-v S-v) tl-v)) (foldr l240-v l240-v S-v (list l240-v S-v) (λ (x0-v : S-v) -> λ (l0-v : list l240-v S-v) -> matita-basics-bool.match-bool l240-v (λ (X-0-v : matita-basics-bool.bool) -> list l240-v S-v) (cons l240-v S-v x0-v l0-v) l0-v (f-v x0-v)) (nil l240-v S-v) tl-v) x-v)) -> matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) Hind-v (f-v b-v) H-v) (matita-basics-bool.true-or-false (f-v b-v))) l-v

mem-filter-l : (l135-v : Level) -> (S-v : Set l135-v) -> (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> (x-v : S-v) -> (l-v : list l135-v S-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v x-v) matita-basics-bool.true) -> (X--1-v : mem l135-v S-v x-v l-v) -> mem l135-v S-v x-v (filter l135-v S-v f-v l-v)
mem-filter-l = λ (l135-v : Level) -> λ (S-v : Set l135-v) -> λ (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> λ (x-v : S-v) -> λ (l-v : list l135-v S-v) -> λ (fx-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v x-v) matita-basics-bool.true) -> list-ind l135-v l135-v S-v (λ (X-x-716-v : list l135-v S-v) -> (X---v : mem l135-v S-v x-v X-x-716-v) -> mem l135-v S-v x-v (filter l135-v S-v f-v X-x-716-v)) (matita-basics-logic.False-ind l135-v l135-v (λ (X-x-66-v : matita-basics-logic.False l135-v) -> mem l135-v S-v x-v (filter l135-v S-v f-v (nil l135-v S-v)))) (λ (b-v : S-v) -> λ (tl-v : list l135-v S-v) -> λ (Hind-v : (X---v : mem l135-v S-v x-v tl-v) -> mem l135-v S-v x-v (filter l135-v S-v f-v tl-v)) -> λ (X-clearme-v : mem l135-v S-v x-v (cons l135-v S-v b-v tl-v)) -> matita-basics-logic.match-Or l135-v l135-v (matita-basics-logic.eq l135-v S-v x-v b-v) (mem l135-v S-v x-v tl-v) l135-v (λ (X---v : matita-basics-logic.Or l135-v l135-v (matita-basics-logic.eq l135-v S-v x-v b-v) (mem l135-v S-v x-v tl-v)) -> mem l135-v S-v x-v (filter l135-v S-v f-v (cons l135-v S-v b-v tl-v))) (λ (eqxb-v : matita-basics-logic.eq l135-v S-v x-v b-v) -> matita-basics-logic.eq-ind l135-v l135-v S-v x-v (λ (x-1-v : S-v) -> λ (X-x-2-v : matita-basics-logic.eq l135-v S-v x-v x-1-v) -> mem l135-v S-v x-v (filter l135-v S-v f-v (cons l135-v S-v x-1-v tl-v))) (matita-basics-logic.eq-ind-r l135-v l135-v (list l135-v S-v) (cons l135-v S-v x-v (filter l135-v S-v f-v tl-v)) (λ (x0-v : list l135-v S-v) -> λ (X---v : matita-basics-logic.eq l135-v (list l135-v S-v) x0-v (cons l135-v S-v x-v (filter l135-v S-v f-v tl-v))) -> mem l135-v S-v x-v x0-v) (matita-basics-logic.or-introl l135-v l135-v (matita-basics-logic.eq l135-v S-v x-v x-v) (mem l135-v S-v x-v (filter l135-v S-v f-v tl-v)) (matita-basics-logic.refl l135-v S-v x-v)) (filter l135-v S-v f-v (cons l135-v S-v x-v tl-v)) (filter-true l135-v S-v tl-v x-v f-v fx-v)) b-v eqxb-v) (λ (Htl-v : mem l135-v S-v x-v tl-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.false) l135-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.false)) -> mem l135-v S-v x-v (filter l135-v S-v f-v (cons l135-v S-v b-v tl-v))) (λ (fb-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r l135-v l135-v (list l135-v S-v) (cons l135-v S-v b-v (filter l135-v S-v f-v tl-v)) (λ (x0-v : list l135-v S-v) -> λ (X---v : matita-basics-logic.eq l135-v (list l135-v S-v) x0-v (cons l135-v S-v b-v (filter l135-v S-v f-v tl-v))) -> mem l135-v S-v x-v x0-v) (matita-basics-logic.or-intror l135-v l135-v (matita-basics-logic.eq l135-v S-v x-v b-v) (mem l135-v S-v x-v (filter l135-v S-v f-v tl-v)) (Hind-v Htl-v)) (filter l135-v S-v f-v (cons l135-v S-v b-v tl-v)) (filter-true l135-v S-v tl-v b-v f-v fb-v)) (λ (fb-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v b-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r l135-v l135-v (list l135-v S-v) (filter l135-v S-v f-v tl-v) (λ (x0-v : list l135-v S-v) -> λ (X---v : matita-basics-logic.eq l135-v (list l135-v S-v) x0-v (filter l135-v S-v f-v tl-v)) -> mem l135-v S-v x-v x0-v) (Hind-v Htl-v) (filter l135-v S-v f-v (cons l135-v S-v b-v tl-v)) (filter-false l135-v S-v tl-v b-v f-v fb-v)) (matita-basics-bool.true-or-false (f-v b-v))) X-clearme-v) l-v

filter-case : (l385-v : Level) -> (A-v : Set l385-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (l-v : list l385-v A-v) -> (x-v : A-v) -> (X---v : mem l385-v A-v x-v l-v) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v l-v)) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) l-v))
filter-case = λ (l385-v : Level) -> λ (A-v : Set l385-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (l-v : list l385-v A-v) -> list-ind l385-v l385-v A-v (λ (X-x-716-v : list l385-v A-v) -> (x-v : A-v) -> (X---v : mem l385-v A-v x-v X-x-716-v) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v X-x-716-v)) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) X-x-716-v))) (λ (x-v : A-v) -> matita-basics-logic.False-ind l385-v l385-v (λ (X-x-66-v : matita-basics-logic.False l385-v) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (nil l385-v A-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (nil l385-v A-v))))) (λ (a-v : A-v) -> λ (tl-v : list l385-v A-v) -> λ (Hind-v : (x-v : A-v) -> (X---v : mem l385-v A-v x-v tl-v) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v tl-v)) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v))) -> λ (x-v : A-v) -> λ (X-clearme-v : mem l385-v A-v x-v (cons l385-v A-v a-v tl-v)) -> matita-basics-logic.match-Or l385-v l385-v (matita-basics-logic.eq l385-v A-v x-v a-v) (mem l385-v A-v x-v tl-v) l385-v (λ (X---v : matita-basics-logic.Or l385-v l385-v (matita-basics-logic.eq l385-v A-v x-v a-v) (mem l385-v A-v x-v tl-v)) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)))) (λ (eqxa-v : matita-basics-logic.eq l385-v A-v x-v a-v) -> matita-basics-logic.eq-ind-r l385-v l385-v A-v a-v (λ (x0-v : A-v) -> λ (X---v : matita-basics-logic.eq l385-v A-v x0-v a-v) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x0-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x0-v (filter l385-v A-v (λ (x00-v : A-v) -> matita-basics-bool.notb (p-v x00-v)) (cons l385-v A-v a-v tl-v)))) (matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) l385-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false)) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v a-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v a-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.or-introl l385-v l385-v (mem l385-v A-v a-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v a-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v))) (matita-basics-logic.eq-ind-r l385-v l385-v (list l385-v A-v) (cons l385-v A-v a-v (filter l385-v A-v p-v tl-v)) (λ (x0-v : list l385-v A-v) -> λ (X---v : matita-basics-logic.eq l385-v (list l385-v A-v) x0-v (cons l385-v A-v a-v (filter l385-v A-v p-v tl-v))) -> mem l385-v A-v a-v x0-v) (matita-basics-logic.or-introl l385-v l385-v (matita-basics-logic.eq l385-v A-v a-v a-v) (mem l385-v A-v a-v (filter l385-v A-v p-v tl-v)) (matita-basics-logic.refl l385-v A-v a-v)) (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v)) (filter-true l385-v A-v tl-v a-v p-v Hcase-v))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.or-intror l385-v l385-v (mem l385-v A-v a-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v a-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v))) (matita-basics-logic.eq-ind-r l385-v l385-v (list l385-v A-v) (cons l385-v A-v a-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) (λ (x0-v : list l385-v A-v) -> λ (X---v : matita-basics-logic.eq l385-v (list l385-v A-v) x0-v (cons l385-v A-v a-v (filter l385-v A-v (λ (x00-v : A-v) -> matita-basics-bool.notb (p-v x00-v)) tl-v))) -> mem l385-v A-v a-v x0-v) (matita-basics-logic.or-introl l385-v l385-v (matita-basics-logic.eq l385-v A-v a-v a-v) (mem l385-v A-v a-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) (matita-basics-logic.refl l385-v A-v a-v)) (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)) (filter-true l385-v A-v tl-v a-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x0-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x0-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.notb x0-v) matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.notb matita-basics-bool.false)) (p-v a-v) Hcase-v)))) (matita-basics-bool.true-or-false (p-v a-v))) x-v eqxa-v) (λ (memx-v : mem l385-v A-v x-v tl-v) -> matita-basics-logic.match-Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v tl-v)) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) l385-v (λ (X---v : matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v tl-v)) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v))) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)))) (λ (memx0-v : mem l385-v A-v x-v (filter l385-v A-v p-v tl-v)) -> matita-basics-logic.or-introl l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v))) (matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) l385-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false)) -> mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (λ (Hpa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r l385-v l385-v (list l385-v A-v) (cons l385-v A-v a-v (filter l385-v A-v p-v tl-v)) (λ (x0-v : list l385-v A-v) -> λ (X---v : matita-basics-logic.eq l385-v (list l385-v A-v) x0-v (cons l385-v A-v a-v (filter l385-v A-v p-v tl-v))) -> mem l385-v A-v x-v x0-v) (matita-basics-logic.or-intror l385-v l385-v (matita-basics-logic.eq l385-v A-v x-v a-v) (mem l385-v A-v x-v (filter l385-v A-v p-v tl-v)) memx0-v) (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v)) (filter-true l385-v A-v tl-v a-v p-v Hpa-v)) (λ (Hpa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r l385-v l385-v (list l385-v A-v) (filter l385-v A-v p-v tl-v) (λ (x0-v : list l385-v A-v) -> λ (X---v : matita-basics-logic.eq l385-v (list l385-v A-v) x0-v (filter l385-v A-v p-v tl-v)) -> mem l385-v A-v x-v x0-v) memx0-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v)) (filter-false l385-v A-v tl-v a-v p-v Hpa-v)) (matita-basics-bool.true-or-false (p-v a-v)))) (λ (memx0-v : mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) l385-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false)) -> matita-basics-logic.Or l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.or-intror l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v))) (matita-basics-logic.eq-ind-r l385-v l385-v (list l385-v A-v) (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v) (λ (x0-v : list l385-v A-v) -> λ (X---v : matita-basics-logic.eq l385-v (list l385-v A-v) x0-v (filter l385-v A-v (λ (x00-v : A-v) -> matita-basics-bool.notb (p-v x00-v)) tl-v)) -> mem l385-v A-v x-v x0-v) memx0-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)) (filter-false l385-v A-v tl-v a-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x0-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x0-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.notb x0-v) matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.notb matita-basics-bool.true)) (p-v a-v) Hcase-v)))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.or-intror l385-v l385-v (mem l385-v A-v x-v (filter l385-v A-v p-v (cons l385-v A-v a-v tl-v))) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v))) (matita-basics-logic.eq-ind-r l385-v l385-v (list l385-v A-v) (cons l385-v A-v a-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) (λ (x0-v : list l385-v A-v) -> λ (X---v : matita-basics-logic.eq l385-v (list l385-v A-v) x0-v (cons l385-v A-v a-v (filter l385-v A-v (λ (x00-v : A-v) -> matita-basics-bool.notb (p-v x00-v)) tl-v))) -> mem l385-v A-v x-v x0-v) (matita-basics-logic.or-intror l385-v l385-v (matita-basics-logic.eq l385-v A-v x-v a-v) (mem l385-v A-v x-v (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) memx0-v) (filter l385-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l385-v A-v a-v tl-v)) (filter-true l385-v A-v tl-v a-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x0-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x0-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.notb x0-v) matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.notb matita-basics-bool.false)) (p-v a-v) Hcase-v)))) (matita-basics-bool.true-or-false (p-v a-v))) (Hind-v x-v memx-v)) X-clearme-v) l-v

filter-length2 : (l210-v : Level) -> (A-v : Set l210-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (l-v : list l210-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v l-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) l-v))) (length l210-v A-v l-v)
filter-length2 = λ (l210-v : Level) -> λ (A-v : Set l210-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (l-v : list l210-v A-v) -> list-ind l210-v lzero A-v (λ (X-x-716-v : list l210-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v X-x-716-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) X-x-716-v))) (length l210-v A-v X-x-716-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v (nil l210-v A-v))) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) (nil l210-v A-v))))) (λ (a-v : A-v) -> λ (tl-v : list l210-v A-v) -> λ (Hind-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v))) (length l210-v A-v tl-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v (cons l210-v A-v a-v tl-v))) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) (cons l210-v A-v a-v tl-v)))) (length l210-v A-v (cons l210-v A-v a-v tl-v))) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r l210-v lzero (list l210-v A-v) (cons l210-v A-v a-v (filter l210-v A-v p-v tl-v)) (λ (x-v : list l210-v A-v) -> λ (X---v : matita-basics-logic.eq l210-v (list l210-v A-v) x-v (cons l210-v A-v a-v (filter l210-v A-v p-v tl-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v x-v) (length l210-v A-v (filter l210-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l210-v A-v a-v tl-v)))) (length l210-v A-v (cons l210-v A-v a-v tl-v))) (matita-basics-logic.eq-ind-r l210-v lzero (list l210-v A-v) (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v) (λ (x-v : list l210-v A-v) -> λ (X---v : matita-basics-logic.eq l210-v (list l210-v A-v) x-v (filter l210-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (cons l210-v A-v a-v (filter l210-v A-v p-v tl-v))) (length l210-v A-v x-v)) (length l210-v A-v (cons l210-v A-v a-v tl-v))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v))) (length l210-v A-v tl-v) Hind-v) (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) (cons l210-v A-v a-v tl-v)) (filter-false l210-v A-v tl-v a-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.notb x-v) matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.notb matita-basics-bool.true)) (p-v a-v) Hcase-v))) (filter l210-v A-v p-v (cons l210-v A-v a-v tl-v)) (filter-true l210-v A-v tl-v a-v p-v Hcase-v)) (λ (Hcase-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r l210-v lzero (list l210-v A-v) (filter l210-v A-v p-v tl-v) (λ (x-v : list l210-v A-v) -> λ (X---v : matita-basics-logic.eq l210-v (list l210-v A-v) x-v (filter l210-v A-v p-v tl-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v x-v) (length l210-v A-v (filter l210-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) (cons l210-v A-v a-v tl-v)))) (length l210-v A-v (cons l210-v A-v a-v tl-v))) (matita-basics-logic.eq-ind-r l210-v lzero (list l210-v A-v) (cons l210-v A-v a-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v)) (λ (x-v : list l210-v A-v) -> λ (X---v : matita-basics-logic.eq l210-v (list l210-v A-v) x-v (cons l210-v A-v a-v (filter l210-v A-v (λ (x0-v : A-v) -> matita-basics-bool.notb (p-v x0-v)) tl-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v x-v)) (length l210-v A-v (cons l210-v A-v a-v tl-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v)))) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v)))) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v (length l210-v A-v (cons l210-v A-v a-v tl-v))) (matita-basics-logic.eq-f lzero lzero matita-arithmetics-nat.nat matita-arithmetics-nat.nat matita-arithmetics-nat.S (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v))) (length l210-v A-v tl-v) Hind-v) (matita-arithmetics-nat.plus (length l210-v A-v (filter l210-v A-v p-v tl-v)) (matita-arithmetics-nat.S (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v)))) (matita-arithmetics-nat.plus-n-Sm (length l210-v A-v (filter l210-v A-v p-v tl-v)) (length l210-v A-v (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) tl-v)))) (filter l210-v A-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) (cons l210-v A-v a-v tl-v)) (filter-true l210-v A-v tl-v a-v (λ (x-v : A-v) -> matita-basics-bool.notb (p-v x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq lzero matita-basics-bool.bool (matita-basics-bool.notb x-v) matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool (matita-basics-bool.notb matita-basics-bool.false)) (p-v a-v) Hcase-v))) (filter l210-v A-v p-v (cons l210-v A-v a-v tl-v)) (filter-false l210-v A-v tl-v a-v p-v Hcase-v)) (matita-basics-bool.true-or-false (p-v a-v))) l-v

unique : (l2-v : Level) -> (H-v : Set l2-v) -> (X---v : list l2-v H-v) -> Set l2-v
unique ll0-v H-v nil' = matita-basics-logic.True ll0-v
unique ll0-v H-v (cons' a-v tl-v) = matita-basics-logic.And ll0-v ll0-v (matita-basics-logic.Not ll0-v (mem ll0-v H-v a-v tl-v)) (unique ll0-v H-v tl-v)

unique-filter : (l113-v : Level) -> (S-v : Set l113-v) -> (l-v : list l113-v S-v) -> (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> (X---v : unique l113-v S-v l-v) -> unique l113-v S-v (filter l113-v S-v f-v l-v)
unique-filter = λ (l113-v : Level) -> λ (S-v : Set l113-v) -> λ (l-v : list l113-v S-v) -> λ (f-v : (X---v : S-v) -> matita-basics-bool.bool) -> list-ind l113-v l113-v S-v (λ (X-x-716-v : list l113-v S-v) -> (X---v : unique l113-v S-v X-x-716-v) -> unique l113-v S-v (filter l113-v S-v f-v X-x-716-v)) (λ (auto-v : unique l113-v S-v (nil l113-v S-v)) -> auto-v) (λ (a-v : S-v) -> λ (tl-v : list l113-v S-v) -> λ (Hind-v : (X---v : unique l113-v S-v tl-v) -> unique l113-v S-v (filter l113-v S-v f-v tl-v)) -> λ (X-clearme-v : unique l113-v S-v (cons l113-v S-v a-v tl-v)) -> matita-basics-logic.match-And l113-v l113-v (matita-basics-logic.Not l113-v (mem l113-v S-v a-v tl-v)) (unique l113-v S-v tl-v) l113-v (λ (X---v : matita-basics-logic.And l113-v l113-v (matita-basics-logic.Not l113-v (mem l113-v S-v a-v tl-v)) (unique l113-v S-v tl-v)) -> unique l113-v S-v (filter l113-v S-v f-v (cons l113-v S-v a-v tl-v))) (λ (memba-v : matita-basics-logic.Not l113-v (mem l113-v S-v a-v tl-v)) -> λ (uniquetl-v : unique l113-v S-v tl-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.false) l113-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.false)) -> unique l113-v S-v (filter l113-v S-v f-v (cons l113-v S-v a-v tl-v))) (λ (Hfa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r l113-v l113-v (list l113-v S-v) (cons l113-v S-v a-v (filter l113-v S-v f-v tl-v)) (λ (x-v : list l113-v S-v) -> λ (X---v : matita-basics-logic.eq l113-v (list l113-v S-v) x-v (cons l113-v S-v a-v (filter l113-v S-v f-v tl-v))) -> unique l113-v S-v x-v) (matita-basics-logic.conj l113-v l113-v (matita-basics-logic.Not l113-v (mem l113-v S-v a-v (filter l113-v S-v f-v tl-v))) (unique l113-v S-v (filter l113-v S-v f-v tl-v)) (matita-basics-logic.not-to-not l113-v (mem l113-v S-v a-v (filter l113-v S-v f-v tl-v)) (mem l113-v S-v a-v tl-v) (mem-filter l113-v S-v f-v a-v tl-v) memba-v) (Hind-v uniquetl-v)) (filter l113-v S-v f-v (cons l113-v S-v a-v tl-v)) (filter-true l113-v S-v tl-v a-v f-v Hfa-v)) (λ (Hfa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (f-v a-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r l113-v l113-v (list l113-v S-v) (filter l113-v S-v f-v tl-v) (λ (x-v : list l113-v S-v) -> λ (X---v : matita-basics-logic.eq l113-v (list l113-v S-v) x-v (filter l113-v S-v f-v tl-v)) -> unique l113-v S-v x-v) (Hind-v uniquetl-v) (filter l113-v S-v f-v (cons l113-v S-v a-v tl-v)) (filter-false l113-v S-v tl-v a-v f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (f-v a-v) Hfa-v))) (matita-basics-bool.true-or-false (f-v a-v))) X-clearme-v) l-v

filter-eqb : (m-v : matita-arithmetics-nat.nat) -> (l-v : list lzero matita-arithmetics-nat.nat) -> (X---v : unique lzero matita-arithmetics-nat.nat l-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v l-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat)))
filter-eqb = λ (m-v : matita-arithmetics-nat.nat) -> λ (l-v : list lzero matita-arithmetics-nat.nat) -> list-ind lzero lzero matita-arithmetics-nat.nat (λ (X-x-716-v : list lzero matita-arithmetics-nat.nat) -> (X---v : unique lzero matita-arithmetics-nat.nat X-x-716-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v X-x-716-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) X-x-716-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v X-x-716-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) X-x-716-v) (nil lzero matita-arithmetics-nat.nat)))) (λ (X---v : unique lzero matita-arithmetics-nat.nat (nil lzero matita-arithmetics-nat.nat)) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (nil lzero matita-arithmetics-nat.nat)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (nil lzero matita-arithmetics-nat.nat)) (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.conj lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (nil lzero matita-arithmetics-nat.nat)) (nil lzero matita-arithmetics-nat.nat)) (matita-basics-logic.nmk lzero (mem lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)) (matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.False lzero))) (matita-basics-logic.refl lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (nil lzero matita-arithmetics-nat.nat))))) (λ (a-v : matita-arithmetics-nat.nat) -> λ (tl-v : list lzero matita-arithmetics-nat.nat) -> λ (Hind-v : (X---v : unique lzero matita-arithmetics-nat.nat tl-v) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat)))) -> λ (X-clearme-v : unique lzero matita-arithmetics-nat.nat (cons lzero matita-arithmetics-nat.nat a-v tl-v)) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat a-v tl-v)) (unique lzero matita-arithmetics-nat.nat tl-v) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat a-v tl-v)) (unique lzero matita-arithmetics-nat.nat tl-v)) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat)))) (λ (Hmema-v : matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat a-v tl-v)) -> λ (Hunique-v : unique lzero matita-arithmetics-nat.nat tl-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat))) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat)))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat)))) (λ (X-clearme0-v : matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) -> matita-basics-logic.match-And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) lzero (λ (X---v : matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat)))) (λ (Hmemm-v : mem lzero matita-arithmetics-nat.nat m-v tl-v) -> λ (Hind0-v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.conj lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.or-intror lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) (mem lzero matita-arithmetics-nat.nat m-v tl-v) Hmemm-v) (matita-basics-logic.eq-ind-r lzero lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (λ (x-v : list lzero matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v)) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.rewrite-l lzero lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (λ (X---v : list lzero matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) X---v) (matita-basics-logic.refl lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)) Hind0-v) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (filter-false lzero matita-arithmetics-nat.nat tl-v a-v (matita-arithmetics-nat.eqb m-v) (matita-arithmetics-nat.not-eq-to-eqb-false m-v a-v (matita-basics-logic.nmk lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) (λ (eqma-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) -> matita-basics-logic.absurd lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v) Hmemm-v (matita-basics-logic.eq-coerc lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) Hmema-v (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat m-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat X---v tl-v)) (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v))) a-v eqma-v))))))))) X-clearme0-v) (λ (X-clearme0-v : matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat))) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat)))) (λ (Hmemm-v : matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v tl-v)) -> λ (Hind0-v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (nil lzero matita-arithmetics-nat.nat)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v)) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) (matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v))) -> matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat)))) (λ (eqma-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) -> matita-basics-logic.or-introl lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat m-v (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v x-1-v) -> matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat x-1-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat x-1-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.conj lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat m-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat m-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.or-introl lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v m-v) (mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v)) (matita-basics-logic.eq-ind-r lzero lzero (list lzero matita-arithmetics-nat.nat) (cons lzero matita-arithmetics-nat.nat m-v (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v)) (λ (x-v : list lzero matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (cons lzero matita-arithmetics-nat.nat m-v (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v))) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.eq-ind-r lzero lzero (list lzero matita-arithmetics-nat.nat) (nil lzero matita-arithmetics-nat.nat) (λ (x-v : list lzero matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (nil lzero matita-arithmetics-nat.nat)) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (cons lzero matita-arithmetics-nat.nat m-v x-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.rewrite-l lzero lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (λ (X---v : list lzero matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (cons lzero matita-arithmetics-nat.nat m-v X---v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.rewrite-l lzero lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (λ (X---v : list lzero matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (cons lzero matita-arithmetics-nat.nat m-v (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v)) (cons lzero matita-arithmetics-nat.nat m-v X---v)) (matita-basics-logic.refl lzero (list lzero matita-arithmetics-nat.nat) (cons lzero matita-arithmetics-nat.nat m-v (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v))) (nil lzero matita-arithmetics-nat.nat) Hind0-v) (nil lzero matita-arithmetics-nat.nat) Hind0-v) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) Hind0-v) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat m-v tl-v)) (filter-true lzero matita-arithmetics-nat.nat tl-v m-v (matita-arithmetics-nat.eqb m-v) (matita-arithmetics-nat.eq-to-eqb-true m-v m-v (matita-basics-logic.refl lzero matita-arithmetics-nat.nat m-v))))) a-v eqma-v)) (λ (eqma-v : matita-basics-logic.Not lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v)) -> matita-basics-logic.or-intror lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat))) (matita-basics-logic.conj lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v))) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (nil lzero matita-arithmetics-nat.nat)) (matita-basics-logic.not-to-not lzero (mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (mem lzero matita-arithmetics-nat.nat m-v tl-v) (λ (X-clearme1-v : mem lzero matita-arithmetics-nat.nat m-v (cons lzero matita-arithmetics-nat.nat a-v tl-v)) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) (mem lzero matita-arithmetics-nat.nat m-v tl-v) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) (mem lzero matita-arithmetics-nat.nat m-v tl-v)) -> mem lzero matita-arithmetics-nat.nat m-v tl-v) (λ (H-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> mem lzero matita-arithmetics-nat.nat m-v tl-v) (matita-basics-logic.absurd lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat m-v a-v) H-v eqma-v)) (λ (auto-v : mem lzero matita-arithmetics-nat.nat m-v tl-v) -> auto-v) X-clearme1-v) Hmemm-v) (matita-basics-logic.eq-ind-r lzero lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (λ (x-v : list lzero matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v)) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (nil lzero matita-arithmetics-nat.nat)) (matita-basics-logic.rewrite-l lzero lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) (λ (X---v : list lzero matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v) X---v) (matita-basics-logic.refl lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) tl-v)) (nil lzero matita-arithmetics-nat.nat) Hind0-v) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) (cons lzero matita-arithmetics-nat.nat a-v tl-v)) (filter-false lzero matita-arithmetics-nat.nat tl-v a-v (matita-arithmetics-nat.eqb m-v) (matita-arithmetics-nat.not-eq-to-eqb-false m-v a-v eqma-v))))) (matita-arithmetics-nat.decidable-eq-nat m-v a-v)) X-clearme0-v) (Hind-v Hunique-v)) X-clearme-v) l-v

length-filter-eqb : (m-v : matita-arithmetics-nat.nat) -> (l-v : list lzero matita-arithmetics-nat.nat) -> (X---v : unique lzero matita-arithmetics-nat.nat l-v) -> matita-arithmetics-nat.le (length lzero matita-arithmetics-nat.nat (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)
length-filter-eqb = λ (m-v : matita-arithmetics-nat.nat) -> λ (l-v : list lzero matita-arithmetics-nat.nat) -> λ (Huni-v : unique lzero matita-arithmetics-nat.nat l-v) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v l-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat))) lzero (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v l-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat)))) -> matita-arithmetics-nat.le (length lzero matita-arithmetics-nat.nat (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X-clearme-v : matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v l-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) -> matita-basics-logic.match-And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v l-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) lzero (λ (X---v : matita-basics-logic.And lzero lzero (mem lzero matita-arithmetics-nat.nat m-v l-v) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) -> matita-arithmetics-nat.le (length lzero matita-arithmetics-nat.nat (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : mem lzero matita-arithmetics-nat.nat m-v l-v) -> λ (H-v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) -> matita-basics-logic.eq-ind-r lzero lzero (list lzero matita-arithmetics-nat.nat) (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)) (λ (x-v : list lzero matita-arithmetics-nat.nat) -> λ (X-0-v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat))) -> matita-arithmetics-nat.le (length lzero matita-arithmetics-nat.nat x-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.le-n (length lzero matita-arithmetics-nat.nat (cons lzero matita-arithmetics-nat.nat m-v (nil lzero matita-arithmetics-nat.nat)))) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) H-v) X-clearme-v) (λ (X-clearme-v : matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat))) -> matita-basics-logic.match-And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat)) lzero (λ (X---v : matita-basics-logic.And lzero lzero (matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) (matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat))) -> matita-arithmetics-nat.le (length lzero matita-arithmetics-nat.nat (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v)) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (λ (X---v : matita-basics-logic.Not lzero (mem lzero matita-arithmetics-nat.nat m-v l-v)) -> λ (H-v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) (nil lzero matita-arithmetics-nat.nat)) -> matita-basics-logic.eq-ind-r lzero lzero (list lzero matita-arithmetics-nat.nat) (nil lzero matita-arithmetics-nat.nat) (λ (x-v : list lzero matita-arithmetics-nat.nat) -> λ (X-0-v : matita-basics-logic.eq lzero (list lzero matita-arithmetics-nat.nat) x-v (nil lzero matita-arithmetics-nat.nat)) -> matita-arithmetics-nat.le (length lzero matita-arithmetics-nat.nat x-v) (matita-arithmetics-nat.S matita-arithmetics-nat.O)) (matita-arithmetics-nat.le-n-Sn (length lzero matita-arithmetics-nat.nat (nil lzero matita-arithmetics-nat.nat))) (filter lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.eqb m-v) l-v) H-v) X-clearme-v) (filter-eqb m-v l-v Huni-v)
{-
split-rev : (l9-v : Level) -> (H-v : Set l9-v) -> (X---v : list l9-v H-v) -> (X--1-v : list l9-v H-v) -> (X--2-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l9-v l9-v (list l9-v H-v) (list l9-v H-v)
split-rev l16-v H-v nil' X--1-v X--2-v = matita-arithmetics-nat.match-nat l16-v (λ (X--3-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v)) (matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v nil') (λ (m-v : matita-arithmetics-nat.nat) -> matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v (nil l16-v H-v) ) X--2-v
split-rev l16-v H-v (cons' a-v tl-v) X--1-v X--2-v = matita-arithmetics-nat.match-nat l16-v (λ (X--3-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v)) (matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v (cons' a-v tl-v)) (λ (m-v : matita-arithmetics-nat.nat) -> split-rev l16-v H-v tl-v (cons l16-v H-v a-v X--1-v) m-v) X--2-v
-}
split-rev : (l9-v : Level) -> (H-v : Set l9-v) -> (X---v : list l9-v H-v) -> (X--1-v : list l9-v H-v) -> (X--2-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l9-v l9-v (list l9-v H-v) (list l9-v H-v)
split-rev l16-v H-v X X--1-v matita-arithmetics-nat.O = matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v X
split-rev l16-v H-v nil' X--1-v (matita-arithmetics-nat.S m) = matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v (nil l16-v H-v)
split-rev l16-v H-v (cons' a-v tl-v) X--1-v (matita-arithmetics-nat.S m) = split-rev l16-v H-v tl-v (cons l16-v H-v a-v X--1-v) m
{-

matita-arithmetics-nat.match-nat
  l16-v
  (λ (X--3-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v))
  (matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v X---v)
  (λ (m-v : matita-arithmetics-nat.nat) ->
    match-list
      l16-v
      H-v
      l16-v
      (λ (X--3-v : list l16-v H-v) -> matita-basics-types.Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v))
      (matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v (nil l16-v H-v))
      (λ (a-v : H-v) -> λ (tl-v : list l16-v H-v) -> split-rev l16-v H-v tl-v (cons l16-v H-v a-v X--1-v) m-v)
      X---v)
  X--2-v

postulate split-rev-body : (l9-v : Level) -> (H-v : Set l9-v) -> (X---v : list l9-v H-v) -> (X--1-v : list l9-v H-v) -> (X--2-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l9-v l9-v (list l9-v H-v) (list l9-v H-v)

-- postulate rewrite-rule-454 : (l0-v : Level) -> (H-v : Set l0-v) -> (X---v : list l0-v H-v) -> (X--1-v : list l0-v H-v) -> (X--2-v : matita-arithmetics-nat.nat) -> split-rev l0-v H-v X---v X--1-v X--2-v ≡ matita-arithmetics-nat.filter-nat l0-v (λ (X--2-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l0-v l0-v (list l0-v H-v) (list l0-v H-v)) (split-rev-body l0-v H-v X---v X--1-v) X--2-v


-- postulate rewrite-rule-455 : (l16-v : Level) -> (H-v : Set l16-v) -> (X---v : list l16-v H-v) -> (X--1-v : list l16-v H-v) -> (X--2-v : matita-arithmetics-nat.nat) -> split-rev-body l16-v H-v X---v X--1-v X--2-v ≡ matita-arithmetics-nat.match-nat l16-v (λ (X--3-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v)) (matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v X---v) (λ (m-v : matita-arithmetics-nat.nat) -> match-list l16-v H-v l16-v (λ (X--3-v : list l16-v H-v) -> matita-basics-types.Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v)) (matita-basics-types.mk-Prod l16-v l16-v (list l16-v H-v) (list l16-v H-v) X--1-v (nil l16-v H-v)) (λ (a-v : H-v) -> λ (tl-v : list l16-v H-v) -> split-rev l16-v H-v tl-v (cons l16-v H-v a-v X--1-v) m-v) X---v) X--2-v
-}

split : (l28-v : Level) -> (A-v : Set l28-v) -> (X-l-v : list l28-v A-v) -> (X-n-v : matita-arithmetics-nat.nat) -> matita-basics-types.Prod l28-v l28-v (list l28-v A-v) (list l28-v A-v)
split = λ (l28-v : Level) -> λ (A-v : Set l28-v) -> λ (l-v : list l28-v A-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-basics-types.match-Prod l28-v l28-v (list l28-v A-v) (list l28-v A-v) l28-v (λ (X---v : matita-basics-types.Prod l28-v l28-v (list l28-v A-v) (list l28-v A-v)) -> matita-basics-types.Prod l28-v l28-v (list l28-v A-v) (list l28-v A-v)) (λ (l1-v : list l28-v A-v) -> λ (l2-v : list l28-v A-v) -> matita-basics-types.mk-Prod l28-v l28-v (list l28-v A-v) (list l28-v A-v) (reverse l28-v A-v l1-v) l2-v) (split-rev l28-v A-v l-v (nil l28-v A-v) n-v)

split-rev-len : (l128-v : Level) -> (A-v : Set l128-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l128-v A-v) -> (acc-v : list l128-v A-v) -> (X---v : matita-arithmetics-nat.le n-v (length l128-v A-v l-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l128-v A-v (matita-basics-types.fst l128-v l128-v (list l128-v A-v) (list l128-v A-v) (split-rev l128-v A-v l-v acc-v n-v))) (matita-arithmetics-nat.plus n-v (length l128-v A-v acc-v))
split-rev-len = λ (l128-v : Level) -> λ (A-v : Set l128-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l128-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (l-v : list l128-v A-v) -> (acc-v : list l128-v A-v) -> (X---v : matita-arithmetics-nat.le X-x-365-v (length l128-v A-v l-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l128-v A-v (matita-basics-types.fst l128-v l128-v (list l128-v A-v) (list l128-v A-v) (split-rev l128-v A-v l-v acc-v X-x-365-v))) (matita-arithmetics-nat.plus X-x-365-v (length l128-v A-v acc-v))) (λ (l-v : list l128-v A-v) -> λ (acc-v : list l128-v A-v) -> λ (auto-v : matita-arithmetics-nat.le matita-arithmetics-nat.O (length l128-v A-v l-v)) -> matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length l128-v A-v (matita-basics-types.fst l128-v l128-v (list l128-v A-v) (list l128-v A-v) (split-rev l128-v A-v l-v acc-v matita-arithmetics-nat.O)))) (λ (m-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (l-v : list l128-v A-v) -> (acc-v : list l128-v A-v) -> (X---v : matita-arithmetics-nat.le m-v (length l128-v A-v l-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l128-v A-v (matita-basics-types.fst l128-v l128-v (list l128-v A-v) (list l128-v A-v) (split-rev l128-v A-v l-v acc-v m-v))) (matita-arithmetics-nat.plus m-v (length l128-v A-v acc-v))) -> λ (X-clearme-v : list l128-v A-v) -> match-list l128-v A-v l128-v (λ (X---v : list l128-v A-v) -> (acc-v : list l128-v A-v) -> (X--1-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) (length l128-v A-v X---v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l128-v A-v (matita-basics-types.fst l128-v l128-v (list l128-v A-v) (list l128-v A-v) (split-rev l128-v A-v X---v acc-v (matita-arithmetics-nat.S m-v)))) (matita-arithmetics-nat.plus (matita-arithmetics-nat.S m-v) (length l128-v A-v acc-v))) (λ (acc-v : list l128-v A-v) -> λ (Hfalse-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) matita-arithmetics-nat.O) -> matita-basics-logic.False-ind lzero lzero (λ (X-x-66-v : matita-basics-logic.False lzero) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l128-v A-v acc-v) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v (length l128-v A-v acc-v)))) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) matita-arithmetics-nat.O) Hfalse-v (matita-arithmetics-nat.not-le-Sn-O m-v))) (λ (a-v : A-v) -> λ (tl-v : list l128-v A-v) -> λ (acc-v : list l128-v A-v) -> λ (Hlen-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) (length l128-v A-v (cons l128-v A-v a-v tl-v))) -> matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (length l128-v A-v (cons l128-v A-v a-v acc-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus m-v (length l128-v A-v (cons l128-v A-v a-v acc-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v (length l128-v A-v acc-v)))) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (length l128-v A-v acc-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (length l128-v A-v acc-v))) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus m-v (matita-arithmetics-nat.S (length l128-v A-v acc-v)))) (matita-arithmetics-nat.S (matita-arithmetics-nat.plus m-v (length l128-v A-v acc-v))) (matita-arithmetics-nat.plus-n-Sm m-v (length l128-v A-v acc-v))) (length l128-v A-v (matita-basics-types.fst l128-v l128-v (list l128-v A-v) (list l128-v A-v) (split-rev l128-v A-v tl-v (cons l128-v A-v a-v acc-v) m-v))) (Hind-v tl-v (cons l128-v A-v a-v acc-v) (matita-arithmetics-nat.le-S-S-to-le m-v (length l128-v A-v tl-v) Hlen-v))) X-clearme-v) n-v

split-len : (l151-v : Level) -> (A-v : Set l151-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l151-v A-v) -> (X---v : matita-arithmetics-nat.le n-v (length l151-v A-v l-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split l151-v A-v l-v n-v))) n-v
split-len = λ (l151-v : Level) -> λ (A-v : Set l151-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (l-v : list l151-v A-v) -> λ (Hlen-v : matita-arithmetics-nat.le n-v (length l151-v A-v l-v)) -> matita-basics-logic.eq-ind-r l151-v lzero (matita-basics-types.Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v)) (matita-basics-types.mk-Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v) (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v)) (matita-basics-types.snd l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v))) (λ (x-v : matita-basics-types.Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v)) -> λ (X---v : matita-basics-logic.eq l151-v (matita-basics-types.Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v)) x-v (matita-basics-types.mk-Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v) (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v)) (matita-basics-types.snd l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (matita-basics-types.match-Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v) l151-v (λ (X-0-v : matita-basics-types.Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v)) -> matita-basics-types.Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v)) (λ (l1-v : list l151-v A-v) -> λ (l2-v : list l151-v A-v) -> matita-basics-types.mk-Prod l151-v l151-v (list l151-v A-v) (list l151-v A-v) (rev-append l151-v A-v l1-v (nil l151-v A-v)) l2-v) x-v))) n-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (length l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (length l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (length l151-v A-v (nil l151-v A-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus n-v (length l151-v A-v (nil l151-v A-v)))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (matita-arithmetics-nat.plus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.plus-n-O n-v)) (length l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v))) (split-rev-len l151-v A-v n-v l-v (nil l151-v A-v) Hlen-v)) (length l151-v A-v (reverse l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v)))) (length-reverse l151-v A-v (matita-basics-types.fst l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v)))) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v) (matita-basics-types.eq-pair-fst-snd l151-v l151-v (list l151-v A-v) (list l151-v A-v) (split-rev l151-v A-v l-v (nil l151-v A-v) n-v))

split-rev-eq : (l236-v : Level) -> (A-v : Set l236-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l236-v A-v) -> (acc-v : list l236-v A-v) -> (X---v : matita-arithmetics-nat.le n-v (length l236-v A-v l-v)) -> matita-basics-logic.eq l236-v (list l236-v A-v) (append l236-v A-v (reverse l236-v A-v acc-v) l-v) (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v l-v acc-v n-v))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v l-v acc-v n-v)))
split-rev-eq = λ (l236-v : Level) -> λ (A-v : Set l236-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l236-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (l-v : list l236-v A-v) -> (acc-v : list l236-v A-v) -> (X---v : matita-arithmetics-nat.le X-x-365-v (length l236-v A-v l-v)) -> matita-basics-logic.eq l236-v (list l236-v A-v) (append l236-v A-v (reverse l236-v A-v acc-v) l-v) (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v l-v acc-v X-x-365-v))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v l-v acc-v X-x-365-v)))) (λ (l-v : list l236-v A-v) -> λ (acc-v : list l236-v A-v) -> λ (auto-v : matita-arithmetics-nat.le matita-arithmetics-nat.O (length l236-v A-v l-v)) -> matita-basics-logic.refl l236-v (list l236-v A-v) (append l236-v A-v (reverse l236-v A-v acc-v) l-v)) (λ (m-v : matita-arithmetics-nat.nat) -> λ (Hind-v : (l-v : list l236-v A-v) -> (acc-v : list l236-v A-v) -> (X---v : matita-arithmetics-nat.le m-v (length l236-v A-v l-v)) -> matita-basics-logic.eq l236-v (list l236-v A-v) (append l236-v A-v (reverse l236-v A-v acc-v) l-v) (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v l-v acc-v m-v))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v l-v acc-v m-v)))) -> λ (X-clearme-v : list l236-v A-v) -> match-list l236-v A-v l236-v (λ (X---v : list l236-v A-v) -> (acc-v : list l236-v A-v) -> (X--1-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) (length l236-v A-v X---v)) -> matita-basics-logic.eq l236-v (list l236-v A-v) (append l236-v A-v (reverse l236-v A-v acc-v) X---v) (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v X---v acc-v (matita-arithmetics-nat.S m-v)))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v X---v acc-v (matita-arithmetics-nat.S m-v))))) (λ (acc-v : list l236-v A-v) -> λ (False-ind-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) matita-arithmetics-nat.O) -> matita-basics-logic.refl l236-v (list l236-v A-v) (append l236-v A-v (reverse l236-v A-v acc-v) (nil l236-v A-v))) (λ (a-v : A-v) -> λ (tl-v : list l236-v A-v) -> λ (acc-v : list l236-v A-v) -> λ (Hlen-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S m-v) (length l236-v A-v (cons l236-v A-v a-v tl-v))) -> matita-basics-logic.eq-ind-r l236-v l236-v (list l236-v A-v) (append l236-v A-v (append l236-v A-v (reverse l236-v A-v acc-v) (cons l236-v A-v a-v (nil l236-v A-v))) tl-v) (λ (x-v : list l236-v A-v) -> λ (X---v : matita-basics-logic.eq l236-v (list l236-v A-v) x-v (append l236-v A-v (append l236-v A-v (reverse l236-v A-v acc-v) (cons l236-v A-v a-v (nil l236-v A-v))) tl-v)) -> matita-basics-logic.eq l236-v (list l236-v A-v) x-v (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v (cons l236-v A-v a-v tl-v) acc-v (matita-arithmetics-nat.S m-v)))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v (cons l236-v A-v a-v tl-v) acc-v (matita-arithmetics-nat.S m-v))))) (matita-basics-logic.eq-ind l236-v l236-v (list l236-v A-v) (reverse l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v))) (λ (x-1-v : list l236-v A-v) -> λ (X-x-2-v : matita-basics-logic.eq l236-v (list l236-v A-v) (reverse l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v))) x-1-v) -> matita-basics-logic.eq l236-v (list l236-v A-v) (append l236-v A-v (append l236-v A-v (reverse l236-v A-v acc-v) x-1-v) tl-v) (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v (cons l236-v A-v a-v tl-v) acc-v (matita-arithmetics-nat.S m-v)))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v (cons l236-v A-v a-v tl-v) acc-v (matita-arithmetics-nat.S m-v))))) (matita-basics-logic.eq-ind l236-v l236-v (list l236-v A-v) (reverse l236-v A-v (append l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v)) acc-v)) (λ (x-1-v : list l236-v A-v) -> λ (X-x-2-v : matita-basics-logic.eq l236-v (list l236-v A-v) (reverse l236-v A-v (append l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v)) acc-v)) x-1-v) -> matita-basics-logic.eq l236-v (list l236-v A-v) (append l236-v A-v x-1-v tl-v) (append l236-v A-v (reverse l236-v A-v (matita-basics-types.fst l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v (cons l236-v A-v a-v tl-v) acc-v (matita-arithmetics-nat.S m-v)))) (matita-basics-types.snd l236-v l236-v (list l236-v A-v) (list l236-v A-v) (split-rev l236-v A-v (cons l236-v A-v a-v tl-v) acc-v (matita-arithmetics-nat.S m-v))))) (Hind-v tl-v (append l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v)) acc-v) (matita-arithmetics-nat.le-S-S-to-le m-v (length l236-v A-v tl-v) Hlen-v)) (append l236-v A-v (reverse l236-v A-v acc-v) (reverse l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v)))) (reverse-append l236-v A-v (cons l236-v A-v a-v (nil l236-v A-v)) acc-v)) (cons l236-v A-v a-v (nil l236-v A-v)) (reverse-single l236-v A-v a-v)) (append l236-v A-v (reverse l236-v A-v acc-v) (cons l236-v A-v a-v tl-v)) (append-cons l236-v A-v a-v (reverse l236-v A-v acc-v) tl-v)) X-clearme-v) n-v

split-eq : (l203-v : Level) -> (A-v : Set l203-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l203-v A-v) -> (X---v : matita-arithmetics-nat.le n-v (length l203-v A-v l-v)) -> matita-basics-logic.eq l203-v (list l203-v A-v) l-v (append l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split l203-v A-v l-v n-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split l203-v A-v l-v n-v)))
split-eq = λ (l203-v : Level) -> λ (A-v : Set l203-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (l-v : list l203-v A-v) -> λ (Hlen-v : matita-arithmetics-nat.le n-v (length l203-v A-v l-v)) -> matita-basics-logic.eq-ind-r l203-v l203-v (list l203-v A-v) (append l203-v A-v (reverse l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v))) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v))) (λ (x-v : list l203-v A-v) -> λ (X---v : matita-basics-logic.eq l203-v (list l203-v A-v) x-v (append l203-v A-v (reverse l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v))) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v)))) -> matita-basics-logic.eq l203-v (list l203-v A-v) x-v (append l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split l203-v A-v l-v n-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split l203-v A-v l-v n-v)))) (matita-basics-logic.eq-ind-r l203-v l203-v (matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) (matita-basics-types.mk-Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v) (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v))) (λ (x-v : matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) -> λ (X---v : matita-basics-logic.eq l203-v (matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) x-v (matita-basics-types.mk-Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v) (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v)))) -> matita-basics-logic.eq l203-v (list l203-v A-v) (append l203-v A-v (rev-append l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) x-v) (nil l203-v A-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) x-v)) (append l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (matita-basics-types.match-Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v) l203-v (λ (X-0-v : matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) -> matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) (λ (l1-v : list l203-v A-v) -> λ (l2-v : list l203-v A-v) -> matita-basics-types.mk-Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v) (rev-append l203-v A-v l1-v (nil l203-v A-v)) l2-v) x-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (matita-basics-types.match-Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v) l203-v (λ (X-0-v : matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) -> matita-basics-types.Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v)) (λ (l1-v : list l203-v A-v) -> λ (l2-v : list l203-v A-v) -> matita-basics-types.mk-Prod l203-v l203-v (list l203-v A-v) (list l203-v A-v) (rev-append l203-v A-v l1-v (nil l203-v A-v)) l2-v) x-v)))) (matita-basics-logic.refl l203-v (list l203-v A-v) (append l203-v A-v (rev-append l203-v A-v (matita-basics-types.fst l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v)) (nil l203-v A-v)) (matita-basics-types.snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v)))) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v) (matita-basics-types.eq-pair-fst-snd l203-v l203-v (list l203-v A-v) (list l203-v A-v) (split-rev l203-v A-v l-v (nil l203-v A-v) n-v))) (append l203-v A-v (reverse l203-v A-v (nil l203-v A-v)) l-v) (split-rev-eq l203-v A-v n-v l-v (nil l203-v A-v) Hlen-v)

split-exists : (l94-v : Level) -> (A-v : Set l94-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l94-v A-v) -> (X---v : matita-arithmetics-nat.le n-v (length l94-v A-v l-v)) -> matita-basics-logic.ex l94-v l94-v (list l94-v A-v) (λ (l1-v : list l94-v A-v) -> matita-basics-logic.ex l94-v l94-v (list l94-v A-v) (λ (l2-v : list l94-v A-v) -> matita-basics-logic.And l94-v lzero (matita-basics-logic.eq l94-v (list l94-v A-v) l-v (append l94-v A-v l1-v l2-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l94-v A-v l1-v) n-v)))
split-exists = λ (l94-v : Level) -> λ (A-v : Set l94-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (l-v : list l94-v A-v) -> λ (Hlen-v : matita-arithmetics-nat.le n-v (length l94-v A-v l-v)) -> matita-basics-logic.ex-intro l94-v l94-v (list l94-v A-v) (λ (l1-v : list l94-v A-v) -> matita-basics-logic.ex l94-v l94-v (list l94-v A-v) (λ (l2-v : list l94-v A-v) -> matita-basics-logic.And l94-v lzero (matita-basics-logic.eq l94-v (list l94-v A-v) l-v (append l94-v A-v l1-v l2-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l94-v A-v l1-v) n-v))) (matita-basics-types.fst l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v)) (matita-basics-logic.ex-intro l94-v l94-v (list l94-v A-v) (λ (l2-v : list l94-v A-v) -> matita-basics-logic.And l94-v lzero (matita-basics-logic.eq l94-v (list l94-v A-v) l-v (append l94-v A-v (matita-basics-types.fst l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v)) l2-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l94-v A-v (matita-basics-types.fst l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v))) n-v)) (matita-basics-types.snd l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v)) (matita-basics-logic.conj l94-v lzero (matita-basics-logic.eq l94-v (list l94-v A-v) l-v (append l94-v A-v (matita-basics-types.fst l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v)) (matita-basics-types.snd l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v)))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l94-v A-v (matita-basics-types.fst l94-v l94-v (list l94-v A-v) (list l94-v A-v) (split l94-v A-v l-v n-v))) n-v) (split-eq l94-v A-v n-v l-v Hlen-v) (split-len l94-v A-v n-v l-v Hlen-v)))

flatten : (l6-v : Level) -> (A-v : Set l6-v) -> (X-l-v : list l6-v (list l6-v A-v)) -> list l6-v A-v
flatten = λ (l6-v : Level) -> λ (A-v : Set l6-v) -> foldr l6-v l6-v (list l6-v A-v) (list l6-v A-v) (append l6-v A-v) (nil l6-v A-v)

let-clause-1227 : (l157-v l143-v : Level) -> (A-v : Set l157-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l157-v (list l157-v A-v)) -> (l1-v : list l157-v A-v) -> (l2-v : list l157-v A-v) -> (a-v : list l157-v A-v) -> (posn-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> (Hlen-v : (x-v : list l157-v A-v) -> (X---v : matita-basics-logic.False l143-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l157-v A-v x-v) n-v) -> (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l157-v A-v a-v) n-v) -> (Hnil-v : matita-basics-logic.eq l157-v (list l157-v A-v) (nil l157-v A-v) (append l157-v A-v l1-v (append l157-v A-v a-v l2-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O n-v
let-clause-1227 = λ (l157-v l143-v : Level) -> λ (A-v : Set l157-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (l-v : list l157-v (list l157-v A-v)) -> λ (l1-v : list l157-v A-v) -> λ (l2-v : list l157-v A-v) -> λ (a-v : list l157-v A-v) -> λ (posn-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (Hlen-v : (x-v : list l157-v A-v) -> (X---v : matita-basics-logic.False l143-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l157-v A-v x-v) n-v) -> λ (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l157-v A-v a-v) n-v) -> λ (Hnil-v : matita-basics-logic.eq l157-v (list l157-v A-v) (nil l157-v A-v) (append l157-v A-v l1-v (append l157-v A-v a-v l2-v))) -> matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length l157-v A-v a-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v n-v) Ha-v matita-arithmetics-nat.O (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l157-v A-v a-v) (matita-arithmetics-nat.le-n-O-to-eq (length l157-v A-v a-v) (matita-arithmetics-nat.transitive-le (length l157-v A-v a-v) (length l157-v A-v (nil l157-v A-v)) matita-arithmetics-nat.O (matita-basics-logic.eq-ind-r l157-v lzero (list l157-v A-v) (append l157-v A-v l1-v (append l157-v A-v a-v l2-v)) (λ (x-v : list l157-v A-v) -> λ (X---v : matita-basics-logic.eq l157-v (list l157-v A-v) x-v (append l157-v A-v l1-v (append l157-v A-v a-v l2-v))) -> matita-arithmetics-nat.le (length l157-v A-v a-v) (length l157-v A-v x-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (length l157-v A-v (append l157-v A-v a-v l2-v))) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (length l157-v A-v (append l157-v A-v a-v l2-v)))) -> matita-arithmetics-nat.le (length l157-v A-v a-v) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l157-v A-v a-v) (length l157-v A-v l2-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus (length l157-v A-v a-v) (length l157-v A-v l2-v))) -> matita-arithmetics-nat.le (length l157-v A-v a-v) (matita-arithmetics-nat.plus (length l157-v A-v l1-v) x-v)) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (length l157-v A-v (append l157-v A-v l1-v l2-v)))) (matita-arithmetics-nat.le (length l157-v A-v a-v) (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (matita-arithmetics-nat.plus (length l157-v A-v a-v) (length l157-v A-v l2-v)))) (matita-arithmetics-nat.le-plus-n-r (length l157-v A-v (append l157-v A-v l1-v l2-v)) n-v) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (length l157-v A-v (append l157-v A-v l1-v l2-v)))) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (matita-arithmetics-nat.plus (length l157-v A-v a-v) (length l157-v A-v l2-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (length l157-v A-v (append l157-v A-v l1-v l2-v)))) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (matita-arithmetics-nat.plus X---v (length l157-v A-v l2-v))))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (length l157-v A-v l2-v))) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (length l157-v A-v (append l157-v A-v l1-v l2-v)))) (matita-arithmetics-nat.le n-v X---v)) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (length l157-v A-v (append l157-v A-v l1-v l2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (length l157-v A-v (append l157-v A-v l1-v l2-v)))) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v X---v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (matita-arithmetics-nat.plus n-v (length l157-v A-v (append l157-v A-v l1-v l2-v))))) (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (length l157-v A-v l2-v)) (length-append l157-v A-v l1-v l2-v)) (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (matita-arithmetics-nat.plus n-v (length l157-v A-v l2-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (matita-arithmetics-nat.plus n-v (length l157-v A-v l1-v)) (length l157-v A-v l2-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (matita-arithmetics-nat.plus n-v (length l157-v A-v l2-v))) X---v) (matita-arithmetics-nat.assoc-plus1 (length l157-v A-v l2-v) n-v (length l157-v A-v l1-v)) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.plus (length l157-v A-v l1-v) (length l157-v A-v l2-v))) (matita-arithmetics-nat.associative-plus n-v (length l157-v A-v l1-v) (length l157-v A-v l2-v)))) (length l157-v A-v a-v) Ha-v) (length l157-v A-v a-v) Ha-v)) (length l157-v A-v (append l157-v A-v a-v l2-v)) (length-append l157-v A-v a-v l2-v)) (length l157-v A-v (append l157-v A-v l1-v (append l157-v A-v a-v l2-v))) (length-append l157-v A-v l1-v (append l157-v A-v a-v l2-v))) (nil l157-v A-v) Hnil-v) (matita-arithmetics-nat.le-n (length l157-v A-v (nil l157-v A-v))))))

let-clause-1222 : (l153-v : Level) -> (A-v : Set l153-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l153-v (list l153-v A-v)) -> (hd-v : list l153-v A-v) -> (tl-v : list l153-v (list l153-v A-v)) -> (Hind-v : (l1-v : list l153-v A-v) -> (l2-v : list l153-v A-v) -> (a-v : list l153-v A-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : (x-v : list l153-v A-v) -> (X--1-v : mem l153-v (list l153-v A-v) x-v tl-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v x-v) n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v a-v) n-v) -> (X--3-v : matita-basics-logic.eq l153-v (list l153-v A-v) (flatten l153-v A-v tl-v) (append l153-v A-v l1-v (append l153-v A-v a-v l2-v))) -> (X--4-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> mem l153-v (list l153-v A-v) a-v tl-v) -> (l1-v : list l153-v A-v) -> (l2-v : list l153-v A-v) -> (a-v : list l153-v A-v) -> (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (Hlen-v : (x-v : list l153-v A-v) -> (X---v : mem l153-v (list l153-v A-v) x-v (cons l153-v (list l153-v A-v) hd-v tl-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v x-v) n-v) -> (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v a-v) n-v) -> (Hflat-v : matita-basics-logic.eq l153-v (list l153-v A-v) (append l153-v A-v hd-v (foldr l153-v l153-v (list l153-v A-v) (list l153-v A-v) (append l153-v A-v) (nil l153-v A-v) tl-v)) (append l153-v A-v l1-v (append l153-v A-v a-v l2-v))) -> (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> (q-v : matita-arithmetics-nat.nat) -> (q1-v : matita-arithmetics-nat.nat) -> (Hl1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v))) -> (l11-v : list l153-v A-v) -> (X-clearme0-v : matita-basics-logic.ex l153-v l153-v (list l153-v A-v) (λ (l20-v : list l153-v A-v) -> matita-basics-logic.And l153-v lzero (matita-basics-logic.eq l153-v (list l153-v A-v) l1-v (append l153-v A-v l11-v l20-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l11-v) n-v))) -> (l12-v : list l153-v A-v) -> (X-clearme1-v : matita-basics-logic.And l153-v lzero (matita-basics-logic.eq l153-v (list l153-v A-v) l1-v (append l153-v A-v l11-v l12-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l11-v) n-v)) -> (Heql1-v : matita-basics-logic.eq l153-v (list l153-v A-v) l1-v (append l153-v A-v l11-v l12-v)) -> (Hlenl11-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l11-v) n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))
let-clause-1222 = λ (l153-v : Level) -> λ (A-v : Set l153-v) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (l-v : list l153-v (list l153-v A-v)) -> λ (hd-v : list l153-v A-v) -> λ (tl-v : list l153-v (list l153-v A-v)) -> λ (Hind-v : (l1-v : list l153-v A-v) -> (l2-v : list l153-v A-v) -> (a-v : list l153-v A-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : (x-v : list l153-v A-v) -> (X--1-v : mem l153-v (list l153-v A-v) x-v tl-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v x-v) n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v a-v) n-v) -> (X--3-v : matita-basics-logic.eq l153-v (list l153-v A-v) (flatten l153-v A-v tl-v) (append l153-v A-v l1-v (append l153-v A-v a-v l2-v))) -> (X--4-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> mem l153-v (list l153-v A-v) a-v tl-v) -> λ (l1-v : list l153-v A-v) -> λ (l2-v : list l153-v A-v) -> λ (a-v : list l153-v A-v) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (Hlen-v : (x-v : list l153-v A-v) -> (X---v : mem l153-v (list l153-v A-v) x-v (cons l153-v (list l153-v A-v) hd-v tl-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v x-v) n-v) -> λ (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v a-v) n-v) -> λ (Hflat-v : matita-basics-logic.eq l153-v (list l153-v A-v) (append l153-v A-v hd-v (foldr l153-v l153-v (list l153-v A-v) (list l153-v A-v) (append l153-v A-v) (nil l153-v A-v) tl-v)) (append l153-v A-v l1-v (append l153-v A-v a-v l2-v))) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> λ (q-v : matita-arithmetics-nat.nat) -> λ (q1-v : matita-arithmetics-nat.nat) -> λ (Hl1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v))) -> λ (l11-v : list l153-v A-v) -> λ (X-clearme0-v : matita-basics-logic.ex l153-v l153-v (list l153-v A-v) (λ (l20-v : list l153-v A-v) -> matita-basics-logic.And l153-v lzero (matita-basics-logic.eq l153-v (list l153-v A-v) l1-v (append l153-v A-v l11-v l20-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l11-v) n-v))) -> λ (l12-v : list l153-v A-v) -> λ (X-clearme1-v : matita-basics-logic.And l153-v lzero (matita-basics-logic.eq l153-v (list l153-v A-v) l1-v (append l153-v A-v l11-v l12-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l11-v) n-v)) -> λ (Heql1-v : matita-basics-logic.eq l153-v (list l153-v A-v) l1-v (append l153-v A-v l11-v l12-v)) -> λ (Hlenl11-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l11-v) n-v) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l153-v A-v l1-v) X---v) Hl1-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (matita-arithmetics-nat.times-n-Sm n-v q1-v)

flatten-to-mem : (l263-v : Level) -> (A-v : Set ((lsuc lzero) ⊔ (lsuc l263-v))) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v)) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (a-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X--1-v : mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v l-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v) n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v) n-v) -> (X--3-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (flatten ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> (X--4-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v l-v
flatten-to-mem = λ (l263-v : Level) -> λ (A-v : Set ((lsuc lzero) ⊔ (lsuc l263-v))) -> λ (n-v : matita-arithmetics-nat.nat) -> λ (l-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v)) -> list-ind ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (X-x-716-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v)) -> (l1-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (a-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X--1-v : mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v X-x-716-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v) n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v) n-v) -> (X--3-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (flatten ((lsuc lzero) ⊔ (lsuc l263-v)) A-v X-x-716-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> (X--4-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v X-x-716-v) (λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (a-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (posn-v : matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) -> λ (Hlen-v : (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X---v : matita-basics-logic.False ((lsuc lzero) ⊔ (lsuc l263-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v) n-v) -> λ (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v) n-v) -> λ (Hnil-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> matita-basics-logic.False-ind lzero ((lsuc lzero) ⊔ (lsuc l263-v)) (λ (X-x-66-v : matita-basics-logic.False lzero) -> (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> matita-basics-logic.False ((lsuc lzero) ⊔ (lsuc l263-v))) (matita-basics-logic.absurd lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.S matita-arithmetics-nat.O) n-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O) posn-v (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S X---v) n-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) matita-arithmetics-nat.O)) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) n-v) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) X---v)) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le (matita-arithmetics-nat.S n-v) n-v)) matita-arithmetics-nat.O (let-clause-1227 ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) A-v n-v l-v l1-v l2-v a-v posn-v Hlen-v Ha-v Hnil-v)) matita-arithmetics-nat.O (let-clause-1227 ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) A-v n-v l-v l1-v l2-v a-v posn-v Hlen-v Ha-v Hnil-v))) (matita-arithmetics-nat.not-le-Sn-O n-v))) (λ (hd-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (tl-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v)) -> λ (Hind-v : (l1-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (l2-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (a-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X---v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> (X--1-v : (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X--1-v : mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v tl-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v) n-v) -> (X--2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v) n-v) -> (X--3-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (flatten ((lsuc lzero) ⊔ (lsuc l263-v)) A-v tl-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> (X--4-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v tl-v) -> λ (l1-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (l2-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (a-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (posn-v : matita-arithmetics-nat.lt matita-arithmetics-nat.O n-v) -> λ (Hlen-v : (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> (X---v : mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v) n-v) -> λ (Ha-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v) n-v) -> λ (Hflat-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v (foldr ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) tl-v)) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> λ (X-clearme-v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> matita-basics-logic.match-ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (λ (X---v : matita-basics-logic.ex lzero lzero matita-arithmetics-nat.nat (λ (q-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v q-v))) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) (λ (q-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.match-nat ((lsuc lzero) ⊔ (lsuc l263-v)) (λ (X---v : matita-arithmetics-nat.nat) -> (X--1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v X---v)) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) (matita-basics-logic.eq-ind lzero ((lsuc lzero) ⊔ (lsuc l263-v)) matita-arithmetics-nat.nat matita-arithmetics-nat.O (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O x-1-v) -> (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) x-1-v) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) (λ (Hl1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) matita-arithmetics-nat.O) -> matita-basics-logic.or-introl ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v hd-v) (mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v tl-v) (matita-basics-logic.rewrite-r ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v (λ (X---v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) X---v hd-v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v) a-v (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v)) -> (X--1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v (foldr ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) tl-v)) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v hd-v) (λ (Hflat0-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v (foldr ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) tl-v)) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)) -> matita-basics-logic.sym-eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v a-v (append-l1-injective l263-v A-v hd-v a-v (foldr ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) tl-v) l2-v (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v) x-v) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat n-v) (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v) (Hlen-v hd-v (matita-basics-logic.or-introl ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v hd-v) (mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v)))) (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v) Ha-v) Hflat0-v)) l1-v (lenght-to-nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v Hl1-v) Hflat-v))) (matita-arithmetics-nat.times n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.times-n-O n-v)) (λ (q1-v : matita-arithmetics-nat.nat) -> λ (Hl1-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v))) -> matita-basics-logic.match-ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l11-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l21-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l21-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v))) ((lsuc lzero) ⊔ (lsuc l263-v)) (λ (X---v : matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l10-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l20-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l10-v l20-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l10-v) n-v)))) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) (λ (l11-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X-clearme0-v : matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l20-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l20-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v))) -> matita-basics-logic.match-ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l20-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l20-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (λ (X---v : matita-basics-logic.ex ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (λ (l20-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l20-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v))) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) (λ (l12-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X-clearme1-v : matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v)) -> matita-basics-logic.match-And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v) ((lsuc lzero) ⊔ (lsuc l263-v)) (λ (X---v : matita-basics-logic.And ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v)) -> mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v (cons ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v)) (λ (Heql1-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) -> λ (Hlenl11-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) n-v) -> matita-basics-logic.or-intror ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v hd-v) (mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) a-v tl-v) (Hind-v l12-v l2-v a-v posn-v (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (memx-v : mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v tl-v) -> Hlen-v x-v (matita-basics-logic.or-intror ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v hd-v) (mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v tl-v) memx-v)) Ha-v (append-l2-injective l263-v A-v hd-v l11-v (flatten ((lsuc lzero) ⊔ (lsuc l263-v)) A-v tl-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat n-v (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v n-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v) x-v) (Hlen-v hd-v (matita-basics-logic.or-introl ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v hd-v) (mem ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v tl-v) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) hd-v))) (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) Hlenl11-v) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)))) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)))) (matita-basics-logic.eq-ind-r ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) (λ (x-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X---v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)))) -> matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) x-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)))) (matita-basics-logic.refl ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)))) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v)) (associative-append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v a-v l2-v))) l1-v Heql1-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v hd-v (foldr ((lsuc lzero) ⊔ (lsuc l263-v)) ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) (nil ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) tl-v)) Hflat-v)) (matita-basics-logic.ex-intro lzero lzero matita-arithmetics-nat.nat (λ (q0-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v) (matita-arithmetics-nat.times n-v q0-v)) q1-v (matita-arithmetics-nat.injective-plus-r n-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v) (matita-arithmetics-nat.times n-v q1-v) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus x-1-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v)) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.eq-ind lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) (λ (x-1-v : matita-arithmetics-nat.nat) -> λ (X-x-2-v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-1-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.eq-ind ((lsuc lzero) ⊔ (lsuc l263-v)) lzero (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v (λ (x-1-v : list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) -> λ (X-x-2-v : matita-basics-logic.eq ((lsuc lzero) ⊔ (lsuc l263-v)) (list ((lsuc lzero) ⊔ (lsuc l263-v)) A-v) l1-v x-1-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v x-1-v) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.eq-ind-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v)) (λ (x-v : matita-arithmetics-nat.nat) -> λ (X---v : matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v))) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat x-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.rewrite-l lzero lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) X---v) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v)) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (let-clause-1222 ((lsuc lzero) ⊔ (lsuc l263-v)) A-v n-v l-v hd-v tl-v Hind-v l1-v l2-v a-v posn-v Hlen-v Ha-v Hflat-v X-clearme-v q-v q1-v Hl1-v l11-v X-clearme0-v l12-v X-clearme1-v Heql1-v Hlenl11-v)) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (let-clause-1222 ((lsuc lzero) ⊔ (lsuc l263-v)) A-v n-v l-v hd-v tl-v Hind-v l1-v l2-v a-v posn-v Hlen-v Ha-v Hflat-v X-clearme-v q-v q1-v Hl1-v l11-v X-clearme0-v l12-v X-clearme1-v Heql1-v Hlenl11-v)) (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v)) (matita-arithmetics-nat.times-n-Sm n-v q1-v)) (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) Hl1-v) (append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v) Heql1-v) (matita-arithmetics-nat.plus (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v) (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l12-v)) (length-append ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l11-v l12-v)) n-v Hlenl11-v))))) X-clearme1-v) X-clearme0-v) (split-exists ((lsuc lzero) ⊔ (lsuc l263-v)) A-v n-v l1-v (matita-basics-logic.eq-coerc lzero (matita-arithmetics-nat.le (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v q1-v))) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-arithmetics-nat.le n-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v)) (matita-arithmetics-nat.minus-le (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v q1-v))) (matita-basics-logic.rewrite-r lzero (lsuc lzero) matita-arithmetics-nat.nat (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-arithmetics-nat.le n-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat n-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le X---v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v))) (matita-arithmetics-nat.le n-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v))) (matita-basics-logic.rewrite-l lzero (lsuc lzero) matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v X---v) (matita-arithmetics-nat.le n-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-arithmetics-nat.le n-v (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v))) (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.times n-v (matita-arithmetics-nat.S q1-v)) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length ((lsuc lzero) ⊔ (lsuc l263-v)) A-v l1-v) X---v) Hl1-v (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (matita-arithmetics-nat.times-n-Sm n-v q1-v))) (matita-arithmetics-nat.minus n-v matita-arithmetics-nat.O) (matita-arithmetics-nat.minus-n-O n-v)) (matita-arithmetics-nat.minus (matita-arithmetics-nat.plus n-v (matita-arithmetics-nat.times n-v q1-v)) (matita-arithmetics-nat.plus matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v q1-v))) (matita-arithmetics-nat.minus-plus-plus-l n-v matita-arithmetics-nat.O (matita-arithmetics-nat.times n-v q1-v)))))) q-v) X-clearme-v) l-v

nth : (l3-v : Level) -> (X---v : matita-arithmetics-nat.nat) -> (H-v : Set l3-v) -> (X--1-v : list l3-v H-v) -> (X--2-v : H-v) -> H-v
nth l10-v matita-arithmetics-nat.O A-v l-v d-v = hd l10-v A-v l-v d-v
nth l10-v (matita-arithmetics-nat.S m-v) A-v l-v d-v = nth l10-v m-v A-v (tail l10-v A-v l-v) d-v


nth-nil : (l20-v : Level) -> (A-v : Set l20-v) -> (a-v : A-v) -> (i-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq l20-v A-v (nth l20-v i-v A-v (nil l20-v A-v) a-v) a-v
nth-nil = λ (l20-v : Level) -> λ (A-v : Set l20-v) -> λ (a-v : A-v) -> λ (i-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l20-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq l20-v A-v (nth l20-v X-x-365-v A-v (nil l20-v A-v) a-v) a-v) (matita-basics-logic.refl l20-v A-v a-v) (λ (x-366-v : matita-arithmetics-nat.nat) -> λ (X-x-368-v : matita-basics-logic.eq l20-v A-v (nth l20-v x-366-v A-v (nil l20-v A-v) a-v) a-v) -> matita-basics-logic.rewrite-r l20-v l20-v A-v a-v (λ (X---v : A-v) -> matita-basics-logic.eq l20-v A-v X---v a-v) (matita-basics-logic.refl l20-v A-v a-v) (nth l20-v x-366-v A-v (nil l20-v A-v) a-v) X-x-368-v) i-v

nth-opt : (l3-v : Level) -> (A-v : Set l3-v) -> (X-n-v : matita-arithmetics-nat.nat) -> (X-l-v : list l3-v A-v) -> matita-basics-types.option l3-v A-v
nth-opt l4-v A-v X-n-v nil' = matita-basics-types.None l4-v A-v
nth-opt l4-v A-v X-n-v (cons' h-v t-v) = matita-arithmetics-nat.match-nat l4-v (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-types.option l4-v A-v) (matita-basics-types.Some l4-v A-v h-v) (λ (m-v : matita-arithmetics-nat.nat) -> nth-opt l4-v A-v m-v t-v) X-n-v

All : (l4-v l3-v : Level) -> (A-v : Set l4-v) -> (X-P-v : (X---v : A-v) -> Set l3-v) -> (X-l-v : list l4-v A-v) -> Set (lzero ⊔ (l4-v ⊔ l3-v))
All l5-v l10-v A-v X-P-v nil' = matita-basics-logic.True (l10-v ⊔ l5-v)
All l5-v l10-v A-v X-P-v (cons' h-v t-v) = matita-basics-logic.And l10-v (l10-v ⊔ l5-v) (X-P-v h-v) (All l5-v l10-v A-v X-P-v t-v)


All-mp : (l61-v l59-v l57-v : Level) -> (A-v : Set l61-v) -> (P-v : (X---v : A-v) -> Set l59-v) -> (Q-v : (X---v : A-v) -> Set l57-v) -> (X---v : (a-v : A-v) -> (X---v : P-v a-v) -> Q-v a-v) -> (l-v : list l61-v A-v) -> (X--1-v : All l61-v l59-v A-v P-v l-v) -> All l61-v l57-v A-v Q-v l-v
All-mp = λ (l61-v l59-v l57-v : Level) -> λ (A-v : Set l61-v) -> λ (P-v : (X---v : A-v) -> Set l59-v) -> λ (Q-v : (X---v : A-v) -> Set l57-v) -> λ (H-v : (a-v : A-v) -> (X---v : P-v a-v) -> Q-v a-v) -> λ (l-v : list l61-v A-v) -> list-ind l61-v ((l61-v ⊔ l59-v) ⊔ l57-v) A-v (λ (X-x-716-v : list l61-v A-v) -> (X---v : All l61-v l59-v A-v P-v X-x-716-v) -> All l61-v l57-v A-v Q-v X-x-716-v) (λ (auto-v : matita-basics-logic.True (l61-v ⊔ l59-v)) -> matita-basics-logic.I (l61-v ⊔ l57-v)) (λ (h-v : A-v) -> λ (t-v : list l61-v A-v) -> λ (IH-v : (X---v : All l61-v l59-v A-v P-v t-v) -> All l61-v l57-v A-v Q-v t-v) -> λ (X-clearme-v : matita-basics-logic.And l59-v (l61-v ⊔ l59-v) (P-v h-v) (All l61-v l59-v A-v P-v t-v)) -> matita-basics-logic.match-And l59-v (l61-v ⊔ l59-v) (P-v h-v) (All l61-v l59-v A-v P-v t-v) (l61-v ⊔ l57-v) (λ (X---v : matita-basics-logic.And l59-v (l61-v ⊔ l59-v) (P-v h-v) (All l61-v l59-v A-v P-v t-v)) -> matita-basics-logic.And l57-v (l61-v ⊔ l57-v) (Q-v h-v) (All l61-v l57-v A-v Q-v t-v)) (λ (auto-v : P-v h-v) -> λ (auto'-v : All l61-v l59-v A-v P-v t-v) -> matita-basics-logic.conj l57-v (l61-v ⊔ l57-v) (Q-v h-v) (All l61-v l57-v A-v Q-v t-v) (H-v h-v auto-v) (IH-v auto'-v)) X-clearme-v) l-v

All-nth : (l242-v : Level) -> (A-v : Set (lzero)) -> (P-v : (X---v : A-v) -> Set l242-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list lzero A-v) -> (X---v : All lzero l242-v A-v P-v l-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v n-v l-v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v
All-nth = λ (l242-v : Level) -> λ (A-v : Set (lzero)) -> λ (P-v : (X---v : A-v) -> Set l242-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l242-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (l-v : list lzero A-v) -> (X---v : All lzero l242-v A-v P-v l-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v X-x-365-v l-v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) (λ (X-clearme-v : list lzero A-v) -> match-list lzero A-v l242-v (λ (X---v : list lzero A-v) -> (X--1-v : All lzero l242-v A-v P-v X---v) -> (a-v : A-v) -> (X--2-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v matita-arithmetics-nat.O X---v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) (λ (X---v : All lzero l242-v A-v P-v (nil lzero A-v)) -> λ (a-v : A-v) -> λ (E-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v matita-arithmetics-nat.O (nil lzero A-v)) (matita-basics-types.Some lzero A-v a-v)) -> matita-basics-types.option-discr l242-v A-v (matita-basics-types.None lzero A-v) (matita-basics-types.Some lzero A-v a-v) E-v (P-v a-v)) (λ (hd-v : A-v) -> λ (tl-v : list lzero A-v) -> λ (X-clearme0-v : All lzero l242-v A-v P-v (cons lzero A-v hd-v tl-v)) -> matita-basics-logic.match-And l242-v l242-v (P-v hd-v) (All lzero l242-v A-v P-v tl-v) l242-v (λ (X---v : matita-basics-logic.And l242-v l242-v (P-v hd-v) (All lzero l242-v A-v P-v tl-v)) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v matita-arithmetics-nat.O (cons lzero A-v hd-v tl-v)) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) (λ (H-v : P-v hd-v) -> λ (X---v : All lzero l242-v A-v P-v tl-v) -> λ (a-v : A-v) -> λ (E-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v matita-arithmetics-nat.O (cons lzero A-v hd-v tl-v)) (matita-basics-types.Some lzero A-v a-v)) -> matita-basics-types.option-discr l242-v A-v (matita-basics-types.Some lzero A-v hd-v) (matita-basics-types.Some lzero A-v a-v) E-v (P-v a-v) (λ (e0-v : matita-basics-logic.eq lzero A-v (matita-basics-logic.R0 lzero A-v hd-v) a-v) -> matita-basics-logic.eq-ind-r lzero l242-v A-v a-v (λ (x-v : A-v) -> λ (X-0-v : matita-basics-logic.eq lzero A-v x-v a-v) -> (X--1-v : P-v x-v) -> (X--2-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (matita-basics-types.Some lzero A-v x-v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) (λ (H0-v : P-v a-v) -> λ (E0-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (matita-basics-types.Some lzero A-v a-v) (matita-basics-types.Some lzero A-v a-v)) -> matita-basics-logic.streicherK lzero l242-v (matita-basics-types.option lzero A-v) (matita-basics-types.Some lzero A-v a-v) (λ (X--1-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (matita-basics-types.Some lzero A-v a-v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) H0-v E0-v) hd-v e0-v H-v E-v)) X-clearme0-v) X-clearme-v) (λ (m-v : matita-arithmetics-nat.nat) -> λ (IH-v : (l-v : list lzero A-v) -> (X---v : All lzero l242-v A-v P-v l-v) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v m-v l-v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) -> λ (X-clearme-v : list lzero A-v) -> match-list lzero A-v l242-v (λ (X---v : list lzero A-v) -> (X--1-v : All lzero l242-v A-v P-v X---v) -> (a-v : A-v) -> (X--2-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v (matita-arithmetics-nat.S m-v) X---v) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) (λ (X---v : All lzero l242-v A-v P-v (nil lzero A-v)) -> λ (a-v : A-v) -> λ (E-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v (matita-arithmetics-nat.S m-v) (nil lzero A-v)) (matita-basics-types.Some lzero A-v a-v)) -> matita-basics-types.option-discr l242-v A-v (matita-basics-types.None lzero A-v) (matita-basics-types.Some lzero A-v a-v) E-v (P-v a-v)) (λ (hd-v : A-v) -> λ (tl-v : list lzero A-v) -> λ (X-clearme0-v : All lzero l242-v A-v P-v (cons lzero A-v hd-v tl-v)) -> matita-basics-logic.match-And l242-v l242-v (P-v hd-v) (All lzero l242-v A-v P-v tl-v) l242-v (λ (X---v : matita-basics-logic.And l242-v l242-v (P-v hd-v) (All lzero l242-v A-v P-v tl-v)) -> (a-v : A-v) -> (X--1-v : matita-basics-logic.eq lzero (matita-basics-types.option lzero A-v) (nth-opt lzero A-v (matita-arithmetics-nat.S m-v) (cons lzero A-v hd-v tl-v)) (matita-basics-types.Some lzero A-v a-v)) -> P-v a-v) (λ (X---v : P-v hd-v) -> IH-v tl-v) X-clearme0-v) X-clearme-v) n-v

All-append : (l93-v l91-v : Level) -> (A-v : Set l93-v) -> (P-v : (X---v : A-v) -> Set l91-v) -> (l1-v : list l93-v A-v) -> (l2-v : list l93-v A-v) -> (X---v : All l93-v l91-v A-v P-v l1-v) -> (X--1-v : All l93-v l91-v A-v P-v l2-v) -> All l93-v l91-v A-v P-v (append l93-v A-v l1-v l2-v)
All-append = λ (l93-v l91-v : Level) -> λ (A-v : Set l93-v) -> λ (P-v : (X---v : A-v) -> Set l91-v) -> λ (l1-v : list l93-v A-v) -> list-ind l93-v (l93-v ⊔ l91-v) A-v (λ (X-x-716-v : list l93-v A-v) -> (l2-v : list l93-v A-v) -> (X---v : All l93-v l91-v A-v P-v X-x-716-v) -> (X--1-v : All l93-v l91-v A-v P-v l2-v) -> All l93-v l91-v A-v P-v (append l93-v A-v X-x-716-v l2-v)) (λ (l2-v : list l93-v A-v) -> λ (auto-v : All l93-v l91-v A-v P-v (nil l93-v A-v)) -> λ (auto'-v : All l93-v l91-v A-v P-v l2-v) -> auto'-v) (λ (a-v : A-v) -> λ (l10-v : list l93-v A-v) -> λ (IHl1-v : (l2-v : list l93-v A-v) -> (X---v : All l93-v l91-v A-v P-v l10-v) -> (X--1-v : All l93-v l91-v A-v P-v l2-v) -> All l93-v l91-v A-v P-v (append l93-v A-v l10-v l2-v)) -> λ (l2-v : list l93-v A-v) -> λ (X-clearme-v : All l93-v l91-v A-v P-v (cons l93-v A-v a-v l10-v)) -> matita-basics-logic.match-And l91-v (l93-v ⊔ l91-v) (P-v a-v) (All l93-v l91-v A-v P-v l10-v) (l93-v ⊔ l91-v) (λ (X---v : matita-basics-logic.And l91-v (l93-v ⊔ l91-v) (P-v a-v) (All l93-v l91-v A-v P-v l10-v)) -> (X--1-v : All l93-v l91-v A-v P-v l2-v) -> All l93-v l91-v A-v P-v (append l93-v A-v (cons l93-v A-v a-v l10-v) l2-v)) (λ (auto-v : P-v a-v) -> λ (auto'-v : All l93-v l91-v A-v P-v l10-v) -> λ (auto''-v : All l93-v l91-v A-v P-v l2-v) -> matita-basics-logic.conj l91-v (l93-v ⊔ l91-v) (P-v a-v) (All l93-v l91-v A-v P-v (append l93-v A-v l10-v l2-v)) auto-v (IHl1-v l2-v auto'-v auto''-v)) X-clearme-v) l1-v

All-inv-append : (l128-v l126-v : Level) -> (A-v : Set l128-v) -> (P-v : (X---v : A-v) -> Set l126-v) -> (l1-v : list l128-v A-v) -> (l2-v : list l128-v A-v) -> (X---v : All l128-v l126-v A-v P-v (append l128-v A-v l1-v l2-v)) -> matita-basics-logic.And (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v l1-v) (All l128-v l126-v A-v P-v l2-v)
All-inv-append = λ (l128-v l126-v : Level) -> λ (A-v : Set l128-v) -> λ (P-v : (X---v : A-v) -> Set l126-v) -> λ (l1-v : list l128-v A-v) -> list-ind l128-v (l128-v ⊔ l126-v) A-v (λ (X-x-716-v : list l128-v A-v) -> (l2-v : list l128-v A-v) -> (X---v : All l128-v l126-v A-v P-v (append l128-v A-v X-x-716-v l2-v)) -> matita-basics-logic.And (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v X-x-716-v) (All l128-v l126-v A-v P-v l2-v)) (λ (l2-v : list l128-v A-v) -> λ (auto-v : All l128-v l126-v A-v P-v (append l128-v A-v (nil l128-v A-v) l2-v)) -> matita-basics-logic.conj (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v (nil l128-v A-v)) (All l128-v l126-v A-v P-v l2-v) (matita-basics-logic.I (l128-v ⊔ l126-v)) auto-v) (λ (a-v : A-v) -> λ (l10-v : list l128-v A-v) -> λ (IHl1-v : (l2-v : list l128-v A-v) -> (X---v : All l128-v l126-v A-v P-v (append l128-v A-v l10-v l2-v)) -> matita-basics-logic.And (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v l10-v) (All l128-v l126-v A-v P-v l2-v)) -> λ (l2-v : list l128-v A-v) -> λ (X-clearme-v : All l128-v l126-v A-v P-v (append l128-v A-v (cons l128-v A-v a-v l10-v) l2-v)) -> matita-basics-logic.match-And l126-v (l128-v ⊔ l126-v) (P-v a-v) (All l128-v l126-v A-v P-v (append l128-v A-v l10-v l2-v)) (l128-v ⊔ l126-v) (λ (X---v : matita-basics-logic.And l126-v (l128-v ⊔ l126-v) (P-v a-v) (All l128-v l126-v A-v P-v (append l128-v A-v l10-v l2-v))) -> matita-basics-logic.And (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v (cons l128-v A-v a-v l10-v)) (All l128-v l126-v A-v P-v l2-v)) (λ (Ha-v : P-v a-v) -> λ (Hl12-v : All l128-v l126-v A-v P-v (append l128-v A-v l10-v l2-v)) -> matita-basics-logic.And-ind (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v l10-v) (All l128-v l126-v A-v P-v l2-v) (λ (X-x-118-v : matita-basics-logic.And (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v l10-v) (All l128-v l126-v A-v P-v l2-v)) -> matita-basics-logic.And (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v (cons l128-v A-v a-v l10-v)) (All l128-v l126-v A-v P-v l2-v)) (λ (X-x-120-v : All l128-v l126-v A-v P-v l10-v) -> λ (X-x-119-v : All l128-v l126-v A-v P-v l2-v) -> matita-basics-logic.conj (l128-v ⊔ l126-v) (l128-v ⊔ l126-v) (All l128-v l126-v A-v P-v (cons l128-v A-v a-v l10-v)) (All l128-v l126-v A-v P-v l2-v) (matita-basics-logic.conj l126-v (l128-v ⊔ l126-v) (P-v a-v) (All l128-v l126-v A-v P-v l10-v) Ha-v X-x-120-v) X-x-119-v) (IHl1-v l2-v Hl12-v)) X-clearme-v) l1-v

Allr : (l4-v l3-v : Level) -> (A-v : Set l4-v) -> (X-R-v : matita-basics-relations.relation l4-v l3-v A-v) -> (X-l-v : list l4-v A-v) -> Set (lzero ⊔ (l4-v ⊔ l3-v))
Allr l5-v l15-v A-v X-R-v nil' = matita-basics-logic.True (l15-v ⊔ l5-v)
Allr l5-v l15-v A-v X-R-v (cons' a1-v l0-v) = match-list l5-v A-v ((lsuc lzero) ⊔ ((lsuc l15-v) ⊔ (lsuc l5-v))) (λ (X---v : list l5-v A-v) -> Set (l15-v ⊔ l5-v)) (matita-basics-logic.True (l15-v ⊔ l5-v)) (λ (a2-v : A-v) -> λ (X---v : list l5-v A-v) -> matita-basics-logic.And l15-v (l15-v ⊔ l5-v) (X-R-v a1-v a2-v) (Allr l5-v l15-v A-v X-R-v l0-v)) l0-v
{-

postulate Allr-body : (l4-v l3-v : Level) -> (A-v : Set l4-v) -> (X-R-v : matita-basics-relations.relation l4-v l3-v A-v) -> (X-l-v : list l4-v A-v) -> Set (lzero ⊔ (l4-v ⊔ l3-v))

-- postulate rewrite-rule-462 : (l5-v : Level) -> (l6-v : Level) -> (A-v : Set l5-v) -> (X-R-v : matita-basics-relations.relation l5-v l6-v A-v) -> (X-l-v : list l5-v A-v) -> Allr l5-v l6-v A-v X-R-v X-l-v ≡ filter-list l5-v A-v ((lsuc lzero) ⊔ ((lsuc l5-v) ⊔ (lsuc l6-v))) (λ (X-l-v : list l5-v A-v) -> Set (l5-v ⊔ l6-v)) (Allr-body l5-v l6-v A-v X-R-v) X-l-v


-- postulate rewrite-rule-463 : (l5-v : Level) -> (l15-v : Level) -> (A-v : Set l5-v) -> (X-R-v : matita-basics-relations.relation l5-v l15-v A-v) -> (X-l-v : list l5-v A-v) -> Allr-body l5-v l15-v A-v X-R-v X-l-v ≡ match-list l5-v A-v ((lsuc lzero) ⊔ ((lsuc l15-v) ⊔ (lsuc l5-v))) (λ (X---v : list l5-v A-v) -> Set (l15-v ⊔ l5-v)) (matita-basics-logic.True (l15-v ⊔ l5-v)) (λ (a1-v : A-v) -> λ (l0-v : list l5-v A-v) -> match-list l5-v A-v ((lsuc lzero) ⊔ ((lsuc l15-v) ⊔ (lsuc l5-v))) (λ (X---v : list l5-v A-v) -> Set (l15-v ⊔ l5-v)) (matita-basics-logic.True (l15-v ⊔ l5-v)) (λ (a2-v : A-v) -> λ (X---v : list l5-v A-v) -> matita-basics-logic.And l15-v (l15-v ⊔ l5-v) (X-R-v a1-v a2-v) (Allr l5-v l15-v A-v X-R-v l0-v)) l0-v) X-l-v
-}

Allr-fwd-append-sn : (l157-v l154-v : Level) -> (A-v : Set l157-v) -> (R-v : matita-basics-relations.relation l157-v l154-v A-v) -> (l1-v : list l157-v A-v) -> (l2-v : list l157-v A-v) -> (X---v : Allr l157-v l154-v A-v R-v (append l157-v A-v l1-v l2-v)) -> Allr l157-v l154-v A-v R-v l1-v
Allr-fwd-append-sn = λ (l157-v l154-v : Level) -> λ (A-v : Set l157-v) -> λ (R-v : matita-basics-relations.relation l157-v l154-v A-v) -> λ (l1-v : list l157-v A-v) -> list-ind l157-v (l157-v ⊔ l154-v) A-v (λ (X-x-716-v : list l157-v A-v) -> (l2-v : list l157-v A-v) -> (X---v : Allr l157-v l154-v A-v R-v (append l157-v A-v X-x-716-v l2-v)) -> Allr l157-v l154-v A-v R-v X-x-716-v) (λ (l2-v : list l157-v A-v) -> λ (auto-v : Allr l157-v l154-v A-v R-v (append l157-v A-v (nil l157-v A-v) l2-v)) -> matita-basics-logic.I (l157-v ⊔ l154-v)) (λ (a1-v : A-v) -> λ (X-clearme-v : list l157-v A-v) -> match-list l157-v A-v (l157-v ⊔ l154-v) (λ (X---v : list l157-v A-v) -> (X-x-720-v : (l2-v : list l157-v A-v) -> (X--1-v : Allr l157-v l154-v A-v R-v (append l157-v A-v X---v l2-v)) -> Allr l157-v l154-v A-v R-v X---v) -> (l2-v : list l157-v A-v) -> (X--1-v : Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a1-v X---v) l2-v)) -> Allr l157-v l154-v A-v R-v (cons l157-v A-v a1-v X---v)) (λ (X-x-720-v : (l2-v : list l157-v A-v) -> (X---v : Allr l157-v l154-v A-v R-v (append l157-v A-v (nil l157-v A-v) l2-v)) -> Allr l157-v l154-v A-v R-v (nil l157-v A-v)) -> λ (l2-v : list l157-v A-v) -> λ (auto-v : Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a1-v (nil l157-v A-v)) l2-v)) -> matita-basics-logic.I (l157-v ⊔ l154-v)) (λ (a2-v : A-v) -> λ (l10-v : list l157-v A-v) -> λ (IHl1-v : (l2-v : list l157-v A-v) -> (X---v : Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a2-v l10-v) l2-v)) -> Allr l157-v l154-v A-v R-v (cons l157-v A-v a2-v l10-v)) -> λ (l2-v : list l157-v A-v) -> λ (X-clearme0-v : Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a1-v (cons l157-v A-v a2-v l10-v)) l2-v)) -> matita-basics-logic.match-And l154-v (l157-v ⊔ l154-v) (R-v a1-v a2-v) (Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a2-v l10-v) l2-v)) (l157-v ⊔ l154-v) (λ (X---v : matita-basics-logic.And l154-v (l157-v ⊔ l154-v) (R-v a1-v a2-v) (Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a2-v l10-v) l2-v))) -> Allr l157-v l154-v A-v R-v (cons l157-v A-v a1-v (cons l157-v A-v a2-v l10-v))) (λ (auto-v : R-v a1-v a2-v) -> λ (auto'-v : Allr l157-v l154-v A-v R-v (append l157-v A-v (cons l157-v A-v a2-v l10-v) l2-v)) -> matita-basics-logic.conj l154-v (l157-v ⊔ l154-v) (R-v a1-v a2-v) (Allr l157-v l154-v A-v R-v (cons l157-v A-v a2-v l10-v)) auto-v (IHl1-v l2-v auto'-v)) X-clearme0-v) X-clearme-v) l1-v

Allr-fwd-cons : (l54-v l51-v : Level) -> (A-v : Set l54-v) -> (R-v : matita-basics-relations.relation l54-v l51-v A-v) -> (a-v : A-v) -> (l-v : list l54-v A-v) -> (X---v : Allr l54-v l51-v A-v R-v (cons l54-v A-v a-v l-v)) -> Allr l54-v l51-v A-v R-v l-v
Allr-fwd-cons = λ (l54-v l51-v : Level) -> λ (A-v : Set l54-v) -> λ (R-v : matita-basics-relations.relation l54-v l51-v A-v) -> λ (a-v : A-v) -> λ (X-clearme-v : list l54-v A-v) -> match-list l54-v A-v (l54-v ⊔ l51-v) (λ (X---v : list l54-v A-v) -> (X--1-v : Allr l54-v l51-v A-v R-v (cons l54-v A-v a-v X---v)) -> Allr l54-v l51-v A-v R-v X---v) (λ (auto-v : Allr l54-v l51-v A-v R-v (cons l54-v A-v a-v (nil l54-v A-v))) -> auto-v) (λ (a0-v : A-v) -> λ (l-v : list l54-v A-v) -> λ (X-clearme0-v : Allr l54-v l51-v A-v R-v (cons l54-v A-v a-v (cons l54-v A-v a0-v l-v))) -> matita-basics-logic.match-And l51-v (l54-v ⊔ l51-v) (R-v a-v a0-v) (Allr l54-v l51-v A-v R-v (cons l54-v A-v a0-v l-v)) (l54-v ⊔ l51-v) (λ (X---v : matita-basics-logic.And l51-v (l54-v ⊔ l51-v) (R-v a-v a0-v) (Allr l54-v l51-v A-v R-v (cons l54-v A-v a0-v l-v))) -> Allr l54-v l51-v A-v R-v (cons l54-v A-v a0-v l-v)) (λ (auto-v : R-v a-v a0-v) -> λ (auto'-v : Allr l54-v l51-v A-v R-v (cons l54-v A-v a0-v l-v)) -> auto'-v) X-clearme0-v) X-clearme-v

Allr-fwd-append-dx : (l54-v l51-v : Level) -> (A-v : Set l54-v) -> (R-v : matita-basics-relations.relation l54-v l51-v A-v) -> (l1-v : list l54-v A-v) -> (l2-v : list l54-v A-v) -> (X---v : Allr l54-v l51-v A-v R-v (append l54-v A-v l1-v l2-v)) -> Allr l54-v l51-v A-v R-v l2-v
Allr-fwd-append-dx = λ (l54-v l51-v : Level) -> λ (A-v : Set l54-v) -> λ (R-v : matita-basics-relations.relation l54-v l51-v A-v) -> λ (l1-v : list l54-v A-v) -> list-ind l54-v (l54-v ⊔ l51-v) A-v (λ (X-x-716-v : list l54-v A-v) -> (l2-v : list l54-v A-v) -> (X---v : Allr l54-v l51-v A-v R-v (append l54-v A-v X-x-716-v l2-v)) -> Allr l54-v l51-v A-v R-v l2-v) (λ (l2-v : list l54-v A-v) -> λ (auto-v : Allr l54-v l51-v A-v R-v (append l54-v A-v (nil l54-v A-v) l2-v)) -> auto-v) (λ (a1-v : A-v) -> λ (l10-v : list l54-v A-v) -> λ (IHl1-v : (l2-v : list l54-v A-v) -> (X---v : Allr l54-v l51-v A-v R-v (append l54-v A-v l10-v l2-v)) -> Allr l54-v l51-v A-v R-v l2-v) -> λ (l2-v : list l54-v A-v) -> λ (H-v : Allr l54-v l51-v A-v R-v (append l54-v A-v (cons l54-v A-v a1-v l10-v) l2-v)) -> IHl1-v l2-v (Allr-fwd-cons l54-v l51-v A-v R-v a1-v (append l54-v A-v l10-v l2-v) H-v)) l1-v

Exists : (l4-v l3-v : Level) -> (A-v : Set l4-v) -> (X-P-v : (X---v : A-v) -> Set l3-v) -> (X-l-v : list l4-v A-v) -> Set (lzero ⊔ (l4-v ⊔ l3-v))
Exists l5-v l10-v A-v X-P-v nil' = matita-basics-logic.False (l10-v ⊔ l5-v)
Exists l5-v l10-v A-v X-P-v (cons' h-v t-v) = matita-basics-logic.Or l10-v (l10-v ⊔ l5-v) (X-P-v h-v) (Exists l5-v l10-v A-v X-P-v t-v)

{-

postulate Exists-body : (l4-v l3-v : Level) -> (A-v : Set l4-v) -> (X-P-v : (X---v : A-v) -> Set l3-v) -> (X-l-v : list l4-v A-v) -> Set (lzero ⊔ (l4-v ⊔ l3-v))

-- postulate rewrite-rule-464 : (l5-v : Level) -> (l6-v : Level) -> (A-v : Set l5-v) -> (X-P-v : (X---v : A-v) -> Set l6-v) -> (X-l-v : list l5-v A-v) -> Exists l5-v l6-v A-v X-P-v X-l-v ≡ filter-list l5-v A-v ((lsuc lzero) ⊔ ((lsuc l5-v) ⊔ (lsuc l6-v))) (λ (X-l-v : list l5-v A-v) -> Set (l5-v ⊔ l6-v)) (Exists-body l5-v l6-v A-v X-P-v) X-l-v


-- postulate rewrite-rule-465 : (l5-v : Level) -> (l10-v : Level) -> (A-v : Set l5-v) -> (X-P-v : (X---v : A-v) -> Set l10-v) -> (X-l-v : list l5-v A-v) -> Exists-body l5-v l10-v A-v X-P-v X-l-v ≡ match-list l5-v A-v ((lsuc lzero) ⊔ ((lsuc l10-v) ⊔ (lsuc l5-v))) (λ (X---v : list l5-v A-v) -> Set (l10-v ⊔ l5-v)) (matita-basics-logic.False (l10-v ⊔ l5-v)) (λ (h-v : A-v) -> λ (t-v : list l5-v A-v) -> matita-basics-logic.Or l10-v (l10-v ⊔ l5-v) (X-P-v h-v) (Exists l5-v l10-v A-v X-P-v t-v)) X-l-v
-}

Exists-append : (l141-v l139-v : Level) -> (A-v : Set l141-v) -> (P-v : (X---v : A-v) -> Set l139-v) -> (l1-v : list l141-v A-v) -> (l2-v : list l141-v A-v) -> (X---v : Exists l141-v l139-v A-v P-v (append l141-v A-v l1-v l2-v)) -> matita-basics-logic.Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v l1-v) (Exists l141-v l139-v A-v P-v l2-v)
Exists-append = λ (l141-v l139-v : Level) -> λ (A-v : Set l141-v) -> λ (P-v : (X---v : A-v) -> Set l139-v) -> λ (l1-v : list l141-v A-v) -> list-ind l141-v (l141-v ⊔ l139-v) A-v (λ (X-x-716-v : list l141-v A-v) -> (l2-v : list l141-v A-v) -> (X---v : Exists l141-v l139-v A-v P-v (append l141-v A-v X-x-716-v l2-v)) -> matita-basics-logic.Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v X-x-716-v) (Exists l141-v l139-v A-v P-v l2-v)) (λ (l2-v : list l141-v A-v) -> λ (auto-v : Exists l141-v l139-v A-v P-v l2-v) -> matita-basics-logic.or-intror (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (matita-basics-logic.False (l141-v ⊔ l139-v)) (Exists l141-v l139-v A-v P-v l2-v) auto-v) (λ (h-v : A-v) -> λ (t-v : list l141-v A-v) -> λ (IH-v : (l2-v : list l141-v A-v) -> (X---v : Exists l141-v l139-v A-v P-v (append l141-v A-v t-v l2-v)) -> matita-basics-logic.Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v t-v) (Exists l141-v l139-v A-v P-v l2-v)) -> λ (l2-v : list l141-v A-v) -> λ (X-clearme-v : Exists l141-v l139-v A-v P-v (append l141-v A-v (cons l141-v A-v h-v t-v) l2-v)) -> matita-basics-logic.match-Or l139-v (l141-v ⊔ l139-v) (P-v h-v) (Exists l141-v l139-v A-v P-v (append l141-v A-v t-v l2-v)) (l141-v ⊔ l139-v) (λ (X---v : matita-basics-logic.Or l139-v (l141-v ⊔ l139-v) (P-v h-v) (Exists l141-v l139-v A-v P-v (append l141-v A-v t-v l2-v))) -> matita-basics-logic.Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v (cons l141-v A-v h-v t-v)) (Exists l141-v l139-v A-v P-v l2-v)) (λ (H-v : P-v h-v) -> matita-basics-logic.or-introl (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v (cons l141-v A-v h-v t-v)) (Exists l141-v l139-v A-v P-v l2-v) (matita-basics-logic.or-introl l139-v (l141-v ⊔ l139-v) (P-v h-v) (Exists l141-v l139-v A-v P-v t-v) H-v)) (λ (H-v : Exists l141-v l139-v A-v P-v (append l141-v A-v t-v l2-v)) -> matita-basics-logic.match-Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v t-v) (Exists l141-v l139-v A-v P-v l2-v) (l141-v ⊔ l139-v) (λ (X---v : matita-basics-logic.Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v t-v) (Exists l141-v l139-v A-v P-v l2-v)) -> matita-basics-logic.Or (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v (cons l141-v A-v h-v t-v)) (Exists l141-v l139-v A-v P-v l2-v)) (λ (auto-v : Exists l141-v l139-v A-v P-v t-v) -> matita-basics-logic.or-introl (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v (cons l141-v A-v h-v t-v)) (Exists l141-v l139-v A-v P-v l2-v) (matita-basics-logic.or-intror l139-v (l141-v ⊔ l139-v) (P-v h-v) (Exists l141-v l139-v A-v P-v t-v) auto-v)) (λ (auto-v : Exists l141-v l139-v A-v P-v l2-v) -> matita-basics-logic.or-intror (l141-v ⊔ l139-v) (l141-v ⊔ l139-v) (Exists l141-v l139-v A-v P-v (cons l141-v A-v h-v t-v)) (Exists l141-v l139-v A-v P-v l2-v) auto-v) (IH-v l2-v H-v)) X-clearme-v) l1-v

Exists-append-l : (l74-v l72-v : Level) -> (A-v : Set l74-v) -> (P-v : (X---v : A-v) -> Set l72-v) -> (l1-v : list l74-v A-v) -> (l2-v : list l74-v A-v) -> (X---v : Exists l74-v l72-v A-v P-v l1-v) -> Exists l74-v l72-v A-v P-v (append l74-v A-v l1-v l2-v)
Exists-append-l = λ (l74-v l72-v : Level) -> λ (A-v : Set l74-v) -> λ (P-v : (X---v : A-v) -> Set l72-v) -> λ (l1-v : list l74-v A-v) -> λ (l2-v : list l74-v A-v) -> list-ind l74-v (l74-v ⊔ l72-v) A-v (λ (X-x-716-v : list l74-v A-v) -> (X---v : Exists l74-v l72-v A-v P-v X-x-716-v) -> Exists l74-v l72-v A-v P-v (append l74-v A-v X-x-716-v l2-v)) (λ (X-clearme-v : Exists l74-v l72-v A-v P-v (nil l74-v A-v)) -> matita-basics-logic.match-False (l74-v ⊔ l72-v) (l74-v ⊔ l72-v) (λ (X---v : matita-basics-logic.False (l74-v ⊔ l72-v)) -> Exists l74-v l72-v A-v P-v (append l74-v A-v (nil l74-v A-v) l2-v)) X-clearme-v) (λ (h-v : A-v) -> λ (t-v : list l74-v A-v) -> λ (IH-v : (X---v : Exists l74-v l72-v A-v P-v t-v) -> Exists l74-v l72-v A-v P-v (append l74-v A-v t-v l2-v)) -> λ (X-clearme-v : Exists l74-v l72-v A-v P-v (cons l74-v A-v h-v t-v)) -> matita-basics-logic.match-Or l72-v (l74-v ⊔ l72-v) (P-v h-v) (Exists l74-v l72-v A-v P-v t-v) (l74-v ⊔ l72-v) (λ (X---v : matita-basics-logic.Or l72-v (l74-v ⊔ l72-v) (P-v h-v) (Exists l74-v l72-v A-v P-v t-v)) -> Exists l74-v l72-v A-v P-v (append l74-v A-v (cons l74-v A-v h-v t-v) l2-v)) (λ (H-v : P-v h-v) -> matita-basics-logic.or-introl l72-v (l74-v ⊔ l72-v) (P-v h-v) (Exists l74-v l72-v A-v P-v (append l74-v A-v t-v l2-v)) H-v) (λ (H-v : Exists l74-v l72-v A-v P-v t-v) -> matita-basics-logic.or-intror l72-v (l74-v ⊔ l72-v) (P-v h-v) (Exists l74-v l72-v A-v P-v (append l74-v A-v t-v l2-v)) (IH-v H-v)) X-clearme-v) l1-v

Exists-append-r : (l41-v l39-v : Level) -> (A-v : Set l41-v) -> (P-v : (X---v : A-v) -> Set l39-v) -> (l1-v : list l41-v A-v) -> (l2-v : list l41-v A-v) -> (X---v : Exists l41-v l39-v A-v P-v l2-v) -> Exists l41-v l39-v A-v P-v (append l41-v A-v l1-v l2-v)
Exists-append-r = λ (l41-v l39-v : Level) -> λ (A-v : Set l41-v) -> λ (P-v : (X---v : A-v) -> Set l39-v) -> λ (l1-v : list l41-v A-v) -> λ (l2-v : list l41-v A-v) -> list-ind l41-v (l41-v ⊔ l39-v) A-v (λ (X-x-716-v : list l41-v A-v) -> (X---v : Exists l41-v l39-v A-v P-v l2-v) -> Exists l41-v l39-v A-v P-v (append l41-v A-v X-x-716-v l2-v)) (λ (H-v : Exists l41-v l39-v A-v P-v l2-v) -> H-v) (λ (h-v : A-v) -> λ (t-v : list l41-v A-v) -> λ (IH-v : (X---v : Exists l41-v l39-v A-v P-v l2-v) -> Exists l41-v l39-v A-v P-v (append l41-v A-v t-v l2-v)) -> λ (H-v : Exists l41-v l39-v A-v P-v l2-v) -> matita-basics-logic.or-intror l39-v (l41-v ⊔ l39-v) (P-v h-v) (Exists l41-v l39-v A-v P-v (append l41-v A-v t-v l2-v)) (IH-v H-v)) l1-v

Exists-add : (l84-v l82-v : Level) -> (A-v : Set l84-v) -> (P-v : (X---v : A-v) -> Set l82-v) -> (l1-v : list l84-v A-v) -> (x-v : A-v) -> (l2-v : list l84-v A-v) -> (X---v : Exists l84-v l82-v A-v P-v (append l84-v A-v l1-v l2-v)) -> Exists l84-v l82-v A-v P-v (append l84-v A-v l1-v (cons l84-v A-v x-v l2-v))
Exists-add = λ (l84-v l82-v : Level) -> λ (A-v : Set l84-v) -> λ (P-v : (X---v : A-v) -> Set l82-v) -> λ (l1-v : list l84-v A-v) -> λ (x-v : A-v) -> λ (l2-v : list l84-v A-v) -> list-ind l84-v (l84-v ⊔ l82-v) A-v (λ (X-x-716-v : list l84-v A-v) -> (X---v : Exists l84-v l82-v A-v P-v (append l84-v A-v X-x-716-v l2-v)) -> Exists l84-v l82-v A-v P-v (append l84-v A-v X-x-716-v (cons l84-v A-v x-v l2-v))) (λ (H-v : Exists l84-v l82-v A-v P-v l2-v) -> matita-basics-logic.or-intror l82-v (l84-v ⊔ l82-v) (P-v x-v) (Exists l84-v l82-v A-v P-v l2-v) H-v) (λ (h-v : A-v) -> λ (t-v : list l84-v A-v) -> λ (IH-v : (X---v : Exists l84-v l82-v A-v P-v (append l84-v A-v t-v l2-v)) -> Exists l84-v l82-v A-v P-v (append l84-v A-v t-v (cons l84-v A-v x-v l2-v))) -> λ (X-clearme-v : matita-basics-logic.Or l82-v (l84-v ⊔ l82-v) (P-v h-v) (Exists l84-v l82-v A-v P-v (append l84-v A-v t-v l2-v))) -> matita-basics-logic.match-Or l82-v (l84-v ⊔ l82-v) (P-v h-v) (Exists l84-v l82-v A-v P-v (append l84-v A-v t-v l2-v)) (l84-v ⊔ l82-v) (λ (X---v : matita-basics-logic.Or l82-v (l84-v ⊔ l82-v) (P-v h-v) (Exists l84-v l82-v A-v P-v (append l84-v A-v t-v l2-v))) -> matita-basics-logic.Or l82-v (l84-v ⊔ l82-v) (P-v h-v) (Exists l84-v l82-v A-v P-v (append l84-v A-v t-v (cons l84-v A-v x-v l2-v)))) (λ (H-v : P-v h-v) -> matita-basics-logic.or-introl l82-v (l84-v ⊔ l82-v) (P-v h-v) (Exists l84-v l82-v A-v P-v (append l84-v A-v t-v (cons l84-v A-v x-v l2-v))) H-v) (λ (H-v : Exists l84-v l82-v A-v P-v (append l84-v A-v t-v l2-v)) -> matita-basics-logic.or-intror l82-v (l84-v ⊔ l82-v) (P-v h-v) (Exists l84-v l82-v A-v P-v (append l84-v A-v t-v (cons l84-v A-v x-v l2-v))) (IH-v H-v)) X-clearme-v) l1-v

Exists-mid : (l34-v l32-v : Level) -> (A-v : Set l34-v) -> (P-v : (X---v : A-v) -> Set l32-v) -> (l1-v : list l34-v A-v) -> (x-v : A-v) -> (l2-v : list l34-v A-v) -> (X---v : P-v x-v) -> Exists l34-v l32-v A-v P-v (append l34-v A-v l1-v (cons l34-v A-v x-v l2-v))
Exists-mid = λ (l34-v l32-v : Level) -> λ (A-v : Set l34-v) -> λ (P-v : (X---v : A-v) -> Set l32-v) -> λ (l1-v : list l34-v A-v) -> λ (x-v : A-v) -> λ (l2-v : list l34-v A-v) -> λ (H-v : P-v x-v) -> list-ind l34-v (l34-v ⊔ l32-v) A-v (λ (X-x-716-v : list l34-v A-v) -> Exists l34-v l32-v A-v P-v (append l34-v A-v X-x-716-v (cons l34-v A-v x-v l2-v))) (matita-basics-logic.or-introl l32-v (l34-v ⊔ l32-v) (P-v x-v) (Exists l34-v l32-v A-v P-v l2-v) H-v) (λ (h-v : A-v) -> λ (t-v : list l34-v A-v) -> λ (IH-v : Exists l34-v l32-v A-v P-v (append l34-v A-v t-v (cons l34-v A-v x-v l2-v))) -> matita-basics-logic.or-intror l32-v (l34-v ⊔ l32-v) (P-v h-v) (Exists l34-v l32-v A-v P-v (append l34-v A-v t-v (cons l34-v A-v x-v l2-v))) IH-v) l1-v

Exists-map : (l107-v l103-v : Level) -> (A-v : Set (lzero ⊔ (l107-v ⊔ l103-v))) -> (B-v : Set l107-v) -> (P-v : (X---v : A-v) -> Set (lzero ⊔ (l107-v ⊔ l103-v))) -> (Q-v : (X---v : B-v) -> Set l103-v) -> (f-v : (X---v : A-v) -> B-v) -> (l-v : list (l107-v ⊔ l103-v) A-v) -> (X---v : Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v l-v) -> (X--1-v : (a-v : A-v) -> (X--1-v : P-v a-v) -> Q-v (f-v a-v)) -> Exists l107-v l103-v B-v Q-v (map (l107-v ⊔ l103-v) l107-v A-v B-v f-v l-v)
Exists-map = λ (l107-v l103-v : Level) -> λ (A-v : Set (lzero ⊔ (l107-v ⊔ l103-v))) -> λ (B-v : Set l107-v) -> λ (P-v : (X---v : A-v) -> Set (lzero ⊔ (l107-v ⊔ l103-v))) -> λ (Q-v : (X---v : B-v) -> Set l103-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (l-v : list (l107-v ⊔ l103-v) A-v) -> list-ind (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v (λ (X-x-716-v : list (l107-v ⊔ l103-v) A-v) -> (X---v : Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v X-x-716-v) -> (X--1-v : (a-v : A-v) -> (X--1-v : P-v a-v) -> Q-v (f-v a-v)) -> Exists l107-v l103-v B-v Q-v (map (l107-v ⊔ l103-v) l107-v A-v B-v f-v X-x-716-v)) (λ (auto-v : Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v (nil (l107-v ⊔ l103-v) A-v)) -> λ (auto'-v : (a-v : A-v) -> (X---v : P-v a-v) -> Q-v (f-v a-v)) -> auto-v) (λ (h-v : A-v) -> λ (t-v : list (l107-v ⊔ l103-v) A-v) -> λ (IH-v : (X---v : Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v t-v) -> (X--1-v : (a-v : A-v) -> (X--1-v : P-v a-v) -> Q-v (f-v a-v)) -> Exists l107-v l103-v B-v Q-v (map (l107-v ⊔ l103-v) l107-v A-v B-v f-v t-v)) -> λ (X-clearme-v : Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v (cons (l107-v ⊔ l103-v) A-v h-v t-v)) -> matita-basics-logic.match-Or (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) (P-v h-v) (Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v t-v) (l107-v ⊔ l103-v) (λ (X---v : matita-basics-logic.Or (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) (P-v h-v) (Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v t-v)) -> (X--1-v : (a-v : A-v) -> (X--1-v : P-v a-v) -> Q-v (f-v a-v)) -> Exists l107-v l103-v B-v Q-v (map (l107-v ⊔ l103-v) l107-v A-v B-v f-v (cons (l107-v ⊔ l103-v) A-v h-v t-v))) (λ (H-v : P-v h-v) -> λ (F-v : (a-v : A-v) -> (X---v : P-v a-v) -> Q-v (f-v a-v)) -> matita-basics-logic.or-introl l103-v (l107-v ⊔ l103-v) (Q-v (f-v h-v)) (Exists l107-v l103-v B-v Q-v (map (l107-v ⊔ l103-v) l107-v A-v B-v f-v t-v)) (F-v h-v H-v)) (λ (H-v : Exists (l107-v ⊔ l103-v) (l107-v ⊔ l103-v) A-v P-v t-v) -> λ (F-v : (a-v : A-v) -> (X---v : P-v a-v) -> Q-v (f-v a-v)) -> matita-basics-logic.or-intror l103-v (l107-v ⊔ l103-v) (Q-v (f-v h-v)) (Exists l107-v l103-v B-v Q-v (map (l107-v ⊔ l103-v) l107-v A-v B-v f-v t-v)) (IH-v H-v F-v)) X-clearme-v) l-v

Exists-All : (l155-v l149-v l147-v : Level) -> (A-v : Set l155-v) -> (P-v : (X---v : A-v) -> Set l149-v) -> (Q-v : (X---v : A-v) -> Set l147-v) -> (l-v : list l155-v A-v) -> (X---v : Exists l155-v l149-v A-v P-v l-v) -> (X--1-v : All l155-v l147-v A-v Q-v l-v) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))
Exists-All = λ (l155-v l149-v l147-v : Level) -> λ (A-v : Set l155-v) -> λ (P-v : (X---v : A-v) -> Set l149-v) -> λ (Q-v : (X---v : A-v) -> Set l147-v) -> λ (l-v : list l155-v A-v) -> list-ind l155-v ((l155-v ⊔ l149-v) ⊔ l147-v) A-v (λ (X-x-716-v : list l155-v A-v) -> (X---v : Exists l155-v l149-v A-v P-v X-x-716-v) -> (X--1-v : All l155-v l147-v A-v Q-v X-x-716-v) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))) (λ (X-clearme-v : Exists l155-v l149-v A-v P-v (nil l155-v A-v)) -> matita-basics-logic.match-False (l155-v ⊔ l149-v) ((l155-v ⊔ l149-v) ⊔ l147-v) (λ (X---v : matita-basics-logic.False (l155-v ⊔ l149-v)) -> (X--1-v : All l155-v l147-v A-v Q-v (nil l155-v A-v)) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))) X-clearme-v) (λ (hd-v : A-v) -> λ (tl-v : list l155-v A-v) -> λ (IH-v : (X---v : Exists l155-v l149-v A-v P-v tl-v) -> (X--1-v : All l155-v l147-v A-v Q-v tl-v) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))) -> λ (X-clearme-v : Exists l155-v l149-v A-v P-v (cons l155-v A-v hd-v tl-v)) -> matita-basics-logic.match-Or l149-v (l155-v ⊔ l149-v) (P-v hd-v) (Exists l155-v l149-v A-v P-v tl-v) ((l155-v ⊔ l149-v) ⊔ l147-v) (λ (X---v : matita-basics-logic.Or l149-v (l155-v ⊔ l149-v) (P-v hd-v) (Exists l155-v l149-v A-v P-v tl-v)) -> (X--1-v : All l155-v l147-v A-v Q-v (cons l155-v A-v hd-v tl-v)) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))) (λ (H1-v : P-v hd-v) -> λ (X-clearme0-v : All l155-v l147-v A-v Q-v (cons l155-v A-v hd-v tl-v)) -> matita-basics-logic.match-And l147-v (l155-v ⊔ l147-v) (Q-v hd-v) (All l155-v l147-v A-v Q-v tl-v) ((l155-v ⊔ l149-v) ⊔ l147-v) (λ (X---v : matita-basics-logic.And l147-v (l155-v ⊔ l147-v) (Q-v hd-v) (All l155-v l147-v A-v Q-v tl-v)) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))) (λ (H2-v : Q-v hd-v) -> λ (X---v : All l155-v l147-v A-v Q-v tl-v) -> matita-basics-logic.ex-intro l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v)) hd-v (matita-basics-logic.conj l149-v l147-v (P-v hd-v) (Q-v hd-v) H1-v H2-v)) X-clearme0-v) (λ (H1-v : Exists l155-v l149-v A-v P-v tl-v) -> λ (X-clearme0-v : All l155-v l147-v A-v Q-v (cons l155-v A-v hd-v tl-v)) -> matita-basics-logic.match-And l147-v (l155-v ⊔ l147-v) (Q-v hd-v) (All l155-v l147-v A-v Q-v tl-v) ((l155-v ⊔ l149-v) ⊔ l147-v) (λ (X---v : matita-basics-logic.And l147-v (l155-v ⊔ l147-v) (Q-v hd-v) (All l155-v l147-v A-v Q-v tl-v)) -> matita-basics-logic.ex l155-v (l149-v ⊔ l147-v) A-v (λ (x-v : A-v) -> matita-basics-logic.And l149-v l147-v (P-v x-v) (Q-v x-v))) (λ (X---v : Q-v hd-v) -> λ (H2-v : All l155-v l147-v A-v Q-v tl-v) -> IH-v H1-v H2-v) X-clearme0-v) X-clearme-v) l-v

fold : (l6-v l10-v : Level) -> (A-v : Set l6-v) -> (B-v : Set l10-v) -> (X-op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (X-b-v : B-v) -> (X-p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l6-v A-v) -> B-v
fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v nil' = X-b-v
fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v (cons' a-v l-v) = matita-basics-bool.match-bool l0-v (λ (X---v : matita-basics-bool.bool) -> B-v) (X-op-v (X-f-v a-v) (fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v l-v)) (fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v l-v) (X-p-v a-v)

{-
postulate fold-body : (l6-v l10-v : Level) -> (A-v : Set l6-v) -> (B-v : Set l10-v) -> (X-op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (X-b-v : B-v) -> (X-p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l6-v A-v) -> B-v

-- postulate rewrite-rule-466 : (l4-v : Level) -> (l0-v : Level) -> (A-v : Set l4-v) -> (B-v : Set l0-v) -> (X-op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (X-b-v : B-v) -> (X-p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l4-v A-v) -> fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v X-l-v ≡ filter-list l4-v A-v l0-v (λ (X-l-v : list l4-v A-v) -> B-v) (fold-body l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v) X-l-v


-- postulate rewrite-rule-467 : (l4-v : Level) -> (l0-v : Level) -> (A-v : Set l4-v) -> (B-v : Set l0-v) -> (X-op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (X-b-v : B-v) -> (X-p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-f-v : (X---v : A-v) -> B-v) -> (X-l-v : list l4-v A-v) -> fold-body l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v X-l-v ≡ match-list l4-v A-v l0-v (λ (X---v : list l4-v A-v) -> B-v) X-b-v (λ (a-v : A-v) -> λ (l0-v : list l4-v A-v) -> matita-basics-bool.match-bool l0-v (λ (X---v : matita-basics-bool.bool) -> B-v) (X-op-v (X-f-v a-v) (fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v l0-v)) (fold l4-v l0-v A-v B-v X-op-v X-b-v X-p-v X-f-v l0-v) (X-p-v a-v)) X-l-v
-}

fold-true : (l47-v l44-v : Level) -> (A-v : Set l47-v) -> (B-v : Set l44-v) -> (a-v : A-v) -> (l-v : list l47-v A-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (nil-v : B-v) -> (f-v : (X---v : A-v) -> B-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.eq l44-v B-v (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l47-v A-v a-v l-v)) (op-v (f-v a-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v))
fold-true = λ (l47-v l44-v : Level) -> λ (A-v : Set l47-v) -> λ (B-v : Set l44-v) -> λ (a-v : A-v) -> λ (l-v : list l47-v A-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (nil-v : B-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (pa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r lzero l44-v matita-basics-bool.bool matita-basics-bool.true (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.true) -> matita-basics-logic.eq l44-v B-v (matita-basics-bool.match-bool l44-v (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v a-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v)) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v) x-v) (op-v (f-v a-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v))) (matita-basics-logic.refl l44-v B-v (matita-basics-bool.match-bool l44-v (λ (X---v : matita-basics-bool.bool) -> B-v) (op-v (f-v a-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v)) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v) matita-basics-bool.true)) (p-v a-v) pa-v

fold-false : (l47-v l44-v : Level) -> (A-v : Set l47-v) -> (B-v : Set l44-v) -> (a-v : A-v) -> (l-v : list l47-v A-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (nil-v : B-v) -> (f-v : (X---v : A-v) -> B-v) -> (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.eq l44-v B-v (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l47-v A-v a-v l-v)) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v)
fold-false = λ (l47-v l44-v : Level) -> λ (A-v : Set l47-v) -> λ (B-v : Set l44-v) -> λ (a-v : A-v) -> λ (l-v : list l47-v A-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (nil-v : B-v) -> λ (f-v : (X---v : A-v) -> B-v) -> λ (pa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r lzero l44-v matita-basics-bool.bool matita-basics-bool.false (λ (x-v : matita-basics-bool.bool) -> λ (X---v : matita-basics-logic.eq lzero matita-basics-bool.bool x-v matita-basics-bool.false) -> matita-basics-logic.eq l44-v B-v (matita-basics-bool.match-bool l44-v (λ (X-0-v : matita-basics-bool.bool) -> B-v) (op-v (f-v a-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v)) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v) x-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v)) (matita-basics-logic.refl l44-v B-v (matita-basics-bool.match-bool l44-v (λ (X---v : matita-basics-bool.bool) -> B-v) (op-v (f-v a-v) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v)) (fold l47-v l44-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v) matita-basics-bool.false)) (p-v a-v) pa-v

fold-filter : (l270-v l267-v : Level) -> (A-v : Set l270-v) -> (B-v : Set l267-v) -> (X-a-v : A-v) -> (l-v : list l270-v A-v) -> (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> (nil-v : B-v) -> (f-v : (X---v : A-v) -> B-v) -> matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) l-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v l-v))
fold-filter = λ (l270-v l267-v : Level) -> λ (A-v : Set l270-v) -> λ (B-v : Set l267-v) -> λ (a-v : A-v) -> λ (l-v : list l270-v A-v) -> λ (p-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (op-v : (X---v : B-v) -> (X--1-v : B-v) -> B-v) -> λ (nil-v : B-v) -> λ (f-v : (X---v : A-v) -> B-v) -> list-ind l270-v l267-v A-v (λ (X-x-716-v : list l270-v A-v) -> matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) X-x-716-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v X-x-716-v))) (matita-basics-logic.refl l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (nil l270-v A-v))) (λ (a0-v : A-v) -> λ (tl-v : list l270-v A-v) -> λ (Hind-v : matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v tl-v))) -> matita-basics-logic.match-Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a0-v) matita-basics-bool.false) l267-v (λ (X---v : matita-basics-logic.Or lzero lzero (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a0-v) matita-basics-bool.true) (matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a0-v) matita-basics-bool.false)) -> matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v tl-v)) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v (cons l270-v A-v a0-v tl-v)))) (λ (pa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a0-v) matita-basics-bool.true) -> matita-basics-logic.eq-ind-r l270-v l267-v (list l270-v A-v) (cons l270-v A-v a0-v (filter l270-v A-v p-v tl-v)) (λ (x-v : list l270-v A-v) -> λ (X---v : matita-basics-logic.eq l270-v (list l270-v A-v) x-v (cons l270-v A-v a0-v (filter l270-v A-v p-v tl-v))) -> matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v tl-v)) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) x-v)) (matita-basics-logic.eq-ind-r l267-v l267-v B-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v)) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq l267-v B-v x-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v))) -> matita-basics-logic.eq l267-v B-v x-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v (filter l270-v A-v p-v tl-v)))) (matita-basics-logic.eq-ind-r l267-v l267-v B-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v tl-v))) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq l267-v B-v x-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v tl-v)))) -> matita-basics-logic.eq l267-v B-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v)) x-v) (matita-basics-logic.rewrite-l l267-v l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v) (λ (X---v : B-v) -> matita-basics-logic.eq l267-v B-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v)) (op-v (f-v a0-v) X---v)) (matita-basics-logic.refl l267-v B-v (op-v (f-v a0-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v))) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v tl-v)) Hind-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v (filter l270-v A-v p-v tl-v))) (fold-true l270-v l267-v A-v B-v a0-v (filter l270-v A-v p-v tl-v) (λ (X---v : A-v) -> matita-basics-bool.true) op-v nil-v f-v (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true))) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v tl-v)) (fold-true l270-v l267-v A-v B-v a0-v tl-v p-v op-v nil-v f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v a0-v) pa-v))) (filter l270-v A-v p-v (cons l270-v A-v a0-v tl-v)) (filter-true l270-v A-v tl-v a0-v p-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.true (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.true) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.true) (p-v a0-v) pa-v))) (λ (pa-v : matita-basics-logic.eq lzero matita-basics-bool.bool (p-v a0-v) matita-basics-bool.false) -> matita-basics-logic.eq-ind-r l270-v l267-v (list l270-v A-v) (filter l270-v A-v p-v tl-v) (λ (x-v : list l270-v A-v) -> λ (X---v : matita-basics-logic.eq l270-v (list l270-v A-v) x-v (filter l270-v A-v p-v tl-v)) -> matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v tl-v)) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) x-v)) (matita-basics-logic.eq-ind-r l267-v l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq l267-v B-v x-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v)) -> matita-basics-logic.eq l267-v B-v x-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v tl-v))) (matita-basics-logic.rewrite-l l267-v l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v) (λ (X---v : B-v) -> matita-basics-logic.eq l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v) X---v) (matita-basics-logic.refl l267-v B-v (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) tl-v)) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (filter l270-v A-v p-v tl-v)) Hind-v) (fold l270-v l267-v A-v B-v op-v nil-v (λ (i-v : A-v) -> p-v i-v) (λ (i-v : A-v) -> f-v i-v) (cons l270-v A-v a0-v tl-v)) (fold-false l270-v l267-v A-v B-v a0-v tl-v p-v op-v nil-v f-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v a0-v) pa-v))) (filter l270-v A-v p-v (cons l270-v A-v a0-v tl-v)) (filter-false l270-v A-v tl-v a0-v p-v (matita-basics-logic.rewrite-r lzero lzero matita-basics-bool.bool matita-basics-bool.false (λ (X---v : matita-basics-bool.bool) -> matita-basics-logic.eq lzero matita-basics-bool.bool X---v matita-basics-bool.false) (matita-basics-logic.refl lzero matita-basics-bool.bool matita-basics-bool.false) (p-v a0-v) pa-v))) (matita-basics-bool.true-or-false (p-v a0-v))) l-v

data Aop (l11-v : Level) (A-v : Set l11-v) (nil-v : A-v) : Set l11-v where
  mk-Aop' : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v a-v nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Aop l11-v A-v nil-v
  
mk-Aop : (l11-v : Level) -> (A-v : Set l11-v) -> (nil-v : A-v) -> (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v a-v nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l11-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Aop l11-v A-v nil-v
mk-Aop _ _ _ = mk-Aop'

match-Aop : (l18-v : Level) -> (A-v : Set l18-v) -> (X-nil-v : A-v) -> (return-sort-v : Level) -> (return-type-v : (z-v : Aop l18-v A-v X-nil-v) -> Set return-sort-v) -> (case-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l18-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l18-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l18-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> return-type-v (mk-Aop l18-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (z-v : Aop l18-v A-v X-nil-v) -> return-type-v z-v
match-Aop _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-ind : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-781-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-781-v : Aop l21-v A-v X-nil-v) -> Q--v x-781-v
Aop-ind _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type5 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-783-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-783-v : Aop l21-v A-v X-nil-v) -> Q--v x-783-v
Aop-rect-Type5 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type4 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-783-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-783-v : Aop l21-v A-v X-nil-v) -> Q--v x-783-v
Aop-rect-Type4 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type3 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-783-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-783-v : Aop l21-v A-v X-nil-v) -> Q--v x-783-v
Aop-rect-Type3 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type2 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-783-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-783-v : Aop l21-v A-v X-nil-v) -> Q--v x-783-v
Aop-rect-Type2 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type1 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-783-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-783-v : Aop l21-v A-v X-nil-v) -> Q--v x-783-v
Aop-rect-Type1 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

Aop-rect-Type0 : (l21-v l4-v : Level) -> (A-v : Set l21-v) -> (X-nil-v : A-v) -> (Q--v : (X-x-783-v : Aop l21-v A-v X-nil-v) -> Set l4-v) -> (X-H-mk-Aop-v : (op-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> (X-nill-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v X-nil-v a-v) a-v) -> (X-nilr-v : (a-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v X-nil-v) a-v) -> (X-assoc-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l21-v A-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> Q--v (mk-Aop l21-v A-v X-nil-v op-v X-nill-v X-nilr-v X-assoc-v)) -> (x-783-v : Aop l21-v A-v X-nil-v) -> Q--v x-783-v
Aop-rect-Type0 _ _ _ _ _ casemk (mk-Aop' x1 x2 x3 x4) = casemk x1 x2 x3 x4

op : (l4-v : Level) -> (A-v : Set l4-v) -> (nil-v : A-v) -> (X-xxx-v : Aop l4-v A-v nil-v) -> (X-x-807-v : A-v) -> (X-x-808-v : A-v) -> A-v
op l9-v A-v nil-v X-xxx-v = match-Aop l9-v A-v nil-v l9-v (λ (xxx0-v : Aop l9-v A-v nil-v) -> (X-x-807-v : A-v) -> (X-x-808-v : A-v) -> A-v) (λ (yyy-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X---v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v (yyy-v b-v c-v)) (yyy-v (yyy-v a-v b-v) c-v)) -> yyy-v) X-xxx-v

nill : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v nil-v a-v) a-v
nill l8-v A-v nil-v xxx-v = match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx0-v nil-v a-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

nilr : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v a-v nil-v) a-v
nilr l8-v A-v nil-v xxx-v = match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx0-v a-v nil-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v

assoc : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : Aop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l5-v A-v (op l5-v A-v nil-v xxx-v a-v (op l5-v A-v nil-v xxx-v b-v c-v)) (op l5-v A-v nil-v xxx-v (op l5-v A-v nil-v xxx-v a-v b-v) c-v)
assoc l17-v A-v nil-v xxx-v = match-Aop l17-v A-v nil-v l17-v (λ (xxx0-v : Aop l17-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (op l17-v A-v nil-v xxx0-v a-v (op l17-v A-v nil-v xxx0-v b-v c-v)) (op l17-v A-v nil-v xxx0-v (op l17-v A-v nil-v xxx0-v a-v b-v) c-v)) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v nil-v a-v) a-v) -> λ (X-1-v : (a-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v a-v nil-v) a-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v
{-
postulate op-body : (l4-v : Level) -> (A-v : Set l4-v) -> (nil-v : A-v) -> (X-xxx-v : Aop l4-v A-v nil-v) -> (X-x-807-v : A-v) -> (X-x-808-v : A-v) -> A-v

-- postulate rewrite-rule-484 : (l9-v : Level) -> (A-v : Set l9-v) -> (nil-v : A-v) -> (X-xxx-v : Aop l9-v A-v nil-v) -> op l9-v A-v nil-v X-xxx-v ≡ filter-Aop l9-v A-v nil-v l9-v (λ (X-xxx-v : Aop l9-v A-v nil-v) -> (X-x-807-v : A-v) -> (X-x-808-v : A-v) -> A-v) (op-body l9-v A-v nil-v) X-xxx-v


-- postulate rewrite-rule-485 : (l9-v : Level) -> (A-v : Set l9-v) -> (nil-v : A-v) -> (X-xxx-v : Aop l9-v A-v nil-v) -> op-body l9-v A-v nil-v X-xxx-v ≡ match-Aop l9-v A-v nil-v l9-v (λ (xxx0-v : Aop l9-v A-v nil-v) -> (X-x-807-v : A-v) -> (X-x-808-v : A-v) -> A-v) (λ (yyy-v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X---v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l9-v A-v (yyy-v a-v (yyy-v b-v c-v)) (yyy-v (yyy-v a-v b-v) c-v)) -> yyy-v) X-xxx-v


postulate nill : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v nil-v a-v) a-v

postulate nill-body : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v nil-v a-v) a-v

-- postulate rewrite-rule-486 : (l8-v : Level) -> (A-v : Set l8-v) -> (nil-v : A-v) -> (xxx-v : Aop l8-v A-v nil-v) -> nill l8-v A-v nil-v xxx-v ≡ filter-Aop l8-v A-v nil-v l8-v (λ (xxx-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx-v nil-v a-v) a-v) (nill-body l8-v A-v nil-v) xxx-v


-- postulate rewrite-rule-487 : (l8-v : Level) -> (A-v : Set l8-v) -> (nil-v : A-v) -> (xxx-v : Aop l8-v A-v nil-v) -> nill-body l8-v A-v nil-v xxx-v ≡ match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx0-v nil-v a-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v


postulate nilr : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v a-v nil-v) a-v

postulate nilr-body : (l2-v : Level) -> (A-v : Set l2-v) -> (nil-v : A-v) -> (xxx-v : Aop l2-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l2-v A-v (op l2-v A-v nil-v xxx-v a-v nil-v) a-v

-- postulate rewrite-rule-488 : (l8-v : Level) -> (A-v : Set l8-v) -> (nil-v : A-v) -> (xxx-v : Aop l8-v A-v nil-v) -> nilr l8-v A-v nil-v xxx-v ≡ filter-Aop l8-v A-v nil-v l8-v (λ (xxx-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx-v a-v nil-v) a-v) (nilr-body l8-v A-v nil-v) xxx-v


-- postulate rewrite-rule-489 : (l8-v : Level) -> (A-v : Set l8-v) -> (nil-v : A-v) -> (xxx-v : Aop l8-v A-v nil-v) -> nilr-body l8-v A-v nil-v xxx-v ≡ match-Aop l8-v A-v nil-v l8-v (λ (xxx0-v : Aop l8-v A-v nil-v) -> (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (op l8-v A-v nil-v xxx0-v a-v nil-v) a-v) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v nil-v a-v) a-v) -> λ (yyy-v : (a-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v nil-v) a-v) -> λ (X-1-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l8-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v


postulate assoc : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : Aop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l5-v A-v (op l5-v A-v nil-v xxx-v a-v (op l5-v A-v nil-v xxx-v b-v c-v)) (op l5-v A-v nil-v xxx-v (op l5-v A-v nil-v xxx-v a-v b-v) c-v)

postulate assoc-body : (l5-v : Level) -> (A-v : Set l5-v) -> (nil-v : A-v) -> (xxx-v : Aop l5-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l5-v A-v (op l5-v A-v nil-v xxx-v a-v (op l5-v A-v nil-v xxx-v b-v c-v)) (op l5-v A-v nil-v xxx-v (op l5-v A-v nil-v xxx-v a-v b-v) c-v)

-- postulate rewrite-rule-490 : (l17-v : Level) -> (A-v : Set l17-v) -> (nil-v : A-v) -> (xxx-v : Aop l17-v A-v nil-v) -> assoc l17-v A-v nil-v xxx-v ≡ filter-Aop l17-v A-v nil-v l17-v (λ (xxx-v : Aop l17-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (op l17-v A-v nil-v xxx-v a-v (op l17-v A-v nil-v xxx-v b-v c-v)) (op l17-v A-v nil-v xxx-v (op l17-v A-v nil-v xxx-v a-v b-v) c-v)) (assoc-body l17-v A-v nil-v) xxx-v


-- postulate rewrite-rule-491 : (l17-v : Level) -> (A-v : Set l17-v) -> (nil-v : A-v) -> (xxx-v : Aop l17-v A-v nil-v) -> assoc-body l17-v A-v nil-v xxx-v ≡ match-Aop l17-v A-v nil-v l17-v (λ (xxx0-v : Aop l17-v A-v nil-v) -> (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (op l17-v A-v nil-v xxx0-v a-v (op l17-v A-v nil-v xxx0-v b-v c-v)) (op l17-v A-v nil-v xxx0-v (op l17-v A-v nil-v xxx0-v a-v b-v) c-v)) (λ (X---v : (X---v : A-v) -> (X--1-v : A-v) -> A-v) -> λ (X-0-v : (a-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v nil-v a-v) a-v) -> λ (X-1-v : (a-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v a-v nil-v) a-v) -> λ (yyy-v : (a-v : A-v) -> (b-v : A-v) -> (c-v : A-v) -> matita-basics-logic.eq l17-v A-v (X---v a-v (X---v b-v c-v)) (X---v (X---v a-v b-v) c-v)) -> yyy-v) xxx-v
-}

Aop-inv-ind : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1368-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1369-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-ind = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1368-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1369-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-ind l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-781-v : Aop l39-v x1-v x2-v) -> (X-z1369-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-781-v) -> P-v X-x-781-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type4 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1374-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1375-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type4 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1374-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1375-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type4 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-783-v : Aop l39-v x1-v x2-v) -> (X-z1375-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-783-v) -> P-v X-x-783-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type3 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1380-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1381-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type3 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1380-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1381-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type3 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-787-v : Aop l39-v x1-v x2-v) -> (X-z1381-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-787-v) -> P-v X-x-787-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type2 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1386-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1387-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type2 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1386-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1387-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type2 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-789-v : Aop l39-v x1-v x2-v) -> (X-z1387-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-789-v) -> P-v X-x-789-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type1 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1392-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1393-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type1 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1392-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1393-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type1 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-791-v : Aop l39-v x1-v x2-v) -> (X-z1393-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-791-v) -> P-v X-x-791-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-inv-rect-Type0 : (l39-v l33-v : Level) -> (x1-v : Set l39-v) -> (x2-v : x1-v) -> (Hterm-v : Aop l39-v x1-v x2-v) -> (P-v : (X-z1398-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> (X-H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1399-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v Hterm-v
Aop-inv-rect-Type0 = λ (l39-v l33-v : Level) -> λ (x1-v : Set l39-v) -> λ (x2-v : x1-v) -> λ (Hterm-v : Aop l39-v x1-v x2-v) -> λ (P-v : (X-z1398-v : Aop l39-v x1-v x2-v) -> Set l33-v) -> λ (H1-v : (op-v : (X---v : x1-v) -> (X--1-v : x1-v) -> x1-v) -> (X-nill-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v x2-v a-v) a-v) -> (X-nilr-v : (a-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v x2-v) a-v) -> (X-assoc-v : (a-v : x1-v) -> (b-v : x1-v) -> (c-v : x1-v) -> matita-basics-logic.eq l39-v x1-v (op-v a-v (op-v b-v c-v)) (op-v (op-v a-v b-v) c-v)) -> (X-z1399-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> P-v (mk-Aop l39-v x1-v x2-v op-v X-nill-v X-nilr-v X-assoc-v)) -> Aop-rect-Type0 l39-v (l39-v ⊔ l33-v) x1-v x2-v (λ (X-x-793-v : Aop l39-v x1-v x2-v) -> (X-z1399-v : matita-basics-logic.eq l39-v (Aop l39-v x1-v x2-v) Hterm-v X-x-793-v) -> P-v X-x-793-v) H1-v Hterm-v (matita-basics-logic.refl l39-v (Aop l39-v x1-v x2-v) Hterm-v)

Aop-discr : (l3178-v l4236-v : Level) -> (a1-v : Set l3178-v) -> (a2-v : a1-v) -> (x-v : Aop l3178-v a1-v a2-v) -> (y-v : Aop l3178-v a1-v a2-v) -> (X-e-v : matita-basics-logic.eq l3178-v (Aop l3178-v a1-v a2-v) x-v y-v) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (t0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (t1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a2-v a-v) a-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v a2-v) a-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v (t0-v b-v c-v)) (t0-v (t0-v a-v b-v) c-v)) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (u0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (u1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) -> (P-v : Set l4236-v) -> (X-z51-v : (e0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) t1-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) y-v) x-v
Aop-discr = λ (l3178-v l4236-v : Level) -> λ (a1-v : Set l3178-v) -> λ (a2-v : a1-v) -> λ (x-v : Aop l3178-v a1-v a2-v) -> λ (y-v : Aop l3178-v a1-v a2-v) -> λ (Deq-v : matita-basics-logic.eq l3178-v (Aop l3178-v a1-v a2-v) x-v y-v) -> matita-basics-logic.eq-rect-Type2 l3178-v ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v)) (Aop l3178-v a1-v a2-v) x-v (λ (x-13-v : Aop l3178-v a1-v a2-v) -> λ (X-x-14-v : matita-basics-logic.eq l3178-v (Aop l3178-v a1-v a2-v) x-v x-13-v) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (t0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (t1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a2-v a-v) a-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v a2-v) a-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v (t0-v b-v c-v)) (t0-v (t0-v a-v b-v) c-v)) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X---v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (u0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (u1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) -> (P-v : Set l4236-v) -> (X-z51-v : (e0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) t1-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) x-13-v) x-v) (match-Aop l3178-v a1-v a2-v ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v)) (λ (X---v : Aop l3178-v a1-v a2-v) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X-0-v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (t0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (t1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a2-v a-v) a-v) -> λ (t2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v a2-v) a-v) -> λ (t3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (t0-v a-v (t0-v b-v c-v)) (t0-v (t0-v a-v b-v) c-v)) -> match-Aop l3178-v a1-v a2-v ((lsuc (lsuc lzero)) ⊔ ((lsuc (lsuc l4236-v)) ⊔ (lsuc l3178-v))) (λ (X-0-v : Aop l3178-v a1-v a2-v) -> Set ((lsuc lzero) ⊔ ((lsuc l4236-v) ⊔ l3178-v))) (λ (u0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (u1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) -> λ (u2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) -> λ (u3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) -> (P-v : Set l4236-v) -> (X-z51-v : (e0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v) u0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v u0-v e0-v) u1-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v u0-v e0-v u1-v e1-v) u2-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (u0-v a-v (u0-v b-v c-v)) (u0-v (u0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) t1-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) t2-v (λ (x0-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x01-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) t1-v (λ (x01-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X--1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v (λ (x-19-v : (X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X--1-v : a1-v) -> (X--2-v : a1-v) -> a1-v) t0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) t1-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) t2-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) t3-v u0-v e0-v u1-v e1-v u2-v e2-v) u3-v) -> P-v) -> P-v) X---v) X---v) (λ (a0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (a10-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) -> λ (a20-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) -> λ (a3-v : (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v (a0-v b-v c-v)) (a0-v (a0-v a-v b-v) c-v)) -> λ (P-v : Set l4236-v) -> λ (DH-v : (e0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v) a0-v) -> (e1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v e0-v) a10-v) -> (e2-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v a0-v e0-v a10-v e1-v) a20-v) -> (X-e3-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v (a0-v b-v c-v)) (a0-v (a0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) a10-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) a20-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) a3-v a0-v e0-v a10-v e1-v a20-v e2-v) a3-v) -> P-v) -> DH-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)))) (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)))))) (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v (a0-v b-v c-v)) (a0-v (a0-v a-v b-v) c-v)) (matita-basics-logic.R3 l3178-v l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (p1-v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> λ (x2-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) a10-v (λ (x01-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p01-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x01-v) -> λ (x11-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x01-v p01-v) x11-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x01-v a-v a2-v) a-v) a20-v x0-v p0-v x1-v p1-v) x2-v) -> (a-v : a1-v) -> (b-v : a1-v) -> (c-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v (x0-v b-v c-v)) (x0-v (x0-v a-v b-v) c-v)) a3-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)))) a20-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a-v a2-v) a-v) (matita-basics-logic.R2 l3178-v l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) a10-v (λ (x0-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (p0-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x0-v) -> λ (x1-v : (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) -> λ (X---v : matita-basics-logic.eq l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v x0-v p0-v) x1-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x0-v a-v a2-v) a-v) a20-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v)) a10-v (matita-basics-logic.refl l3178-v ((a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (a0-v a2-v a-v) a-v) (matita-basics-logic.R1 l3178-v l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v (λ (x-19-v : (X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) -> λ (X-x-20-v : matita-basics-logic.eq l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v x-19-v) -> (a-v : a1-v) -> matita-basics-logic.eq l3178-v a1-v (x-19-v a2-v a-v) a-v) a10-v a0-v (matita-basics-logic.refl l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) (matita-basics-logic.R0 l3178-v ((X---v : a1-v) -> (X--1-v : a1-v) -> a1-v) a0-v))))))))) x-v) y-v Deq-v

dpi1--o--op : (l12-v l8-v : Level) -> (x0-v : Set l12-v) -> (x1-v : x0-v) -> (x2-v : (X---v : Aop l12-v x0-v x1-v) -> Set l8-v) -> (x3-v : matita-basics-types.DPair l12-v l8-v (Aop l12-v x0-v x1-v) x2-v) -> (X-x-807-v : x0-v) -> (X-x-808-v : x0-v) -> x0-v
dpi1--o--op = λ (l12-v l8-v : Level) -> λ (x0-v : Set l12-v) -> λ (x1-v : x0-v) -> λ (x2-v : (X---v : Aop l12-v x0-v x1-v) -> Set l8-v) -> λ (x3-v : matita-basics-types.DPair l12-v l8-v (Aop l12-v x0-v x1-v) x2-v) -> op l12-v x0-v x1-v (matita-basics-types.dpi1 l12-v l8-v (Aop l12-v x0-v x1-v) x2-v x3-v)

fold-sum : (l203-v l199-v : Level) -> (A-v : Set l203-v) -> (B-v : Set l199-v) -> (I-v : list l203-v A-v) -> (J-v : list l203-v A-v) -> (nil-v : B-v) -> (op-v : Aop l199-v B-v nil-v) -> (f-v : (X---v : A-v) -> B-v) -> matita-basics-logic.eq l199-v B-v (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) I-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (append l203-v A-v I-v J-v))
fold-sum = λ (l203-v l199-v : Level) -> λ (A-v : Set l203-v) -> λ (B-v : Set l199-v) -> λ (I-v : list l203-v A-v) -> λ (J-v : list l203-v A-v) -> λ (nil-v : B-v) -> λ (op-v : Aop l199-v B-v nil-v) -> λ (f-v : (X---v : A-v) -> B-v) -> list-ind l203-v l199-v A-v (λ (X-x-716-v : list l203-v A-v) -> matita-basics-logic.eq l199-v B-v (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) X-x-716-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (append l203-v A-v X-x-716-v J-v))) (matita-basics-logic.eq-ind-r l199-v l199-v B-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v) (λ (x-v : B-v) -> λ (X---v : matita-basics-logic.eq l199-v B-v x-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) -> matita-basics-logic.eq l199-v B-v x-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (matita-basics-logic.refl l199-v B-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (op l199-v B-v nil-v op-v nil-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (nill l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v))) (λ (a-v : A-v) -> λ (tl-v : list l203-v A-v) -> λ (Hind-v : matita-basics-logic.eq l199-v B-v (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (append l203-v A-v tl-v J-v))) -> matita-basics-logic.eq-ind l199-v l199-v B-v (op l199-v B-v nil-v op-v (f-v a-v) (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v))) (λ (x-1-v : B-v) -> λ (X-x-2-v : matita-basics-logic.eq l199-v B-v (op l199-v B-v nil-v op-v (f-v a-v) (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v))) x-1-v) -> matita-basics-logic.eq l199-v B-v x-1-v (op l199-v B-v nil-v op-v (f-v a-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (append l203-v A-v tl-v J-v)))) (matita-basics-logic.rewrite-l l199-v l199-v B-v (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (λ (X---v : B-v) -> matita-basics-logic.eq l199-v B-v (op l199-v B-v nil-v op-v (f-v a-v) (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v))) (op l199-v B-v nil-v op-v (f-v a-v) X---v)) (matita-basics-logic.refl l199-v B-v (op l199-v B-v nil-v op-v (f-v a-v) (op l199-v B-v nil-v op-v (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)))) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) (append l203-v A-v tl-v J-v)) Hind-v) (op l199-v B-v nil-v op-v (op l199-v B-v nil-v op-v (f-v a-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v)) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v)) (assoc l199-v B-v nil-v op-v (f-v a-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) tl-v) (fold l203-v l199-v A-v B-v (op l199-v B-v nil-v op-v) nil-v (λ (i-v : A-v) -> matita-basics-bool.true) (λ (i-v : A-v) -> f-v i-v) J-v))) I-v

lhd : (l4-v : Level) -> (H-v : Set l4-v) -> (X---v : list l4-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> list l4-v H-v
lhd l7-v H-v X---v matita-arithmetics-nat.O = nil l7-v H-v
lhd l7-v H-v X---v (matita-arithmetics-nat.S n0-v) = match-list l7-v H-v l7-v (λ (X--2-v : list l7-v H-v) -> list l7-v H-v) (nil l7-v H-v) (λ (a-v : H-v) -> λ (l0-v : list l7-v H-v) -> cons l7-v H-v a-v (lhd l7-v H-v l0-v n0-v)) X---v

ltl : (l4-v : Level) -> (H-v : Set l4-v) -> (X---v : list l4-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> list l4-v H-v
ltl l0-v H-v X---v matita-arithmetics-nat.O = X---v
ltl l0-v H-v X---v (matita-arithmetics-nat.S n0-v) = ltl l0-v H-v (tail l0-v H-v X---v) n0-v

{-

postulate lhd-body : (l4-v : Level) -> (H-v : Set l4-v) -> (X---v : list l4-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> list l4-v H-v

-- postulate rewrite-rule-492 : (l0-v : Level) -> (H-v : Set l0-v) -> (X---v : list l0-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> lhd l0-v H-v X---v X--1-v ≡ matita-arithmetics-nat.filter-nat l0-v (λ (X--1-v : matita-arithmetics-nat.nat) -> list l0-v H-v) (lhd-body l0-v H-v X---v) X--1-v


-- postulate rewrite-rule-493 : (l7-v : Level) -> (H-v : Set l7-v) -> (X---v : list l7-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> lhd-body l7-v H-v X---v X--1-v ≡ matita-arithmetics-nat.match-nat l7-v (λ (X--2-v : matita-arithmetics-nat.nat) -> list l7-v H-v) (nil l7-v H-v) (λ (n0-v : matita-arithmetics-nat.nat) -> match-list l7-v H-v l7-v (λ (X--2-v : list l7-v H-v) -> list l7-v H-v) (nil l7-v H-v) (λ (a-v : H-v) -> λ (l0-v : list l7-v H-v) -> cons l7-v H-v a-v (lhd l7-v H-v l0-v n0-v)) X---v) X--1-v


postulate ltl : (l4-v : Level) -> (H-v : Set l4-v) -> (X---v : list l4-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> list l4-v H-v

postulate ltl-body : (l4-v : Level) -> (H-v : Set l4-v) -> (X---v : list l4-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> list l4-v H-v

-- postulate rewrite-rule-494 : (l0-v : Level) -> (H-v : Set l0-v) -> (X---v : list l0-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> ltl l0-v H-v X---v X--1-v ≡ matita-arithmetics-nat.filter-nat l0-v (λ (X--1-v : matita-arithmetics-nat.nat) -> list l0-v H-v) (ltl-body l0-v H-v X---v) X--1-v


-- postulate rewrite-rule-495 : (l0-v : Level) -> (H-v : Set l0-v) -> (X---v : list l0-v H-v) -> (X--1-v : matita-arithmetics-nat.nat) -> ltl-body l0-v H-v X---v X--1-v ≡ matita-arithmetics-nat.match-nat l0-v (λ (X--2-v : matita-arithmetics-nat.nat) -> list l0-v H-v) X---v (λ (n0-v : matita-arithmetics-nat.nat) -> ltl l0-v H-v (tail l0-v H-v X---v) n0-v) X--1-v
-}

lhd-nil : (l23-v : Level) -> (A-v : Set l23-v) -> (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq l23-v (list l23-v A-v) (lhd l23-v A-v (nil l23-v A-v) n-v) (nil l23-v A-v)
lhd-nil = λ (l23-v : Level) -> λ (A-v : Set l23-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l23-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq l23-v (list l23-v A-v) (lhd l23-v A-v (nil l23-v A-v) X-x-365-v) (nil l23-v A-v)) (matita-basics-logic.refl l23-v (list l23-v A-v) (lhd l23-v A-v (nil l23-v A-v) matita-arithmetics-nat.O)) (λ (x-366-v : matita-arithmetics-nat.nat) -> λ (X-x-368-v : matita-basics-logic.eq l23-v (list l23-v A-v) (lhd l23-v A-v (nil l23-v A-v) x-366-v) (nil l23-v A-v)) -> matita-basics-logic.refl l23-v (list l23-v A-v) (lhd l23-v A-v (nil l23-v A-v) (matita-arithmetics-nat.S x-366-v))) n-v

ltl-nil : (l32-v : Level) -> (A-v : Set l32-v) -> (n-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq l32-v (list l32-v A-v) (ltl l32-v A-v (nil l32-v A-v) n-v) (nil l32-v A-v)
ltl-nil = λ (l32-v : Level) -> λ (A-v : Set l32-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l32-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq l32-v (list l32-v A-v) (ltl l32-v A-v (nil l32-v A-v) X-x-365-v) (nil l32-v A-v)) (matita-basics-logic.refl l32-v (list l32-v A-v) (nil l32-v A-v)) (λ (x-366-v : matita-arithmetics-nat.nat) -> λ (X-x-368-v : matita-basics-logic.eq l32-v (list l32-v A-v) (ltl l32-v A-v (nil l32-v A-v) x-366-v) (nil l32-v A-v)) -> matita-basics-logic.rewrite-r l32-v l32-v (list l32-v A-v) (nil l32-v A-v) (λ (X---v : list l32-v A-v) -> matita-basics-logic.eq l32-v (list l32-v A-v) X---v (nil l32-v A-v)) (matita-basics-logic.refl l32-v (list l32-v A-v) (nil l32-v A-v)) (ltl l32-v A-v (nil l32-v A-v) x-366-v) X-x-368-v) n-v

lhd-cons-ltl : (l98-v : Level) -> (A-v : Set l98-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l98-v A-v) -> matita-basics-logic.eq l98-v (list l98-v A-v) (append l98-v A-v (lhd l98-v A-v l-v n-v) (ltl l98-v A-v l-v n-v)) l-v
lhd-cons-ltl = λ (l98-v : Level) -> λ (A-v : Set l98-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l98-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (l-v : list l98-v A-v) -> matita-basics-logic.eq l98-v (list l98-v A-v) (append l98-v A-v (lhd l98-v A-v l-v X-x-365-v) (ltl l98-v A-v l-v X-x-365-v)) l-v) (λ (l-v : list l98-v A-v) -> matita-basics-logic.refl l98-v (list l98-v A-v) (append l98-v A-v (lhd l98-v A-v l-v matita-arithmetics-nat.O) (ltl l98-v A-v l-v matita-arithmetics-nat.O))) (λ (n0-v : matita-arithmetics-nat.nat) -> λ (IHn-v : (l-v : list l98-v A-v) -> matita-basics-logic.eq l98-v (list l98-v A-v) (append l98-v A-v (lhd l98-v A-v l-v n0-v) (ltl l98-v A-v l-v n0-v)) l-v) -> λ (l-v : list l98-v A-v) -> list-ind l98-v l98-v A-v (λ (X-x-716-v : list l98-v A-v) -> matita-basics-logic.eq l98-v (list l98-v A-v) (append l98-v A-v (lhd l98-v A-v X-x-716-v (matita-arithmetics-nat.S n0-v)) (ltl l98-v A-v X-x-716-v (matita-arithmetics-nat.S n0-v))) X-x-716-v) (matita-basics-logic.rewrite-r l98-v l98-v (list l98-v A-v) (nil l98-v A-v) (λ (X---v : list l98-v A-v) -> matita-basics-logic.eq l98-v (list l98-v A-v) X---v (nil l98-v A-v)) (matita-basics-logic.refl l98-v (list l98-v A-v) (nil l98-v A-v)) (ltl l98-v A-v (nil l98-v A-v) n0-v) (ltl-nil l98-v A-v n0-v)) (λ (x-718-v : A-v) -> λ (x-717-v : list l98-v A-v) -> λ (X-x-720-v : matita-basics-logic.eq l98-v (list l98-v A-v) (append l98-v A-v (match-list l98-v A-v l98-v (λ (X---v : list l98-v A-v) -> list l98-v A-v) (nil l98-v A-v) (λ (a-v : A-v) -> λ (l0-v : list l98-v A-v) -> cons l98-v A-v a-v (lhd l98-v A-v l0-v n0-v)) x-717-v) (ltl l98-v A-v (match-list l98-v A-v l98-v (λ (X---v : list l98-v A-v) -> list l98-v A-v) (nil l98-v A-v) (λ (hd-v : A-v) -> λ (tl-v : list l98-v A-v) -> tl-v) x-717-v) n0-v)) x-717-v) -> matita-basics-logic.rewrite-r l98-v l98-v (list l98-v A-v) x-717-v (λ (X---v : list l98-v A-v) -> matita-basics-logic.eq l98-v (list l98-v A-v) (cons l98-v A-v x-718-v X---v) (cons l98-v A-v x-718-v x-717-v)) (matita-basics-logic.refl l98-v (list l98-v A-v) (cons l98-v A-v x-718-v x-717-v)) (append l98-v A-v (lhd l98-v A-v x-717-v n0-v) (ltl l98-v A-v x-717-v n0-v)) (IHn-v x-717-v)) l-v) n-v

length-ltl : (l84-v : Level) -> (A-v : Set l84-v) -> (n-v : matita-arithmetics-nat.nat) -> (l-v : list l84-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l84-v A-v (ltl l84-v A-v l-v n-v)) (matita-arithmetics-nat.minus (length l84-v A-v l-v) n-v)
length-ltl = λ (l84-v : Level) -> λ (A-v : Set l84-v) -> λ (n-v : matita-arithmetics-nat.nat) -> matita-arithmetics-nat.nat-ind l84-v (λ (X-x-365-v : matita-arithmetics-nat.nat) -> (l-v : list l84-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l84-v A-v (ltl l84-v A-v l-v X-x-365-v)) (matita-arithmetics-nat.minus (length l84-v A-v l-v) X-x-365-v)) (λ (l-v : list l84-v A-v) -> matita-arithmetics-nat.minus-n-O (length l84-v A-v (ltl l84-v A-v l-v matita-arithmetics-nat.O))) (λ (n0-v : matita-arithmetics-nat.nat) -> λ (IHn-v : (l-v : list l84-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l84-v A-v (ltl l84-v A-v l-v n0-v)) (matita-arithmetics-nat.minus (length l84-v A-v l-v) n0-v)) -> λ (X-clearme-v : list l84-v A-v) -> match-list l84-v A-v lzero (λ (X---v : list l84-v A-v) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat (length l84-v A-v (ltl l84-v A-v X---v (matita-arithmetics-nat.S n0-v))) (matita-arithmetics-nat.minus (length l84-v A-v X---v) (matita-arithmetics-nat.S n0-v))) (matita-basics-logic.sym-eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l84-v A-v (ltl l84-v A-v (nil l84-v A-v) n0-v)) (matita-basics-logic.eq-coerc lzero (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l84-v A-v (nil l84-v A-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l84-v A-v (ltl l84-v A-v (nil l84-v A-v) n0-v))) (matita-arithmetics-nat.le-n-O-to-eq (length l84-v A-v (nil l84-v A-v)) (matita-arithmetics-nat.le-n (length l84-v A-v (nil l84-v A-v)))) (matita-basics-logic.rewrite-r l84-v (lsuc lzero) (list l84-v A-v) (nil l84-v A-v) (λ (X---v : list l84-v A-v) -> matita-basics-logic.eq (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l84-v A-v (nil l84-v A-v))) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l84-v A-v X---v))) (matita-basics-logic.refl (lsuc lzero) (Set (lzero)) (matita-basics-logic.eq lzero matita-arithmetics-nat.nat matita-arithmetics-nat.O (length l84-v A-v (nil l84-v A-v)))) (ltl l84-v A-v (nil l84-v A-v) n0-v) (ltl-nil l84-v A-v n0-v)))) (λ (auto-v : A-v) -> λ (auto'-v : list l84-v A-v) -> matita-basics-logic.rewrite-r lzero lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (length l84-v A-v auto'-v) n0-v) (λ (X---v : matita-arithmetics-nat.nat) -> matita-basics-logic.eq lzero matita-arithmetics-nat.nat X---v (matita-arithmetics-nat.minus (length l84-v A-v auto'-v) n0-v)) (matita-basics-logic.refl lzero matita-arithmetics-nat.nat (matita-arithmetics-nat.minus (length l84-v A-v auto'-v) n0-v)) (length l84-v A-v (ltl l84-v A-v auto'-v n0-v)) (IHn-v auto'-v)) X-clearme-v) n-v

find : (l6-v l5-v : Level) -> (A-v : Set l6-v) -> (B-v : Set l5-v) -> (X-f-v : (X---v : A-v) -> matita-basics-types.option l5-v B-v) -> (X-l-v : list l6-v A-v) -> matita-basics-types.option l5-v B-v
find l5-v l10-v A-v B-v X-f-v nil' = matita-basics-types.None l10-v B-v
find l5-v l10-v A-v B-v X-f-v (cons' h-v t-v) = matita-basics-types.match-option l10-v B-v l10-v (λ (X---v : matita-basics-types.option l10-v B-v) -> matita-basics-types.option l10-v B-v) (find l5-v l10-v A-v B-v X-f-v t-v) (λ (b-v : B-v) -> matita-basics-types.Some l10-v B-v b-v) (X-f-v h-v)

{-
postulate find-body : (l6-v l5-v : Level) -> (A-v : Set l6-v) -> (B-v : Set l5-v) -> (X-f-v : (X---v : A-v) -> matita-basics-types.option l5-v B-v) -> (X-l-v : list l6-v A-v) -> matita-basics-types.option l5-v B-v

-- postulate rewrite-rule-496 : (l5-v : Level) -> (l0-v : Level) -> (A-v : Set l5-v) -> (B-v : Set l0-v) -> (X-f-v : (X---v : A-v) -> matita-basics-types.option l0-v B-v) -> (X-l-v : list l5-v A-v) -> find l5-v l0-v A-v B-v X-f-v X-l-v ≡ filter-list l5-v A-v l0-v (λ (X-l-v : list l5-v A-v) -> matita-basics-types.option l0-v B-v) (find-body l5-v l0-v A-v B-v X-f-v) X-l-v


-- postulate rewrite-rule-497 : (l5-v : Level) -> (l10-v : Level) -> (A-v : Set l5-v) -> (B-v : Set l10-v) -> (X-f-v : (X---v : A-v) -> matita-basics-types.option l10-v B-v) -> (X-l-v : list l5-v A-v) -> find-body l5-v l10-v A-v B-v X-f-v X-l-v ≡ match-list l5-v A-v l10-v (λ (X---v : list l5-v A-v) -> matita-basics-types.option l10-v B-v) (matita-basics-types.None l10-v B-v) (λ (h-v : A-v) -> λ (t-v : list l5-v A-v) -> matita-basics-types.match-option l10-v B-v l10-v (λ (X---v : matita-basics-types.option l10-v B-v) -> matita-basics-types.option l10-v B-v) (find l5-v l10-v A-v B-v X-f-v t-v) (λ (b-v : B-v) -> matita-basics-types.Some l10-v B-v b-v) (X-f-v h-v)) X-l-v
-}

position-of-aux : (l6-v : Level) -> (A-v : Set l6-v) -> (X-found-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-l-v : list l6-v A-v) -> (X-acc-v : matita-arithmetics-nat.nat) -> matita-basics-types.option lzero matita-arithmetics-nat.nat
position-of-aux l4-v A-v X-found-v nil' acc-v = matita-basics-types.None lzero matita-arithmetics-nat.nat
position-of-aux l4-v A-v X-found-v (cons' h-v t-v) acc-v = matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-types.option lzero matita-arithmetics-nat.nat) (matita-basics-types.Some lzero matita-arithmetics-nat.nat acc-v) (position-of-aux l4-v A-v X-found-v t-v (matita-arithmetics-nat.S acc-v)) (X-found-v h-v)

{-
postulate position-of-aux-body : (l6-v : Level) -> (A-v : Set l6-v) -> (X-found-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-l-v : list l6-v A-v) -> (X-acc-v : matita-arithmetics-nat.nat) -> matita-basics-types.option lzero matita-arithmetics-nat.nat

-- postulate rewrite-rule-498 : (l7-v : Level) -> (A-v : Set l7-v) -> (X-found-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-l-v : list l7-v A-v) -> position-of-aux l7-v A-v X-found-v X-l-v ≡ filter-list l7-v A-v lzero (λ (X-l-v : list l7-v A-v) -> (X-acc-v : matita-arithmetics-nat.nat) -> matita-basics-types.option lzero matita-arithmetics-nat.nat) (position-of-aux-body l7-v A-v X-found-v) X-l-v


-- postulate rewrite-rule-499 : (l4-v : Level) -> (A-v : Set l4-v) -> (X-found-v : (X---v : A-v) -> matita-basics-bool.bool) -> (X-l-v : list l4-v A-v) -> position-of-aux-body l4-v A-v X-found-v X-l-v ≡ λ (acc-v : matita-arithmetics-nat.nat) -> match-list l4-v A-v lzero (λ (X---v : list l4-v A-v) -> matita-basics-types.option lzero matita-arithmetics-nat.nat) (matita-basics-types.None lzero matita-arithmetics-nat.nat) (λ (h-v : A-v) -> λ (t-v : list l4-v A-v) -> matita-basics-bool.match-bool lzero (λ (X---v : matita-basics-bool.bool) -> matita-basics-types.option lzero matita-arithmetics-nat.nat) (matita-basics-types.Some lzero matita-arithmetics-nat.nat acc-v) (position-of-aux l4-v A-v X-found-v t-v (matita-arithmetics-nat.S acc-v)) (X-found-v h-v)) X-l-v
-}

position-of : (l5-v : Level) -> (A-v : Set l5-v) -> (X---v : (X---v : A-v) -> matita-basics-bool.bool) -> (X--1-v : list l5-v A-v) -> matita-basics-types.option lzero matita-arithmetics-nat.nat
position-of = λ (l5-v : Level) -> λ (A-v : Set l5-v) -> λ (found-v : (X---v : A-v) -> matita-basics-bool.bool) -> λ (l-v : list l5-v A-v) -> position-of-aux l5-v A-v found-v l-v matita-arithmetics-nat.O


make-list : (l3-v : Level) -> (A-v : Set l3-v) -> (X-a-v : A-v) -> (X-n-v : matita-arithmetics-nat.nat) -> list l3-v A-v
make-list l0-v A-v X-a-v matita-arithmetics-nat.O = nil l0-v A-v
make-list l0-v A-v X-a-v (matita-arithmetics-nat.S m-v) = cons l0-v A-v X-a-v (make-list l0-v A-v X-a-v m-v)

{-
postulate make-list-body : (l3-v : Level) -> (A-v : Set l3-v) -> (X-a-v : A-v) -> (X-n-v : matita-arithmetics-nat.nat) -> list l3-v A-v
-- postulate rewrite-rule-500 : (l0-v : Level) -> (A-v : Set l0-v) -> (X-a-v : A-v) -> (X-n-v : matita-arithmetics-nat.nat) -> make-list l0-v A-v X-a-v X-n-v ≡ matita-arithmetics-nat.filter-nat l0-v (λ (X-n-v : matita-arithmetics-nat.nat) -> list l0-v A-v) (make-list-body l0-v A-v X-a-v) X-n-v


-- postulate rewrite-rule-501 : (l0-v : Level) -> (A-v : Set l0-v) -> (X-a-v : A-v) -> (X-n-v : matita-arithmetics-nat.nat) -> make-list-body l0-v A-v X-a-v X-n-v ≡ matita-arithmetics-nat.match-nat l0-v (λ (X---v : matita-arithmetics-nat.nat) -> list l0-v A-v) (nil l0-v A-v) (λ (m-v : matita-arithmetics-nat.nat) -> cons l0-v A-v X-a-v (make-list l0-v A-v X-a-v m-v)) X-n-v


-}
