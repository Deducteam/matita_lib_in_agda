open import Agda.Primitive
open import matita-arithmetics-div-and-mod
open import matita-basics-bool
open import matita-arithmetics-log
open import matita-arithmetics-exp
open import matita-basics-relations
open import matita-basics-logic
open import matita-arithmetics-minimization
open import matita-arithmetics-nat
sqrt : (X-n : nat) -> nat
sqrt = λ (n : nat) -> max'' (S n) (λ (x : nat) -> leb (times x x) n)

sqrt-def : (n : nat) -> eq lzero nat (sqrt n) (max'' (S n) (λ (x : nat) -> leb (times x x) n))
sqrt-def = λ (n : nat) -> refl lzero nat (sqrt n)

eq-sqrt : (n : nat) -> eq lzero nat (sqrt (times n n)) n
eq-sqrt = λ (n : nat) -> eq-ind-r lzero lzero nat (max'' (S (times n n)) (λ (x : nat) -> leb (times x x) (times n n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (max'' (S (times n n)) (λ (x0 : nat) -> leb (times x0 x0) (times n n)))) -> eq lzero nat x n) (max-spec-to-max (λ (x : nat) -> leb (times x x) (times n n)) (S (times n n)) n (found-max-spec (S (times n n)) (λ (x : nat) -> leb (times x x) (times n n)) n (le-S-S n (times n n) (le-x-times-x n)) (le-to-leb-true (times n n) (times n n) (le-n (times n n))) (λ (i : nat) -> λ (ltin : lt n i) -> λ (li : lt i (S (times n n))) -> lt-to-leb-false (times i i) (times n n) (lt-times n i n i ltin ltin)))) (sqrt (times n n)) (sqrt-def (times n n))

le-sqrt-to-le-times-l : (m : nat) -> (n : nat) -> (X-- : le n (sqrt m)) -> le (times n n) m
le-sqrt-to-le-times-l = λ (m : nat) -> λ (n : nat) -> λ (len : le n (sqrt m)) -> transitive-le (times n n) (times (sqrt m) (sqrt m)) m (le-times n (sqrt m) n (sqrt m) len len) (leb-true-to-le (times (sqrt m) (sqrt m)) m (f-max-true (λ (x : nat) -> leb (times x x) m) (S m) (ex-intro lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S m)) (eq lzero bool (leb (times i i) m) true)) O (conj lzero lzero (lt O (S m)) (eq lzero bool (leb (times O O) m) true) (lt-O-S m) (refl lzero bool (leb (times O O) m))))))

lt-sqrt-to-lt-times-l : (m : nat) -> (n : nat) -> (X-- : lt n (sqrt m)) -> lt (times n n) m
lt-sqrt-to-lt-times-l = λ (m : nat) -> λ (n : nat) -> λ (ltn : lt n (sqrt m)) -> transitive-le (S (times n n)) (times (sqrt m) (sqrt m)) m (transitive-le (S (times n n)) (times (S n) (S n)) (times (sqrt m) (sqrt m)) (le-S-S (times n n) (plus n (times n (S n))) (eq-coerc lzero (le (times n n) (plus (times n n) (plus n n))) (le (times n n) (plus n (times n (S n)))) (le-plus-n-r (plus n n) (times n n)) (rewrite-l lzero (lsuc lzero) nat (plus n (times n n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times n n) (plus (times n n) (plus n n))) (le (times n n) (plus n X--))) (rewrite-r lzero (lsuc lzero) nat (plus (plus n n) (times n n)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times n n) X--) (le (times n n) (plus n (plus n (times n n))))) (rewrite-r lzero (lsuc lzero) nat (plus n (plus n (times n n))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (times n n) X--) (le (times n n) (plus n (plus n (times n n))))) (refl (lsuc lzero) (Set (lzero)) (le (times n n) (plus n (plus n (times n n))))) (plus (plus n n) (times n n)) (associative-plus n n (times n n))) (plus (times n n) (plus n n)) (commutative-plus (times n n) (plus n n))) (times n (S n)) (times-n-Sm n n)))) (le-times (S n) (sqrt m) (S n) (sqrt m) ltn ltn)) (le-sqrt-to-le-times-l m (sqrt m) (le-n (sqrt m)))

lt-sqrt-to-lt-times-r : (m : nat) -> (n : nat) -> (X-- : lt (sqrt m) n) -> lt m (times n n)
lt-sqrt-to-lt-times-r = λ (m : nat) -> λ (n : nat) -> λ (ltmn : lt (sqrt m) n) -> not-le-to-lt (times n n) m (nmk lzero (le (times n n) m) (λ (H1 : le (times n n) m) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero bool x false) -> False lzero) (λ (H : eq lzero bool true false) -> bool-discr lzero true false H (False lzero)) (leb (times n n) m) (le-to-leb-true (times n n) m H1) (lt-max-to-false (λ (x : nat) -> leb (times x x) m) (S m) n (le-S-S n m (transitive-le n (times n n) m (le-x-times-x n) H1)) ltmn)))

leq-sqrt-n : (n : nat) -> le (times (sqrt n) (sqrt n)) n
leq-sqrt-n = λ (n : nat) -> le-sqrt-to-le-times-l n (sqrt n) (le-n (sqrt n))

le-sqrt-n : (n : nat) -> le (sqrt n) n
le-sqrt-n = λ (n : nat) -> transitive-le (sqrt n) (times (sqrt n) (sqrt n)) n (le-x-times-x (sqrt n)) (leq-sqrt-n n)

lt-sqrt-n : (n : nat) -> (X-- : lt (S O) n) -> lt (sqrt n) n
lt-sqrt-n = λ (n : nat) -> λ (lt1n : lt (S O) n) -> match-Or lzero lzero (lt (sqrt n) n) (eq lzero nat (sqrt n) n) lzero (λ (X-- : Or lzero lzero (lt (sqrt n) n) (eq lzero nat (sqrt n) n)) -> lt (sqrt n) n) (λ (Hcase : lt (sqrt n) n) -> Hcase) (λ (Hcase : eq lzero nat (sqrt n) n) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt (sqrt n) n) (absurd lzero (lt n (times (sqrt n) (sqrt n))) (eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> lt n (times x x)) (eq-ind-r lzero lzero nat n (λ (x : nat) -> λ (X-- : eq lzero nat x n) -> lt n (times n n)) (eq-ind-r lzero lzero nat (times n (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n (S O))) -> lt x (times n n)) (monotonic-lt-times-r n (lt-to-le (S O) n lt1n) (S O) n lt1n) n (times-n-1 n)) (sqrt n) Hcase) (sqrt n) Hcase) (le-to-not-lt (times (sqrt n) (sqrt n)) n (leq-sqrt-n n)))) (le-to-or-lt-eq (sqrt n) n (le-sqrt-n n))

lt-sqrt : (n : nat) -> lt n (exp (S (sqrt n)) (S (S O)))
lt-sqrt = λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> lt X-- (exp (S (sqrt X--)) (S (S O)))) (le-n (S O)) (λ (n1 : nat) -> match-nat lzero (λ (X-- : nat) -> lt (S X--) (exp (S (sqrt (S X--))) (S (S O)))) (leb-true-to-le (S (S O)) (exp (S (sqrt (S O))) (S (S O))) (refl lzero bool (leb (S (S O)) (exp (S (sqrt (S O))) (S (S O)))))) (λ (n2 : nat) -> not-le-to-lt (exp (S (sqrt (S (S n2)))) (S (S O))) (S (S n2)) (leb-false-to-not-le (exp (S (sqrt (S (S n2)))) (S (S O))) (S (S n2)) (eq-ind-r lzero lzero nat (times (S (sqrt (S (S n2)))) (S (sqrt (S (S n2))))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (sqrt (S (S n2)))) (S (sqrt (S (S n2)))))) -> eq lzero bool (leb x (S (S n2))) false) (lt-max-to-false (λ (x : nat) -> leb (times x x) (S (S n2))) (S (S (S n2))) (S (sqrt (S (S n2)))) (le-S-S (S (sqrt (S (S n2)))) (S (S n2)) (lt-sqrt-n (S (S n2)) (le-S-S (S O) (S n2) (lt-O-S n2)))) (le-S-S (max'' (S (S (S n2))) (λ (x : nat) -> leb (times x x) (S (S n2)))) (sqrt (S (S n2))) (le-n (max'' (S (S (S n2))) (λ (x : nat) -> leb (times x x) (S (S n2))))))) (exp (S (sqrt (S (S n2)))) (S (S O))) (exp-2 (S (sqrt (S (S n2)))))))) n1) n

le-sqrt-n1 : (n : nat) -> le (minus n (times (S (S O)) (sqrt n))) (exp (sqrt n) (S (S O)))
le-sqrt-n1 = λ (n : nat) -> le-plus-to-minus n (times (S (S O)) (sqrt n)) (exp (sqrt n) (S (S O))) (le-S-S-to-le n (plus (exp (sqrt n) (S (S O))) (times (S (S O)) (sqrt n))) (eq-ind-r lzero lzero nat (exp (S (sqrt n)) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (exp (S (sqrt n)) (S (S O)))) -> le (S n) x) (lt-sqrt n) (S (plus (exp (sqrt n) (S (S O))) (times (S (S O)) (sqrt n)))) (eq-ind-r lzero lzero nat (times (sqrt n) (sqrt n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (sqrt n) (sqrt n))) -> eq lzero nat (S (plus x (times (S (S O)) (sqrt n)))) (exp (S (sqrt n)) (S (S O)))) (eq-ind-r lzero lzero nat (times (S (sqrt n)) (S (sqrt n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (sqrt n)) (S (sqrt n)))) -> eq lzero nat (S (plus (times (sqrt n) (sqrt n)) (times (S (S O)) (sqrt n)))) x) (rewrite-l lzero lzero nat (sqrt n) (λ (X-- : nat) -> eq lzero nat (S (plus (times (sqrt n) (sqrt n)) (plus (sqrt n) X--))) (S (plus (sqrt n) (times (sqrt n) (S (sqrt n)))))) (rewrite-r lzero lzero nat (plus (sqrt n) (plus (times (sqrt n) (sqrt n)) (sqrt n))) (λ (X-- : nat) -> eq lzero nat (S X--) (S (plus (sqrt n) (times (sqrt n) (S (sqrt n)))))) (rewrite-r lzero lzero nat (plus (sqrt n) (times (sqrt n) (sqrt n))) (λ (X-- : nat) -> eq lzero nat (S (plus (sqrt n) X--)) (S (plus (sqrt n) (times (sqrt n) (S (sqrt n)))))) (rewrite-r lzero lzero nat (plus (sqrt n) (S (plus (sqrt n) (times (sqrt n) (sqrt n))))) (λ (X-- : nat) -> eq lzero nat X-- (S (plus (sqrt n) (times (sqrt n) (S (sqrt n)))))) (rewrite-r lzero lzero nat (plus (sqrt n) (S (times (sqrt n) (sqrt n)))) (λ (X-- : nat) -> eq lzero nat (plus (sqrt n) X--) (S (plus (sqrt n) (times (sqrt n) (S (sqrt n)))))) (rewrite-l lzero lzero nat (plus (sqrt n) (times (sqrt n) (sqrt n))) (λ (X-- : nat) -> eq lzero nat (plus (sqrt n) (plus (sqrt n) (S (times (sqrt n) (sqrt n))))) (S (plus (sqrt n) X--))) (rewrite-r lzero lzero nat (plus (sqrt n) (S (plus (sqrt n) (times (sqrt n) (sqrt n))))) (λ (X-- : nat) -> eq lzero nat (plus (sqrt n) (plus (sqrt n) (S (times (sqrt n) (sqrt n))))) X--) (rewrite-r lzero lzero nat (plus (sqrt n) (S (times (sqrt n) (sqrt n)))) (λ (X-- : nat) -> eq lzero nat (plus (sqrt n) (plus (sqrt n) (S (times (sqrt n) (sqrt n))))) (plus (sqrt n) X--)) (refl lzero nat (plus (sqrt n) (plus (sqrt n) (S (times (sqrt n) (sqrt n)))))) (S (plus (sqrt n) (times (sqrt n) (sqrt n)))) (plus-n-Sm (sqrt n) (times (sqrt n) (sqrt n)))) (S (plus (sqrt n) (plus (sqrt n) (times (sqrt n) (sqrt n))))) (plus-n-Sm (sqrt n) (plus (sqrt n) (times (sqrt n) (sqrt n))))) (times (sqrt n) (S (sqrt n))) (times-n-Sm (sqrt n) (sqrt n))) (S (plus (sqrt n) (times (sqrt n) (sqrt n)))) (plus-n-Sm (sqrt n) (times (sqrt n) (sqrt n)))) (S (plus (sqrt n) (plus (sqrt n) (times (sqrt n) (sqrt n))))) (plus-n-Sm (sqrt n) (plus (sqrt n) (times (sqrt n) (sqrt n))))) (plus (times (sqrt n) (sqrt n)) (sqrt n)) (commutative-plus (times (sqrt n) (sqrt n)) (sqrt n))) (plus (times (sqrt n) (sqrt n)) (plus (sqrt n) (sqrt n))) (rewrite-l lzero lzero nat (plus (plus (sqrt n) (times (sqrt n) (sqrt n))) (sqrt n)) (λ (X-- : nat) -> eq lzero nat (plus (times (sqrt n) (sqrt n)) (plus (sqrt n) (sqrt n))) X--) (assoc-plus1 (sqrt n) (sqrt n) (times (sqrt n) (sqrt n))) (plus (sqrt n) (plus (times (sqrt n) (sqrt n)) (sqrt n))) (associative-plus (sqrt n) (times (sqrt n) (sqrt n)) (sqrt n)))) (plus (sqrt n) O) (plus-n-O (sqrt n))) (exp (S (sqrt n)) (S (S O))) (exp-2 (S (sqrt n)))) (exp (sqrt n) (S (S O))) (exp-2 (sqrt n)))))

le-sqrt-nl : (n : nat) -> (m : nat) -> (X-- : lt (S (S (S O))) n) -> le (times (times m (pred m)) n) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))
le-sqrt-nl = λ (n : nat) -> λ (m : nat) -> λ (lt3n : lt (S (S (S O))) n) -> eq-ind-r lzero lzero nat (minus m O) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus m O)) -> le (times (times m (pred x)) n) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (eq-ind lzero lzero nat (minus m (S O)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (minus m (S O)) x-1) -> le (times (times m x-1) n) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (eq-ind-r lzero lzero nat (minus (times m m) (times m (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times m m) (times m (S O)))) -> le (times x n) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (times (minus (times m m) x-1) n) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (eq-ind-r lzero lzero nat (times n (minus (times m m) m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n (minus (times m m) m))) -> le x (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (eq-ind-r lzero lzero nat (minus (times n (times m m)) (times n m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (minus (times n (times m m)) (times n m))) -> le x (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (eq-ind-r lzero lzero nat (times (times m m) n) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times m m) n)) -> le (minus x (times n m)) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (transitive-le (minus (times (times m m) n) (times n m)) (minus (times (times m m) n) (times (S (S O)) (sqrt (times (times m m) n)))) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O))) (monotonic-le-minus-r (times n m) (times (S (S O)) (sqrt (times (times m m) n))) (times (times m m) n) (le-exp-to-le1 (times (S (S O)) (sqrt (times (times m m) n))) (times n m) (S (S O)) (lt-O-S (S O)) (eq-ind lzero lzero nat (times (exp (S (S O)) (S (S O))) (exp (sqrt (times (times m m) n)) (S (S O)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (exp (S (S O)) (S (S O))) (exp (sqrt (times (times m m) n)) (S (S O)))) x-1) -> le x-1 (exp (times n m) (S (S O)))) (transitive-le (times (exp (S (S O)) (S (S O))) (exp (sqrt (times (times m m) n)) (S (S O)))) (times (exp (S (S O)) (S (S O))) (times (times m m) n)) (exp (times n m) (S (S O))) (monotonic-le-times-r (exp (S (S O)) (S (S O))) (exp (sqrt (times (times m m) n)) (S (S O))) (times (times m m) n) (eq-ind-r lzero lzero nat (times (sqrt (times (times m m) n)) (sqrt (times (times m m) n))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (sqrt (times (times m m) n)) (sqrt (times (times m m) n)))) -> le x (times (times m m) n)) (leq-sqrt-n (times (times m m) n)) (exp (sqrt (times (times m m) n)) (S (S O))) (exp-2 (sqrt (times (times m m) n))))) (eq-ind lzero lzero nat (exp m (S (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp m (S (S O))) x-1) -> le (times (exp (S (S O)) (S (S O))) (times x-1 n)) (exp (times n m) (S (S O)))) (eq-ind lzero lzero nat (times (exp n (S (S O))) (exp m (S (S O)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (exp n (S (S O))) (exp m (S (S O)))) x-1) -> le (times (exp (S (S O)) (S (S O))) (times (exp m (S (S O))) n)) x-1) (eq-ind lzero lzero nat (times (times (exp (S (S O)) (S (S O))) (exp m (S (S O)))) n) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (times (exp (S (S O)) (S (S O))) (exp m (S (S O)))) n) x-1) -> le x-1 (times (exp n (S (S O))) (exp m (S (S O))))) (eq-ind lzero lzero nat (times (exp m (S (S O))) (exp (S (S O)) (S (S O)))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (exp m (S (S O))) (exp (S (S O)) (S (S O)))) x-1) -> le (times x-1 n) (times (exp n (S (S O))) (exp m (S (S O))))) (eq-ind-r lzero lzero nat (times (exp m (S (S O))) (times (exp (S (S O)) (S (S O))) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (exp m (S (S O))) (times (exp (S (S O)) (S (S O))) n))) -> le x (times (exp n (S (S O))) (exp m (S (S O))))) (eq-ind-r lzero lzero nat (times (times (exp (S (S O)) (S (S O))) n) (exp m (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times (exp (S (S O)) (S (S O))) n) (exp m (S (S O))))) -> le x (times (exp n (S (S O))) (exp m (S (S O))))) (le-times (times (exp (S (S O)) (S (S O))) n) (exp n (S (S O))) (exp m (S (S O))) (exp m (S (S O))) (eq-ind-r lzero lzero nat (times n n) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n n)) -> le (times (exp (S (S O)) (S (S O))) n) x) (le-times (exp (S (S O)) (S (S O))) n n n lt3n (le-n n)) (exp n (S (S O))) (exp-2 n)) (le-n (exp m (S (S O))))) (times (exp m (S (S O))) (times (exp (S (S O)) (S (S O))) n)) (commutative-times (exp m (S (S O))) (times (exp (S (S O)) (S (S O))) n))) (times (times (exp m (S (S O))) (exp (S (S O)) (S (S O)))) n) (associative-times (exp m (S (S O))) (exp (S (S O)) (S (S O))) n)) (times (exp (S (S O)) (S (S O))) (exp m (S (S O)))) (commutative-times (exp m (S (S O))) (exp (S (S O)) (S (S O))))) (times (exp (S (S O)) (S (S O))) (times (exp m (S (S O))) n)) (associative-times (exp (S (S O)) (S (S O))) (exp m (S (S O))) n)) (exp (times n m) (S (S O))) (times-exp n m (S (S O)))) (times m m) (exp-2 m))) (exp (times (S (S O)) (sqrt (times (times m m) n))) (S (S O))) (times-exp (S (S O)) (sqrt (times (times m m) n)) (S (S O)))))) (eq-ind lzero lzero nat (exp m (S (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp m (S (S O))) x-1) -> le (minus (times x-1 n) (times (S (S O)) (sqrt (times x-1 n)))) (exp (sqrt (times (exp m (S (S O))) n)) (S (S O)))) (le-sqrt-n1 (times (exp m (S (S O))) n)) (times m m) (exp-2 m))) (times n (times m m)) (commutative-times n (times m m))) (times n (minus (times m m) m)) (distributive-times-minus n (times m m) m)) (times (minus (times m m) m) n) (commutative-times (minus (times m m) m) n)) (times m (S O)) (times-n-1 m)) (times m (minus m (S O))) (distributive-times-minus m m (S O))) (pred (minus m O)) (eq-minus-S-pred m O)) m (minus-n-O m)

le-sqrt-log : (n : nat) -> (b : nat) -> (X-- : lt (S (S O)) b) -> le (log b n) (sqrt n)
le-sqrt-log = λ (n : nat) -> λ (b : nat) -> λ (lt2b : lt (S (S O)) b) -> eq-ind-r lzero lzero nat (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (max'' (S n) (λ (x0 : nat) -> leb (times x0 x0) n))) -> le (log b n) x) (true-to-le-max (λ (x : nat) -> leb (times x x) n) (S n) (log b n) (le-S-S (log b n) n (le-log-n-n b n (lt-to-le (S (S O)) b lt2b))) (le-to-leb-true (times (log b n) (log b n)) n (match-Or lzero lzero (lt O n) (eq lzero nat O n) lzero (λ (X-- : Or lzero lzero (lt O n) (eq lzero nat O n)) -> le (times (log b n) (log b n)) n) (λ (Hn : lt O n) -> transitive-le (times (log b n) (log b n)) (exp b (log b n)) n (nat-ind lzero (λ (X-x-365 : nat) -> le (times X-x-365 X-x-365) (exp b X-x-365)) (le-O-n (exp b O)) (λ (n1 : nat) -> λ (Hind : le (times n1 n1) (exp b n1)) -> match-Or lzero lzero (lt O n1) (eq lzero nat O n1) lzero (λ (X-- : Or lzero lzero (lt O n1) (eq lzero nat O n1)) -> le (times (S n1) (S n1)) (times (exp b n1) b)) (λ (H0 : lt O n1) -> match-Or lzero lzero (lt (S O) n1) (eq lzero nat (S O) n1) lzero (λ (X-- : Or lzero lzero (lt (S O) n1) (eq lzero nat (S O) n1)) -> le (times (S n1) (S n1)) (times (exp b n1) b)) (λ (H1 : lt (S O) n1) -> transitive-le (times (S n1) (S n1)) (times (S (S (S O))) (times n1 n1)) (times (exp b n1) b) (eq-ind-r lzero lzero nat (times (S n1) n1) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S n1) n1)) -> le (S (plus n1 x)) (times (S (S (S O))) (times n1 n1))) (eq-ind-r lzero lzero nat (plus (times n1 n1) (plus (S n1) n1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times n1 n1) (plus (S n1) n1))) -> le x (plus (times n1 n1) (times (S (S O)) (times n1 n1)))) (monotonic-le-plus-r (times n1 n1) (plus (S n1) n1) (times (S (S O)) (times n1 n1)) (eq-ind lzero lzero nat (times n1 n1) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times n1 n1) x-1) -> le (plus (S n1) n1) (plus (times n1 n1) x-1)) (le-plus (S n1) (times n1 n1) n1 (times n1 n1) (eq-ind-r lzero lzero nat (times n1 (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times n1 (S O))) -> le (S x) (times n1 n1)) (monotonic-lt-times-r n1 H0 (S O) n1 H1) n1 (times-n-1 n1)) (le-x-times-x n1)) (plus (times n1 n1) O) (plus-n-O (times n1 n1)))) (S (plus n1 (times (S n1) n1))) (eq-ind-r lzero lzero nat (plus (S (plus n1 n1)) (times n1 n1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S (plus n1 n1)) (times n1 n1))) -> eq lzero nat (S (plus n1 (plus n1 (times n1 n1)))) x) (rewrite-r lzero lzero nat (plus n1 (S (plus n1 (times n1 n1)))) (λ (X-- : nat) -> eq lzero nat X-- (S (plus (plus n1 n1) (times n1 n1)))) (rewrite-r lzero lzero nat (plus n1 (S (times n1 n1))) (λ (X-- : nat) -> eq lzero nat (plus n1 X--) (S (plus (plus n1 n1) (times n1 n1)))) (rewrite-r lzero lzero nat (plus (times n1 n1) (plus n1 n1)) (λ (X-- : nat) -> eq lzero nat (plus n1 (plus n1 (S (times n1 n1)))) (S X--)) (rewrite-r lzero lzero nat (plus n1 (plus (times n1 n1) n1)) (λ (X-- : nat) -> eq lzero nat (plus n1 (plus n1 (S (times n1 n1)))) (S X--)) (rewrite-r lzero lzero nat (plus n1 (times n1 n1)) (λ (X-- : nat) -> eq lzero nat (plus n1 (plus n1 (S (times n1 n1)))) (S (plus n1 X--))) (rewrite-r lzero lzero nat (plus n1 (S (plus n1 (times n1 n1)))) (λ (X-- : nat) -> eq lzero nat (plus n1 (plus n1 (S (times n1 n1)))) X--) (rewrite-r lzero lzero nat (plus n1 (S (times n1 n1))) (λ (X-- : nat) -> eq lzero nat (plus n1 (plus n1 (S (times n1 n1)))) (plus n1 X--)) (refl lzero nat (plus n1 (plus n1 (S (times n1 n1))))) (S (plus n1 (times n1 n1))) (plus-n-Sm n1 (times n1 n1))) (S (plus n1 (plus n1 (times n1 n1)))) (plus-n-Sm n1 (plus n1 (times n1 n1)))) (plus (times n1 n1) n1) (commutative-plus (times n1 n1) n1)) (plus (times n1 n1) (plus n1 n1)) (rewrite-l lzero lzero nat (plus (plus n1 (times n1 n1)) n1) (λ (X-- : nat) -> eq lzero nat (plus (times n1 n1) (plus n1 n1)) X--) (assoc-plus1 n1 n1 (times n1 n1)) (plus n1 (plus (times n1 n1) n1)) (associative-plus n1 (times n1 n1) n1))) (plus (plus n1 n1) (times n1 n1)) (commutative-plus (plus n1 n1) (times n1 n1))) (S (plus n1 (times n1 n1))) (plus-n-Sm n1 (times n1 n1))) (S (plus n1 (plus n1 (times n1 n1)))) (plus-n-Sm n1 (plus n1 (times n1 n1)))) (plus (times n1 n1) (S (plus n1 n1))) (commutative-plus (times n1 n1) (S (plus n1 n1))))) (times n1 (S n1)) (commutative-times n1 (S n1))) (eq-ind-r lzero lzero nat (times (times n1 n1) (S (S (S O)))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (times n1 n1) (S (S (S O))))) -> le x (times (exp b n1) b)) (le-times (times n1 n1) (exp b n1) (S (S (S O))) b Hind lt2b) (times (S (S (S O))) (times n1 n1)) (commutative-times (S (S (S O))) (times n1 n1)))) (λ (H1 : eq lzero nat (S O) n1) -> eq-ind lzero lzero nat (S O) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S O) x-1) -> le (times (S x-1) (S x-1)) (times (exp b x-1) b)) (eq-ind lzero lzero nat b (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b x-1) -> le (S (S (S (S O)))) (times x-1 b)) (eq-ind-r lzero lzero nat (times (S (S O)) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S (S O)))) -> le x (times b b)) (lt-to-le (times (S (S O)) (S (S O))) (times b b) (lt-times (S (S O)) b (S (S O)) b lt2b lt2b)) (S (S (S (S O)))) (refl lzero nat (S (S (S (S O)))))) (plus b O) (plus-n-O b)) n1 H1) (le-to-or-lt-eq (S O) n1 H0)) (λ (H0 : eq lzero nat O n1) -> eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> le (times (S x-1) (S x-1)) (times (exp b x-1) b)) (eq-ind lzero lzero nat b (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b x-1) -> le (S O) x-1) (transitive-le (S O) (S (S (S O))) b (leb-true-to-le (S O) (S (S (S O))) (refl lzero bool (leb (S O) (S (S (S O)))))) lt2b) (plus b O) (plus-n-O b)) n1 H0) (le-to-or-lt-eq O n1 (le-O-n n1))) (log b n)) (le-exp-log b n Hn)) (λ (Hn : eq lzero nat O n) -> eq-ind lzero lzero nat O (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat O x-1) -> le (times (log b x-1) (log b x-1)) x-1) (le-n (times (log b O) (log b O))) n Hn) (le-to-or-lt-eq O n (le-O-n n))))) (sqrt n) (sqrt-def n)

le-sqrt-log-n : (n : nat) -> (b : nat) -> (X-- : lt (S (S O)) b) -> le (times (sqrt n) (log b n)) n
le-sqrt-log-n = λ (n : nat) -> λ (b : nat) -> λ (lt2b : lt (S (S O)) b) -> transitive-le (times (sqrt n) (log b n)) (times (sqrt n) (sqrt n)) n (monotonic-le-times-r (sqrt n) (log b n) (sqrt n) (le-sqrt-log n b lt2b)) (leq-sqrt-n n)

le-square-exp : (n : nat) -> (X-- : lt (S (S (S O))) n) -> le (exp n (S (S O))) (exp (S (S O)) n)
le-square-exp = λ (n : nat) -> λ (lt3n : lt (S (S (S O))) n) -> le-ind lzero (S (S (S (S O)))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S O)))) x-417) -> le (exp x-417 (S (S O))) (exp (S (S O)) x-417)) (le-n (exp (S (S (S (S O)))) (S (S O)))) (λ (m : nat) -> λ (le4m : le (S (S (S (S O)))) m) -> λ (Hind : le (exp m (S (S O))) (exp (S (S O)) m)) -> eq-ind lzero lzero nat m (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat m x-1) -> le (S (plus m (times x-1 (S m)))) (times (exp (S (S O)) m) (S (S O)))) (eq-ind-r lzero lzero nat (times (S m) m) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S m) m)) -> le (S (plus m x)) (times (exp (S (S O)) m) (S (S O)))) (eq-ind lzero lzero nat (times (S (S O)) (exp (S (S O)) m)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (S (S O)) (exp (S (S O)) m)) x-1) -> le (S (plus m (plus m (times m m)))) x-1) (eq-ind lzero lzero nat (plus (plus m m) (times m m)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (plus (plus m m) (times m m)) x-1) -> le (S x-1) (plus (exp (S (S O)) m) (plus (exp (S (S O)) m) O))) (eq-ind lzero lzero nat (exp (S (S O)) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) m) x-1) -> le (S (plus (plus m m) (times m m))) (plus (exp (S (S O)) m) x-1)) (eq-ind-r lzero lzero nat (plus (times m m) (plus m m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times m m) (plus m m))) -> le (S x) (plus (exp (S (S O)) m) (exp (S (S O)) m))) (eq-ind-r lzero lzero nat (plus (times m m) (S (plus m m))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times m m) (S (plus m m)))) -> le x (plus (exp (S (S O)) m) (exp (S (S O)) m))) (le-plus (times m m) (exp (S (S O)) m) (S (plus m m)) (exp (S (S O)) m) (eq-ind lzero lzero nat (exp m (S (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp m (S (S O))) x-1) -> le x-1 (exp (S (S O)) m)) Hind (times m m) (exp-2 m)) (le-ind lzero (S (S (S (S O)))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S O)))) x-417) -> le (S (plus x-417 x-417)) (exp (S (S O)) x-417)) (leb-true-to-le (S (plus (S (S (S (S O)))) (S (S (S (S O)))))) (exp (S (S O)) (S (S (S (S O))))) (refl lzero bool (leb (S (plus (S (S (S (S O)))) (S (S (S (S O)))))) (exp (S (S O)) (S (S (S (S O)))))))) (λ (m1 : nat) -> λ (lem1 : le (S (S (S (S O)))) m1) -> λ (Hind1 : le (S (plus m1 m1)) (exp (S (S O)) m1)) -> eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) m1)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) m1))) -> le (S (S (plus m1 (S m1)))) x) (eq-ind lzero lzero nat (exp (S (S O)) m1) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) m1) x-1) -> le (S (S (plus m1 (S m1)))) (plus (exp (S (S O)) m1) x-1)) (eq-ind lzero lzero nat (S (plus m1 m1)) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (S (plus m1 m1)) x-1) -> le (S (S x-1)) (plus (exp (S (S O)) m1) (exp (S (S O)) m1))) (eq-ind-r lzero lzero nat (plus (S (plus m1 m1)) O) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S (plus m1 m1)) O)) -> le (S (S x)) (plus (exp (S (S O)) m1) (exp (S (S O)) m1))) (eq-ind-r lzero lzero nat (plus (S (plus m1 m1)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S (plus m1 m1)) (S O))) -> le (S x) (plus (exp (S (S O)) m1) (exp (S (S O)) m1))) (eq-ind-r lzero lzero nat (plus (S (plus m1 m1)) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S (plus m1 m1)) (S (S O)))) -> le x (plus (exp (S (S O)) m1) (exp (S (S O)) m1))) (le-plus (S (plus m1 m1)) (exp (S (S O)) m1) (S (S O)) (exp (S (S O)) m1) Hind1 (eq-ind-r lzero lzero nat (exp (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (exp (S (S O)) (S O))) -> le x (exp (S (S O)) m1)) (le-exp (S O) m1 (S (S O)) (lt-O-S (S O)) (transitive-le (S O) (S (S (S (S O)))) m1 (leb-true-to-le (S O) (S (S (S (S O)))) (refl lzero bool (leb (S O) (S (S (S (S O))))))) lem1)) (S (S O)) (exp-n-1 (S (S O))))) (S (plus (S (plus m1 m1)) (S O))) (plus-n-Sm (S (plus m1 m1)) (S O))) (S (plus (S (plus m1 m1)) O)) (plus-n-Sm (S (plus m1 m1)) O)) (S (plus m1 m1)) (plus-n-O (S (plus m1 m1)))) (plus m1 (S m1)) (plus-n-Sm m1 m1)) (plus (exp (S (S O)) m1) O) (plus-n-O (exp (S (S O)) m1))) (times (exp (S (S O)) m1) (S (S O))) (commutative-times (exp (S (S O)) m1) (S (S O)))) m le4m)) (S (plus (times m m) (plus m m))) (plus-n-Sm (times m m) (plus m m))) (plus (plus m m) (times m m)) (commutative-plus (plus m m) (times m m))) (plus (exp (S (S O)) m) O) (plus-n-O (exp (S (S O)) m))) (plus m (plus m (times m m))) (associative-plus m m (times m m))) (times (exp (S (S O)) m) (S (S O))) (commutative-times (S (S O)) (exp (S (S O)) m))) (times m (S m)) (commutative-times m (S m))) (plus m O) (plus-n-O m)) n lt3n

let-clause-1033' : (n : nat) -> (le-n-v : le (exp (S (S O)) (S (S (S (S O))))) n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-1033' = λ (n : nat) -> λ (le-n-v : le (exp (S (S O)) (S (S (S (S O))))) n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

le-log2-sqrt : (n : nat) -> (X-- : le (exp (S (S O)) (S (S (S (S O))))) n) -> le (log (S (S O)) n) (sqrt n)
le-log2-sqrt = λ (n : nat) -> λ (le-n-v : le (exp (S (S O)) (S (S (S (S O))))) n) -> eq-ind-r lzero lzero nat (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (max'' (S n) (λ (x0 : nat) -> leb (times x0 x0) n))) -> le (log (S (S O)) n) x) (true-to-le-max (λ (x : nat) -> leb (times x x) n) (S n) (log (S (S O)) n) (le-S-S (log (S (S O)) n) n (le-log-n-n (S (S O)) n (eq-coerc lzero (lt (mod (S O) O) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S O))) (lt (S O) (S (S O))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) O) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod (S O) O) (plus X-- (S O))) (lt (S O) (S (S O)))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus (S O) (S O))) (lt (S O) (S (S O)))) (rewrite-r lzero (lsuc lzero) nat (S (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S O) X--) (lt (S O) (S (S O)))) (refl (lsuc lzero) (Set (lzero)) (lt (S O) (S (S O)))) (plus (S O) (S O)) (rewrite-r lzero lzero nat (times (S O) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S O))) (rewrite-r lzero lzero nat (times (S (S O)) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S O) (S O))) X--) (times-Sn-m (S O) (S O)) (S (S O)) (times-n-1 (S (S O)))) (S O) (times-n-1 (S O)))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-1033' n le-n-v (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-1033' n le-n-v (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))))) (le-to-leb-true (times (log (S (S O)) n) (log (S (S O)) n)) n (transitive-le (times (log (S (S O)) n) (log (S (S O)) n)) (exp (S (S O)) (log (S (S O)) n)) n (eq-ind lzero lzero nat (exp (log (S (S O)) n) (S (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (log (S (S O)) n) (S (S O))) x-1) -> le x-1 (exp (S (S O)) (log (S (S O)) n))) (le-square-exp (log (S (S O)) n) (true-to-le-max (λ (x : nat) -> leb (exp (S (S O)) x) n) n (S (S (S (S O)))) (lt-to-le-to-lt (S (S (S (S O)))) (exp (S (S O)) (S (S (S (S O))))) n (leb-true-to-le (S (S (S (S (S O))))) (exp (S (S O)) (S (S (S (S O))))) (refl lzero bool (leb (S (S (S (S (S O))))) (exp (S (S O)) (S (S (S (S O)))))))) le-n-v) (le-to-leb-true (exp (S (S O)) (S (S (S (S O))))) n le-n-v))) (times (log (S (S O)) n) (log (S (S O)) n)) (exp-2 (log (S (S O)) n))) (le-exp-log (S (S O)) n (transitive-lt O (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times O (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) n (lt-O-S (plus O (times (plus (S O) (times (plus (S O) (times (plus (S O) (times O (S (S O)))) (S (S O)))) (S (S O)))) (S (S O))))) le-n-v))))) (sqrt n) (sqrt-def n)

square-S : (a : nat) -> eq lzero nat (exp (S a) (S (S O))) (plus (plus (exp a (S (S O))) (times (S (S O)) a)) (S O))
square-S = λ (a : nat) -> eq-ind-r lzero lzero nat (times (S a) (plus a O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S a) (plus a O))) -> eq lzero nat (S (plus a x)) (plus (plus (times (plus a O) a) (plus a (plus a O))) (S O))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (S (plus a (plus X-- (times a (plus a O))))) (plus (plus (times (plus a O) a) (plus a (plus a O))) (S O))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (S (plus a (plus a (times a X--)))) (plus (plus (times (plus a O) a) (plus a (plus a O))) (S O))) (rewrite-r lzero lzero nat (plus a (S (plus a (times a a)))) (λ (X-- : nat) -> eq lzero nat X-- (plus (plus (times (plus a O) a) (plus a (plus a O))) (S O))) (rewrite-r lzero lzero nat (plus a (S (times a a))) (λ (X-- : nat) -> eq lzero nat (plus a X--) (plus (plus (times (plus a O) a) (plus a (plus a O))) (S O))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (plus a (plus a (S (times a a)))) (plus (plus (times X-- a) (plus a (plus a O))) (S O))) (rewrite-l lzero lzero nat a (λ (X-- : nat) -> eq lzero nat (plus a (plus a (S (times a a)))) (plus (plus (times a a) (plus a X--)) (S O))) (rewrite-r lzero lzero nat (plus a (plus (times a a) a)) (λ (X-- : nat) -> eq lzero nat (plus a (plus a (S (times a a)))) (plus X-- (S O))) (rewrite-r lzero lzero nat (plus a (times a a)) (λ (X-- : nat) -> eq lzero nat (plus a (plus a (S (times a a)))) (plus (plus a X--) (S O))) (rewrite-r lzero lzero nat (plus a (plus (plus a (times a a)) (S O))) (λ (X-- : nat) -> eq lzero nat (plus a (plus a (S (times a a)))) X--) (rewrite-r lzero lzero nat (plus a (plus (times a a) (S O))) (λ (X-- : nat) -> eq lzero nat (plus a (plus a (S (times a a)))) (plus a X--)) (rewrite-r lzero lzero nat (plus (times a a) (S O)) (λ (X-- : nat) -> eq lzero nat (plus a (plus a X--)) (plus a (plus a (plus (times a a) (S O))))) (refl lzero nat (plus a (plus a (plus (times a a) (S O))))) (S (times a a)) (rewrite-r lzero lzero nat (plus (times a a) O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus (times a a) (S O))) (plus-n-Sm (times a a) O) (times a a) (plus-n-O (times a a)))) (plus (plus a (times a a)) (S O)) (associative-plus a (times a a) (S O))) (plus (plus a (plus a (times a a))) (S O)) (associative-plus a (plus a (times a a)) (S O))) (plus (times a a) a) (commutative-plus (times a a) a)) (plus (times a a) (plus a a)) (rewrite-l lzero lzero nat (plus (plus a (times a a)) a) (λ (X-- : nat) -> eq lzero nat (plus (times a a) (plus a a)) X--) (assoc-plus1 a a (times a a)) (plus a (plus (times a a) a)) (associative-plus a (times a a) a))) (plus a O) (plus-n-O a)) (plus a O) (plus-n-O a)) (S (plus a (times a a))) (plus-n-Sm a (times a a))) (S (plus a (plus a (times a a)))) (plus-n-Sm a (plus a (times a a)))) (plus a O) (plus-n-O a)) (plus a O) (plus-n-O a)) (times (plus a O) (S a)) (commutative-times (plus a O) (S a))

let-clause-10331 : (n : nat) -> (lt4n : lt (S (S (S (S (S O))))) n) -> (m : nat) -> (le4m : le (S (S (S (S (S (S O)))))) m) -> (Hind : le (exp (S m) (S (S O))) (exp (S (S O)) m)) -> (a : nat) -> (lea : le (S (S (S (S (S (S O)))))) a) -> (Hinda : le (plus (times (S (S O)) (S a)) (S O)) (exp (S (S O)) a)) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10331 = λ (n : nat) -> λ (lt4n : lt (S (S (S (S (S O))))) n) -> λ (m : nat) -> λ (le4m : le (S (S (S (S (S (S O)))))) m) -> λ (Hind : le (exp (S m) (S (S O))) (exp (S (S O)) m)) -> λ (a : nat) -> λ (lea : le (S (S (S (S (S (S O)))))) a) -> λ (Hinda : le (plus (times (S (S O)) (S a)) (S O)) (exp (S (S O)) a)) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

le-squareS-exp : (n : nat) -> (X-- : lt (S (S (S (S (S O))))) n) -> le (exp (S n) (S (S O))) (exp (S (S O)) n)
le-squareS-exp = λ (n : nat) -> λ (lt4n : lt (S (S (S (S (S O))))) n) -> le-ind lzero (S (S (S (S (S (S O)))))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S (S (S O)))))) x-417) -> le (exp (S x-417) (S (S O))) (exp (S (S O)) x-417)) (leb-true-to-le (exp (S (S (S (S (S (S (S O))))))) (S (S O))) (exp (S (S O)) (S (S (S (S (S (S O))))))) (refl lzero bool (leb (exp (S (S (S (S (S (S (S O))))))) (S (S O))) (exp (S (S O)) (S (S (S (S (S (S O)))))))))) (λ (m : nat) -> λ (le4m : le (S (S (S (S (S (S O)))))) m) -> λ (Hind : le (exp (S m) (S (S O))) (exp (S (S O)) m)) -> eq-ind-r lzero lzero nat (plus (plus (exp (S m) (S (S O))) (times (S (S O)) (S m))) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (plus (exp (S m) (S (S O))) (times (S (S O)) (S m))) (S O))) -> le x (exp (S (S O)) (S m))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) m)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) m))) -> le (plus (plus (exp (S m) (S (S O))) (times (S (S O)) (S m))) (S O)) x) (eq-ind lzero lzero nat (exp (S (S O)) m) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (S O)) m) x-1) -> le (plus (plus (exp (S m) (S (S O))) (times (S (S O)) (S m))) (S O)) (plus (exp (S (S O)) m) x-1)) (eq-ind-r lzero lzero nat (plus (exp (S m) (S (S O))) (plus (times (S (S O)) (S m)) (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (exp (S m) (S (S O))) (plus (times (S (S O)) (S m)) (S O)))) -> le x (plus (exp (S (S O)) m) (exp (S (S O)) m))) (le-plus (exp (S m) (S (S O))) (exp (S (S O)) m) (plus (times (S (S O)) (S m)) (S O)) (exp (S (S O)) m) Hind (le-ind lzero (S (S (S (S (S (S O)))))) (λ (x-417 : nat) -> λ (X-x-418 : le (S (S (S (S (S (S O)))))) x-417) -> le (plus (times (S (S O)) (S x-417)) (S O)) (exp (S (S O)) x-417)) (leb-true-to-le (plus (times (S (S O)) (S (S (S (S (S (S (S O)))))))) (S O)) (exp (S (S O)) (S (S (S (S (S (S O))))))) (refl lzero bool (leb (plus (times (S (S O)) (S (S (S (S (S (S (S O)))))))) (S O)) (exp (S (S O)) (S (S (S (S (S (S O)))))))))) (λ (a : nat) -> λ (lea : le (S (S (S (S (S (S O)))))) a) -> λ (Hinda : le (plus (times (S (S O)) (S a)) (S O)) (exp (S (S O)) a)) -> transitive-le (plus (times (S (S O)) (S (S a))) (S O)) (times (S (S O)) (plus (times (S (S O)) (S a)) (S O))) (exp (S (S O)) (S a)) (lt-to-le (plus (times (S (S O)) (S (S a))) (S O)) (times (S (S O)) (plus (times (S (S O)) (S a)) (S O))) (eq-ind-r lzero lzero nat (plus (times (S (S O)) (S (S a))) (S (S O))) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (times (S (S O)) (S (S a))) (S (S O)))) -> le x (times (S (S O)) (plus (times (S (S O)) (S a)) (S O)))) (eq-ind-r lzero lzero nat (times (S (S O)) (S O)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (S O))) -> le (plus (times (S (S O)) (S (S a))) x) (times (S (S O)) (plus (times (S (S O)) (S a)) (S O)))) (eq-ind lzero lzero nat (times (S (S O)) (plus (S (S a)) (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (times (S (S O)) (plus (S (S a)) (S O))) x-1) -> le x-1 (times (S (S O)) (plus (times (S (S O)) (S a)) (S O)))) (monotonic-le-times-r (S (S O)) (plus (S (S a)) (S O)) (plus (times (S (S O)) (S a)) (S O)) (le-plus (S (S a)) (times (S (S O)) (S a)) (S O) (S O) (eq-coerc lzero (le (S (mod (S a) O)) (plus (plus (mod (S a) O) (times O (div (S a) O))) (S a))) (le (S (S a)) (S (plus a (S (plus a O))))) (lt-plus-Sn-r (mod (S a) O) (times O (div (S a) O)) a) (rewrite-l lzero (lsuc lzero) nat (S a) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S a) O)) (plus X-- (S a))) (le (S (S a)) (S (plus a (S (plus a O)))))) (rewrite-l lzero (lsuc lzero) nat a (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S a) O)) (plus (S a) (S a))) (le (S (S a)) (S (plus a (S X--))))) (rewrite-r lzero (lsuc lzero) nat (plus a (S (S a))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (mod (S a) O)) (plus (S a) (S a))) (le (S (S a)) X--)) (rewrite-l lzero (lsuc lzero) nat (S a) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S X--) (plus (S a) (S a))) (le (S (S a)) (plus a (S (S a))))) (rewrite-r lzero (lsuc lzero) nat (plus a (S (S a))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (S (S a)) X--) (le (S (S a)) (plus a (S (S a))))) (refl (lsuc lzero) (Set (lzero)) (le (S (S a)) (plus a (S (S a))))) (plus (S a) (S a)) (rewrite-l lzero lzero nat (S (plus (S a) a)) (λ (X-- : nat) -> eq lzero nat X-- (plus a (S (S a)))) (rewrite-l lzero lzero nat (plus a (S a)) (λ (X-- : nat) -> eq lzero nat (S X--) (plus a (S (S a)))) (plus-n-Sm a (S a)) (plus (S a) a) (commutative-plus a (S a))) (plus (S a) (S a)) (plus-n-Sm (S a) a))) (mod (S a) O) (rewrite-r lzero lzero nat (plus O (mod (S a) O)) (λ (X-- : nat) -> eq lzero nat (S a) X--) (rewrite-l lzero lzero nat (plus (mod (S a) O) O) (λ (X-- : nat) -> eq lzero nat (S a) X--) (rewrite-r lzero lzero nat (times O (div (S a) O)) (λ (X-- : nat) -> eq lzero nat (S a) (plus (mod (S a) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S a) O)) (mod (S a) O)) (λ (X-- : nat) -> eq lzero nat (S a) X--) (let-clause-10331 n lt4n m le4m Hind a lea Hinda (S a) O) (plus (mod (S a) O) (times O (div (S a) O))) (commutative-plus (times O (div (S a) O)) (mod (S a) O))) O (times-O-n (div (S a) O))) (plus O (mod (S a) O)) (commutative-plus (mod (S a) O) O)) (mod (S a) O) (plus-O-n (mod (S a) O)))) (S (plus a (S a))) (plus-n-Sm a (S a))) (plus a O) (plus-n-O a)) (plus (mod (S a) O) (times O (div (S a) O))) (rewrite-l lzero lzero nat (plus (times O (div (S a) O)) (mod (S a) O)) (λ (X-- : nat) -> eq lzero nat (S a) X--) (let-clause-10331 n lt4n m le4m Hind a lea Hinda (S a) O) (plus (mod (S a) O) (times O (div (S a) O))) (commutative-plus (times O (div (S a) O)) (mod (S a) O))))) (lt-O-S O))) (plus (times (S (S O)) (S (S a))) (times (S (S O)) (S O))) (distributive-times-plus (S (S O)) (S (S a)) (S O))) (S (S O)) (times-n-1 (S (S O)))) (S (plus (times (S (S O)) (S (S a))) (S O))) (plus-n-Sm (times (S (S O)) (S (S a))) (S O)))) (eq-ind-r lzero lzero nat (times (S (S O)) (exp (S (S O)) a)) (λ (x : nat) -> λ (X-- : eq lzero nat x (times (S (S O)) (exp (S (S O)) a))) -> le (times (S (S O)) (plus (times (S (S O)) (S a)) (S O))) x) (monotonic-le-times-r (S (S O)) (plus (times (S (S O)) (S a)) (S O)) (exp (S (S O)) a) Hinda) (times (exp (S (S O)) a) (S (S O))) (commutative-times (exp (S (S O)) a) (S (S O))))) m le4m)) (plus (plus (exp (S m) (S (S O))) (times (S (S O)) (S m))) (S O)) (associative-plus (exp (S m) (S (S O))) (times (S (S O)) (S m)) (S O))) (plus (exp (S (S O)) m) O) (plus-n-O (exp (S (S O)) m))) (times (exp (S (S O)) m) (S (S O))) (commutative-times (exp (S (S O)) m) (S (S O)))) (exp (S (S m)) (S (S O))) (square-S (S m))) n lt4n

let-clause-10332 : (n : nat) -> (le-n-v : le (exp (S (S O)) (S (S (S (S (S (S O))))))) n) -> (x2515 : nat) -> (x2516 : nat) -> eq lzero nat x2515 (plus (times x2516 (div x2515 x2516)) (mod x2515 x2516))
let-clause-10332 = λ (n : nat) -> λ (le-n-v : le (exp (S (S O)) (S (S (S (S (S (S O))))))) n) -> λ (x2515 : nat) -> λ (x2516 : nat) -> rewrite-l lzero lzero nat (times (div x2515 x2516) x2516) (λ (X-- : nat) -> eq lzero nat x2515 (plus X-- (mod x2515 x2516))) (div-mod x2515 x2516) (times x2516 (div x2515 x2516)) (commutative-times (div x2515 x2516) x2516)

lt-log2-sqrt : (n : nat) -> (X-- : le (exp (S (S O)) (S (S (S (S (S (S O))))))) n) -> lt (log (S (S O)) n) (sqrt n)
lt-log2-sqrt = λ (n : nat) -> λ (le-n-v : le (exp (S (S O)) (S (S (S (S (S (S O))))))) n) -> eq-ind-r lzero lzero nat (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (max'' (S n) (λ (x0 : nat) -> leb (times x0 x0) n))) -> lt (log (S (S O)) n) x) (true-to-le-max (λ (x : nat) -> leb (times x x) n) (S n) (S (log (S (S O)) n)) (le-S-S (S (log (S (S O)) n)) n (lt-log-n-n (S (S O)) n (eq-coerc lzero (lt (mod (S O) O) (plus (plus (mod (S O) O) (times O (div (S O) O))) (S O))) (lt (S O) (S (S O))) (lt-plus-Sn-r (mod (S O) O) (times O (div (S O) O)) O) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (mod (S O) O) (plus X-- (S O))) (lt (S O) (S (S O)))) (rewrite-l lzero (lsuc lzero) nat (S O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus (S O) (S O))) (lt (S O) (S (S O)))) (rewrite-r lzero (lsuc lzero) nat (S (S O)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (S O) X--) (lt (S O) (S (S O)))) (refl (lsuc lzero) (Set (lzero)) (lt (S O) (S (S O)))) (plus (S O) (S O)) (rewrite-r lzero lzero nat (times (S O) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) X--) (S (S O))) (rewrite-r lzero lzero nat (times (S (S O)) (S O)) (λ (X-- : nat) -> eq lzero nat (plus (S O) (times (S O) (S O))) X--) (times-Sn-m (S O) (S O)) (S (S O)) (times-n-1 (S (S O)))) (S O) (times-n-1 (S O)))) (mod (S O) O) (rewrite-r lzero lzero nat (plus O (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-l lzero lzero nat (plus (mod (S O) O) O) (λ (X-- : nat) -> eq lzero nat (S O) X--) (rewrite-r lzero lzero nat (times O (div (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) (plus (mod (S O) O) X--)) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10332 n le-n-v (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))) O (times-O-n (div (S O) O))) (plus O (mod (S O) O)) (commutative-plus (mod (S O) O) O)) (mod (S O) O) (plus-O-n (mod (S O) O)))) (plus (mod (S O) O) (times O (div (S O) O))) (rewrite-l lzero lzero nat (plus (times O (div (S O) O)) (mod (S O) O)) (λ (X-- : nat) -> eq lzero nat (S O) X--) (let-clause-10332 n le-n-v (S O) O) (plus (mod (S O) O) (times O (div (S O) O))) (commutative-plus (times O (div (S O) O)) (mod (S O) O))))) (transitive-lt O (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times O (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) n (lt-O-S (plus O (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times O (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O))))) le-n-v))) (le-to-leb-true (times (S (log (S (S O)) n)) (S (log (S (S O)) n))) n (transitive-le (times (S (log (S (S O)) n)) (S (log (S (S O)) n))) (exp (S (S O)) (log (S (S O)) n)) n (eq-ind lzero lzero nat (exp (S (log (S (S O)) n)) (S (S O))) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (exp (S (log (S (S O)) n)) (S (S O))) x-1) -> le x-1 (exp (S (S O)) (log (S (S O)) n))) (le-squareS-exp (log (S (S O)) n) (true-to-le-max (λ (x : nat) -> leb (exp (S (S O)) x) n) n (S (S (S (S (S (S O)))))) (lt-to-le-to-lt (S (S (S (S (S (S O)))))) (exp (S (S O)) (S (S (S (S (S (S O))))))) n (leb-true-to-le (S (S (S (S (S (S (S O))))))) (exp (S (S O)) (S (S (S (S (S (S O))))))) (refl lzero bool (leb (S (S (S (S (S (S (S O))))))) (exp (S (S O)) (S (S (S (S (S (S O)))))))))) le-n-v) (le-to-leb-true (exp (S (S O)) (S (S (S (S (S (S O))))))) n le-n-v))) (times (S (log (S (S O)) n)) (S (log (S (S O)) n))) (exp-2 (S (log (S (S O)) n)))) (le-exp-log (S (S O)) n (transitive-lt O (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times O (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) n (lt-O-S (plus O (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times (plus (S O) (times O (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O)))) (S (S O))))) le-n-v))))) (sqrt n) (sqrt-def n)

monotonic-sqrt : monotonic lzero lzero nat le sqrt
monotonic-sqrt = λ (n : nat) -> λ (m : nat) -> λ (lenm : le n m) -> eq-ind-r lzero lzero nat (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (λ (x : nat) -> λ (X-- : eq lzero nat x (max'' (S n) (λ (x0 : nat) -> leb (times x0 x0) n))) -> le x (sqrt m)) (true-to-le-max (λ (x : nat) -> leb (times x x) m) (S m) (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (le-S-S (max'' (S n) (λ (x : nat) -> leb (times x x) n)) m (transitive-le (max'' (S n) (λ (x : nat) -> leb (times x x) n)) n m (le-sqrt-n n) lenm)) (le-to-leb-true (times (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (max'' (S n) (λ (x : nat) -> leb (times x x) n))) m (transitive-le (times (max'' (S n) (λ (x : nat) -> leb (times x x) n)) (max'' (S n) (λ (x : nat) -> leb (times x x) n))) n m (leq-sqrt-n n) lenm))) (sqrt n) (sqrt-def n)

