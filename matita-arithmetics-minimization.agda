open import Agda.Primitive
open import matita-basics-logic
open import matita-basics-bool
open import matita-arithmetics-nat


max' : (X---v : nat) -> (X--1-v : (X--1-v : nat) -> bool) -> (X--2-v : nat) -> nat
max' O f d = d
max' (S j) f d = match-bool lzero (λ (X--1-v : bool) -> nat) j (max' j f d) (f j)

max'' : (X-n : nat) -> (X-f : (X-- : nat) -> bool) -> nat
max'' = λ (n : nat) -> λ (f : (X-- : nat) -> bool) -> max' n f O

max-O : (f : (X-- : nat) -> bool) -> eq lzero nat (max'' O f) O
max-O = λ (f : (X-- : nat) -> bool) -> refl lzero nat (max'' O f)

max-cases : (f : (X-- : nat) -> bool) -> (n : nat) -> Or lzero lzero (And lzero lzero (eq lzero bool (f n) true) (eq lzero nat (max'' (S n) f) n)) (And lzero lzero (eq lzero bool (f n) false) (eq lzero nat (max'' (S n) f) (max'' n f)))
max-cases = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> match-bool lzero (λ (X-- : bool) -> Or lzero lzero (And lzero lzero (eq lzero bool X-- true) (eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) n (max' n f O) X--) n)) (And lzero lzero (eq lzero bool X-- false) (eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) n (max' n f O) X--) (max' n f O)))) (or-introl lzero lzero (And lzero lzero (eq lzero bool true true) (eq lzero nat n n)) (And lzero lzero (eq lzero bool true false) (eq lzero nat n (max' n f O))) (conj lzero lzero (eq lzero bool true true) (eq lzero nat n n) (refl lzero bool true) (refl lzero nat n))) (or-intror lzero lzero (And lzero lzero (eq lzero bool false true) (eq lzero nat (max' n f O) n)) (And lzero lzero (eq lzero bool false false) (eq lzero nat (max' n f O) (max' n f O))) (conj lzero lzero (eq lzero bool false false) (eq lzero nat (max' n f O) (max' n f O)) (refl lzero bool false) (refl lzero nat (max' n f O)))) (f n)

le-max-n : (f : (X-- : nat) -> bool) -> (n : nat) -> le (max'' n f) n
le-max-n = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> le (max'' X-x-365 f) X-x-365) (le-n (max'' O f)) (λ (m : nat) -> λ (Hind : le (max'' m f) m) -> match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) X--) (S m)) (le-S m m (le-n m)) (le-S (max' m f O) m Hind) (f m)) n

lt-max-n : (f : (X-- : nat) -> bool) -> (n : nat) -> (X-- : lt O n) -> lt (max'' n f) n
lt-max-n = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (posn : lt O n) -> lt-O-n-elim lzero n posn (λ (X-- : nat) -> lt (max'' X-- f) X--) (λ (m : nat) -> match-bool lzero (λ (X-- : bool) -> le (S (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) X--)) (S m)) (le-S-S m m (le-n m)) (le-S-S (max' m f O) m (le-max-n f m)) (f m))

le-to-le-max : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : le n m) -> le (max'' n f) (max'' m f)
le-to-le-max = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (H : le n m) -> le-ind lzero n (λ (x-417 : nat) -> λ (X-x-418 : le n x-417) -> le (max'' n f) (max'' x-417 f)) (le-n (max'' n f)) (λ (i : nat) -> λ (leni : le n i) -> λ (Hind : le (max'' n f) (max'' i f)) -> transitive-le (max'' n f) (max'' i f) (max'' (S i) f) Hind (match-Or lzero lzero (And lzero lzero (eq lzero bool (f i) true) (eq lzero nat (max'' (S i) f) i)) (And lzero lzero (eq lzero bool (f i) false) (eq lzero nat (max'' (S i) f) (max'' i f))) lzero (λ (X-- : Or lzero lzero (And lzero lzero (eq lzero bool (f i) true) (eq lzero nat (max'' (S i) f) i)) (And lzero lzero (eq lzero bool (f i) false) (eq lzero nat (max'' (S i) f) (max'' i f)))) -> le (max'' i f) (max'' (S i) f)) (λ (X-clearme : And lzero lzero (eq lzero bool (f i) true) (eq lzero nat (max'' (S i) f) i)) -> match-And lzero lzero (eq lzero bool (f i) true) (eq lzero nat (max'' (S i) f) i) lzero (λ (X-- : And lzero lzero (eq lzero bool (f i) true) (eq lzero nat (max'' (S i) f) i)) -> le (max'' i f) (max'' (S i) f)) (λ (X-- : eq lzero bool (f i) true) -> λ (auto : eq lzero nat (max'' (S i) f) i) -> eq-coerc lzero (le (max'' i f) i) (le (max'' i f) (max'' (S i) f)) (le-max-n f i) (rewrite-r lzero (lsuc lzero) nat i (λ (X--1 : nat) -> eq (lsuc lzero) (Set (lzero)) (le (max'' i f) i) (le (max'' i f) X--1)) (refl (lsuc lzero) (Set (lzero)) (le (max'' i f) i)) (max'' (S i) f) auto)) X-clearme) (λ (X-clearme : And lzero lzero (eq lzero bool (f i) false) (eq lzero nat (max'' (S i) f) (max'' i f))) -> match-And lzero lzero (eq lzero bool (f i) false) (eq lzero nat (max'' (S i) f) (max'' i f)) lzero (λ (X-- : And lzero lzero (eq lzero bool (f i) false) (eq lzero nat (max'' (S i) f) (max'' i f))) -> le (max'' i f) (max'' (S i) f)) (λ (X-- : eq lzero bool (f i) false) -> λ (auto : eq lzero nat (max'' (S i) f) (max'' i f)) -> eq-coerc lzero (le (max'' i f) (max'' i f)) (le (max'' i f) (max'' (S i) f)) (le-n (max'' i f)) (rewrite-r lzero (lsuc lzero) nat (max'' i f) (λ (X--1 : nat) -> eq (lsuc lzero) (Set (lzero)) (le (max'' i f) (max'' i f)) (le (max'' i f) X--1)) (refl (lsuc lzero) (Set (lzero)) (le (max'' i f) (max'' i f))) (max'' (S i) f) auto)) X-clearme) (max-cases f i))) m H

true-to-le-max : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : lt m n) -> (X--1 : eq lzero bool (f m) true) -> le m (max'' n f)
true-to-le-max = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (X-- : lt m X-x-365) -> (X--1 : eq lzero bool (f m) true) -> le m (max'' X-x-365 f)) (λ (m : nat) -> λ (ltmO : lt m O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> (X-- : eq lzero bool (f m) true) -> le m (max'' O f)) (absurd lzero (le (S m) O) ltmO (not-le-Sn-O m))) (λ (i : nat) -> λ (Hind : (m : nat) -> (X-- : lt m i) -> (X--1 : eq lzero bool (f m) true) -> le m (max'' i f)) -> λ (m : nat) -> λ (ltm : lt m (S i)) -> match-Or lzero lzero (lt m i) (eq lzero nat m i) lzero (λ (X-- : Or lzero lzero (lt m i) (eq lzero nat m i)) -> (X--1 : eq lzero bool (f m) true) -> le m (max'' (S i) f)) (λ (ltm0 : lt m i) -> λ (fm : eq lzero bool (f m) true) -> transitive-le m (max'' i f) (max'' (S i) f) (Hind m ltm0 (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) fm)) (le-to-le-max f i (S i) (le-n-Sn i))) (λ (eqm : eq lzero nat m i) -> eq-ind-r lzero lzero nat i (λ (x : nat) -> λ (X-- : eq lzero nat x i) -> (X--1 : eq lzero bool (f x) true) -> le x (max'' (S i) f)) (λ (eqf : eq lzero bool (f i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le i (match-bool lzero (λ (X-0 : bool) -> nat) i (max' i f O) x)) (le-n i) (f i) eqf) m eqm) (le-to-or-lt-eq m i (le-S-S-to-le m i ltm))) n

lt-max-to-false : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : lt m n) -> (X--1 : lt (max'' n f) m) -> eq lzero bool (f m) false
lt-max-to-false = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (ltnm : lt m n) -> λ (eqf : lt (max'' n f) m) -> match-Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false)) -> eq lzero bool (f m) false) (λ (fm : eq lzero bool (f m) true) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f m) false) (absurd lzero (lt (max'' n f) m) eqf (le-to-not-lt m (max'' n f) (true-to-le-max f n m ltnm (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) fm))))) (λ (auto : eq lzero bool (f m) false) -> rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f m) auto) (true-or-false (f m))

max-exists : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : lt m n) -> (X--1 : eq lzero bool (f m) true) -> (X--2 : (i : nat) -> (X--2 : lt m i) -> (X--3 : lt i n) -> eq lzero bool (f i) false) -> eq lzero nat (max'' n f) m
max-exists = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (X-- : lt m X-x-365) -> (X--1 : eq lzero bool (f m) true) -> (X--2 : (i : nat) -> (X--2 : lt m i) -> (X--3 : lt i X-x-365) -> eq lzero bool (f i) false) -> eq lzero nat (max'' X-x-365 f) m) (λ (m : nat) -> λ (ltO : lt m O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> (X-- : eq lzero bool (f m) true) -> (X--1 : (i : nat) -> (X--1 : lt m i) -> (X--2 : lt i O) -> eq lzero bool (f i) false) -> eq lzero nat (max'' O f) m) (absurd lzero (le (S m) O) ltO (not-le-Sn-O m))) (λ (m : nat) -> λ (Hind : (m0 : nat) -> (X-- : lt m0 m) -> (X--1 : eq lzero bool (f m0) true) -> (X--2 : (i : nat) -> (X--2 : lt m0 i) -> (X--3 : lt i m) -> eq lzero bool (f i) false) -> eq lzero nat (max'' m f) m0) -> λ (max-v : nat) -> λ (ltmax : lt max-v (S m)) -> λ (fmax : eq lzero bool (f max-v) true) -> λ (ismax : (i : nat) -> (X-- : lt max-v i) -> (X--1 : lt i (S m)) -> eq lzero bool (f i) false) -> match-Or lzero lzero (lt max-v m) (eq lzero nat max-v m) lzero (λ (X-- : Or lzero lzero (lt max-v m) (eq lzero nat max-v m)) -> eq lzero nat (max'' (S m) f) max-v) (λ (ltm : lt max-v m) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) x) max-v) (Hind max-v ltm fmax (λ (i : nat) -> λ (Hl : lt max-v i) -> λ (Hr : lt i m) -> ismax i Hl (le-S (S i) m Hr))) (f m) (ismax m ltm (eq-coerc lzero (lt m (plus (plus m O) (S O))) (lt m (S m)) (lt-plus-Sn-r m O O) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m (plus X-- (S O))) (lt m (S m))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt m (S m))) (refl (lsuc lzero) (Set (lzero)) (lt m (S m))) (plus m (S O)) (rewrite-r lzero lzero nat (plus m O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus m (S O))) (plus-n-Sm m O) m (plus-n-O m))) (plus m O) (plus-n-O m))))) (λ (ltm : eq lzero nat max-v m) -> eq-ind lzero lzero nat max-v (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat max-v x-1) -> eq lzero nat (match-bool lzero (λ (X-- : bool) -> nat) x-1 (max' x-1 f O) (f x-1)) max-v) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) max-v (max' max-v f O) x) max-v) (refl lzero nat (match-bool lzero (λ (X-- : bool) -> nat) max-v (max' max-v f O) true)) (f max-v) fmax) m ltm) (le-to-or-lt-eq max-v m (le-S-S-to-le max-v m ltmax))) n

max-not-exists : (f : (X-- : nat) -> bool) -> (n : nat) -> (X-- : (i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) -> eq lzero nat (max'' n f) O
max-not-exists = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (ffalse : (i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) -> le-gen lzero (λ (X-- : nat) -> eq lzero nat (max'' X-- f) O) n (λ (i : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : le X-x-365 n) -> eq lzero nat (max'' X-x-365 f) O) (λ (auto : le O n) -> rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- O) (refl lzero nat O) (max'' O f) (max-O f)) (λ (j : nat) -> λ (Hind : (X-- : le j n) -> eq lzero nat (max'' j f) O) -> λ (ltj : le (S j) n) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) j (max' j f O) x) O) (Hind (lt-to-le j n ltj)) (f j) (ffalse j ltj)) i)

let-clause-1013 : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (i : nat) -> (Hind : (X-- : eq lzero nat (max'' i f) m) -> (X--1 : eq lzero bool (f m) false) -> eq lzero nat m O) -> (fi : eq lzero bool (f i) true) -> (eqm : eq lzero nat i m) -> (fm : eq lzero bool (f m) false) -> eq lzero bool false true
let-clause-1013 = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (i : nat) -> λ (Hind : (X-- : eq lzero nat (max'' i f) m) -> (X--1 : eq lzero bool (f m) false) -> eq lzero nat m O) -> λ (fi : eq lzero bool (f i) true) -> λ (eqm : eq lzero nat i m) -> λ (fm : eq lzero bool (f m) false) -> rewrite-l lzero lzero bool (f m) (λ (X-- : bool) -> eq lzero bool X-- true) (rewrite-l lzero lzero nat i (λ (X-- : nat) -> eq lzero bool (f X--) true) fi m eqm) false fm

fmax-false : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : eq lzero nat (max'' n f) m) -> (X--1 : eq lzero bool (f m) false) -> eq lzero nat m O
fmax-false = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : eq lzero nat (max'' X-x-365 f) m) -> (X--1 : eq lzero bool (f m) false) -> eq lzero nat m O) (λ (auto : eq lzero nat (max'' O f) m) -> λ (auto' : eq lzero bool (f m) false) -> rewrite-r lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) O (rewrite-l lzero lzero nat (max'' O f) (λ (X-- : nat) -> eq lzero nat X-- m) auto O (max-O f))) (λ (i : nat) -> λ (Hind : (X-- : eq lzero nat (max'' i f) m) -> (X--1 : eq lzero bool (f m) false) -> eq lzero nat m O) -> match-Or lzero lzero (eq lzero bool (f i) true) (eq lzero bool (f i) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f i) true) (eq lzero bool (f i) false)) -> (X--1 : eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (max' i f O) (f i)) m) -> (X--2 : eq lzero bool (f m) false) -> eq lzero nat m O) (λ (fi : eq lzero bool (f i) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (max' i f O) x) m) -> (X--2 : eq lzero bool (f m) false) -> eq lzero nat m O) (λ (eqm : eq lzero nat i m) -> λ (fm : eq lzero bool (f m) false) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero nat m O) (absurd lzero (eq lzero bool (f i) true) fi (eq-coerc lzero (Not lzero (eq lzero bool true false)) (Not lzero (eq lzero bool (f i) true)) not-eq-true-false (rewrite-r lzero (lsuc lzero) bool true (λ (X-- : bool) -> eq (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true X--)) (Not lzero (eq lzero bool (f i) true))) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true true)) (Not lzero (eq lzero bool (f X--) true))) (rewrite-r lzero (lsuc lzero) bool true (λ (X-- : bool) -> eq (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true true)) (Not lzero (eq lzero bool X-- true))) (refl (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true true))) (f m) (rewrite-l lzero lzero bool false (λ (X-- : bool) -> eq lzero bool (f m) X--) fm true (let-clause-1013 f n m i Hind fi eqm fm))) i eqm) false (let-clause-1013 f n m i Hind fi eqm fm))))) (f i) fi) (λ (fi : eq lzero bool (f i) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> (X--1 : eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) i (max' i f O) x) m) -> (X--2 : eq lzero bool (f m) false) -> eq lzero nat m O) Hind (f i) fi) (true-or-false (f i))) n

data max-spec (n-v : nat) (f-v : (X---v : nat) -> bool) : (X---v : nat) -> Set (lzero) where
  found-max-spec' : (m-v : nat) -> (X---v : lt m-v n-v) -> (X--1-v : matita-basics-logic.eq lzero bool (f-v m-v) true) -> (X--2-v : (i-v : nat) -> (X--2-v : lt m-v i-v) -> (X--3-v : lt i-v n-v) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> max-spec n-v f-v m-v
  not-found-max-spec' : (X---v : (i-v : nat) -> (X---v : lt i-v n-v) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> max-spec n-v f-v O


found-max-spec : (n-v : nat) -> (f-v : (X---v : nat) -> bool) -> (m-v : nat) -> (X---v : lt m-v n-v) -> (X--1-v : matita-basics-logic.eq lzero bool (f-v m-v) true) -> (X--2-v : (i-v : nat) -> (X--2-v : lt m-v i-v) -> (X--3-v : lt i-v n-v) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> max-spec n-v f-v m-v
found-max-spec _ _ = found-max-spec'

not-found-max-spec : (n-v : nat) -> (f-v : (X---v : nat) -> bool) -> (X---v : (i-v : nat) -> (X---v : lt i-v n-v) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> max-spec n-v f-v O

not-found-max-spec _ _ = not-found-max-spec'

match-max-spec : (X-n-v : nat) -> (X-f-v : (X---v : nat) -> bool) -> (return-sort-v : Level) -> (return-type-v : (X---v : nat) -> (z-v : max-spec X-n-v X-f-v X---v) -> Set return-sort-v) -> (case-found-max-spec-v : (m-v : nat) -> (X---v : lt m-v X-n-v) -> (X--1-v : matita-basics-logic.eq lzero bool (X-f-v m-v) true) -> (X--2-v : (i-v : nat) -> (X--2-v : lt m-v i-v) -> (X--3-v : lt i-v X-n-v) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> return-type-v m-v (found-max-spec X-n-v X-f-v m-v X---v X--1-v X--2-v)) -> (case-not-found-max-spec-v : (X---v : (i-v : nat) -> (X---v : lt i-v X-n-v) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> return-type-v O (not-found-max-spec X-n-v X-f-v X---v)) -> (X---v : nat) -> (z-v : max-spec X-n-v X-f-v X---v) -> return-type-v X---v z-v
match-max-spec _ _ _ _ casefound casenotfound x (found-max-spec' n p x1 x2) = casefound n p x1 x2
match-max-spec _ _ _ _ casefound casenotfound x (not-found-max-spec' n) = casenotfound n

max-spec-ind : (l8-v : Level) -> (X-n-v : nat) -> (X-f-v : (X---v : nat) -> bool) -> (Q--v : (x-971-v : nat) -> (X-x-972-v : max-spec X-n-v X-f-v x-971-v) -> Set l8-v) -> (X-H-found-max-spec-v : (m-v : nat) -> (x-975-v : lt m-v X-n-v) -> (x-974-v : matita-basics-logic.eq lzero bool (X-f-v m-v) true) -> (x-973-v : (i-v : nat) -> (X---v : lt m-v i-v) -> (X--1-v : lt i-v X-n-v) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> Q--v m-v (found-max-spec X-n-v X-f-v m-v x-975-v x-974-v x-973-v)) -> (X-H-not-found-max-spec-v : (x-976-v : (i-v : nat) -> (X---v : lt i-v X-n-v) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> Q--v O (not-found-max-spec X-n-v X-f-v x-976-v)) -> (x-971-v : nat) -> (x-972-v : max-spec X-n-v X-f-v x-971-v) -> Q--v x-971-v x-972-v
max-spec-ind _ _ _ _ casefound casenotfound x (found-max-spec' n p x1 x2) = casefound n p x1 x2
max-spec-ind _ _ _ _ casefound casenotfound x (not-found-max-spec' n) = casenotfound n



max-spec-inv-ind : (l28 : Level) -> (x1 : nat) -> (x2 : (X-- : nat) -> bool) -> (x3 : nat) -> (X-Hterm : max-spec x1 x2 x3) -> (P : (X-z1769 : nat) -> Set l28) -> (X-H1 : (m : nat) -> (X-x-975 : lt m x1) -> (X-x-974 : eq lzero bool (x2 m) true) -> (X-x-973 : (i : nat) -> (X-- : lt m i) -> (X--1 : lt i x1) -> eq lzero bool (x2 i) false) -> (X-z1770 : eq lzero nat x3 m) -> P m) -> (X-H2 : (X-x-976 : (i : nat) -> (X-- : lt i x1) -> eq lzero bool (x2 i) false) -> (X-z1770 : eq lzero nat x3 O) -> P O) -> P x3
max-spec-inv-ind = λ (l28 : Level) -> λ (x1 : nat) -> λ (x2 : (X-- : nat) -> bool) -> λ (x3 : nat) -> λ (Hterm : max-spec x1 x2 x3) -> λ (P : (X-z1769 : nat) -> Set l28) -> λ (H1 : (m : nat) -> (X-x-975 : lt m x1) -> (X-x-974 : eq lzero bool (x2 m) true) -> (X-x-973 : (i : nat) -> (X-- : lt m i) -> (X--1 : lt i x1) -> eq lzero bool (x2 i) false) -> (X-z1770 : eq lzero nat x3 m) -> P m) -> λ (H2 : (X-x-976 : (i : nat) -> (X-- : lt i x1) -> eq lzero bool (x2 i) false) -> (X-z1770 : eq lzero nat x3 O) -> P O) -> max-spec-ind l28 x1 x2 (λ (x-971 : nat) -> λ (X-x-972 : max-spec x1 x2 x-971) -> (X-z1770 : eq lzero nat x3 x-971) -> P x-971) H1 H2 x3 Hterm (refl lzero nat x3)

max-spec-to-max : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : max-spec n f m) -> eq lzero nat (max'' n f) m
max-spec-to-max = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (spec : max-spec n f m) -> match-max-spec n f lzero (λ (X-- : nat) -> λ (X-0 : max-spec n f X--) -> eq lzero nat (max'' n f) X--) (λ (max-v : nat) -> λ (ltmax : lt max-v n) -> λ (fmax : eq lzero bool (f max-v) true) -> λ (ismax : (i : nat) -> (X-- : lt max-v i) -> (X--1 : lt i n) -> eq lzero bool (f i) false) -> max-exists f n max-v ltmax (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f max-v) fmax) ismax) (λ (ffalse : (i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) -> max-not-exists f n ffalse) m spec

let-clause-10131 : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (n0 : nat) -> (eqm : eq lzero nat (max'' (S n0) f) m) -> (fm : eq lzero bool (f m) false) -> (i : nat) -> (j : nat) -> (ltj : lt (S j) (S n0)) -> (x7 : nat) -> eq lzero nat x7 (plus m x7)
let-clause-10131 = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (n0 : nat) -> λ (eqm : eq lzero nat (max'' (S n0) f) m) -> λ (fm : eq lzero bool (f m) false) -> λ (i : nat) -> λ (j : nat) -> λ (ltj : lt (S j) (S n0)) -> λ (x7 : nat) -> rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat x7 (plus X-- x7)) (plus-O-n x7) m (fmax-false f (S n0) m eqm fm)

max-to-max-spec : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : eq lzero nat (max'' n f) m) -> max-spec n f m
max-to-max-spec = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : eq lzero nat (max'' X-- f) m) -> max-spec X-- f m) (λ (eqm : eq lzero nat (max'' O f) m) -> eq-ind lzero lzero nat (max'' O f) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (max'' O f) x-1) -> max-spec O f x-1) (not-found-max-spec O f (λ (i : nat) -> λ (ltiO : lt i O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f i) false) (absurd lzero (le (S i) O) ltiO (not-le-Sn-O i)))) m eqm) (λ (n0 : nat) -> λ (eqm : eq lzero nat (max'' (S n0) f) m) -> match-Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false)) -> max-spec (S n0) f m) (λ (fm : eq lzero bool (f m) true) -> found-max-spec (S n0) f m (eq-coerc lzero (lt (max'' (S n0) f) (S n0)) (lt m (S n0)) (lt-max-n f (S n0) (lt-O-S n0)) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (S n0)) (lt m (S n0))) (refl (lsuc lzero) (Set (lzero)) (lt m (S n0))) (max'' (S n0) f) eqm)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) fm) (λ (i : nat) -> λ (auto : lt m i) -> λ (auto' : lt i (S n0)) -> lt-max-to-false f (S n0) i auto' (eq-coerc lzero (lt m i) (lt (max'' (S n0) f) i) auto (rewrite-l lzero (lsuc lzero) nat (max'' (S n0) f) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- i) (lt (max'' (S n0) f) i)) (refl (lsuc lzero) (Set (lzero)) (lt (max'' (S n0) f) i)) m eqm)))) (λ (fm : eq lzero bool (f m) false) -> eq-ind-r lzero lzero nat O (λ (x : nat) -> λ (X-- : eq lzero nat x O) -> max-spec (S n0) f x) (not-found-max-spec (S n0) f (λ (i : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : lt X-- (S n0)) -> eq lzero bool (f X--) false) (λ (auto : lt O (S n0)) -> rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero bool (f X--) false) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f m) fm) O (fmax-false f (S n0) m eqm fm)) (λ (j : nat) -> λ (ltj : lt (S j) (S n0)) -> lt-max-to-false f (S n0) (S j) ltj (eq-coerc lzero (lt (max'' (S n0) f) (plus (plus (max'' (S n0) f) (max'' (S n0) f)) (S j))) (lt (max'' (S n0) f) (S j)) (lt-plus-Sn-r (max'' (S n0) f) (max'' (S n0) f) j) (rewrite-r lzero (lsuc lzero) nat (plus (max'' (S n0) f) (plus (max'' (S n0) f) (S j))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt (max'' (S n0) f) X--) (lt (max'' (S n0) f) (S j))) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- (plus X-- (plus X-- (S j)))) (lt X-- (S j))) (rewrite-l lzero (lsuc lzero) nat (S j) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m (plus m X--)) (lt m (S j))) (rewrite-l lzero (lsuc lzero) nat (S j) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt m (S j))) (refl (lsuc lzero) (Set (lzero)) (lt m (S j))) (plus m (S j)) (let-clause-10131 f n m n0 eqm fm i j ltj (S j))) (plus m (S j)) (let-clause-10131 f n m n0 eqm fm i j ltj (S j))) (max'' (S n0) f) eqm) (plus (plus (max'' (S n0) f) (max'' (S n0) f)) (S j)) (associative-plus (max'' (S n0) f) (max'' (S n0) f) (S j))))) i)) m (fmax-false f (S n0) m eqm fm)) (true-or-false (f m))) n

max-f-g : (f : (X-- : nat) -> bool) -> (g : (X-- : nat) -> bool) -> (n : nat) -> (X-- : (i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) (g i)) -> eq lzero nat (max'' n f) (max'' n g)
max-f-g = λ (f : (X-- : nat) -> bool) -> λ (g : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : (i : nat) -> (X-- : lt i X-x-365) -> eq lzero bool (f i) (g i)) -> eq lzero nat (max'' X-x-365 f) (max'' X-x-365 g)) (λ (auto : (i : nat) -> (X-- : lt i O) -> eq lzero bool (f i) (g i)) -> rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat X-- (max'' O g)) (rewrite-r lzero lzero nat O (λ (X-- : nat) -> eq lzero nat O X--) (refl lzero nat O) (max'' O g) (max-O g)) (max'' O f) (max-O f)) (λ (m : nat) -> λ (Hind : (X-- : (i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) (g i)) -> eq lzero nat (max'' m f) (max'' m g)) -> λ (ext : (i : nat) -> (X-- : lt i (S m)) -> eq lzero bool (f i) (g i)) -> eq-ind-r lzero lzero bool (g m) (λ (x : bool) -> λ (X-- : eq lzero bool x (g m)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) x) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) (g m))) (eq-ind-r lzero lzero nat (max' m g O) (λ (x : nat) -> λ (X-- : eq lzero nat x (max' m g O)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) m x (g m)) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) (g m))) (refl lzero nat (match-bool lzero (λ (X-- : bool) -> nat) m (max' m g O) (g m))) (max' m f O) (Hind (λ (i : nat) -> λ (ltim : le (S i) m) -> ext i (le-S (S i) m ltim)))) (f m) (ext m (eq-ind-r lzero lzero nat (max' m g O) (λ (x : nat) -> λ (X-- : eq lzero nat x (max' m g O)) -> lt m (S m)) (eq-coerc lzero (lt m (plus (plus m O) (S O))) (lt m (S m)) (lt-plus-Sn-r m O O) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m (plus X-- (S O))) (lt m (S m))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt m (S m))) (refl (lsuc lzero) (Set (lzero)) (lt m (S m))) (plus m (S O)) (rewrite-r lzero lzero nat (plus m O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus m (S O))) (plus-n-Sm m O) m (plus-n-O m))) (plus m O) (plus-n-O m))) (max' m f O) (Hind (λ (i : nat) -> λ (ltim : le (S i) m) -> ext i (le-S (S i) m ltim)))))) n

le-max-f-max-g : (f : (X-- : nat) -> bool) -> (g : (X-- : nat) -> bool) -> (n : nat) -> (X-- : (i : nat) -> (X-- : lt i n) -> (X--1 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le (max'' n f) (max'' n g)
le-max-f-max-g = λ (f : (X-- : nat) -> bool) -> λ (g : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (X-- : (i : nat) -> (X-- : lt i X-x-365) -> (X--1 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le (max'' X-x-365 f) (max'' X-x-365 g)) (λ (auto : (i : nat) -> (X-- : lt i O) -> (X--1 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le-n (max'' O f)) (λ (m : nat) -> λ (Hind : (X-- : (i : nat) -> (X-- : lt i m) -> (X--1 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le (max'' m f) (max'' m g)) -> λ (ext : (i : nat) -> (X-- : lt i (S m)) -> (X--1 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> match-Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false)) -> le (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) (f m)) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) (g m))) (λ (Heq : eq lzero bool (f m) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) x) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) (g m))) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) true) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) x)) (le-n (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) true)) (g m) (ext m (eq-coerc lzero (lt m (plus (plus m O) (S O))) (lt m (S m)) (lt-plus-Sn-r m O O) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m (plus X-- (S O))) (lt m (S m))) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt m (S m))) (refl (lsuc lzero) (Set (lzero)) (lt m (S m))) (plus m (S O)) (rewrite-r lzero lzero nat (plus m O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus m (S O))) (plus-n-Sm m O) m (plus-n-O m))) (plus m O) (plus-n-O m))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) Heq))) (f m) Heq) (λ (Heq : eq lzero bool (f m) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> le (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) x) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) (g m))) (match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m f O) false) (match-bool lzero (λ (X-0 : bool) -> nat) m (max' m g O) X--)) (le-max-n f m) (Hind (λ (i : nat) -> λ (ltim : lt i m) -> ext i (le-S (S i) m ltim))) (g m)) (f m) Heq) (true-or-false (f m))) n

f-max-true : (f : (X-- : nat) -> bool) -> (n : nat) -> (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> eq lzero bool (f (max'' n f)) true
f-max-true = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> match-max-spec n f lzero (λ (X-- : nat) -> λ (X-0 : max-spec n f X--) -> (X--1 : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> eq lzero bool (f X--) true) (λ (m : nat) -> λ (auto : lt m n) -> λ (auto' : eq lzero bool (f m) true) -> λ (auto'' : (i : nat) -> (X-- : lt m i) -> (X--1 : lt i n) -> eq lzero bool (f i) false) -> λ (auto''' : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) auto') (λ (Hall : (i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) -> λ (X-clearme : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> match-ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true)) lzero (λ (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> eq lzero bool (f O) true) (λ (x : nat) -> λ (X-clearme0 : And lzero lzero (lt x n) (eq lzero bool (f x) true)) -> match-And lzero lzero (lt x n) (eq lzero bool (f x) true) lzero (λ (X-- : And lzero lzero (lt x n) (eq lzero bool (f x) true)) -> eq lzero bool (f O) true) (λ (ltx : lt x n) -> λ (fx : eq lzero bool (f x) true) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f O) true) (absurd lzero (eq lzero bool (f x) true) fx (eq-ind-r lzero lzero bool false (λ (x0 : bool) -> λ (X-- : eq lzero bool x0 false) -> Not lzero (eq lzero bool x0 true)) (sym-not-eq lzero bool true false not-eq-true-false) (f x) (Hall x ltx)))) X-clearme0) X-clearme) (max'' n f) (max-to-max-spec f n (max'' n f) (refl lzero nat (max'' n f)))

f-false-to-le-max : (f : (X-- : nat) -> bool) -> (n : nat) -> (p : nat) -> (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> (X--1 : (m : nat) -> (X--1 : lt p m) -> eq lzero bool (f m) false) -> le (max'' n f) p
f-false-to-le-max = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (p : nat) -> λ (H1 : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> λ (H2 : (m : nat) -> (X-- : lt p m) -> eq lzero bool (f m) false) -> not-lt-to-le p (max'' n f) (nmk lzero (lt p (max'' n f)) (λ (H3 : lt p (max'' n f)) -> absurd lzero (eq lzero bool true false) (eq-ind lzero lzero bool (f (max'' n f)) (λ (x-1 : bool) -> λ (X-x-2 : eq lzero bool (f (max'' n f)) x-1) -> eq lzero bool true x-1) (sym-eq lzero bool (f (max'' n f)) true (f-max-true f n H1)) false (H2 (max'' n f) H3)) not-eq-true-false))

exists-forall-lt : (f : (X-- : nat) -> bool) -> (n : nat) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false)
exists-forall-lt = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i X-x-365) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i X-x-365) -> eq lzero bool (f i) false)) (or-intror lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i O) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i O) -> eq lzero bool (f i) false) (λ (i : nat) -> λ (lti0 : lt i O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f i) false) (absurd lzero (lt i O) lti0 (le-to-not-lt O i (le-O-n i))))) (λ (n1 : nat) -> λ (X-clearme : Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n1) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i n1) -> eq lzero bool (f i) false)) -> match-Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n1) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i n1) -> eq lzero bool (f i) false) lzero (λ (X-- : Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n1) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i n1) -> eq lzero bool (f i) false)) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X--1 : lt i (S n1)) -> eq lzero bool (f i) false)) (λ (X-clearme0 : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n1) (eq lzero bool (f i) true))) -> match-ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n1) (eq lzero bool (f i) true)) lzero (λ (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n1) (eq lzero bool (f i) true))) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X--1 : lt i (S n1)) -> eq lzero bool (f i) false)) (λ (a : nat) -> λ (X-clearme1 : And lzero lzero (lt a n1) (eq lzero bool (f a) true)) -> match-And lzero lzero (lt a n1) (eq lzero bool (f a) true) lzero (λ (X-- : And lzero lzero (lt a n1) (eq lzero bool (f a) true)) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X--1 : lt i (S n1)) -> eq lzero bool (f i) false)) (λ (Ha1 : lt a n1) -> λ (Ha2 : eq lzero bool (f a) true) -> or-introl lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i (S n1)) -> eq lzero bool (f i) false) (ex-intro lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true)) a (conj lzero lzero (lt a (S n1)) (eq lzero bool (f a) true) (le-S (S a) n1 Ha1) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f a) Ha2)))) X-clearme1) X-clearme0) (λ (H : (i : nat) -> (X-- : lt i n1) -> eq lzero bool (f i) false) -> match-Or lzero lzero (eq lzero bool (f n1) true) (eq lzero bool (f n1) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f n1) true) (eq lzero bool (f n1) false)) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X--1 : lt i (S n1)) -> eq lzero bool (f i) false)) (λ (HfS : eq lzero bool (f n1) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X--1 : lt i (S n1)) -> eq lzero bool (f i) false)) (or-introl lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i (S n1)) -> eq lzero bool (f i) false) (ex-intro lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true)) n1 (conj lzero lzero (lt n1 (S n1)) (eq lzero bool (f n1) true) (le-n (S n1)) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f n1) HfS)))) (f n1) HfS) (λ (HfS : eq lzero bool (f n1) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X--1 : lt i (S n1)) -> eq lzero bool (f i) false)) (or-intror lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i (S n1)) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i (S n1)) -> eq lzero bool (f i) false) (λ (i : nat) -> λ (lei : lt i (S n1)) -> match-Or lzero lzero (lt (S i) (S n1)) (eq lzero nat (S i) (S n1)) lzero (λ (X-- : Or lzero lzero (lt (S i) (S n1)) (eq lzero nat (S i) (S n1))) -> eq lzero bool (f i) false) (λ (Hi : lt (S i) (S n1)) -> H i (le-S-S-to-le (S i) n1 Hi)) (λ (Hi : eq lzero nat (S i) (S n1)) -> nat-discr lzero (S i) (S n1) Hi (eq lzero bool (f i) false) (λ (e0 : eq lzero nat (R0 lzero nat i) n1) -> eq-ind-r lzero lzero nat n1 (λ (x : nat) -> λ (X-- : eq lzero nat x n1) -> (X--1 : lt x (S n1)) -> (X--2 : eq lzero nat (S x) (S n1)) -> eq lzero bool (f x) false) (λ (lei0 : lt n1 (S n1)) -> λ (Hi0 : eq lzero nat (S n1) (S n1)) -> streicherK lzero lzero nat (S n1) (λ (X-- : eq lzero nat (S n1) (S n1)) -> eq lzero bool (f n1) false) (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f n1) HfS) Hi0) i e0 lei Hi)) (le-to-or-lt-eq (S i) (S n1) lei))) (f n1) HfS) (true-or-false (f n1))) X-clearme) n

exists-max-forall-false : (f : (X-- : nat) -> bool) -> (n : nat) -> Or lzero lzero (And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' n f)) true)) (And lzero lzero ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) (eq lzero nat (max'' n f) O))
exists-max-forall-false = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> match-Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) lzero (λ (X-- : Or lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false)) -> Or lzero lzero (And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' n f)) true)) (And lzero lzero ((i : nat) -> (X--1 : lt i n) -> eq lzero bool (f i) false) (eq lzero nat (max'' n f) O))) (λ (H : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) -> or-introl lzero lzero (And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' n f)) true)) (And lzero lzero ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) (eq lzero nat (max'' n f) O)) (conj lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' n f)) true) H (f-max-true f n H))) (λ (H : (i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) -> or-intror lzero lzero (And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i n) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' n f)) true)) (And lzero lzero ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) (eq lzero nat (max'' n f) O)) (conj lzero lzero ((i : nat) -> (X-- : lt i n) -> eq lzero bool (f i) false) (eq lzero nat (max'' n f) O) H (max-not-exists f n H))) (exists-forall-lt f n)

let-clause-1009 : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (posn : lt O n) -> (Hfn : eq lzero bool (f n) false) -> (Hmax : le (max'' m f) n) -> (Hmax0 : eq lzero nat (max'' m f) n) -> (X-clearme : And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O)) -> (auto : (i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) -> (auto' : eq lzero nat (max'' m f) O) -> eq lzero nat O n
let-clause-1009 = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (posn : lt O n) -> λ (Hfn : eq lzero bool (f n) false) -> λ (Hmax : le (max'' m f) n) -> λ (Hmax0 : eq lzero nat (max'' m f) n) -> λ (X-clearme : And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O)) -> λ (auto : (i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) -> λ (auto' : eq lzero nat (max'' m f) O) -> rewrite-l lzero lzero nat (max'' m f) (λ (X-- : nat) -> eq lzero nat X-- n) Hmax0 O auto'

false-to-lt-max : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : lt O n) -> (X--1 : eq lzero bool (f n) false) -> (X--2 : le (max'' m f) n) -> lt (max'' m f) n
false-to-lt-max = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (posn : lt O n) -> λ (Hfn : eq lzero bool (f n) false) -> λ (Hmax : le (max'' m f) n) -> match-Or lzero lzero (lt (max'' m f) n) (eq lzero nat (max'' m f) n) lzero (λ (X-- : Or lzero lzero (lt (max'' m f) n) (eq lzero nat (max'' m f) n)) -> lt (max'' m f) n) (λ (Hmax0 : lt (max'' m f) n) -> Hmax0) (λ (Hmax0 : eq lzero nat (max'' m f) n) -> match-Or lzero lzero (And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i m) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' m f)) true)) (And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O)) lzero (λ (X-- : Or lzero lzero (And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i m) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' m f)) true)) (And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O))) -> lt (max'' m f) n) (λ (X-clearme : And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i m) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' m f)) true)) -> match-And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i m) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' m f)) true) lzero (λ (X-- : And lzero lzero (ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i m) (eq lzero bool (f i) true))) (eq lzero bool (f (max'' m f)) true)) -> lt (max'' m f) n) (λ (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (lt i m) (eq lzero bool (f i) true))) -> λ (Hfmax : eq lzero bool (f (max'' m f)) true) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> lt (max'' m f) n) (absurd lzero (eq lzero bool true false) (rewrite-l lzero lzero bool true (λ (X--1 : bool) -> eq lzero bool true X--1) (refl lzero bool true) false (rewrite-l lzero lzero bool (f n) (λ (X--1 : bool) -> eq lzero bool X--1 false) Hfn true (rewrite-l lzero lzero nat (max'' m f) (λ (X--1 : nat) -> eq lzero bool (f X--1) true) Hfmax n Hmax0))) not-eq-true-false)) X-clearme) (λ (X-clearme : And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O)) -> match-And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O) lzero (λ (X-- : And lzero lzero ((i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) (eq lzero nat (max'' m f) O)) -> lt (max'' m f) n) (λ (auto : (i : nat) -> (X-- : lt i m) -> eq lzero bool (f i) false) -> λ (auto' : eq lzero nat (max'' m f) O) -> eq-coerc lzero (lt O n) (lt (max'' m f) n) posn (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt X-- n) (lt (max'' m f) n)) (rewrite-r lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt n n) (lt X-- n)) (refl (lsuc lzero) (Set (lzero)) (lt n n)) (max'' m f) (rewrite-l lzero lzero nat O (λ (X-- : nat) -> eq lzero nat (max'' m f) X--) auto' n (let-clause-1009 f n m posn Hfn Hmax Hmax0 X-clearme auto auto'))) O (let-clause-1009 f n m posn Hfn Hmax Hmax0 X-clearme auto auto'))) X-clearme) (exists-max-forall-false f m)) (le-to-or-lt-eq (max'' m f) n Hmax)


min' : (X---v : nat) -> (X--1-v : nat) -> (X--2-v : (X--2-v : nat) -> bool) -> nat
min' O b f = b
min' (S p) b f = match-bool lzero (λ (X--1-v : bool) -> nat) b (min' p (S b) f) (f b)


min0 : (X-n : nat) -> (X-f : (X-- : nat) -> bool) -> nat
min0 = λ (n : nat) -> λ (f : (X-- : nat) -> bool) -> min' n O f

min-O-f : (f : (X-- : nat) -> bool) -> (b : nat) -> eq lzero nat (min' O b f) b
min-O-f = λ (f : (X-- : nat) -> bool) -> λ (b : nat) -> refl lzero nat (min' O b f)

true-min : (f : (X-- : nat) -> bool) -> (b : nat) -> (X-- : eq lzero bool (f b) true) -> (n : nat) -> eq lzero nat (min' n b f) b
true-min = λ (f : (X-- : nat) -> bool) -> λ (b : nat) -> λ (fb : eq lzero bool (f b) true) -> λ (n : nat) -> match-nat lzero (λ (X-- : nat) -> eq lzero nat (min' X-- b f) b) (rewrite-r lzero lzero nat b (λ (X-- : nat) -> eq lzero nat X-- b) (refl lzero nat b) (min' O b f) (min-O-f f b)) (λ (n0 : nat) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b (min' n0 (S b) f) x) b) (refl lzero nat b) (f b) fb) n

false-min : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : eq lzero bool (f b) false) -> eq lzero nat (min' (S n) b f) (min' n (S b) f)
false-min = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (b : nat) -> λ (fb : eq lzero bool (f b) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b (min' n (S b) f) x) (min' n (S b) f)) (refl lzero nat (min' n (S b) f)) (f b) fb

le-min-r : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> le (min' n b f) (plus n b)
le-min-r = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> le (min' X-x-365 b f) (plus X-x-365 b)) (λ (b : nat) -> eq-coerc lzero (le b (plus b O)) (le (min' O b f) (plus O b)) (le-plus-n-r O b) (rewrite-r lzero (lsuc lzero) nat b (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le b (plus b O)) (le X-- (plus O b))) (rewrite-r lzero (lsuc lzero) nat (plus b O) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le b (plus b O)) (le b X--)) (rewrite-l lzero (lsuc lzero) nat b (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le b (plus b O)) (le b X--)) (rewrite-l lzero (lsuc lzero) nat b (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le b X--) (le b b)) (refl (lsuc lzero) (Set (lzero)) (le b b)) (plus b O) (plus-n-O b)) (plus b O) (plus-n-O b)) (plus O b) (commutative-plus O b)) (min' O b f) (min-O-f f b))) (λ (m : nat) -> λ (Hind : (b : nat) -> le (min' m b f) (plus m b)) -> λ (b : nat) -> match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) X--) (S (plus m b))) (eq-coerc lzero (le (minus (plus m (plus b (S O))) (plus m (S O))) (plus m (plus b (S O)))) (le b (S (plus m b))) (minus-le (plus m (plus b (S O))) (plus m (S O))) (rewrite-r lzero (lsuc lzero) nat (minus (plus m b) m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus m (plus b (S O)))) (le b (S (plus m b)))) (rewrite-r lzero (lsuc lzero) nat (plus m (S b)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (minus (plus m b) m) (plus m (plus b (S O)))) (le b X--)) (rewrite-l lzero (lsuc lzero) nat b (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (plus m (plus b (S O)))) (le b (plus m (S b)))) (rewrite-l lzero (lsuc lzero) nat (S b) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le b (plus m X--)) (le b (plus m (S b)))) (refl (lsuc lzero) (Set (lzero)) (le b (plus m (S b)))) (plus b (S O)) (rewrite-r lzero lzero nat (plus b O) (λ (X-- : nat) -> eq lzero nat (S X--) (plus b (S O))) (plus-n-Sm b O) b (plus-n-O b))) (minus (plus m b) m) (rewrite-l lzero lzero nat (plus b m) (λ (X-- : nat) -> eq lzero nat b (minus X-- m)) (minus-plus-m-m b m) (plus m b) (commutative-plus b m))) (S (plus m b)) (plus-n-Sm m b)) (minus (plus m (plus b (S O))) (plus m (S O))) (plus-minus-plus-plus-l m b m (S O)))) (eq-coerc lzero (le (min' m (S b) f) (plus m (S b))) (le (min' m (S b) f) (S (plus m b))) (Hind (S b)) (rewrite-r lzero (lsuc lzero) nat (plus m (S b)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le (min' m (S b) f) (plus m (S b))) (le (min' m (S b) f) X--)) (refl (lsuc lzero) (Set (lzero)) (le (min' m (S b) f) (plus m (S b)))) (S (plus m b)) (plus-n-Sm m b))) (f b)) n

le-min-l : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> le b (min' n b f)
le-min-l = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> le b (min' X-x-365 b f)) (λ (b : nat) -> le-n b) (λ (m : nat) -> λ (Hind : (b : nat) -> le b (min' m b f)) -> λ (b : nat) -> match-bool lzero (λ (X-- : bool) -> le b (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) X--)) (le-n b) (lt-to-le b (min' m (S b) f) (Hind (S b))) (f b)) n

le-to-le-min : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (X-- : le n m) -> (b : nat) -> le (min' n b f) (min' m b f)
le-to-le-min = λ (f : (X-- : nat) -> bool) -> nat-elim2 lzero (λ (X-- : nat) -> λ (X-0 : nat) -> (X--1 : le X-- X-0) -> (b : nat) -> le (min' X-- b f) (min' X-0 b f)) (λ (n : nat) -> λ (auto : le O n) -> λ (b : nat) -> le-min-l f n (min' O b f)) (λ (n : nat) -> λ (leSO : le (S n) O) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> (b : nat) -> le (min' (S n) b f) (min' O b f)) (absurd lzero (le (S n) O) leSO (not-le-Sn-O n))) (λ (n : nat) -> λ (m : nat) -> λ (Hind : (X-- : le n m) -> (b : nat) -> le (min' n b f) (min' m b f)) -> λ (leSS : le (S n) (S m)) -> λ (b : nat) -> match-Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false)) -> le (min' (S n) b f) (min' (S m) b f)) (λ (fb : eq lzero bool (f b) true) -> eq-ind-r lzero lzero nat b (λ (x : nat) -> λ (X-- : eq lzero nat x b) -> le x (min' (S m) b f)) (eq-ind-r lzero lzero nat b (λ (x : nat) -> λ (X-- : eq lzero nat x b) -> le b x) (le-n b) (min' (S m) b f) (true-min f b fb (S m))) (min' (S n) b f) (true-min f b fb (S n))) (λ (fb : eq lzero bool (f b) false) -> eq-ind-r lzero lzero nat (min' n (S b) f) (λ (x : nat) -> λ (X-- : eq lzero nat x (min' n (S b) f)) -> le x (min' (S m) b f)) (eq-ind-r lzero lzero nat (min' m (S b) f) (λ (x : nat) -> λ (X-- : eq lzero nat x (min' m (S b) f)) -> le (min' n (S b) f) x) (Hind (eq-coerc lzero (le (pred (S n)) (pred (S m))) (le n m) (monotonic-pred (S n) (S m) leSS) (rewrite-l lzero (lsuc lzero) nat n (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le X-- (pred (S m))) (le n m)) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le n X--) (le n m)) (refl (lsuc lzero) (Set (lzero)) (le n m)) (pred (S m)) (pred-Sn m)) (pred (S n)) (pred-Sn n))) (S b)) (min' (S m) b f) (false-min f m b (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f b) fb))) (min' (S n) b f) (false-min f n b (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f b) fb))) (true-or-false (f b)))

true-to-le-min : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (b : nat) -> (X-- : le b m) -> (X--1 : eq lzero bool (f m) true) -> le (min' n b f) m
true-to-le-min = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (b : nat) -> (X-- : le b m) -> (X--1 : eq lzero bool (f m) true) -> le (min' X-x-365 b f) m) (λ (m : nat) -> λ (b : nat) -> λ (auto : le b m) -> λ (auto' : eq lzero bool (f m) true) -> auto) (λ (i : nat) -> λ (Hind : (m : nat) -> (b : nat) -> (X-- : le b m) -> (X--1 : eq lzero bool (f m) true) -> le (min' i b f) m) -> λ (m : nat) -> λ (b : nat) -> λ (leb-v : le b m) -> match-Or lzero lzero (lt b m) (eq lzero nat b m) lzero (λ (X-- : Or lzero lzero (lt b m) (eq lzero nat b m)) -> (X--1 : eq lzero bool (f m) true) -> le (min' (S i) b f) m) (λ (ltm : lt b m) -> λ (fm : eq lzero bool (f m) true) -> match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) X--) m) leb-v (Hind m (S b) ltm (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) fm)) (f b)) (λ (eqm : eq lzero nat b m) -> eq-ind lzero lzero nat b (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat b x-1) -> (X-- : eq lzero bool (f x-1) true) -> le (min' (S i) b f) x-1) (λ (eqb-v : eq lzero bool (f b) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) x) b) (le-n b) (f b) eqb-v) m eqm) (le-to-or-lt-eq b m leb-v)) n

lt-min-to-false : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (b : nat) -> (X-- : le b m) -> (X--1 : lt m (min' n b f)) -> eq lzero bool (f m) false
lt-min-to-false = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (m : nat) -> λ (b : nat) -> λ (lebm : le b m) -> λ (ltm : lt m (min' n b f)) -> match-Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f m) true) (eq lzero bool (f m) false)) -> eq lzero bool (f m) false) (λ (fm : eq lzero bool (f m) true) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f m) false) (absurd lzero (lt m (min' n b f)) ltm (le-to-not-lt (min' n b f) m (true-to-le-min f n m b lebm (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) fm))))) (λ (auto : eq lzero bool (f m) false) -> rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f m) auto) (true-or-false (f m))

fmin-true : (f : (X-- : nat) -> bool) -> (n : nat) -> (m : nat) -> (b : nat) -> (X-- : eq lzero nat m (min' n b f)) -> (X--1 : lt m (plus n b)) -> eq lzero bool (f m) true
fmin-true = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (m : nat) -> (b : nat) -> (X-- : eq lzero nat m (min' X-x-365 b f)) -> (X--1 : lt m (plus X-x-365 b)) -> eq lzero bool (f m) true) (λ (m : nat) -> λ (b : nat) -> λ (eqmb : eq lzero nat m b) -> eq-ind-r lzero lzero nat b (λ (x : nat) -> λ (X-- : eq lzero nat x b) -> (X--1 : le (S x) b) -> eq lzero bool (f x) true) (λ (leSb : le (S b) b) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f b) true) (absurd lzero (le (S b) b) leSb (not-le-Sn-n b))) m eqmb) (λ (n0 : nat) -> λ (Hind : (m : nat) -> (b : nat) -> (X-- : eq lzero nat m (min' n0 b f)) -> (X--1 : lt m (plus n0 b)) -> eq lzero bool (f m) true) -> λ (m : nat) -> λ (b : nat) -> match-Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false)) -> (X--1 : eq lzero nat m (min' (S n0) b f)) -> (X--2 : lt m (plus (S n0) b)) -> eq lzero bool (f m) true) (λ (caseb : eq lzero bool (f b) true) -> eq-ind-r lzero lzero nat b (λ (x : nat) -> λ (X-- : eq lzero nat x b) -> (X--1 : eq lzero nat m x) -> (X--2 : lt m (plus (S n0) b)) -> eq lzero bool (f m) true) (λ (auto : eq lzero nat m b) -> λ (auto' : lt m (plus (S n0) b)) -> rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) (rewrite-r lzero lzero nat b (λ (X-- : nat) -> eq lzero bool (f X--) true) caseb m auto)) (min' (S n0) b f) (true-min f b (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f b) caseb) (S n0))) (λ (caseb : eq lzero bool (f b) false) -> eq-ind-r lzero lzero nat (min' n0 (S b) f) (λ (x : nat) -> λ (X-- : eq lzero nat x (min' n0 (S b) f)) -> (X--1 : eq lzero nat m x) -> (X--2 : lt m (plus (S n0) b)) -> eq lzero bool (f m) true) (λ (eqm : eq lzero nat m (min' n0 (S b) f)) -> λ (ltm : lt m (plus (S n0) b)) -> Hind m (S b) (rewrite-l lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) (min' n0 (S b) f) eqm) (eq-coerc lzero (lt m (plus (S n0) b)) (lt m (plus n0 (S b))) ltm (rewrite-r lzero (lsuc lzero) nat (plus b (S n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt m (plus n0 (S b)))) (rewrite-r lzero (lsuc lzero) nat (plus n0 (S b)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m X--) (lt m (plus n0 (S b)))) (refl (lsuc lzero) (Set (lzero)) (lt m (plus n0 (S b)))) (plus b (S n0)) (rewrite-l lzero lzero nat (S (plus b n0)) (λ (X-- : nat) -> eq lzero nat X-- (plus n0 (S b))) (rewrite-l lzero lzero nat (plus n0 b) (λ (X-- : nat) -> eq lzero nat (S X--) (plus n0 (S b))) (plus-n-Sm n0 b) (plus b n0) (commutative-plus n0 b)) (plus b (S n0)) (plus-n-Sm b n0))) (plus (S n0) b) (commutative-plus (S n0) b)))) (min' (S n0) b f) (false-min f n0 b (rewrite-r lzero lzero bool false (λ (X-- : bool) -> eq lzero bool X-- false) (refl lzero bool false) (f b) caseb))) (true-or-false (f b))) n

min-exists : (f : (X-- : nat) -> bool) -> (t : nat) -> (m : nat) -> (X-- : lt m t) -> (X--1 : eq lzero bool (f m) true) -> (k : nat) -> (b : nat) -> (X--2 : le b m) -> (X--3 : (i : nat) -> (X--3 : le b i) -> (X--4 : lt i m) -> eq lzero bool (f i) false) -> (X--4 : eq lzero nat t (plus k b)) -> eq lzero nat (min' k b f) m
min-exists = λ (f : (X-- : nat) -> bool) -> λ (t : nat) -> λ (m : nat) -> λ (ltmt : lt m t) -> λ (fm : eq lzero bool (f m) true) -> λ (k : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> (X-- : le b m) -> (X--1 : (i : nat) -> (X--1 : le b i) -> (X--2 : lt i m) -> eq lzero bool (f i) false) -> (X--2 : eq lzero nat t (plus X-x-365 b)) -> eq lzero nat (min' X-x-365 b f) m) (λ (b : nat) -> λ (lebm : le b m) -> λ (ismin : (i : nat) -> (X-- : le b i) -> (X--1 : lt i m) -> eq lzero bool (f i) false) -> λ (eqtb : eq lzero nat t (plus O b)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero nat (min' O b f) m) (absurd lzero (le b m) lebm (eq-ind lzero lzero nat t (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat t x-1) -> Not lzero (le b m)) (lt-to-not-le m b (eq-coerc lzero (lt m t) (lt m b) ltmt (rewrite-l lzero (lsuc lzero) nat t (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt m t) (lt m X--)) (refl (lsuc lzero) (Set (lzero)) (lt m t)) b (rewrite-r lzero lzero nat (plus b O) (λ (X-- : nat) -> eq lzero nat t X--) (rewrite-l lzero lzero nat (plus O b) (λ (X-- : nat) -> eq lzero nat t X--) eqtb (plus b O) (commutative-plus O b)) b (plus-n-O b))))) (plus O b) eqtb))) (λ (d : nat) -> λ (Hind : (b : nat) -> (X-- : le b m) -> (X--1 : (i : nat) -> (X--1 : le b i) -> (X--2 : lt i m) -> eq lzero bool (f i) false) -> (X--2 : eq lzero nat t (plus d b)) -> eq lzero nat (min' d b f) m) -> λ (b : nat) -> λ (lebm : le b m) -> λ (ismin : (i : nat) -> (X-- : le b i) -> (X--1 : lt i m) -> eq lzero bool (f i) false) -> λ (eqt : eq lzero nat t (plus (S d) b)) -> match-Or lzero lzero (lt b m) (eq lzero nat b m) lzero (λ (X-- : Or lzero lzero (lt b m) (eq lzero nat b m)) -> eq lzero nat (min' (S d) b f) m) (λ (ltbm : lt b m) -> eq-ind-r lzero lzero nat (min' d (S b) f) (λ (x : nat) -> λ (X-- : eq lzero nat x (min' d (S b) f)) -> eq lzero nat x m) (Hind (S b) ltbm (λ (i : nat) -> λ (H : le (S b) i) -> λ (H1 : lt i m) -> ismin i (lt-to-le b i H) H1) (eq-ind-r lzero lzero nat (plus (S d) b) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S d) b)) -> eq lzero nat x (plus d (S b))) (rewrite-r lzero lzero nat (plus d (S b)) (λ (X-- : nat) -> eq lzero nat X-- (plus d (S b))) (refl lzero nat (plus d (S b))) (S (plus d b)) (plus-n-Sm d b)) t eqt)) (min' (S d) b f) (false-min f d b (ismin b (le-n b) ltbm))) (λ (eqbm : eq lzero nat b m) -> eq-ind-r lzero lzero nat b (λ (x : nat) -> λ (X-- : eq lzero nat x b) -> eq lzero nat x m) (rewrite-r lzero lzero nat m (λ (X-- : nat) -> eq lzero nat X-- m) (refl lzero nat m) b eqbm) (min' (S d) b f) (true-min f b (rewrite-r lzero lzero nat m (λ (X-- : nat) -> eq lzero bool (f X--) true) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) fm) b eqbm) (S d))) (le-to-or-lt-eq b m lebm)) k

min-not-exists : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus n b)) -> eq lzero bool (f i) false) -> eq lzero nat (min' n b f) (plus n b)
min-not-exists = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus X-x-365 b)) -> eq lzero bool (f i) false) -> eq lzero nat (min' X-x-365 b f) (plus X-x-365 b)) (λ (b : nat) -> λ (auto : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus O b)) -> eq lzero bool (f i) false) -> rewrite-r lzero lzero nat b (λ (X-- : nat) -> eq lzero nat X-- (plus O b)) (rewrite-r lzero lzero nat (plus b O) (λ (X-- : nat) -> eq lzero nat b X--) (rewrite-l lzero lzero nat b (λ (X-- : nat) -> eq lzero nat b X--) (refl lzero nat b) (plus b O) (plus-n-O b)) (plus O b) (commutative-plus O b)) (min' O b f) (min-O-f f b)) (λ (p : nat) -> λ (Hind : (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus p b)) -> eq lzero bool (f i) false) -> eq lzero nat (min' p b f) (plus p b)) -> λ (b : nat) -> λ (ffalse : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus (S p) b)) -> eq lzero bool (f i) false) -> eq-ind-r lzero lzero nat (min' p (S b) f) (λ (x : nat) -> λ (X-- : eq lzero nat x (min' p (S b) f)) -> eq lzero nat x (plus (S p) b)) (eq-ind-r lzero lzero nat (plus p (S b)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus p (S b))) -> eq lzero nat x (plus (S p) b)) (rewrite-r lzero lzero nat (plus b (S p)) (λ (X-- : nat) -> eq lzero nat (plus p (S b)) X--) (rewrite-r lzero lzero nat (plus b (S p)) (λ (X-- : nat) -> eq lzero nat X-- (plus b (S p))) (refl lzero nat (plus b (S p))) (plus p (S b)) (rewrite-l lzero lzero nat (S (plus p b)) (λ (X-- : nat) -> eq lzero nat X-- (plus b (S p))) (rewrite-l lzero lzero nat (plus b p) (λ (X-- : nat) -> eq lzero nat (S X--) (plus b (S p))) (plus-n-Sm b p) (plus p b) (commutative-plus b p)) (plus p (S b)) (plus-n-Sm p b))) (plus (S p) b) (commutative-plus (S p) b)) (min' p (S b) f) (Hind (S b) (λ (i : nat) -> λ (H : le (S b) i) -> λ (H1 : lt i (plus p (S b))) -> ffalse i (lt-to-le b i H) (eq-coerc lzero (lt i (plus p (S b))) (lt i (plus (S p) b)) H1 (rewrite-r lzero (lsuc lzero) nat (plus b (S p)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus p (S b))) (lt i X--)) (rewrite-r lzero (lsuc lzero) nat (plus b (S p)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (plus b (S p)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus b (S p)))) (plus p (S b)) (rewrite-l lzero lzero nat (S (plus p b)) (λ (X-- : nat) -> eq lzero nat X-- (plus b (S p))) (rewrite-l lzero lzero nat (plus b p) (λ (X-- : nat) -> eq lzero nat (S X--) (plus b (S p))) (plus-n-Sm b p) (plus p b) (commutative-plus b p)) (plus p (S b)) (plus-n-Sm p b))) (plus (S p) b) (commutative-plus (S p) b)))))) (min' (S p) b f) (false-min f p b (ffalse b (le-n b) (eq-coerc lzero (lt b (plus (plus b O) (S p))) (lt b (plus (S p) b)) (lt-plus-Sn-r b O p) (rewrite-r lzero (lsuc lzero) nat (plus b (plus O (S p))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b X--) (lt b (plus (S p) b))) (rewrite-r lzero (lsuc lzero) nat (plus b (S p)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b (plus b (plus O (S p)))) (lt b X--)) (rewrite-l lzero (lsuc lzero) nat (S p) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b (plus b X--)) (lt b (plus b (S p)))) (refl (lsuc lzero) (Set (lzero)) (lt b (plus b (S p)))) (plus O (S p)) (plus-O-n (S p))) (plus (S p) b) (commutative-plus (S p) b)) (plus (plus b O) (S p)) (associative-plus b O (S p))))))) n

let-m : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> nat
let-m = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (b : nat) -> min' n b f

let-m1 : (f : (X-- : nat) -> bool) -> (n : nat) -> (X-x-365 : nat) -> (b : nat) -> nat
let-m1 = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (X-x-365 : nat) -> λ (b : nat) -> min' X-x-365 b f

let-m2 : (f : (X-- : nat) -> bool) -> (n : nat) -> (i : nat) -> (b : nat) -> nat
let-m2 = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (i : nat) -> λ (b : nat) -> min' i b f

let-clause-1012 : (f : (X-- : nat) -> bool) -> (n : nat) -> (i : nat) -> (Hind : (b : nat) -> (X-- : eq lzero bool (f (let-m2 f n i b)) false) -> eq lzero nat (let-m2 f n i b) (plus i b)) -> (b : nat) -> (fb : eq lzero bool (f b) true) -> (eqm : eq lzero bool (f b) false) -> eq lzero bool false true
let-clause-1012 = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (i : nat) -> λ (Hind : (b : nat) -> (X-- : eq lzero bool (f (let-m2 f n i b)) false) -> eq lzero nat (let-m2 f n i b) (plus i b)) -> λ (b : nat) -> λ (fb : eq lzero bool (f b) true) -> λ (eqm : eq lzero bool (f b) false) -> rewrite-l lzero lzero bool (f b) (λ (X-- : bool) -> eq lzero bool X-- true) fb false eqm

fmin-false : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : eq lzero bool (f (let-m f n b)) false) -> eq lzero nat (let-m f n b) (plus n b)
fmin-false = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> (X-- : eq lzero bool (f (let-m1 f n X-x-365 b)) false) -> eq lzero nat (let-m1 f n X-x-365 b) (plus X-x-365 b)) (λ (b : nat) -> eq-f lzero lzero bool nat (λ (X-- : bool) -> min' O b f) (f (min' O b f)) false) (λ (i : nat) -> λ (Hind : (b : nat) -> (X-- : eq lzero bool (f (let-m2 f n i b)) false) -> eq lzero nat (let-m2 f n i b) (plus i b)) -> λ (b : nat) -> match-Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false)) -> (X--1 : eq lzero bool (f (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) (f b))) false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) (f b)) (S (plus i b))) (λ (fb : eq lzero bool (f b) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> (X--1 : eq lzero bool (f (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) x)) false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) x) (S (plus i b))) (λ (eqm : eq lzero bool (f b) false) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero nat b (S (plus i b))) (absurd lzero (eq lzero bool (f b) true) fb (eq-coerc lzero (Not lzero (eq lzero bool true false)) (Not lzero (eq lzero bool (f b) true)) not-eq-true-false (rewrite-r lzero (lsuc lzero) bool true (λ (X-- : bool) -> eq (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true X--)) (Not lzero (eq lzero bool (f b) true))) (rewrite-r lzero (lsuc lzero) bool true (λ (X-- : bool) -> eq (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true true)) (Not lzero (eq lzero bool X-- true))) (refl (lsuc lzero) (Set (lzero)) (Not lzero (eq lzero bool true true))) (f b) (rewrite-l lzero lzero bool false (λ (X-- : bool) -> eq lzero bool (f b) X--) eqm true (let-clause-1012 f n i Hind b fb eqm))) false (let-clause-1012 f n i Hind b fb eqm))))) (f b) fb) (λ (fb : eq lzero bool (f b) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> (X--1 : eq lzero bool (f (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) x)) false) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b (min' i (S b) f) x) (S (plus i b))) (eq-ind-r lzero lzero nat (plus i (S b)) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus i (S b))) -> (X--1 : eq lzero bool (f (min' i (S b) f)) false) -> eq lzero nat (min' i (S b) f) x) (Hind (S b)) (S (plus i b)) (plus-n-Sm i b)) (f b) fb) (true-or-false (f b))) n


data min-spec (n-v : nat) (b-v : nat)  (f-v : (X---v : nat) -> bool) : nat -> Set (lzero) where
  found-min-spec' : (m-v : nat) -> (X---v : le b-v m-v) -> (X--1-v : lt m-v (plus n-v b-v)) -> (X--2-v : matita-basics-logic.eq lzero bool (f-v m-v) true) -> (X--3-v : (i-v : nat) -> (X--3-v : le b-v i-v) -> (X--4-v : lt i-v m-v) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> min-spec n-v b-v f-v m-v
  not-found-min-spec' : (X---v : (i-v : nat) -> (X---v : le b-v i-v) -> (X--1-v : lt i-v (plus n-v b-v)) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> min-spec n-v b-v f-v (plus n-v b-v)

found-min-spec : (n-v : nat) -> (b-v : nat) -> (f-v : (X---v : nat) -> bool) -> (m-v : nat) -> (X---v : le b-v m-v) -> (X--1-v : lt m-v (plus n-v b-v)) -> (X--2-v : matita-basics-logic.eq lzero bool (f-v m-v) true) -> (X--3-v : (i-v : nat) -> (X--3-v : le b-v i-v) -> (X--4-v : lt i-v m-v) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> min-spec n-v b-v f-v m-v
found-min-spec _ _ _ = found-min-spec'

not-found-min-spec : (n-v : nat) -> (b-v : nat) -> (f-v : (X---v : nat) -> bool) -> (X---v : (i-v : nat) -> (X---v : le b-v i-v) -> (X--1-v : lt i-v (plus n-v b-v)) -> matita-basics-logic.eq lzero bool (f-v i-v) false) -> min-spec n-v b-v f-v (plus n-v b-v)
not-found-min-spec _ _ _ = not-found-min-spec'

match-min-spec : (X-n-v : nat) -> (X-b-v : nat) -> (X-f-v : (X---v : nat) -> bool) -> (return-sort-v : Level) -> (return-type-v : (X---v : nat) -> (z-v : min-spec X-n-v X-b-v X-f-v X---v) -> Set return-sort-v) -> (case-found-min-spec-v : (m-v : nat) -> (X---v : le X-b-v m-v) -> (X--1-v : lt m-v (plus X-n-v X-b-v)) -> (X--2-v : matita-basics-logic.eq lzero bool (X-f-v m-v) true) -> (X--3-v : (i-v : nat) -> (X--3-v : le X-b-v i-v) -> (X--4-v : lt i-v m-v) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> return-type-v m-v (found-min-spec X-n-v X-b-v X-f-v m-v X---v X--1-v X--2-v X--3-v)) -> (case-not-found-min-spec-v : (X---v : (i-v : nat) -> (X---v : le X-b-v i-v) -> (X--1-v : lt i-v (plus X-n-v X-b-v)) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> return-type-v (plus X-n-v X-b-v) (not-found-min-spec X-n-v X-b-v X-f-v X---v)) -> (X---v : nat) -> (z-v : min-spec X-n-v X-b-v X-f-v X---v) -> return-type-v X---v z-v
match-min-spec _ _ _ _ _ casefound casenotfound _ (found-min-spec' x1 x2 x3 x4 x5) = casefound x1 x2 x3 x4 x5
match-min-spec _ _ _ _ _ casefound casenotfound _ (not-found-min-spec' x1) = casenotfound x1


min-spec-ind : (l9-v : Level) -> (X-n-v : nat) -> (X-b-v : nat) -> (X-f-v : (X---v : nat) -> bool) -> (Q--v : (x-1075-v : nat) -> (X-x-1076-v : min-spec X-n-v X-b-v X-f-v x-1075-v) -> Set l9-v) -> (X-H-found-min-spec-v : (m-v : nat) -> (x-1080-v : le X-b-v m-v) -> (x-1079-v : lt m-v (plus X-n-v X-b-v)) -> (x-1078-v : matita-basics-logic.eq lzero bool (X-f-v m-v) true) -> (x-1077-v : (i-v : nat) -> (X---v : le X-b-v i-v) -> (X--1-v : lt i-v m-v) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> Q--v m-v (found-min-spec X-n-v X-b-v X-f-v m-v x-1080-v x-1079-v x-1078-v x-1077-v)) -> (X-H-not-found-min-spec-v : (x-1081-v : (i-v : nat) -> (X---v : le X-b-v i-v) -> (X--1-v : lt i-v (plus X-n-v X-b-v)) -> matita-basics-logic.eq lzero bool (X-f-v i-v) false) -> Q--v (plus X-n-v X-b-v) (not-found-min-spec X-n-v X-b-v X-f-v x-1081-v)) -> (x-1075-v : nat) -> (x-1076-v : min-spec X-n-v X-b-v X-f-v x-1075-v) -> Q--v x-1075-v x-1076-v
min-spec-ind _ _ _ _ _ casefound casenotfound _ (found-min-spec' x1 x2 x3 x4 x5) = casefound x1 x2 x3 x4 x5
min-spec-ind _ _ _ _ _ casefound casenotfound _ (not-found-min-spec' x1) = casenotfound x1


min-spec-inv-ind : (l30 : Level) -> (x1 : nat) -> (x2 : nat) -> (x3 : (X-- : nat) -> bool) -> (x4 : nat) -> (X-Hterm : min-spec x1 x2 x3 x4) -> (P : (X-z1890 : nat) -> Set l30) -> (X-H1 : (m : nat) -> (X-x-1080 : le x2 m) -> (X-x-1079 : lt m (plus x1 x2)) -> (X-x-1078 : eq lzero bool (x3 m) true) -> (X-x-1077 : (i : nat) -> (X-- : le x2 i) -> (X--1 : lt i m) -> eq lzero bool (x3 i) false) -> (X-z1891 : eq lzero nat x4 m) -> P m) -> (X-H2 : (X-x-1081 : (i : nat) -> (X-- : le x2 i) -> (X--1 : lt i (plus x1 x2)) -> eq lzero bool (x3 i) false) -> (X-z1891 : eq lzero nat x4 (plus x1 x2)) -> P (plus x1 x2)) -> P x4
min-spec-inv-ind = λ (l30 : Level) -> λ (x1 : nat) -> λ (x2 : nat) -> λ (x3 : (X-- : nat) -> bool) -> λ (x4 : nat) -> λ (Hterm : min-spec x1 x2 x3 x4) -> λ (P : (X-z1890 : nat) -> Set l30) -> λ (H1 : (m : nat) -> (X-x-1080 : le x2 m) -> (X-x-1079 : lt m (plus x1 x2)) -> (X-x-1078 : eq lzero bool (x3 m) true) -> (X-x-1077 : (i : nat) -> (X-- : le x2 i) -> (X--1 : lt i m) -> eq lzero bool (x3 i) false) -> (X-z1891 : eq lzero nat x4 m) -> P m) -> λ (H2 : (X-x-1081 : (i : nat) -> (X-- : le x2 i) -> (X--1 : lt i (plus x1 x2)) -> eq lzero bool (x3 i) false) -> (X-z1891 : eq lzero nat x4 (plus x1 x2)) -> P (plus x1 x2)) -> min-spec-ind l30 x1 x2 x3 (λ (x-1075 : nat) -> λ (X-x-1076 : min-spec x1 x2 x3 x-1075) -> (X-z1891 : eq lzero nat x4 x-1075) -> P x-1075) H1 H2 x4 Hterm (refl lzero nat x4)

min-spec-to-min : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (m : nat) -> (X-- : min-spec n b f m) -> eq lzero nat (min' n b f) m
min-spec-to-min = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (b : nat) -> λ (m : nat) -> λ (spec : min-spec n b f m) -> match-min-spec n b f lzero (λ (X-- : nat) -> λ (X-0 : min-spec n b f X--) -> eq lzero nat (min' n b f) X--) (λ (m0 : nat) -> λ (lem : le b m0) -> λ (ltm : lt m0 (plus n b)) -> λ (fm : eq lzero bool (f m0) true) -> λ (ismin : (i : nat) -> (X-- : le b i) -> (X--1 : lt i m0) -> eq lzero bool (f i) false) -> min-exists f (plus n b) m0 ltm (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m0) fm) n b lem ismin (refl lzero nat (plus n b))) (λ (ffalse : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus n b)) -> eq lzero bool (f i) false) -> min-not-exists f n b ffalse) m spec

min-to-min-spec : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (m : nat) -> (X-- : eq lzero nat (min' n b f) m) -> min-spec n b f m
min-to-min-spec = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (b : nat) -> λ (m : nat) -> match-nat lzero (λ (X-- : nat) -> (X--1 : eq lzero nat (min' X-- b f) m) -> min-spec X-- b f m) (λ (eqm : eq lzero nat (min' O b f) m) -> eq-ind lzero lzero nat (min' O b f) (λ (x-1 : nat) -> λ (X-x-2 : eq lzero nat (min' O b f) x-1) -> min-spec O b f x-1) (not-found-min-spec O b f (λ (i : nat) -> λ (lei : le b i) -> λ (lti : lt i (plus O b)) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f i) false) (absurd lzero (lt i (plus O b)) lti (le-to-not-lt (plus O b) i lei)))) m eqm) (λ (n0 : nat) -> λ (eqm : eq lzero nat (min' (S n0) b f) m) -> eq-ind-r lzero lzero nat m (λ (x : nat) -> λ (X-- : eq lzero nat x m) -> (X--1 : le x (plus (S n0) b)) -> min-spec (S n0) b f m) (λ (lem : le m (plus (S n0) b)) -> match-Or lzero lzero (lt m (plus (S n0) b)) (eq lzero nat m (plus (S n0) b)) lzero (λ (X-- : Or lzero lzero (lt m (plus (S n0) b)) (eq lzero nat m (plus (S n0) b))) -> min-spec (S n0) b f m) (λ (mcase : lt m (plus (S n0) b)) -> found-min-spec (S n0) b f m (eq-coerc lzero (le b (min' (S n0) b f)) (le b m) (le-min-l f (S n0) b) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (le b X--) (le b m)) (refl (lsuc lzero) (Set (lzero)) (le b m)) (min' (S n0) b f) eqm)) mcase (fmin-true f (S n0) m b (rewrite-r lzero lzero nat m (λ (X-- : nat) -> eq lzero nat m X--) (refl lzero nat m) (min' (S n0) b f) eqm) mcase) (λ (i : nat) -> λ (H : le b i) -> λ (H1 : lt i m) -> lt-min-to-false f (S n0) i b H (eq-coerc lzero (lt i m) (lt i (min' (S n0) b f)) H1 (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i m) (lt i X--)) (refl (lsuc lzero) (Set (lzero)) (lt i m)) (min' (S n0) b f) eqm)))) (λ (mcase : eq lzero nat m (plus (S n0) b)) -> eq-ind-r lzero lzero nat (plus (S n0) b) (λ (x : nat) -> λ (X-- : eq lzero nat x (plus (S n0) b)) -> min-spec (S n0) b f x) (not-found-min-spec (S n0) b f (λ (i : nat) -> λ (lebi : le b i) -> λ (lti : lt i (plus (S n0) b)) -> lt-min-to-false f (S n0) i b lebi (eq-coerc lzero (lt i (plus (S n0) b)) (lt i (min' (S n0) b f)) lti (rewrite-r lzero (lsuc lzero) nat (plus b (S n0)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (min' (S n0) b f))) (rewrite-l lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (min' (S n0) b f))) (rewrite-r lzero (lsuc lzero) nat m (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i m) (lt i X--)) (refl (lsuc lzero) (Set (lzero)) (lt i m)) (min' (S n0) b f) eqm) (plus b (S n0)) (rewrite-l lzero lzero nat (plus (S n0) b) (λ (X-- : nat) -> eq lzero nat m X--) mcase (plus b (S n0)) (commutative-plus (S n0) b))) (plus (S n0) b) (commutative-plus (S n0) b))))) m mcase) (le-to-or-lt-eq m (plus (S n0) b) lem)) (min' (S n0) b f) eqm (le-min-r f (S n0) b)) n

min-f-g : (f : (X-- : nat) -> bool) -> (g : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus n b)) -> eq lzero bool (f i) (g i)) -> eq lzero nat (min' n b f) (min' n b g)
min-f-g = λ (f : (X-- : nat) -> bool) -> λ (g : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus X-x-365 b)) -> eq lzero bool (f i) (g i)) -> eq lzero nat (min' X-x-365 b f) (min' X-x-365 b g)) (λ (b : nat) -> λ (auto : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus O b)) -> eq lzero bool (f i) (g i)) -> rewrite-r lzero lzero nat b (λ (X-- : nat) -> eq lzero nat X-- (min' O b g)) (rewrite-r lzero lzero nat b (λ (X-- : nat) -> eq lzero nat b X--) (refl lzero nat b) (min' O b g) (min-O-f g b)) (min' O b f) (min-O-f f b)) (λ (m : nat) -> λ (Hind : (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus m b)) -> eq lzero bool (f i) (g i)) -> eq lzero nat (min' m b f) (min' m b g)) -> λ (b : nat) -> λ (ext : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus (S m) b)) -> eq lzero bool (f i) (g i)) -> eq-ind-r lzero lzero bool (g b) (λ (x : bool) -> λ (X-- : eq lzero bool x (g b)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) x) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) (g b))) (eq-ind-r lzero lzero nat (min' m (S b) g) (λ (x : nat) -> λ (X-- : eq lzero nat x (min' m (S b) g)) -> eq lzero nat (match-bool lzero (λ (X-0 : bool) -> nat) b x (g b)) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) (g b))) (refl lzero nat (match-bool lzero (λ (X-- : bool) -> nat) b (min' m (S b) g) (g b))) (min' m (S b) f) (Hind (S b) (λ (i : nat) -> λ (ltib : le (S b) i) -> λ (ltim : lt i (plus m (S b))) -> ext i (lt-to-le b i ltib) (eq-coerc lzero (lt i (plus m (S b))) (lt i (plus (S m) b)) ltim (rewrite-r lzero (lsuc lzero) nat (plus b (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus m (S b))) (lt i X--)) (rewrite-r lzero (lsuc lzero) nat (plus b (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (plus b (S m)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus b (S m)))) (plus m (S b)) (rewrite-l lzero lzero nat (S (plus m b)) (λ (X-- : nat) -> eq lzero nat X-- (plus b (S m))) (rewrite-l lzero lzero nat (plus b m) (λ (X-- : nat) -> eq lzero nat (S X--) (plus b (S m))) (plus-n-Sm b m) (plus m b) (commutative-plus b m)) (plus m (S b)) (plus-n-Sm m b))) (plus (S m) b) (commutative-plus (S m) b)))))) (f b) (ext b (le-n b) (eq-coerc lzero (lt b (plus (plus b O) (S m))) (lt b (plus (S m) b)) (lt-plus-Sn-r b O m) (rewrite-r lzero (lsuc lzero) nat (plus b (plus O (S m))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b X--) (lt b (plus (S m) b))) (rewrite-r lzero (lsuc lzero) nat (plus b (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b (plus b (plus O (S m)))) (lt b X--)) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b (plus b X--)) (lt b (plus b (S m)))) (refl (lsuc lzero) (Set (lzero)) (lt b (plus b (S m)))) (plus O (S m)) (plus-O-n (S m))) (plus (S m) b) (commutative-plus (S m) b)) (plus (plus b O) (S m)) (associative-plus b O (S m)))))) n

le-min-f-min-g : (f : (X-- : nat) -> bool) -> (g : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus n b)) -> (X--2 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le (min' n b g) (min' n b f)
le-min-f-min-g = λ (f : (X-- : nat) -> bool) -> λ (g : (X-- : nat) -> bool) -> λ (n : nat) -> nat-ind lzero (λ (X-x-365 : nat) -> (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus X-x-365 b)) -> (X--2 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le (min' X-x-365 b g) (min' X-x-365 b f)) (λ (b : nat) -> λ (auto : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus O b)) -> (X--2 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le-n (min' O b g)) (λ (m : nat) -> λ (Hind : (b : nat) -> (X-- : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus m b)) -> (X--2 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> le (min' m b g) (min' m b f)) -> λ (b : nat) -> λ (ext : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus (S m) b)) -> (X--2 : eq lzero bool (f i) true) -> eq lzero bool (g i) true) -> match-Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false) lzero (λ (X-- : Or lzero lzero (eq lzero bool (f b) true) (eq lzero bool (f b) false)) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) (g b)) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) (f b))) (λ (Heq : eq lzero bool (f b) true) -> eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) (g b)) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) x)) (eq-ind-r lzero lzero bool true (λ (x : bool) -> λ (X-- : eq lzero bool x true) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) x) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) true)) (le-n (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) true)) (g b) (ext b (le-n b) (eq-coerc lzero (lt b (plus (plus b O) (S m))) (lt b (plus (S m) b)) (lt-plus-Sn-r b O m) (rewrite-r lzero (lsuc lzero) nat (plus b (plus O (S m))) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b X--) (lt b (plus (S m) b))) (rewrite-r lzero (lsuc lzero) nat (plus b (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b (plus b (plus O (S m)))) (lt b X--)) (rewrite-l lzero (lsuc lzero) nat (S m) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt b (plus b X--)) (lt b (plus b (S m)))) (refl (lsuc lzero) (Set (lzero)) (lt b (plus b (S m)))) (plus O (S m)) (plus-O-n (S m))) (plus (S m) b) (commutative-plus (S m) b)) (plus (plus b O) (S m)) (associative-plus b O (S m)))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f b) Heq))) (f b) Heq) (λ (Heq : eq lzero bool (f b) false) -> eq-ind-r lzero lzero bool false (λ (x : bool) -> λ (X-- : eq lzero bool x false) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) (g b)) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) x)) (match-bool lzero (λ (X-- : bool) -> le (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) g) X--) (match-bool lzero (λ (X-0 : bool) -> nat) b (min' m (S b) f) false)) (lt-to-le b (min' m (S b) f) (le-min-l f m (S b))) (Hind (S b) (λ (i : nat) -> λ (ltb : le (S b) i) -> λ (ltim : lt i (plus m (S b))) -> λ (fi : eq lzero bool (f i) true) -> ext i (lt-to-le b i ltb) (eq-coerc lzero (lt i (plus m (S b))) (lt i (plus (S m) b)) ltim (rewrite-r lzero (lsuc lzero) nat (plus b (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i (plus m (S b))) (lt i X--)) (rewrite-r lzero (lsuc lzero) nat (plus b (S m)) (λ (X-- : nat) -> eq (lsuc lzero) (Set (lzero)) (lt i X--) (lt i (plus b (S m)))) (refl (lsuc lzero) (Set (lzero)) (lt i (plus b (S m)))) (plus m (S b)) (rewrite-l lzero lzero nat (S (plus m b)) (λ (X-- : nat) -> eq lzero nat X-- (plus b (S m))) (rewrite-l lzero lzero nat (plus b m) (λ (X-- : nat) -> eq lzero nat (S X--) (plus b (S m))) (plus-n-Sm b m) (plus m b) (commutative-plus b m)) (plus m (S b)) (plus-n-Sm m b))) (plus (S m) b) (commutative-plus (S m) b))) (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f i) fi))) (g b)) (f b) Heq) (true-or-false (f b))) n

f-min-true : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> eq lzero bool (f (min' n b f)) true
f-min-true = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (b : nat) -> match-min-spec n b f lzero (λ (X-- : nat) -> λ (X-0 : min-spec n b f X--) -> (X--1 : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> eq lzero bool (f X--) true) (λ (m : nat) -> λ (auto : le b m) -> λ (auto' : lt m (plus n b)) -> λ (auto'' : eq lzero bool (f m) true) -> λ (auto''' : (i : nat) -> (X-- : le b i) -> (X--1 : lt i m) -> eq lzero bool (f i) false) -> λ (auto'''' : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f m) auto'') (λ (Hall : (i : nat) -> (X-- : le b i) -> (X--1 : lt i (plus n b)) -> eq lzero bool (f i) false) -> λ (X-clearme : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> match-ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true)) lzero (λ (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> eq lzero bool (f (plus n b)) true) (λ (x : nat) -> λ (X-clearme0 : And lzero lzero (And lzero lzero (le b x) (lt x (plus n b))) (eq lzero bool (f x) true)) -> match-And lzero lzero (And lzero lzero (le b x) (lt x (plus n b))) (eq lzero bool (f x) true) lzero (λ (X-- : And lzero lzero (And lzero lzero (le b x) (lt x (plus n b))) (eq lzero bool (f x) true)) -> eq lzero bool (f (plus n b)) true) (λ (X-clearme1 : And lzero lzero (le b x) (lt x (plus n b))) -> match-And lzero lzero (le b x) (lt x (plus n b)) lzero (λ (X-- : And lzero lzero (le b x) (lt x (plus n b))) -> (X--1 : eq lzero bool (f x) true) -> eq lzero bool (f (plus n b)) true) (λ (leb-v : le b x) -> λ (ltx : lt x (plus n b)) -> λ (fx : eq lzero bool (f x) true) -> False-ind lzero lzero (λ (X-x-66 : False lzero) -> eq lzero bool (f (plus n b)) true) (absurd lzero (eq lzero bool (f x) true) fx (eq-ind-r lzero lzero bool false (λ (x0 : bool) -> λ (X-- : eq lzero bool x0 false) -> Not lzero (eq lzero bool x0 true)) (sym-not-eq lzero bool true false not-eq-true-false) (f x) (Hall x leb-v ltx)))) X-clearme1) X-clearme0) X-clearme) (min' n b f) (min-to-min-spec f n b (min' n b f) (refl lzero nat (min' n b f)))

lt-min : (f : (X-- : nat) -> bool) -> (n : nat) -> (b : nat) -> (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> lt (min' n b f) (plus n b)
lt-min = λ (f : (X-- : nat) -> bool) -> λ (n : nat) -> λ (b : nat) -> λ (H : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> match-ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true)) lzero (λ (X-- : ex lzero lzero nat (λ (i : nat) -> And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true))) -> lt (min' n b f) (plus n b)) (λ (i : nat) -> λ (X-clearme : And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true)) -> match-And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true) lzero (λ (X-- : And lzero lzero (And lzero lzero (le b i) (lt i (plus n b))) (eq lzero bool (f i) true)) -> lt (min' n b f) (plus n b)) (λ (X-clearme0 : And lzero lzero (le b i) (lt i (plus n b))) -> match-And lzero lzero (le b i) (lt i (plus n b)) lzero (λ (X-- : And lzero lzero (le b i) (lt i (plus n b))) -> (X--1 : eq lzero bool (f i) true) -> lt (min' n b f) (plus n b)) (λ (lebi : le b i) -> λ (ltin : lt i (plus n b)) -> λ (fi-true : eq lzero bool (f i) true) -> le-to-lt-to-lt (min' n b f) i (plus n b) (true-to-le-min f n i b lebi (rewrite-r lzero lzero bool true (λ (X-- : bool) -> eq lzero bool X-- true) (refl lzero bool true) (f i) fi-true)) ltin) X-clearme0) X-clearme) H

